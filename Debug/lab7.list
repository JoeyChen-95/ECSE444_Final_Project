
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  0800c860  0800c860  0001c860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d210  0800d210  0003597c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d210  0800d210  0001d210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d218  0800d218  0003597c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d218  0800d218  0001d218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d21c  0800d21c  0001d21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001597c  20000000  0800d220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001384  2001597c  08022b9c  0003597c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016d00  08022b9c  00036d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003597c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028bd7  00000000  00000000  000359ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d74  00000000  00000000  0005e583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee8  00000000  00000000  000632f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc8  00000000  00000000  000651e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003077e  00000000  00000000  00066ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024b45  00000000  00000000  00097626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012329c  00000000  00000000  000bc16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001df407  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085c8  00000000  00000000  001df4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  001e7a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2001597c 	.word	0x2001597c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c848 	.word	0x0800c848

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20015980 	.word	0x20015980
 80001fc:	0800c848 	.word	0x0800c848

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b974 	b.w	8000e1c <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468e      	mov	lr, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14d      	bne.n	8000bf6 <__udivmoddi4+0xaa>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4694      	mov	ip, r2
 8000b5e:	d969      	bls.n	8000c34 <__udivmoddi4+0xe8>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b152      	cbz	r2, 8000b7c <__udivmoddi4+0x30>
 8000b66:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6a:	f1c2 0120 	rsb	r1, r2, #32
 8000b6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b76:	ea41 0e03 	orr.w	lr, r1, r3
 8000b7a:	4094      	lsls	r4, r2
 8000b7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b80:	0c21      	lsrs	r1, r4, #16
 8000b82:	fbbe f6f8 	udiv	r6, lr, r8
 8000b86:	fa1f f78c 	uxth.w	r7, ip
 8000b8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b92:	fb06 f107 	mul.w	r1, r6, r7
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x64>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ba2:	f080 811f 	bcs.w	8000de4 <__udivmoddi4+0x298>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 811c 	bls.w	8000de4 <__udivmoddi4+0x298>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc0:	fb00 f707 	mul.w	r7, r0, r7
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	d90a      	bls.n	8000bde <__udivmoddi4+0x92>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd0:	f080 810a 	bcs.w	8000de8 <__udivmoddi4+0x29c>
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	f240 8107 	bls.w	8000de8 <__udivmoddi4+0x29c>
 8000bda:	4464      	add	r4, ip
 8000bdc:	3802      	subs	r0, #2
 8000bde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be2:	1be4      	subs	r4, r4, r7
 8000be4:	2600      	movs	r6, #0
 8000be6:	b11d      	cbz	r5, 8000bf0 <__udivmoddi4+0xa4>
 8000be8:	40d4      	lsrs	r4, r2
 8000bea:	2300      	movs	r3, #0
 8000bec:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d909      	bls.n	8000c0e <__udivmoddi4+0xc2>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	f000 80ef 	beq.w	8000dde <__udivmoddi4+0x292>
 8000c00:	2600      	movs	r6, #0
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	4630      	mov	r0, r6
 8000c08:	4631      	mov	r1, r6
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	fab3 f683 	clz	r6, r3
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d14a      	bne.n	8000cac <__udivmoddi4+0x160>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xd4>
 8000c1a:	4282      	cmp	r2, r0
 8000c1c:	f200 80f9 	bhi.w	8000e12 <__udivmoddi4+0x2c6>
 8000c20:	1a84      	subs	r4, r0, r2
 8000c22:	eb61 0303 	sbc.w	r3, r1, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	469e      	mov	lr, r3
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d0e0      	beq.n	8000bf0 <__udivmoddi4+0xa4>
 8000c2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c32:	e7dd      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000c34:	b902      	cbnz	r2, 8000c38 <__udivmoddi4+0xec>
 8000c36:	deff      	udf	#255	; 0xff
 8000c38:	fab2 f282 	clz	r2, r2
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	f040 8092 	bne.w	8000d66 <__udivmoddi4+0x21a>
 8000c42:	eba1 010c 	sub.w	r1, r1, ip
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f fe8c 	uxth.w	lr, ip
 8000c4e:	2601      	movs	r6, #1
 8000c50:	0c20      	lsrs	r0, r4, #16
 8000c52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c56:	fb07 1113 	mls	r1, r7, r3, r1
 8000c5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c5e:	fb0e f003 	mul.w	r0, lr, r3
 8000c62:	4288      	cmp	r0, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x12c>
 8000c66:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x12a>
 8000c70:	4288      	cmp	r0, r1
 8000c72:	f200 80cb 	bhi.w	8000e0c <__udivmoddi4+0x2c0>
 8000c76:	4643      	mov	r3, r8
 8000c78:	1a09      	subs	r1, r1, r0
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c80:	fb07 1110 	mls	r1, r7, r0, r1
 8000c84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c88:	fb0e fe00 	mul.w	lr, lr, r0
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x156>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c98:	d202      	bcs.n	8000ca0 <__udivmoddi4+0x154>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f200 80bb 	bhi.w	8000e16 <__udivmoddi4+0x2ca>
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000caa:	e79c      	b.n	8000be6 <__udivmoddi4+0x9a>
 8000cac:	f1c6 0720 	rsb	r7, r6, #32
 8000cb0:	40b3      	lsls	r3, r6
 8000cb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cba:	fa20 f407 	lsr.w	r4, r0, r7
 8000cbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc2:	431c      	orrs	r4, r3
 8000cc4:	40f9      	lsrs	r1, r7
 8000cc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cca:	fa00 f306 	lsl.w	r3, r0, r6
 8000cce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cd2:	0c20      	lsrs	r0, r4, #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cea:	d90b      	bls.n	8000d04 <__udivmoddi4+0x1b8>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cf4:	f080 8088 	bcs.w	8000e08 <__udivmoddi4+0x2bc>
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	f240 8085 	bls.w	8000e08 <__udivmoddi4+0x2bc>
 8000cfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	458e      	cmp	lr, r1
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x1e2>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d24:	d26c      	bcs.n	8000e00 <__udivmoddi4+0x2b4>
 8000d26:	458e      	cmp	lr, r1
 8000d28:	d96a      	bls.n	8000e00 <__udivmoddi4+0x2b4>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	4461      	add	r1, ip
 8000d2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d32:	fba0 9402 	umull	r9, r4, r0, r2
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	42a1      	cmp	r1, r4
 8000d3c:	46c8      	mov	r8, r9
 8000d3e:	46a6      	mov	lr, r4
 8000d40:	d356      	bcc.n	8000df0 <__udivmoddi4+0x2a4>
 8000d42:	d053      	beq.n	8000dec <__udivmoddi4+0x2a0>
 8000d44:	b15d      	cbz	r5, 8000d5e <__udivmoddi4+0x212>
 8000d46:	ebb3 0208 	subs.w	r2, r3, r8
 8000d4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d52:	fa22 f306 	lsr.w	r3, r2, r6
 8000d56:	40f1      	lsrs	r1, r6
 8000d58:	431f      	orrs	r7, r3
 8000d5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d5e:	2600      	movs	r6, #0
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	f1c2 0320 	rsb	r3, r2, #32
 8000d6a:	40d8      	lsrs	r0, r3
 8000d6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d70:	fa21 f303 	lsr.w	r3, r1, r3
 8000d74:	4091      	lsls	r1, r2
 8000d76:	4301      	orrs	r1, r0
 8000d78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7c:	fa1f fe8c 	uxth.w	lr, ip
 8000d80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d84:	fb07 3610 	mls	r6, r7, r0, r3
 8000d88:	0c0b      	lsrs	r3, r1, #16
 8000d8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d92:	429e      	cmp	r6, r3
 8000d94:	fa04 f402 	lsl.w	r4, r4, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x260>
 8000d9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000da2:	d22f      	bcs.n	8000e04 <__udivmoddi4+0x2b8>
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d92d      	bls.n	8000e04 <__udivmoddi4+0x2b8>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4463      	add	r3, ip
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	b289      	uxth	r1, r1
 8000db0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000db4:	fb07 3316 	mls	r3, r7, r6, r3
 8000db8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x28a>
 8000dc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dcc:	d216      	bcs.n	8000dfc <__udivmoddi4+0x2b0>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d914      	bls.n	8000dfc <__udivmoddi4+0x2b0>
 8000dd2:	3e02      	subs	r6, #2
 8000dd4:	4461      	add	r1, ip
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ddc:	e738      	b.n	8000c50 <__udivmoddi4+0x104>
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e705      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e3      	b.n	8000bb0 <__udivmoddi4+0x64>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6f8      	b.n	8000bde <__udivmoddi4+0x92>
 8000dec:	454b      	cmp	r3, r9
 8000dee:	d2a9      	bcs.n	8000d44 <__udivmoddi4+0x1f8>
 8000df0:	ebb9 0802 	subs.w	r8, r9, r2
 8000df4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7a3      	b.n	8000d44 <__udivmoddi4+0x1f8>
 8000dfc:	4646      	mov	r6, r8
 8000dfe:	e7ea      	b.n	8000dd6 <__udivmoddi4+0x28a>
 8000e00:	4620      	mov	r0, r4
 8000e02:	e794      	b.n	8000d2e <__udivmoddi4+0x1e2>
 8000e04:	4640      	mov	r0, r8
 8000e06:	e7d1      	b.n	8000dac <__udivmoddi4+0x260>
 8000e08:	46d0      	mov	r8, sl
 8000e0a:	e77b      	b.n	8000d04 <__udivmoddi4+0x1b8>
 8000e0c:	3b02      	subs	r3, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	e732      	b.n	8000c78 <__udivmoddi4+0x12c>
 8000e12:	4630      	mov	r0, r6
 8000e14:	e709      	b.n	8000c2a <__udivmoddi4+0xde>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e742      	b.n	8000ca2 <__udivmoddi4+0x156>

08000e1c <__aeabi_idiv0>:
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f000 f925 	bl	800107a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e30:	2005      	movs	r0, #5
 8000e32:	f00a fed9 	bl	800bbe8 <HAL_InitTick>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	e001      	b.n	8000e46 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e42:	f00a fc5f 	bl	800b704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e46:	79fb      	ldrb	r3, [r7, #7]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20015998 	.word	0x20015998

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20015998 	.word	0x20015998

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db12      	blt.n	8000fb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	490a      	ldr	r1, [pc, #40]	; (8000fbc <__NVIC_DisableIRQ+0x44>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	3320      	adds	r3, #32
 8000fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa4:	f3bf 8f4f 	dsb	sy
}
 8000fa8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000faa:	f3bf 8f6f 	isb	sy
}
 8000fae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff28 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a2:	f7ff ff3d 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 80010a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	6978      	ldr	r0, [r7, #20]
 80010ae:	f7ff ffb1 	bl	8001014 <NVIC_EncodePriority>
 80010b2:	4602      	mov	r2, r0
 80010b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff80 	bl	8000fc0 <__NVIC_SetPriority>
}
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff30 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff40 	bl	8000f78 <__NVIC_DisableIRQ>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e014      	b.n	800113c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d105      	bne.n	8001128 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f00a fb16 	bl	800b754 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2202      	movs	r2, #2
 800112c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	795b      	ldrb	r3, [r3, #5]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_DAC_Start_DMA+0x1e>
 800115e:	2302      	movs	r3, #2
 8001160:	e0ab      	b.n	80012ba <HAL_DAC_Start_DMA+0x176>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2201      	movs	r2, #1
 8001166:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2202      	movs	r2, #2
 800116c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d12f      	bne.n	80011d4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4a52      	ldr	r2, [pc, #328]	; (80012c4 <HAL_DAC_Start_DMA+0x180>)
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <HAL_DAC_Start_DMA+0x184>)
 8001182:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a50      	ldr	r2, [pc, #320]	; (80012cc <HAL_DAC_Start_DMA+0x188>)
 800118a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800119a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d013      	beq.n	80011ca <HAL_DAC_Start_DMA+0x86>
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d845      	bhi.n	8001234 <HAL_DAC_Start_DMA+0xf0>
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_DAC_Start_DMA+0x72>
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d005      	beq.n	80011c0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80011b4:	e03e      	b.n	8001234 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3308      	adds	r3, #8
 80011bc:	613b      	str	r3, [r7, #16]
        break;
 80011be:	e03c      	b.n	800123a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	330c      	adds	r3, #12
 80011c6:	613b      	str	r3, [r7, #16]
        break;
 80011c8:	e037      	b.n	800123a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3310      	adds	r3, #16
 80011d0:	613b      	str	r3, [r7, #16]
        break;
 80011d2:	e032      	b.n	800123a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4a3d      	ldr	r2, [pc, #244]	; (80012d0 <HAL_DAC_Start_DMA+0x18c>)
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4a3c      	ldr	r2, [pc, #240]	; (80012d4 <HAL_DAC_Start_DMA+0x190>)
 80011e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4a3b      	ldr	r2, [pc, #236]	; (80012d8 <HAL_DAC_Start_DMA+0x194>)
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011fa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d013      	beq.n	800122a <HAL_DAC_Start_DMA+0xe6>
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	2b08      	cmp	r3, #8
 8001206:	d817      	bhi.n	8001238 <HAL_DAC_Start_DMA+0xf4>
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_DAC_Start_DMA+0xd2>
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d005      	beq.n	8001220 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001214:	e010      	b.n	8001238 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3314      	adds	r3, #20
 800121c:	613b      	str	r3, [r7, #16]
        break;
 800121e:	e00c      	b.n	800123a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3318      	adds	r3, #24
 8001226:	613b      	str	r3, [r7, #16]
        break;
 8001228:	e007      	b.n	800123a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	331c      	adds	r3, #28
 8001230:	613b      	str	r3, [r7, #16]
        break;
 8001232:	e002      	b.n	800123a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001234:	bf00      	nop
 8001236:	e000      	b.n	800123a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001238:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d111      	bne.n	8001264 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800124e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6898      	ldr	r0, [r3, #8]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	f000 fb29 	bl	80018b0 <HAL_DMA_Start_IT>
 800125e:	4603      	mov	r3, r0
 8001260:	75fb      	strb	r3, [r7, #23]
 8001262:	e010      	b.n	8001286 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001272:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	68d8      	ldr	r0, [r3, #12]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	f000 fb17 	bl	80018b0 <HAL_DMA_Start_IT>
 8001282:	4603      	mov	r3, r0
 8001284:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10c      	bne.n	80012ac <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6819      	ldr	r1, [r3, #0]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	2201      	movs	r2, #1
 80012a0:	409a      	lsls	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e005      	b.n	80012b8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	f043 0204 	orr.w	r2, r3, #4
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	08001639 	.word	0x08001639
 80012c8:	0800165b 	.word	0x0800165b
 80012cc:	08001677 	.word	0x08001677
 80012d0:	080016f5 	.word	0x080016f5
 80012d4:	08001717 	.word	0x08001717
 80012d8:	08001733 	.word	0x08001733

080012dc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012f2:	d120      	bne.n	8001336 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001302:	d118      	bne.n	8001336 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2204      	movs	r2, #4
 8001308:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	f043 0201 	orr.w	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800132e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f837 	bl	80013a4 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001344:	d120      	bne.n	8001388 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001354:	d118      	bne.n	8001388 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2204      	movs	r2, #4
 800135a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f043 0202 	orr.w	r2, r3, #2
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001370:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001380:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f9ac 	bl	80016e0 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	795b      	ldrb	r3, [r3, #5]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_DAC_ConfigChannel+0x1c>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e12a      	b.n	800162a <HAL_DAC_ConfigChannel+0x272>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2201      	movs	r2, #1
 80013d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2202      	movs	r2, #2
 80013de:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d174      	bne.n	80014d2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80013e8:	f7ff fd46 	bl	8000e78 <HAL_GetTick>
 80013ec:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d134      	bne.n	800145e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80013f4:	e011      	b.n	800141a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80013f6:	f7ff fd3f 	bl	8000e78 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d90a      	bls.n	800141a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	f043 0208 	orr.w	r2, r3, #8
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2203      	movs	r2, #3
 8001414:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e107      	b.n	800162a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e6      	bne.n	80013f6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fd31 	bl	8000e90 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	69d2      	ldr	r2, [r2, #28]
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
 8001438:	e01e      	b.n	8001478 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800143a:	f7ff fd1d 	bl	8000e78 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d90a      	bls.n	800145e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	f043 0208 	orr.w	r2, r3, #8
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2203      	movs	r2, #3
 8001458:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0e5      	b.n	800162a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	2b00      	cmp	r3, #0
 8001466:	dbe8      	blt.n	800143a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001468:	2001      	movs	r0, #1
 800146a:	f7ff fd11 	bl	8000e90 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	69d2      	ldr	r2, [r2, #28]
 8001476:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	ea02 0103 	and.w	r1, r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	6a1a      	ldr	r2, [r3, #32]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	409a      	lsls	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	21ff      	movs	r1, #255	; 0xff
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	ea02 0103 	and.w	r1, r2, r3
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	409a      	lsls	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d11d      	bne.n	8001516 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e0:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	221f      	movs	r2, #31
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	4313      	orrs	r3, r2
 800150c:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	2207      	movs	r2, #7
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	4013      	ands	r3, r2
 8001530:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	431a      	orrs	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	4313      	orrs	r3, r2
 8001554:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	4013      	ands	r3, r2
 8001598:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015ba:	d104      	bne.n	80015c6 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	e018      	b.n	80015f8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d104      	bne.n	80015d8 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e00f      	b.n	80015f8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80015d8:	f004 f92e 	bl	8005838 <HAL_RCC_GetHCLKFreq>
 80015dc:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <HAL_DAC_ConfigChannel+0x27c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d904      	bls.n	80015f0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e003      	b.n	80015f8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80015f6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	22c0      	movs	r2, #192	; 0xc0
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	400a      	ands	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	04c4b400 	.word	0x04c4b400

08001638 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f009 f818 	bl	800a67c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2201      	movs	r2, #1
 8001650:	711a      	strb	r2, [r3, #4]
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f008 ffe7 	bl	800a63c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f043 0204 	orr.w	r2, r3, #4
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fe7d 	bl	8001390 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2201      	movs	r2, #1
 800169a:	711a      	strb	r2, [r3, #4]
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f7ff ffce 	bl	80016a4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	711a      	strb	r2, [r3, #4]
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7ff ffc7 	bl	80016b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f043 0204 	orr.w	r2, r3, #4
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff ffbd 	bl	80016cc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2201      	movs	r2, #1
 8001756:	711a      	strb	r2, [r3, #4]
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e08d      	b.n	800188e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	4b47      	ldr	r3, [pc, #284]	; (8001898 <HAL_DMA_Init+0x138>)
 800177a:	429a      	cmp	r2, r3
 800177c:	d80f      	bhi.n	800179e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b45      	ldr	r3, [pc, #276]	; (800189c <HAL_DMA_Init+0x13c>)
 8001786:	4413      	add	r3, r2
 8001788:	4a45      	ldr	r2, [pc, #276]	; (80018a0 <HAL_DMA_Init+0x140>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	009a      	lsls	r2, r3, #2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a42      	ldr	r2, [pc, #264]	; (80018a4 <HAL_DMA_Init+0x144>)
 800179a:	641a      	str	r2, [r3, #64]	; 0x40
 800179c:	e00e      	b.n	80017bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b40      	ldr	r3, [pc, #256]	; (80018a8 <HAL_DMA_Init+0x148>)
 80017a6:	4413      	add	r3, r2
 80017a8:	4a3d      	ldr	r2, [pc, #244]	; (80018a0 <HAL_DMA_Init+0x140>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	009a      	lsls	r2, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a3c      	ldr	r2, [pc, #240]	; (80018ac <HAL_DMA_Init+0x14c>)
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fa24 	bl	8001c5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800181c:	d102      	bne.n	8001824 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001838:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d010      	beq.n	8001864 <HAL_DMA_Init+0x104>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b04      	cmp	r3, #4
 8001848:	d80c      	bhi.n	8001864 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fa44 	bl	8001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	e008      	b.n	8001876 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40020407 	.word	0x40020407
 800189c:	bffdfff8 	.word	0xbffdfff8
 80018a0:	cccccccd 	.word	0xcccccccd
 80018a4:	40020000 	.word	0x40020000
 80018a8:	bffdfbf8 	.word	0xbffdfbf8
 80018ac:	40020400 	.word	0x40020400

080018b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_DMA_Start_IT+0x20>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e066      	b.n	800199e <HAL_DMA_Start_IT+0xee>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d155      	bne.n	8001990 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0201 	bic.w	r2, r2, #1
 8001900:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	68b9      	ldr	r1, [r7, #8]
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f968 	bl	8001bde <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 020e 	orr.w	r2, r2, #14
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e00f      	b.n	8001948 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0204 	bic.w	r2, r2, #4
 8001936:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 020a 	orr.w	r2, r2, #10
 8001946:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d007      	beq.n	8001966 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001964:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800197c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e005      	b.n	800199c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001998:	2302      	movs	r3, #2
 800199a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800199c:	7dfb      	ldrb	r3, [r7, #23]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d005      	beq.n	80019ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2204      	movs	r2, #4
 80019c2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	e047      	b.n	8001a5a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 020e 	bic.w	r2, r2, #14
 80019d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0201 	bic.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f003 021c 	and.w	r2, r3, #28
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	2101      	movs	r1, #1
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a16:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00c      	beq.n	8001a3a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a38:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4798      	blx	r3
    }
  }
  return status;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	f003 031c 	and.w	r3, r3, #28
 8001a84:	2204      	movs	r2, #4
 8001a86:	409a      	lsls	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d026      	beq.n	8001ade <HAL_DMA_IRQHandler+0x7a>
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d021      	beq.n	8001ade <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d107      	bne.n	8001ab8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0204 	bic.w	r2, r2, #4
 8001ab6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	f003 021c 	and.w	r2, r3, #28
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	2104      	movs	r1, #4
 8001ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d071      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001adc:	e06c      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f003 031c 	and.w	r3, r3, #28
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d02e      	beq.n	8001b50 <HAL_DMA_IRQHandler+0xec>
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d029      	beq.n	8001b50 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0320 	and.w	r3, r3, #32
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10b      	bne.n	8001b22 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 020a 	bic.w	r2, r2, #10
 8001b18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f003 021c 	and.w	r2, r3, #28
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	2102      	movs	r1, #2
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d038      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b4e:	e033      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b54:	f003 031c 	and.w	r3, r3, #28
 8001b58:	2208      	movs	r2, #8
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d02a      	beq.n	8001bba <HAL_DMA_IRQHandler+0x156>
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d025      	beq.n	8001bba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 020e 	bic.w	r2, r2, #14
 8001b7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f003 021c 	and.w	r2, r3, #28
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
}
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bd0:	b2db      	uxtb	r3, r3
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bf4:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c06:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f003 021c 	and.w	r2, r3, #28
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	2101      	movs	r1, #1
 8001c16:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d108      	bne.n	8001c3e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c3c:	e007      	b.n	8001c4e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	60da      	str	r2, [r3, #12]
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d80a      	bhi.n	8001c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c7c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6493      	str	r3, [r2, #72]	; 0x48
 8001c84:	e007      	b.n	8001c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	009a      	lsls	r2, r3, #2
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c90:	4413      	add	r3, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	3b08      	subs	r3, #8
 8001c9e:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001cac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	40020407 	.word	0x40020407
 8001ccc:	4002081c 	.word	0x4002081c
 8001cd0:	cccccccd 	.word	0xcccccccd
 8001cd4:	40020880 	.word	0x40020880

08001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001cfa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2201      	movs	r2, #1
 8001d06:	409a      	lsls	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	1000823f 	.word	0x1000823f
 8001d1c:	40020940 	.word	0x40020940

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	e166      	b.n	8001ffe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8158 	beq.w	8001ff8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <HAL_GPIO_Init+0x40>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 0201 	and.w	r2, r3, #1
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d017      	beq.n	8001dfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	6939      	ldr	r1, [r7, #16]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80b2 	beq.w	8001ff8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b61      	ldr	r3, [pc, #388]	; (800201c <HAL_GPIO_Init+0x2fc>)
 8001e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e98:	4a60      	ldr	r2, [pc, #384]	; (800201c <HAL_GPIO_Init+0x2fc>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6613      	str	r3, [r2, #96]	; 0x60
 8001ea0:	4b5e      	ldr	r3, [pc, #376]	; (800201c <HAL_GPIO_Init+0x2fc>)
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eac:	4a5c      	ldr	r2, [pc, #368]	; (8002020 <HAL_GPIO_Init+0x300>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ed6:	d02b      	beq.n	8001f30 <HAL_GPIO_Init+0x210>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d025      	beq.n	8001f2c <HAL_GPIO_Init+0x20c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a51      	ldr	r2, [pc, #324]	; (8002028 <HAL_GPIO_Init+0x308>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d01f      	beq.n	8001f28 <HAL_GPIO_Init+0x208>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a50      	ldr	r2, [pc, #320]	; (800202c <HAL_GPIO_Init+0x30c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d019      	beq.n	8001f24 <HAL_GPIO_Init+0x204>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a4f      	ldr	r2, [pc, #316]	; (8002030 <HAL_GPIO_Init+0x310>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <HAL_GPIO_Init+0x200>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a4e      	ldr	r2, [pc, #312]	; (8002034 <HAL_GPIO_Init+0x314>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00d      	beq.n	8001f1c <HAL_GPIO_Init+0x1fc>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a4d      	ldr	r2, [pc, #308]	; (8002038 <HAL_GPIO_Init+0x318>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d007      	beq.n	8001f18 <HAL_GPIO_Init+0x1f8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a4c      	ldr	r2, [pc, #304]	; (800203c <HAL_GPIO_Init+0x31c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_GPIO_Init+0x1f4>
 8001f10:	2307      	movs	r3, #7
 8001f12:	e00e      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f14:	2308      	movs	r3, #8
 8001f16:	e00c      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f18:	2306      	movs	r3, #6
 8001f1a:	e00a      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	e008      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f20:	2304      	movs	r3, #4
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f24:	2303      	movs	r3, #3
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f30:	2300      	movs	r3, #0
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f42:	4937      	ldr	r1, [pc, #220]	; (8002020 <HAL_GPIO_Init+0x300>)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f50:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f74:	4a32      	ldr	r2, [pc, #200]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fa4:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fce:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ff2:	4a13      	ldr	r2, [pc, #76]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	f47f ae91 	bne.w	8001d30 <HAL_GPIO_Init+0x10>
  }
}
 800200e:	bf00      	nop
 8002010:	bf00      	nop
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40021000 	.word	0x40021000
 8002020:	40010000 	.word	0x40010000
 8002024:	48000400 	.word	0x48000400
 8002028:	48000800 	.word	0x48000800
 800202c:	48000c00 	.word	0x48000c00
 8002030:	48001000 	.word	0x48001000
 8002034:	48001400 	.word	0x48001400
 8002038:	48001800 	.word	0x48001800
 800203c:	48001c00 	.word	0x48001c00
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002052:	e0c9      	b.n	80021e8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002054:	2201      	movs	r2, #1
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80bc 	beq.w	80021e2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800206a:	4a66      	ldr	r2, [pc, #408]	; (8002204 <HAL_GPIO_DeInit+0x1c0>)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002092:	d02b      	beq.n	80020ec <HAL_GPIO_DeInit+0xa8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a5c      	ldr	r2, [pc, #368]	; (8002208 <HAL_GPIO_DeInit+0x1c4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d025      	beq.n	80020e8 <HAL_GPIO_DeInit+0xa4>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a5b      	ldr	r2, [pc, #364]	; (800220c <HAL_GPIO_DeInit+0x1c8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d01f      	beq.n	80020e4 <HAL_GPIO_DeInit+0xa0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a5a      	ldr	r2, [pc, #360]	; (8002210 <HAL_GPIO_DeInit+0x1cc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d019      	beq.n	80020e0 <HAL_GPIO_DeInit+0x9c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a59      	ldr	r2, [pc, #356]	; (8002214 <HAL_GPIO_DeInit+0x1d0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_GPIO_DeInit+0x98>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a58      	ldr	r2, [pc, #352]	; (8002218 <HAL_GPIO_DeInit+0x1d4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00d      	beq.n	80020d8 <HAL_GPIO_DeInit+0x94>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a57      	ldr	r2, [pc, #348]	; (800221c <HAL_GPIO_DeInit+0x1d8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d007      	beq.n	80020d4 <HAL_GPIO_DeInit+0x90>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a56      	ldr	r2, [pc, #344]	; (8002220 <HAL_GPIO_DeInit+0x1dc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_GPIO_DeInit+0x8c>
 80020cc:	2307      	movs	r3, #7
 80020ce:	e00e      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020d0:	2308      	movs	r3, #8
 80020d2:	e00c      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020d4:	2306      	movs	r3, #6
 80020d6:	e00a      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020d8:	2305      	movs	r3, #5
 80020da:	e008      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020dc:	2304      	movs	r3, #4
 80020de:	e006      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020e0:	2303      	movs	r3, #3
 80020e2:	e004      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e002      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020ec:	2300      	movs	r3, #0
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	f002 0203 	and.w	r2, r2, #3
 80020f4:	0092      	lsls	r2, r2, #2
 80020f6:	4093      	lsls	r3, r2
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d132      	bne.n	8002164 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80020fe:	4b49      	ldr	r3, [pc, #292]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	4947      	ldr	r1, [pc, #284]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 8002108:	4013      	ands	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800210c:	4b45      	ldr	r3, [pc, #276]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	4943      	ldr	r1, [pc, #268]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 8002116:	4013      	ands	r3, r2
 8002118:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800211a:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	4940      	ldr	r1, [pc, #256]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 8002124:	4013      	ands	r3, r2
 8002126:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	493c      	ldr	r1, [pc, #240]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 8002132:	4013      	ands	r3, r2
 8002134:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002146:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <HAL_GPIO_DeInit+0x1c0>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43da      	mvns	r2, r3
 8002156:	482b      	ldr	r0, [pc, #172]	; (8002204 <HAL_GPIO_DeInit+0x1c0>)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	400a      	ands	r2, r1
 800215e:	3302      	adds	r3, #2
 8002160:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2103      	movs	r1, #3
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	08da      	lsrs	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3208      	adds	r2, #8
 8002180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	08d2      	lsrs	r2, r2, #3
 8002198:	4019      	ands	r1, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2103      	movs	r1, #3
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	2101      	movs	r1, #1
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2103      	movs	r1, #3
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	401a      	ands	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f47f af2f 	bne.w	8002054 <HAL_GPIO_DeInit+0x10>
  }
}
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40010000 	.word	0x40010000
 8002208:	48000400 	.word	0x48000400
 800220c:	48000800 	.word	0x48000800
 8002210:	48000c00 	.word	0x48000c00
 8002214:	48001000 	.word	0x48001000
 8002218:	48001400 	.word	0x48001400
 800221c:	48001800 	.word	0x48001800
 8002220:	48001c00 	.word	0x48001c00
 8002224:	40010400 	.word	0x40010400

08002228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002244:	e002      	b.n	800224c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	041a      	lsls	r2, r3, #16
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43d9      	mvns	r1, r3
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	400b      	ands	r3, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f007 fa62 	bl	8009774 <HAL_GPIO_EXTI_Callback>
  }
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e081      	b.n	80023d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f009 fad6 	bl	800b894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2224      	movs	r2, #36	; 0x24
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800230c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800231c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	e006      	b.n	8002344 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002342:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d104      	bne.n	8002356 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002354:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002368:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002378:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69d9      	ldr	r1, [r3, #28]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e021      	b.n	8002430 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2224      	movs	r2, #36	; 0x24
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f009 fab3 	bl	800b970 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	4608      	mov	r0, r1
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	4603      	mov	r3, r0
 8002448:	817b      	strh	r3, [r7, #10]
 800244a:	460b      	mov	r3, r1
 800244c:	813b      	strh	r3, [r7, #8]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b20      	cmp	r3, #32
 800245c:	f040 80f9 	bne.w	8002652 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_I2C_Mem_Write+0x34>
 8002466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0ed      	b.n	8002654 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Mem_Write+0x4e>
 8002482:	2302      	movs	r3, #2
 8002484:	e0e6      	b.n	8002654 <HAL_I2C_Mem_Write+0x21c>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800248e:	f7fe fcf3 	bl	8000e78 <HAL_GetTick>
 8002492:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2319      	movs	r3, #25
 800249a:	2201      	movs	r2, #1
 800249c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 ffd8 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0d1      	b.n	8002654 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2221      	movs	r2, #33	; 0x21
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a3a      	ldr	r2, [r7, #32]
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024d8:	88f8      	ldrh	r0, [r7, #6]
 80024da:	893a      	ldrh	r2, [r7, #8]
 80024dc:	8979      	ldrh	r1, [r7, #10]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	4603      	mov	r3, r0
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fb91 	bl	8002c10 <I2C_RequestMemoryWrite>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0a9      	b.n	8002654 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	2bff      	cmp	r3, #255	; 0xff
 8002508:	d90e      	bls.n	8002528 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	22ff      	movs	r2, #255	; 0xff
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	b2da      	uxtb	r2, r3
 8002516:	8979      	ldrh	r1, [r7, #10]
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f001 f941 	bl	80037a8 <I2C_TransferConfig>
 8002526:	e00f      	b.n	8002548 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	b2da      	uxtb	r2, r3
 8002538:	8979      	ldrh	r1, [r7, #10]
 800253a:	2300      	movs	r3, #0
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f001 f930 	bl	80037a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 ffc2 	bl	80034d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e07b      	b.n	8002654 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d034      	beq.n	8002600 <HAL_I2C_Mem_Write+0x1c8>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	2b00      	cmp	r3, #0
 800259c:	d130      	bne.n	8002600 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	2200      	movs	r2, #0
 80025a6:	2180      	movs	r1, #128	; 0x80
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 ff54 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e04d      	b.n	8002654 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2bff      	cmp	r3, #255	; 0xff
 80025c0:	d90e      	bls.n	80025e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	22ff      	movs	r2, #255	; 0xff
 80025c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	8979      	ldrh	r1, [r7, #10]
 80025d0:	2300      	movs	r3, #0
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f001 f8e5 	bl	80037a8 <I2C_TransferConfig>
 80025de:	e00f      	b.n	8002600 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	8979      	ldrh	r1, [r7, #10]
 80025f2:	2300      	movs	r3, #0
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f001 f8d4 	bl	80037a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d19e      	bne.n	8002548 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 ffa1 	bl	8003556 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e01a      	b.n	8002654 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2220      	movs	r2, #32
 8002624:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_I2C_Mem_Write+0x224>)
 8002632:	400b      	ands	r3, r1
 8002634:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e000      	b.n	8002654 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002652:	2302      	movs	r3, #2
  }
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	fe00e800 	.word	0xfe00e800

08002660 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	4608      	mov	r0, r1
 800266a:	4611      	mov	r1, r2
 800266c:	461a      	mov	r2, r3
 800266e:	4603      	mov	r3, r0
 8002670:	817b      	strh	r3, [r7, #10]
 8002672:	460b      	mov	r3, r1
 8002674:	813b      	strh	r3, [r7, #8]
 8002676:	4613      	mov	r3, r2
 8002678:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b20      	cmp	r3, #32
 8002684:	f040 80fd 	bne.w	8002882 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_I2C_Mem_Read+0x34>
 800268e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800269a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0f1      	b.n	8002884 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_I2C_Mem_Read+0x4e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0ea      	b.n	8002884 <HAL_I2C_Mem_Read+0x224>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026b6:	f7fe fbdf 	bl	8000e78 <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2319      	movs	r3, #25
 80026c2:	2201      	movs	r2, #1
 80026c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fec4 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0d5      	b.n	8002884 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2222      	movs	r2, #34	; 0x22
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2240      	movs	r2, #64	; 0x40
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a3a      	ldr	r2, [r7, #32]
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002700:	88f8      	ldrh	r0, [r7, #6]
 8002702:	893a      	ldrh	r2, [r7, #8]
 8002704:	8979      	ldrh	r1, [r7, #10]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	4603      	mov	r3, r0
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fad1 	bl	8002cb8 <I2C_RequestMemoryRead>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0ad      	b.n	8002884 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	2bff      	cmp	r3, #255	; 0xff
 8002730:	d90e      	bls.n	8002750 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	22ff      	movs	r2, #255	; 0xff
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	b2da      	uxtb	r2, r3
 800273e:	8979      	ldrh	r1, [r7, #10]
 8002740:	4b52      	ldr	r3, [pc, #328]	; (800288c <HAL_I2C_Mem_Read+0x22c>)
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f001 f82d 	bl	80037a8 <I2C_TransferConfig>
 800274e:	e00f      	b.n	8002770 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	b2da      	uxtb	r2, r3
 8002760:	8979      	ldrh	r1, [r7, #10]
 8002762:	4b4a      	ldr	r3, [pc, #296]	; (800288c <HAL_I2C_Mem_Read+0x22c>)
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f001 f81c 	bl	80037a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	2200      	movs	r2, #0
 8002778:	2104      	movs	r1, #4
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fe6b 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07c      	b.n	8002884 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d034      	beq.n	8002830 <HAL_I2C_Mem_Read+0x1d0>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d130      	bne.n	8002830 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	2200      	movs	r2, #0
 80027d6:	2180      	movs	r1, #128	; 0x80
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fe3c 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e04d      	b.n	8002884 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2bff      	cmp	r3, #255	; 0xff
 80027f0:	d90e      	bls.n	8002810 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	22ff      	movs	r2, #255	; 0xff
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	8979      	ldrh	r1, [r7, #10]
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 ffcd 	bl	80037a8 <I2C_TransferConfig>
 800280e:	e00f      	b.n	8002830 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281e:	b2da      	uxtb	r2, r3
 8002820:	8979      	ldrh	r1, [r7, #10]
 8002822:	2300      	movs	r3, #0
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 ffbc 	bl	80037a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d19a      	bne.n	8002770 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fe89 	bl	8003556 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e01a      	b.n	8002884 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2220      	movs	r2, #32
 8002854:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_I2C_Mem_Read+0x230>)
 8002862:	400b      	ands	r3, r1
 8002864:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002882:	2302      	movs	r3, #2
  }
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	80002400 	.word	0x80002400
 8002890:	fe00e800 	.word	0xfe00e800

08002894 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	68f9      	ldr	r1, [r7, #12]
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
  }
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d010      	beq.n	800290e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	09db      	lsrs	r3, r3, #7
 80028f0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	0a9b      	lsrs	r3, r3, #10
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d010      	beq.n	800293c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	09db      	lsrs	r3, r3, #7
 800291e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f043 0208 	orr.w	r2, r3, #8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800293a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	0a5b      	lsrs	r3, r3, #9
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d010      	beq.n	800296a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	09db      	lsrs	r3, r3, #7
 800294c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	f043 0202 	orr.w	r2, r3, #2
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002968:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 030b 	and.w	r3, r3, #11
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800297a:	68f9      	ldr	r1, [r7, #12]
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fc31 	bl	80031e4 <I2C_ITError>
  }
}
 8002982:	bf00      	nop
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70fb      	strb	r3, [r7, #3]
 80029be:	4613      	mov	r3, r2
 80029c0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <I2C_Slave_ISR_IT+0x24>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0ec      	b.n	8002c08 <I2C_Slave_ISR_IT+0x1fe>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002a4e:	6939      	ldr	r1, [r7, #16]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fa67 	bl	8002f24 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d04d      	beq.n	8002afe <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d047      	beq.n	8002afe <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d128      	bne.n	8002aca <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b28      	cmp	r3, #40	; 0x28
 8002a82:	d108      	bne.n	8002a96 <I2C_Slave_ISR_IT+0x8c>
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a8a:	d104      	bne.n	8002a96 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a8c:	6939      	ldr	r1, [r7, #16]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fb52 	bl	8003138 <I2C_ITListenCplt>
 8002a94:	e032      	b.n	8002afc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b29      	cmp	r3, #41	; 0x29
 8002aa0:	d10e      	bne.n	8002ac0 <I2C_Slave_ISR_IT+0xb6>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aa8:	d00a      	beq.n	8002ac0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2210      	movs	r2, #16
 8002ab0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fc8d 	bl	80033d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f9d5 	bl	8002e68 <I2C_ITSlaveSeqCplt>
 8002abe:	e01d      	b.n	8002afc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ac8:	e096      	b.n	8002bf8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2210      	movs	r2, #16
 8002ad0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f043 0204 	orr.w	r2, r3, #4
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <I2C_Slave_ISR_IT+0xe4>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aea:	f040 8085 	bne.w	8002bf8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	4619      	mov	r1, r3
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fb75 	bl	80031e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002afa:	e07d      	b.n	8002bf8 <I2C_Slave_ISR_IT+0x1ee>
 8002afc:	e07c      	b.n	8002bf8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d030      	beq.n	8002b6c <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	089b      	lsrs	r3, r3, #2
 8002b0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d02a      	beq.n	8002b6c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d018      	beq.n	8002b52 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d14f      	bne.n	8002bfc <I2C_Slave_ISR_IT+0x1f2>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b62:	d04b      	beq.n	8002bfc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f97f 	bl	8002e68 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002b6a:	e047      	b.n	8002bfc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	08db      	lsrs	r3, r3, #3
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	08db      	lsrs	r3, r3, #3
 8002b7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002b84:	6939      	ldr	r1, [r7, #16]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f8ea 	bl	8002d60 <I2C_ITAddrCplt>
 8002b8c:	e037      	b.n	8002bfe <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d031      	beq.n	8002bfe <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d02b      	beq.n	8002bfe <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d018      	beq.n	8002be2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
 8002be0:	e00d      	b.n	8002bfe <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d002      	beq.n	8002bf0 <I2C_Slave_ISR_IT+0x1e6>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d106      	bne.n	8002bfe <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f939 	bl	8002e68 <I2C_ITSlaveSeqCplt>
 8002bf6:	e002      	b.n	8002bfe <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002bf8:	bf00      	nop
 8002bfa:	e000      	b.n	8002bfe <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002bfc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	4608      	mov	r0, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	817b      	strh	r3, [r7, #10]
 8002c22:	460b      	mov	r3, r1
 8002c24:	813b      	strh	r3, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	8979      	ldrh	r1, [r7, #10]
 8002c30:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <I2C_RequestMemoryWrite+0xa4>)
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fdb5 	bl	80037a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	69b9      	ldr	r1, [r7, #24]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fc47 	bl	80034d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e02c      	b.n	8002cac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d105      	bne.n	8002c64 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c58:	893b      	ldrh	r3, [r7, #8]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
 8002c62:	e015      	b.n	8002c90 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c64:	893b      	ldrh	r3, [r7, #8]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	69b9      	ldr	r1, [r7, #24]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fc2d 	bl	80034d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e012      	b.n	8002cac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c86:	893b      	ldrh	r3, [r7, #8]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2200      	movs	r2, #0
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fbdb 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	80002000 	.word	0x80002000

08002cb8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	817b      	strh	r3, [r7, #10]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	813b      	strh	r3, [r7, #8]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <I2C_RequestMemoryRead+0xa4>)
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fd62 	bl	80037a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fbf4 	bl	80034d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e02c      	b.n	8002d52 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfe:	893b      	ldrh	r3, [r7, #8]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
 8002d08:	e015      	b.n	8002d36 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d0a:	893b      	ldrh	r3, [r7, #8]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fbda 	bl	80034d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e012      	b.n	8002d52 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2c:	893b      	ldrh	r3, [r7, #8]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2140      	movs	r1, #64	; 0x40
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fb88 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	80002000 	.word	0x80002000

08002d60 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d76:	2b28      	cmp	r3, #40	; 0x28
 8002d78:	d16a      	bne.n	8002e50 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d98:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002db4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d138      	bne.n	8002e30 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002dbe:	897b      	ldrh	r3, [r7, #10]
 8002dc0:	09db      	lsrs	r3, r3, #7
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	89bb      	ldrh	r3, [r7, #12]
 8002dc6:	4053      	eors	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f003 0306 	and.w	r3, r3, #6
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11c      	bne.n	8002e0c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d13b      	bne.n	8002e60 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2208      	movs	r2, #8
 8002df4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dfe:	89ba      	ldrh	r2, [r7, #12]
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff fdd4 	bl	80029b2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e0a:	e029      	b.n	8002e60 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002e0c:	893b      	ldrh	r3, [r7, #8]
 8002e0e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fcf9 	bl	800380c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e22:	89ba      	ldrh	r2, [r7, #12]
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff fdc2 	bl	80029b2 <HAL_I2C_AddrCallback>
}
 8002e2e:	e017      	b.n	8002e60 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fce9 	bl	800380c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e42:	89ba      	ldrh	r2, [r7, #12]
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	4619      	mov	r1, r3
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff fdb2 	bl	80029b2 <HAL_I2C_AddrCallback>
}
 8002e4e:	e007      	b.n	8002e60 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2208      	movs	r2, #8
 8002e56:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	0b9b      	lsrs	r3, r3, #14
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e00d      	b.n	8002eba <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	0bdb      	lsrs	r3, r3, #15
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b29      	cmp	r3, #41	; 0x29
 8002ec4:	d112      	bne.n	8002eec <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2228      	movs	r2, #40	; 0x28
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2221      	movs	r2, #33	; 0x21
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fc98 	bl	800380c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff fd50 	bl	800298a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002eea:	e017      	b.n	8002f1c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ef6:	d111      	bne.n	8002f1c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2228      	movs	r2, #40	; 0x28
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2222      	movs	r2, #34	; 0x22
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f06:	2102      	movs	r1, #2
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fc7f 	bl	800380c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fd41 	bl	800299e <HAL_I2C_SlaveRxCpltCallback>
}
 8002f1c:	bf00      	nop
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f40:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2220      	movs	r2, #32
 8002f48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b21      	cmp	r3, #33	; 0x21
 8002f4e:	d002      	beq.n	8002f56 <I2C_ITSlaveCplt+0x32>
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b29      	cmp	r3, #41	; 0x29
 8002f54:	d108      	bne.n	8002f68 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002f56:	f248 0101 	movw	r1, #32769	; 0x8001
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fc56 	bl	800380c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2221      	movs	r2, #33	; 0x21
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
 8002f66:	e00d      	b.n	8002f84 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b22      	cmp	r3, #34	; 0x22
 8002f6c:	d002      	beq.n	8002f74 <I2C_ITSlaveCplt+0x50>
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2b2a      	cmp	r3, #42	; 0x2a
 8002f72:	d107      	bne.n	8002f84 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002f74:	f248 0102 	movw	r1, #32770	; 0x8002
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fc47 	bl	800380c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2222      	movs	r2, #34	; 0x22
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f92:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b64      	ldr	r3, [pc, #400]	; (8003130 <I2C_ITSlaveCplt+0x20c>)
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fa14 	bl	80033d2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	0b9b      	lsrs	r3, r3, #14
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d013      	beq.n	8002fde <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fc4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d020      	beq.n	8003010 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fdc:	e018      	b.n	8003010 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	0bdb      	lsrs	r3, r3, #15
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d012      	beq.n	8003010 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ff8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d006      	beq.n	8003010 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0304 	bic.w	r3, r3, #4
 8003022:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00c      	beq.n	800305e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	f043 0204 	orr.w	r2, r3, #4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	2b00      	cmp	r3, #0
 8003088:	d010      	beq.n	80030ac <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	4619      	mov	r1, r3
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f8a7 	bl	80031e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b28      	cmp	r3, #40	; 0x28
 80030a0:	d141      	bne.n	8003126 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80030a2:	6979      	ldr	r1, [r7, #20]
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f847 	bl	8003138 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030aa:	e03c      	b.n	8003126 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030b4:	d014      	beq.n	80030e0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fed6 	bl	8002e68 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a1d      	ldr	r2, [pc, #116]	; (8003134 <I2C_ITSlaveCplt+0x210>)
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff fc78 	bl	80029ce <HAL_I2C_ListenCpltCallback>
}
 80030de:	e022      	b.n	8003126 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b22      	cmp	r3, #34	; 0x22
 80030ea:	d10e      	bne.n	800310a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fc4b 	bl	800299e <HAL_I2C_SlaveRxCpltCallback>
}
 8003108:	e00d      	b.n	8003126 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fc32 	bl	800298a <HAL_I2C_SlaveTxCpltCallback>
}
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	fe00e800 	.word	0xfe00e800
 8003134:	ffff0000 	.word	0xffff0000

08003138 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a26      	ldr	r2, [pc, #152]	; (80031e0 <I2C_ITListenCplt+0xa8>)
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d022      	beq.n	80031b6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f043 0204 	orr.w	r2, r3, #4
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031b6:	f248 0103 	movw	r1, #32771	; 0x8003
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fb26 	bl	800380c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2210      	movs	r2, #16
 80031c6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fbfc 	bl	80029ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	ffff0000 	.word	0xffff0000

080031e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a5d      	ldr	r2, [pc, #372]	; (8003378 <I2C_ITError+0x194>)
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b28      	cmp	r3, #40	; 0x28
 800321a:	d005      	beq.n	8003228 <I2C_ITError+0x44>
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b29      	cmp	r3, #41	; 0x29
 8003220:	d002      	beq.n	8003228 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	2b2a      	cmp	r3, #42	; 0x2a
 8003226:	d10b      	bne.n	8003240 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003228:	2103      	movs	r1, #3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 faee 	bl	800380c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2228      	movs	r2, #40	; 0x28
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a50      	ldr	r2, [pc, #320]	; (800337c <I2C_ITError+0x198>)
 800323c:	635a      	str	r2, [r3, #52]	; 0x34
 800323e:	e011      	b.n	8003264 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003240:	f248 0103 	movw	r1, #32771	; 0x8003
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fae1 	bl	800380c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b60      	cmp	r3, #96	; 0x60
 8003254:	d003      	beq.n	800325e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	2b00      	cmp	r3, #0
 8003270:	d039      	beq.n	80032e6 <I2C_ITError+0x102>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b11      	cmp	r3, #17
 8003276:	d002      	beq.n	800327e <I2C_ITError+0x9a>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b21      	cmp	r3, #33	; 0x21
 800327c:	d133      	bne.n	80032e6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800328c:	d107      	bne.n	800329e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800329c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fc8d 	bl	8001bc2 <HAL_DMA_GetState>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d017      	beq.n	80032de <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	4a33      	ldr	r2, [pc, #204]	; (8003380 <I2C_ITError+0x19c>)
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fb6f 	bl	80019a6 <HAL_DMA_Abort_IT>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d04d      	beq.n	800336a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032d8:	4610      	mov	r0, r2
 80032da:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032dc:	e045      	b.n	800336a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f850 	bl	8003384 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032e4:	e041      	b.n	800336a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d039      	beq.n	8003362 <I2C_ITError+0x17e>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b12      	cmp	r3, #18
 80032f2:	d002      	beq.n	80032fa <I2C_ITError+0x116>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b22      	cmp	r3, #34	; 0x22
 80032f8:	d133      	bne.n	8003362 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003308:	d107      	bne.n	800331a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003318:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe fc4f 	bl	8001bc2 <HAL_DMA_GetState>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d017      	beq.n	800335a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	4a14      	ldr	r2, [pc, #80]	; (8003380 <I2C_ITError+0x19c>)
 8003330:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fb31 	bl	80019a6 <HAL_DMA_Abort_IT>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d011      	beq.n	800336e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003354:	4610      	mov	r0, r2
 8003356:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003358:	e009      	b.n	800336e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f812 	bl	8003384 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003360:	e005      	b.n	800336e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f80e 	bl	8003384 <I2C_TreatErrorCallback>
  }
}
 8003368:	e002      	b.n	8003370 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800336a:	bf00      	nop
 800336c:	e000      	b.n	8003370 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800336e:	bf00      	nop
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	ffff0000 	.word	0xffff0000
 800337c:	08002a0b 	.word	0x08002a0b
 8003380:	0800341b 	.word	0x0800341b

08003384 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b60      	cmp	r3, #96	; 0x60
 8003396:	d10e      	bne.n	80033b6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff fb21 	bl	80029f6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033b4:	e009      	b.n	80033ca <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fb0c 	bl	80029e2 <HAL_I2C_ErrorCallback>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d103      	bne.n	80033f0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2200      	movs	r2, #0
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d007      	beq.n	800340e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	619a      	str	r2, [r3, #24]
  }
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	2200      	movs	r2, #0
 8003436:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	2200      	movs	r2, #0
 8003446:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff ff9b 	bl	8003384 <I2C_TreatErrorCallback>
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4613      	mov	r3, r2
 8003464:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003466:	e022      	b.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d01e      	beq.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003470:	f7fd fd02 	bl	8000e78 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d302      	bcc.n	8003486 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d113      	bne.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f043 0220 	orr.w	r2, r3, #32
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00f      	b.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4013      	ands	r3, r2
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	bf0c      	ite	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	2300      	movne	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d0cd      	beq.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034e2:	e02c      	b.n	800353e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f871 	bl	80035d0 <I2C_IsErrorOccurred>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e02a      	b.n	800354e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d01e      	beq.n	800353e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003500:	f7fd fcba 	bl	8000e78 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	429a      	cmp	r2, r3
 800350e:	d302      	bcc.n	8003516 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d113      	bne.n	800353e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e007      	b.n	800354e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d1cb      	bne.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003562:	e028      	b.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f831 	bl	80035d0 <I2C_IsErrorOccurred>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e026      	b.n	80035c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003578:	f7fd fc7e 	bl	8000e78 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	d302      	bcc.n	800358e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d113      	bne.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e007      	b.n	80035c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d1cf      	bne.n	8003564 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d075      	beq.n	80036e8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2210      	movs	r2, #16
 8003602:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003604:	e056      	b.n	80036b4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d052      	beq.n	80036b4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fd fc33 	bl	8000e78 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_IsErrorOccurred+0x54>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d147      	bne.n	80036b4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003636:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003646:	d12e      	bne.n	80036a6 <I2C_IsErrorOccurred+0xd6>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800364e:	d02a      	beq.n	80036a6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	2b20      	cmp	r3, #32
 8003654:	d027      	beq.n	80036a6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003664:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003666:	f7fd fc07 	bl	8000e78 <HAL_GetTick>
 800366a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800366c:	e01b      	b.n	80036a6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800366e:	f7fd fc03 	bl	8000e78 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b19      	cmp	r3, #25
 800367a:	d914      	bls.n	80036a6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d1dc      	bne.n	800366e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d003      	beq.n	80036ca <I2C_IsErrorOccurred+0xfa>
 80036c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d09d      	beq.n	8003606 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d103      	bne.n	80036da <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2220      	movs	r2, #32
 80036d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800370a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	f043 0308 	orr.w	r3, r3, #8
 8003722:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800372c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800374e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01c      	beq.n	8003798 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff fe37 	bl	80033d2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <I2C_IsErrorOccurred+0x1d4>)
 8003770:	400b      	ands	r3, r1
 8003772:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	431a      	orrs	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800379c:	4618      	mov	r0, r3
 800379e:	3728      	adds	r7, #40	; 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	fe00e800 	.word	0xfe00e800

080037a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	460b      	mov	r3, r1
 80037b4:	817b      	strh	r3, [r7, #10]
 80037b6:	4613      	mov	r3, r2
 80037b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ba:	897b      	ldrh	r3, [r7, #10]
 80037bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037c0:	7a7b      	ldrb	r3, [r7, #9]
 80037c2:	041b      	lsls	r3, r3, #16
 80037c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	0d5b      	lsrs	r3, r3, #21
 80037e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <I2C_TransferConfig+0x60>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	43db      	mvns	r3, r3
 80037ec:	ea02 0103 	and.w	r1, r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	03ff63ff 	.word	0x03ff63ff

0800380c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800381c:	887b      	ldrh	r3, [r7, #2]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00f      	beq.n	8003846 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800382c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800383a:	2b28      	cmp	r3, #40	; 0x28
 800383c:	d003      	beq.n	8003846 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003844:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00f      	beq.n	8003870 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003856:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003864:	2b28      	cmp	r3, #40	; 0x28
 8003866:	d003      	beq.n	8003870 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800386e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003870:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003874:	2b00      	cmp	r3, #0
 8003876:	da03      	bge.n	8003880 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800387e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003880:	887b      	ldrh	r3, [r7, #2]
 8003882:	2b10      	cmp	r3, #16
 8003884:	d103      	bne.n	800388e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800388c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800388e:	887b      	ldrh	r3, [r7, #2]
 8003890:	2b20      	cmp	r3, #32
 8003892:	d103      	bne.n	800389c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f043 0320 	orr.w	r3, r3, #32
 800389a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800389c:	887b      	ldrh	r3, [r7, #2]
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d103      	bne.n	80038aa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	43da      	mvns	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	400a      	ands	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d138      	bne.n	8003950 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e032      	b.n	8003952 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	; 0x24
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800391a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6819      	ldr	r1, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	e000      	b.n	8003952 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003950:	2302      	movs	r3, #2
  }
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800395e:	b480      	push	{r7}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b20      	cmp	r3, #32
 8003972:	d139      	bne.n	80039e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800397e:	2302      	movs	r3, #2
 8003980:	e033      	b.n	80039ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2224      	movs	r2, #36	; 0x24
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e000      	b.n	80039ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
  }
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003a04:	f7fd fa38 	bl	8000e78 <HAL_GetTick>
 8003a08:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
 8003a14:	e092      	b.n	8003b3c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f040 808b 	bne.w	8003b3c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f007 ffcc 	bl	800b9c4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003a2c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fad0 	bl	8003fd6 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	4b42      	ldr	r3, [pc, #264]	; (8003b48 <HAL_OSPI_Init+0x150>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68d1      	ldr	r1, [r2, #12]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6912      	ldr	r2, [r2, #16]
 8003a48:	3a01      	subs	r2, #1
 8003a4a:	0412      	lsls	r2, r2, #16
 8003a4c:	4311      	orrs	r1, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6952      	ldr	r2, [r2, #20]
 8003a52:	3a01      	subs	r2, #1
 8003a54:	0212      	lsls	r2, r2, #8
 8003a56:	4311      	orrs	r1, r2
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a5c:	4311      	orrs	r1, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	69d2      	ldr	r2, [r2, #28]
 8003a62:	4311      	orrs	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	0412      	lsls	r2, r2, #16
 8003a76:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	021a      	lsls	r2, r3, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2120      	movs	r1, #32
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fddc 	bl	800465c <OSPI_WaitFlagStateUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d146      	bne.n	8003b3c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	1e5a      	subs	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ae4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d107      	bne.n	8003b24 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0202 	orr.w	r2, r2, #2
 8003b22:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b2c:	d103      	bne.n	8003b36 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	645a      	str	r2, [r3, #68]	; 0x44
 8003b34:	e002      	b.n	8003b3c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	f8e0f8f4 	.word	0xf8e0f8f4

08003b4c <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	e015      	b.n	8003b90 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0202 	bic.w	r2, r2, #2
 8003b82:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f007 ff89 	bl	800ba9c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b08a      	sub	sp, #40	; 0x28
 8003b9e:	af02      	add	r7, sp, #8
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003ba6:	f7fd f967 	bl	8000e78 <HAL_GetTick>
 8003baa:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d104      	bne.n	8003bc8 <HAL_OSPI_Command+0x2e>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc6:	d10d      	bne.n	8003be4 <HAL_OSPI_Command+0x4a>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b14      	cmp	r3, #20
 8003bcc:	d103      	bne.n	8003bd6 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d006      	beq.n	8003be4 <HAL_OSPI_Command+0x4a>
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b24      	cmp	r3, #36	; 0x24
 8003bda:	d153      	bne.n	8003c84 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d14f      	bne.n	8003c84 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2200      	movs	r2, #0
 8003bec:	2120      	movs	r1, #32
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fd34 	bl	800465c <OSPI_WaitFlagStateUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003bf8:	7ffb      	ldrb	r3, [r7, #31]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d148      	bne.n	8003c90 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fd60 	bl	80046cc <OSPI_ConfigCmd>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003c10:	7ffb      	ldrb	r3, [r7, #31]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d13c      	bne.n	8003c90 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10e      	bne.n	8003c3c <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2201      	movs	r2, #1
 8003c26:	2102      	movs	r1, #2
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fd17 	bl	800465c <OSPI_WaitFlagStateUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2202      	movs	r2, #2
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003c3a:	e029      	b.n	8003c90 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d103      	bne.n	8003c4c <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2204      	movs	r2, #4
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003c4a:	e021      	b.n	8003c90 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d10b      	bne.n	8003c6c <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	2b24      	cmp	r3, #36	; 0x24
 8003c5a:	d103      	bne.n	8003c64 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003c62:	e015      	b.n	8003c90 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2214      	movs	r2, #20
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003c6a:	e011      	b.n	8003c90 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c70:	2b14      	cmp	r3, #20
 8003c72:	d103      	bne.n	8003c7c <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2204      	movs	r2, #4
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003c7a:	e009      	b.n	8003c90 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2224      	movs	r2, #36	; 0x24
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003c82:	e005      	b.n	8003c90 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2210      	movs	r2, #16
 8003c8c:	649a      	str	r2, [r3, #72]	; 0x48
 8003c8e:	e000      	b.n	8003c92 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8003c90:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3720      	adds	r7, #32
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ca8:	f7fd f8e6 	bl	8000e78 <HAL_GetTick>
 8003cac:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3350      	adds	r3, #80	; 0x50
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	649a      	str	r2, [r3, #72]	; 0x48
 8003cc6:	e057      	b.n	8003d78 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d14e      	bne.n	8003d6e <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cf8:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2201      	movs	r2, #1
 8003d02:	2104      	movs	r1, #4
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fca9 	bl	800465c <OSPI_WaitFlagStateUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003d0e:	7ffb      	ldrb	r3, [r7, #31]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d113      	bne.n	8003d3c <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	781a      	ldrb	r2, [r3, #0]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	1e5a      	subs	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1df      	bne.n	8003cfa <HAL_OSPI_Transmit+0x5e>
 8003d3a:	e000      	b.n	8003d3e <HAL_OSPI_Transmit+0xa2>
          break;
 8003d3c:	bf00      	nop

      if (status == HAL_OK)
 8003d3e:	7ffb      	ldrb	r3, [r7, #31]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d119      	bne.n	8003d78 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fc84 	bl	800465c <OSPI_WaitFlagStateUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003d58:	7ffb      	ldrb	r3, [r7, #31]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10c      	bne.n	8003d78 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2202      	movs	r2, #2
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	645a      	str	r2, [r3, #68]	; 0x44
 8003d6c:	e004      	b.n	8003d78 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2210      	movs	r2, #16
 8003d76:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b08c      	sub	sp, #48	; 0x30
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003d8e:	f7fd f873 	bl	8000e78 <HAL_GetTick>
 8003d92:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3350      	adds	r3, #80	; 0x50
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da2:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003dac:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d106      	bne.n	8003dc2 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	649a      	str	r2, [r3, #72]	; 0x48
 8003dc0:	e07c      	b.n	8003ebc <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d172      	bne.n	8003eb0 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003df6:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e00:	d104      	bne.n	8003e0c <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	649a      	str	r2, [r3, #72]	; 0x48
 8003e0a:	e011      	b.n	8003e30 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d004      	beq.n	8003e26 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	649a      	str	r2, [r3, #72]	; 0x48
 8003e24:	e004      	b.n	8003e30 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2201      	movs	r2, #1
 8003e38:	2106      	movs	r1, #6
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fc0e 	bl	800465c <OSPI_WaitFlagStateUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8003e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d114      	bne.n	8003e78 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	7812      	ldrb	r2, [r2, #0]
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	1e5a      	subs	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1dc      	bne.n	8003e30 <HAL_OSPI_Receive+0xae>
 8003e76:	e000      	b.n	8003e7a <HAL_OSPI_Receive+0xf8>
          break;
 8003e78:	bf00      	nop

      if (status == HAL_OK)
 8003e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11c      	bne.n	8003ebc <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fbe5 	bl	800465c <OSPI_WaitFlagStateUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8003e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10d      	bne.n	8003ebc <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
 8003eae:	e005      	b.n	8003ebc <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2210      	movs	r2, #16
 8003eba:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3728      	adds	r7, #40	; 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ed4:	f7fc ffd0 	bl	8000e78 <HAL_GetTick>
 8003ed8:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee0:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003eea:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d164      	bne.n	8003fbe <HAL_OSPI_AutoPolling+0xf6>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efc:	d15f      	bne.n	8003fbe <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2200      	movs	r2, #0
 8003f06:	2120      	movs	r1, #32
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fba7 	bl	800465c <OSPI_WaitFlagStateUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003f12:	7ffb      	ldrb	r3, [r7, #31]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d158      	bne.n	8003fca <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	6852      	ldr	r2, [r2, #4]
 8003f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	6912      	ldr	r2, [r2, #16]
 8003f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6899      	ldr	r1, [r3, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f5a:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f64:	d104      	bne.n	8003f70 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	649a      	str	r2, [r3, #72]	; 0x48
 8003f6e:	e011      	b.n	8003f94 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	649a      	str	r2, [r3, #72]	; 0x48
 8003f88:	e004      	b.n	8003f94 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	2108      	movs	r1, #8
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fb5c 	bl	800465c <OSPI_WaitFlagStateUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003fa8:	7ffb      	ldrb	r3, [r7, #31]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10d      	bne.n	8003fca <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003fbc:	e005      	b.n	8003fca <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	649a      	str	r2, [r3, #72]	; 0x48
 8003fc8:	e000      	b.n	8003fcc <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8003fca:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003fcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b092      	sub	sp, #72	; 0x48
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a08      	ldr	r2, [pc, #32]	; (8004034 <HAL_OSPIM_Config+0x40>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d105      	bne.n	8004022 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004020:	e004      	b.n	800402c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004022:	2301      	movs	r3, #1
 8004024:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800402c:	2300      	movs	r3, #0
 800402e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004032:	e01f      	b.n	8004074 <HAL_OSPIM_Config+0x80>
 8004034:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8004038:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800403c:	3301      	adds	r3, #1
 800403e:	b2d8      	uxtb	r0, r3
 8004040:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004044:	f107 0114 	add.w	r1, r7, #20
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	4619      	mov	r1, r3
 8004054:	f000 fc9c 	bl	8004990 <OSPIM_GetConfig>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2208      	movs	r2, #8
 8004068:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800406a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800406e:	3301      	adds	r3, #1
 8004070:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004074:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004078:	2b01      	cmp	r3, #1
 800407a:	d9dd      	bls.n	8004038 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 800407c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 82de 	bne.w	8004642 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004086:	4bc6      	ldr	r3, [pc, #792]	; (80043a0 <HAL_OSPIM_Config+0x3ac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004092:	4bc3      	ldr	r3, [pc, #780]	; (80043a0 <HAL_OSPIM_Config+0x3ac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4ac2      	ldr	r2, [pc, #776]	; (80043a0 <HAL_OSPIM_Config+0x3ac>)
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800409e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80040aa:	4bbe      	ldr	r3, [pc, #760]	; (80043a4 <HAL_OSPIM_Config+0x3b0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80040b6:	4bbb      	ldr	r3, [pc, #748]	; (80043a4 <HAL_OSPIM_Config+0x3b0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4aba      	ldr	r2, [pc, #744]	; (80043a4 <HAL_OSPIM_Config+0x3b0>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80040c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80040c6:	f043 0302 	orr.w	r3, r3, #2
 80040ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80040ce:	49b6      	ldr	r1, [pc, #728]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 80040d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	3348      	adds	r3, #72	; 0x48
 80040dc:	443b      	add	r3, r7
 80040de:	3b2c      	subs	r3, #44	; 0x2c
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	48af      	ldr	r0, [pc, #700]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 80040ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	3348      	adds	r3, #72	; 0x48
 80040f8:	443b      	add	r3, r7
 80040fa:	3b2c      	subs	r3, #44	; 0x2c
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3b01      	subs	r3, #1
 8004100:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4403      	add	r3, r0
 8004108:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800410a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	3348      	adds	r3, #72	; 0x48
 8004116:	443b      	add	r3, r7
 8004118:	3b34      	subs	r3, #52	; 0x34
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80a1 	beq.w	8004264 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004122:	49a1      	ldr	r1, [pc, #644]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 8004124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	3348      	adds	r3, #72	; 0x48
 8004130:	443b      	add	r3, r7
 8004132:	3b34      	subs	r3, #52	; 0x34
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3b01      	subs	r3, #1
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	489a      	ldr	r0, [pc, #616]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 8004140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	3348      	adds	r3, #72	; 0x48
 800414c:	443b      	add	r3, r7
 800414e:	3b34      	subs	r3, #52	; 0x34
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3b01      	subs	r3, #1
 8004154:	f021 0201 	bic.w	r2, r1, #1
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4403      	add	r3, r0
 800415c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800415e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	3348      	adds	r3, #72	; 0x48
 800416a:	443b      	add	r3, r7
 800416c:	3b30      	subs	r3, #48	; 0x30
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01d      	beq.n	80041b0 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004174:	498c      	ldr	r1, [pc, #560]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 8004176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	3348      	adds	r3, #72	; 0x48
 8004182:	443b      	add	r3, r7
 8004184:	3b30      	subs	r3, #48	; 0x30
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3b01      	subs	r3, #1
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	4885      	ldr	r0, [pc, #532]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 8004192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	3348      	adds	r3, #72	; 0x48
 800419e:	443b      	add	r3, r7
 80041a0:	3b30      	subs	r3, #48	; 0x30
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	f021 0210 	bic.w	r2, r1, #16
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4403      	add	r3, r0
 80041ae:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80041b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	3348      	adds	r3, #72	; 0x48
 80041bc:	443b      	add	r3, r7
 80041be:	3b28      	subs	r3, #40	; 0x28
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d021      	beq.n	800420a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80041c6:	4978      	ldr	r1, [pc, #480]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 80041c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	3348      	adds	r3, #72	; 0x48
 80041d4:	443b      	add	r3, r7
 80041d6:	3b28      	subs	r3, #40	; 0x28
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3b01      	subs	r3, #1
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	6859      	ldr	r1, [r3, #4]
 80041e6:	4870      	ldr	r0, [pc, #448]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 80041e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	3348      	adds	r3, #72	; 0x48
 80041f4:	443b      	add	r3, r7
 80041f6:	3b28      	subs	r3, #40	; 0x28
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4403      	add	r3, r0
 8004208:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800420a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	3348      	adds	r3, #72	; 0x48
 8004216:	443b      	add	r3, r7
 8004218:	3b24      	subs	r3, #36	; 0x24
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d021      	beq.n	8004264 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004220:	4961      	ldr	r1, [pc, #388]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 8004222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	3348      	adds	r3, #72	; 0x48
 800422e:	443b      	add	r3, r7
 8004230:	3b24      	subs	r3, #36	; 0x24
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3b01      	subs	r3, #1
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	4859      	ldr	r0, [pc, #356]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 8004242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	3348      	adds	r3, #72	; 0x48
 800424e:	443b      	add	r3, r7
 8004250:	3b24      	subs	r3, #36	; 0x24
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3b01      	subs	r3, #1
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4403      	add	r3, r0
 8004262:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6819      	ldr	r1, [r3, #0]
 8004268:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	3348      	adds	r3, #72	; 0x48
 8004276:	443b      	add	r3, r7
 8004278:	3b34      	subs	r3, #52	; 0x34
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4299      	cmp	r1, r3
 800427e:	d038      	beq.n	80042f2 <HAL_OSPIM_Config+0x2fe>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	3348      	adds	r3, #72	; 0x48
 8004292:	443b      	add	r3, r7
 8004294:	3b30      	subs	r3, #48	; 0x30
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4299      	cmp	r1, r3
 800429a:	d02a      	beq.n	80042f2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6899      	ldr	r1, [r3, #8]
 80042a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	3348      	adds	r3, #72	; 0x48
 80042ae:	443b      	add	r3, r7
 80042b0:	3b2c      	subs	r3, #44	; 0x2c
 80042b2:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80042b4:	4299      	cmp	r1, r3
 80042b6:	d01c      	beq.n	80042f2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	68d9      	ldr	r1, [r3, #12]
 80042bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	3348      	adds	r3, #72	; 0x48
 80042ca:	443b      	add	r3, r7
 80042cc:	3b28      	subs	r3, #40	; 0x28
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4299      	cmp	r1, r3
 80042d2:	d00e      	beq.n	80042f2 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	6919      	ldr	r1, [r3, #16]
 80042d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	3348      	adds	r3, #72	; 0x48
 80042e6:	443b      	add	r3, r7
 80042e8:	3b24      	subs	r3, #36	; 0x24
 80042ea:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80042ec:	4299      	cmp	r1, r3
 80042ee:	f040 80d3 	bne.w	8004498 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80042f2:	492d      	ldr	r1, [pc, #180]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 80042f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	3348      	adds	r3, #72	; 0x48
 8004302:	443b      	add	r3, r7
 8004304:	3b34      	subs	r3, #52	; 0x34
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3b01      	subs	r3, #1
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	4825      	ldr	r0, [pc, #148]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 8004312:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	3348      	adds	r3, #72	; 0x48
 8004320:	443b      	add	r3, r7
 8004322:	3b34      	subs	r3, #52	; 0x34
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3b01      	subs	r3, #1
 8004328:	f021 0201 	bic.w	r2, r1, #1
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4403      	add	r3, r0
 8004330:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004332:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	3348      	adds	r3, #72	; 0x48
 8004340:	443b      	add	r3, r7
 8004342:	3b30      	subs	r3, #48	; 0x30
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01f      	beq.n	800438a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800434a:	4917      	ldr	r1, [pc, #92]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 800434c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	3348      	adds	r3, #72	; 0x48
 800435a:	443b      	add	r3, r7
 800435c:	3b30      	subs	r3, #48	; 0x30
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3b01      	subs	r3, #1
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	6859      	ldr	r1, [r3, #4]
 8004368:	480f      	ldr	r0, [pc, #60]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 800436a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	3348      	adds	r3, #72	; 0x48
 8004378:	443b      	add	r3, r7
 800437a:	3b30      	subs	r3, #48	; 0x30
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3b01      	subs	r3, #1
 8004380:	f021 0210 	bic.w	r2, r1, #16
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4403      	add	r3, r0
 8004388:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800438a:	4907      	ldr	r1, [pc, #28]	; (80043a8 <HAL_OSPIM_Config+0x3b4>)
 800438c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	3348      	adds	r3, #72	; 0x48
 800439a:	443b      	add	r3, r7
 800439c:	3b2c      	subs	r3, #44	; 0x2c
 800439e:	e005      	b.n	80043ac <HAL_OSPIM_Config+0x3b8>
 80043a0:	a0001000 	.word	0xa0001000
 80043a4:	a0001400 	.word	0xa0001400
 80043a8:	50061c00 	.word	0x50061c00
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	48a6      	ldr	r0, [pc, #664]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 80043b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	3348      	adds	r3, #72	; 0x48
 80043c6:	443b      	add	r3, r7
 80043c8:	3b2c      	subs	r3, #44	; 0x2c
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4403      	add	r3, r0
 80043d6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80043d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	3348      	adds	r3, #72	; 0x48
 80043e6:	443b      	add	r3, r7
 80043e8:	3b28      	subs	r3, #40	; 0x28
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d023      	beq.n	8004438 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80043f0:	4997      	ldr	r1, [pc, #604]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 80043f2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	3348      	adds	r3, #72	; 0x48
 8004400:	443b      	add	r3, r7
 8004402:	3b28      	subs	r3, #40	; 0x28
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3b01      	subs	r3, #1
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	488f      	ldr	r0, [pc, #572]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 8004414:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	3348      	adds	r3, #72	; 0x48
 8004422:	443b      	add	r3, r7
 8004424:	3b28      	subs	r3, #40	; 0x28
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3b01      	subs	r3, #1
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4403      	add	r3, r0
 8004436:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004438:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	3348      	adds	r3, #72	; 0x48
 8004446:	443b      	add	r3, r7
 8004448:	3b24      	subs	r3, #36	; 0x24
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d023      	beq.n	8004498 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004450:	497f      	ldr	r1, [pc, #508]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 8004452:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	3348      	adds	r3, #72	; 0x48
 8004460:	443b      	add	r3, r7
 8004462:	3b24      	subs	r3, #36	; 0x24
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3b01      	subs	r3, #1
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	6859      	ldr	r1, [r3, #4]
 8004472:	4877      	ldr	r0, [pc, #476]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 8004474:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	3348      	adds	r3, #72	; 0x48
 8004482:	443b      	add	r3, r7
 8004484:	3b24      	subs	r3, #36	; 0x24
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3b01      	subs	r3, #1
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4403      	add	r3, r0
 8004496:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004498:	4a6d      	ldr	r2, [pc, #436]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	3b01      	subs	r3, #1
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ac:	025b      	lsls	r3, r3, #9
 80044ae:	431a      	orrs	r2, r3
 80044b0:	4967      	ldr	r1, [pc, #412]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80044c2:	4a63      	ldr	r2, [pc, #396]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f023 0203 	bic.w	r2, r3, #3
 80044d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	431a      	orrs	r2, r3
 80044da:	495d      	ldr	r1, [pc, #372]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d014      	beq.n	800451e <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80044f4:	4a56      	ldr	r2, [pc, #344]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004508:	015b      	lsls	r3, r3, #5
 800450a:	431a      	orrs	r2, r3
 800450c:	4950      	ldr	r1, [pc, #320]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	3b01      	subs	r3, #1
 8004514:	f042 0210 	orr.w	r2, r2, #16
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d019      	beq.n	800455e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800452a:	4a49      	ldr	r2, [pc, #292]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	3b01      	subs	r3, #1
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004542:	049b      	lsls	r3, r3, #18
 8004544:	431a      	orrs	r2, r3
 8004546:	4942      	ldr	r1, [pc, #264]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	3b01      	subs	r3, #1
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	605a      	str	r2, [r3, #4]
 800455c:	e01c      	b.n	8004598 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d018      	beq.n	8004598 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004566:	4a3a      	ldr	r2, [pc, #232]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	3b01      	subs	r3, #1
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800457c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800457e:	069b      	lsls	r3, r3, #26
 8004580:	431a      	orrs	r2, r3
 8004582:	4933      	ldr	r1, [pc, #204]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	3b01      	subs	r3, #1
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d019      	beq.n	80045d8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80045a4:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80045ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045bc:	049b      	lsls	r3, r3, #18
 80045be:	431a      	orrs	r2, r3
 80045c0:	4923      	ldr	r1, [pc, #140]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	e01c      	b.n	8004612 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d018      	beq.n	8004612 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80045e0:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80045f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f8:	069b      	lsls	r3, r3, #26
 80045fa:	431a      	orrs	r2, r3
 80045fc:	4914      	ldr	r1, [pc, #80]	; (8004650 <HAL_OSPIM_Config+0x65c>)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	3b01      	subs	r3, #1
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004612:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800461e:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <HAL_OSPIM_Config+0x660>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <HAL_OSPIM_Config+0x660>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800462a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_OSPIM_Config+0x664>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a07      	ldr	r2, [pc, #28]	; (8004658 <HAL_OSPIM_Config+0x664>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004642:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004646:	4618      	mov	r0, r3
 8004648:	3748      	adds	r7, #72	; 0x48
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	50061c00 	.word	0x50061c00
 8004654:	a0001000 	.word	0xa0001000
 8004658:	a0001400 	.word	0xa0001400

0800465c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800466c:	e01a      	b.n	80046a4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d016      	beq.n	80046a4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fc fbff 	bl	8000e78 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004698:	f043 0201 	orr.w	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e00e      	b.n	80046c2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a1a      	ldr	r2, [r3, #32]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bf14      	ite	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	2300      	moveq	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1d6      	bne.n	800466e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b089      	sub	sp, #36	; 0x24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046e8:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d114      	bne.n	800473a <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004718:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004722:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800472c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e013      	b.n	8004762 <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004742:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800474c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004756:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004760:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	431a      	orrs	r2, r3
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d012      	beq.n	800479e <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	4319      	orrs	r1, r3
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	430b      	orrs	r3, r1
 8004798:	431a      	orrs	r2, r3
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 021f 	bic.w	r2, r3, #31
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	431a      	orrs	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3a01      	subs	r2, #1
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8099 	beq.w	8004908 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d055      	beq.n	800488a <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01e      	beq.n	8004824 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b68      	ldr	r3, [pc, #416]	; (800498c <OSPI_ConfigCmd+0x2c0>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	68d1      	ldr	r1, [r2, #12]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	6952      	ldr	r2, [r2, #20]
 80047f6:	4311      	orrs	r1, r2
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	6912      	ldr	r2, [r2, #16]
 80047fc:	4311      	orrs	r1, r2
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	69d2      	ldr	r2, [r2, #28]
 8004802:	4311      	orrs	r1, r2
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004808:	4311      	orrs	r1, r2
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	6a12      	ldr	r2, [r2, #32]
 800480e:	4311      	orrs	r1, r2
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004814:	4311      	orrs	r1, r2
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800481a:	430a      	orrs	r2, r1
 800481c:	431a      	orrs	r2, r3
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e028      	b.n	8004876 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800482c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	68d1      	ldr	r1, [r2, #12]
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	6952      	ldr	r2, [r2, #20]
 8004838:	4311      	orrs	r1, r2
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	6912      	ldr	r2, [r2, #16]
 800483e:	4311      	orrs	r1, r2
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	69d2      	ldr	r2, [r2, #28]
 8004844:	4311      	orrs	r1, r2
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800484a:	4311      	orrs	r1, r2
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	6a12      	ldr	r2, [r2, #32]
 8004850:	430a      	orrs	r2, r1
 8004852:	431a      	orrs	r2, r3
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004860:	d109      	bne.n	8004876 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004866:	2b08      	cmp	r3, #8
 8004868:	d105      	bne.n	8004876 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	6992      	ldr	r2, [r2, #24]
 8004886:	649a      	str	r2, [r3, #72]	; 0x48
 8004888:	e078      	b.n	800497c <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	2b00      	cmp	r3, #0
 8004890:	d017      	beq.n	80048c2 <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800489a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	68d1      	ldr	r1, [r2, #12]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	6952      	ldr	r2, [r2, #20]
 80048a6:	4311      	orrs	r1, r2
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	6912      	ldr	r2, [r2, #16]
 80048ac:	4311      	orrs	r1, r2
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048b2:	4311      	orrs	r1, r2
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048b8:	430a      	orrs	r2, r1
 80048ba:	431a      	orrs	r2, r3
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	e01d      	b.n	80048fe <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68d9      	ldr	r1, [r3, #12]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	4319      	orrs	r1, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	430b      	orrs	r3, r1
 80048da:	431a      	orrs	r2, r3
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048e8:	d109      	bne.n	80048fe <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d105      	bne.n	80048fe <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e039      	b.n	800497c <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d030      	beq.n	8004972 <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	2b00      	cmp	r3, #0
 8004916:	d017      	beq.n	8004948 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004920:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	69d1      	ldr	r1, [r2, #28]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800492c:	4311      	orrs	r1, r2
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	6a12      	ldr	r2, [r2, #32]
 8004932:	4311      	orrs	r1, r2
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004938:	4311      	orrs	r1, r2
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800493e:	430a      	orrs	r2, r1
 8004940:	431a      	orrs	r2, r3
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e00e      	b.n	8004966 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	69d9      	ldr	r1, [r3, #28]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	4319      	orrs	r1, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	430b      	orrs	r3, r1
 8004960:	431a      	orrs	r2, r3
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	6992      	ldr	r2, [r2, #24]
 800496e:	649a      	str	r2, [r3, #72]	; 0x48
 8004970:	e004      	b.n	800497c <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2208      	movs	r2, #8
 800497a:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 800497c:	7ffb      	ldrb	r3, [r7, #31]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3724      	adds	r7, #36	; 0x24
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	f0ffc0c0 	.word	0xf0ffc0c0

08004990 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	6039      	str	r1, [r7, #0]
 800499a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <OSPIM_GetConfig+0x26>
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d802      	bhi.n	80049b6 <OSPIM_GetConfig+0x26>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	75fb      	strb	r3, [r7, #23]
 80049ba:	e08e      	b.n	8004ada <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2200      	movs	r2, #0
 80049c6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d101      	bne.n	80049e4 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80049e0:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <OSPIM_GetConfig+0x158>)
 80049e2:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e074      	b.n	8004ad4 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80049ea:	4a40      	ldr	r2, [pc, #256]	; (8004aec <OSPIM_GetConfig+0x15c>)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4053      	eors	r3, r2
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4053      	eors	r3, r2
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4053      	eors	r3, r2
 8004a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d103      	bne.n	8004a56 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d018      	beq.n	8004a92 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4053      	eors	r3, r2
 8004a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d111      	bne.n	8004a92 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	60da      	str	r2, [r3, #12]
 8004a84:	e005      	b.n	8004a92 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d018      	beq.n	8004ace <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4053      	eors	r3, r2
 8004aa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d111      	bne.n	8004ace <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d106      	bne.n	8004ac2 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	611a      	str	r2, [r3, #16]
 8004ac0:	e005      	b.n	8004ace <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d987      	bls.n	80049ea <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	04040222 	.word	0x04040222
 8004aec:	50061c00 	.word	0x50061c00

08004af0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004af4:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b00:	d102      	bne.n	8004b08 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b06:	e00b      	b.n	8004b20 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004b08:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b16:	d102      	bne.n	8004b1e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b1c:	e000      	b.n	8004b20 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004b1e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40007000 	.word	0x40007000

08004b30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d141      	bne.n	8004bc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b3e:	4b4b      	ldr	r3, [pc, #300]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4a:	d131      	bne.n	8004bb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b4c:	4b47      	ldr	r3, [pc, #284]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b52:	4a46      	ldr	r2, [pc, #280]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b5c:	4b43      	ldr	r3, [pc, #268]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b64:	4a41      	ldr	r2, [pc, #260]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004b6c:	4b40      	ldr	r3, [pc, #256]	; (8004c70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2232      	movs	r2, #50	; 0x32
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	4a3f      	ldr	r2, [pc, #252]	; (8004c74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	0c9b      	lsrs	r3, r3, #18
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b82:	e002      	b.n	8004b8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b8a:	4b38      	ldr	r3, [pc, #224]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b96:	d102      	bne.n	8004b9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f2      	bne.n	8004b84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b9e:	4b33      	ldr	r3, [pc, #204]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004baa:	d158      	bne.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e057      	b.n	8004c60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bb0:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb6:	4a2d      	ldr	r2, [pc, #180]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004bc0:	e04d      	b.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc8:	d141      	bne.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bca:	4b28      	ldr	r3, [pc, #160]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd6:	d131      	bne.n	8004c3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bd8:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bde:	4a23      	ldr	r2, [pc, #140]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004be8:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bf0:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2232      	movs	r2, #50	; 0x32
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	0c9b      	lsrs	r3, r3, #18
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c0e:	e002      	b.n	8004c16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c16:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c22:	d102      	bne.n	8004c2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f2      	bne.n	8004c10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c36:	d112      	bne.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e011      	b.n	8004c60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c42:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c4c:	e007      	b.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c56:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c5c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	40007000 	.word	0x40007000
 8004c70:	20015914 	.word	0x20015914
 8004c74:	431bde83 	.word	0x431bde83

08004c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f000 bc08 	b.w	800549c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c8c:	4b96      	ldr	r3, [pc, #600]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 030c 	and.w	r3, r3, #12
 8004c94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c96:	4b94      	ldr	r3, [pc, #592]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80e4 	beq.w	8004e76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x4c>
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2b0c      	cmp	r3, #12
 8004cb8:	f040 808b 	bne.w	8004dd2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	f040 8087 	bne.w	8004dd2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cc4:	4b88      	ldr	r3, [pc, #544]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_RCC_OscConfig+0x64>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e3df      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1a      	ldr	r2, [r3, #32]
 8004ce0:	4b81      	ldr	r3, [pc, #516]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x7e>
 8004cec:	4b7e      	ldr	r3, [pc, #504]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf4:	e005      	b.n	8004d02 <HAL_RCC_OscConfig+0x8a>
 8004cf6:	4b7c      	ldr	r3, [pc, #496]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d223      	bcs.n	8004d4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fdfe 	bl	800590c <RCC_SetFlashLatencyFromMSIRange>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e3c0      	b.n	800549c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d1a:	4b73      	ldr	r3, [pc, #460]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a72      	ldr	r2, [pc, #456]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d20:	f043 0308 	orr.w	r3, r3, #8
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b70      	ldr	r3, [pc, #448]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	496d      	ldr	r1, [pc, #436]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d38:	4b6b      	ldr	r3, [pc, #428]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	4968      	ldr	r1, [pc, #416]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
 8004d4c:	e025      	b.n	8004d9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d4e:	4b66      	ldr	r3, [pc, #408]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a65      	ldr	r2, [pc, #404]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d54:	f043 0308 	orr.w	r3, r3, #8
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	4b63      	ldr	r3, [pc, #396]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	4960      	ldr	r1, [pc, #384]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d6c:	4b5e      	ldr	r3, [pc, #376]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	495b      	ldr	r1, [pc, #364]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fdbe 	bl	800590c <RCC_SetFlashLatencyFromMSIRange>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e380      	b.n	800549c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d9a:	f000 fcc1 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	4b51      	ldr	r3, [pc, #324]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	4950      	ldr	r1, [pc, #320]	; (8004eec <HAL_RCC_OscConfig+0x274>)
 8004dac:	5ccb      	ldrb	r3, [r1, r3]
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	fa22 f303 	lsr.w	r3, r2, r3
 8004db6:	4a4e      	ldr	r2, [pc, #312]	; (8004ef0 <HAL_RCC_OscConfig+0x278>)
 8004db8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004dba:	4b4e      	ldr	r3, [pc, #312]	; (8004ef4 <HAL_RCC_OscConfig+0x27c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f006 ff12 	bl	800bbe8 <HAL_InitTick>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d052      	beq.n	8004e74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	e364      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d032      	beq.n	8004e40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004dda:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a42      	ldr	r2, [pc, #264]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004de6:	f7fc f847 	bl	8000e78 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dee:	f7fc f843 	bl	8000e78 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e34d      	b.n	800549c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e00:	4b39      	ldr	r3, [pc, #228]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e0c:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a35      	ldr	r2, [pc, #212]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e12:	f043 0308 	orr.w	r3, r3, #8
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	4930      	ldr	r1, [pc, #192]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	492b      	ldr	r1, [pc, #172]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
 8004e3e:	e01a      	b.n	8004e76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e40:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a28      	ldr	r2, [pc, #160]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e4c:	f7fc f814 	bl	8000e78 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e54:	f7fc f810 	bl	8000e78 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e31a      	b.n	800549c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e66:	4b20      	ldr	r3, [pc, #128]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x1dc>
 8004e72:	e000      	b.n	8004e76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d073      	beq.n	8004f6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_OscConfig+0x21c>
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b0c      	cmp	r3, #12
 8004e8c:	d10e      	bne.n	8004eac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d10b      	bne.n	8004eac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e94:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d063      	beq.n	8004f68 <HAL_RCC_OscConfig+0x2f0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d15f      	bne.n	8004f68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e2f7      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x24c>
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a0b      	ldr	r2, [pc, #44]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e025      	b.n	8004f10 <HAL_RCC_OscConfig+0x298>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ecc:	d114      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x280>
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a05      	ldr	r2, [pc, #20]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a02      	ldr	r2, [pc, #8]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e013      	b.n	8004f10 <HAL_RCC_OscConfig+0x298>
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	0800c990 	.word	0x0800c990
 8004ef0:	20015914 	.word	0x20015914
 8004ef4:	20000000 	.word	0x20000000
 8004ef8:	4ba0      	ldr	r3, [pc, #640]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a9f      	ldr	r2, [pc, #636]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b9d      	ldr	r3, [pc, #628]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a9c      	ldr	r2, [pc, #624]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d013      	beq.n	8004f40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fb ffae 	bl	8000e78 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fb ffaa 	bl	8000e78 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	; 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e2b4      	b.n	800549c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f32:	4b92      	ldr	r3, [pc, #584]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x2a8>
 8004f3e:	e014      	b.n	8004f6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fb ff9a 	bl	8000e78 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fb ff96 	bl	8000e78 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e2a0      	b.n	800549c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f5a:	4b88      	ldr	r3, [pc, #544]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x2d0>
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d060      	beq.n	8005038 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d005      	beq.n	8004f88 <HAL_RCC_OscConfig+0x310>
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	d119      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d116      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f88:	4b7c      	ldr	r3, [pc, #496]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x328>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e27d      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa0:	4b76      	ldr	r3, [pc, #472]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	061b      	lsls	r3, r3, #24
 8004fae:	4973      	ldr	r1, [pc, #460]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fb4:	e040      	b.n	8005038 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d023      	beq.n	8005006 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fbe:	4b6f      	ldr	r3, [pc, #444]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6e      	ldr	r2, [pc, #440]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fb ff55 	bl	8000e78 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd2:	f7fb ff51 	bl	8000e78 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e25b      	b.n	800549c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe4:	4b65      	ldr	r3, [pc, #404]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff0:	4b62      	ldr	r3, [pc, #392]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	061b      	lsls	r3, r3, #24
 8004ffe:	495f      	ldr	r1, [pc, #380]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]
 8005004:	e018      	b.n	8005038 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005006:	4b5d      	ldr	r3, [pc, #372]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a5c      	ldr	r2, [pc, #368]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800500c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005012:	f7fb ff31 	bl	8000e78 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501a:	f7fb ff2d 	bl	8000e78 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e237      	b.n	800549c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800502c:	4b53      	ldr	r3, [pc, #332]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f0      	bne.n	800501a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d03c      	beq.n	80050be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01c      	beq.n	8005086 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800504c:	4b4b      	ldr	r3, [pc, #300]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800504e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005052:	4a4a      	ldr	r2, [pc, #296]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505c:	f7fb ff0c 	bl	8000e78 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005064:	f7fb ff08 	bl	8000e78 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e212      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005076:	4b41      	ldr	r3, [pc, #260]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ef      	beq.n	8005064 <HAL_RCC_OscConfig+0x3ec>
 8005084:	e01b      	b.n	80050be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005086:	4b3d      	ldr	r3, [pc, #244]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508c:	4a3b      	ldr	r2, [pc, #236]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7fb feef 	bl	8000e78 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800509e:	f7fb feeb 	bl	8000e78 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e1f5      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <HAL_RCC_OscConfig+0x504>)
 80050b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ef      	bne.n	800509e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80a6 	beq.w	8005218 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050cc:	2300      	movs	r3, #0
 80050ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80050d0:	4b2a      	ldr	r3, [pc, #168]	; (800517c <HAL_RCC_OscConfig+0x504>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050dc:	4b27      	ldr	r3, [pc, #156]	; (800517c <HAL_RCC_OscConfig+0x504>)
 80050de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e0:	4a26      	ldr	r2, [pc, #152]	; (800517c <HAL_RCC_OscConfig+0x504>)
 80050e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e6:	6593      	str	r3, [r2, #88]	; 0x58
 80050e8:	4b24      	ldr	r3, [pc, #144]	; (800517c <HAL_RCC_OscConfig+0x504>)
 80050ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f4:	2301      	movs	r3, #1
 80050f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050f8:	4b21      	ldr	r3, [pc, #132]	; (8005180 <HAL_RCC_OscConfig+0x508>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d118      	bne.n	8005136 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005104:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <HAL_RCC_OscConfig+0x508>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <HAL_RCC_OscConfig+0x508>)
 800510a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005110:	f7fb feb2 	bl	8000e78 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005118:	f7fb feae 	bl	8000e78 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e1b8      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800512a:	4b15      	ldr	r3, [pc, #84]	; (8005180 <HAL_RCC_OscConfig+0x508>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d108      	bne.n	8005150 <HAL_RCC_OscConfig+0x4d8>
 800513e:	4b0f      	ldr	r3, [pc, #60]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005144:	4a0d      	ldr	r2, [pc, #52]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800514e:	e029      	b.n	80051a4 <HAL_RCC_OscConfig+0x52c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b05      	cmp	r3, #5
 8005156:	d115      	bne.n	8005184 <HAL_RCC_OscConfig+0x50c>
 8005158:	4b08      	ldr	r3, [pc, #32]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800515a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515e:	4a07      	ldr	r2, [pc, #28]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005160:	f043 0304 	orr.w	r3, r3, #4
 8005164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	4a03      	ldr	r2, [pc, #12]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005178:	e014      	b.n	80051a4 <HAL_RCC_OscConfig+0x52c>
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000
 8005180:	40007000 	.word	0x40007000
 8005184:	4b9d      	ldr	r3, [pc, #628]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	4a9c      	ldr	r2, [pc, #624]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005194:	4b99      	ldr	r3, [pc, #612]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	4a98      	ldr	r2, [pc, #608]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d016      	beq.n	80051da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fb fe64 	bl	8000e78 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b2:	e00a      	b.n	80051ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b4:	f7fb fe60 	bl	8000e78 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e168      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ca:	4b8c      	ldr	r3, [pc, #560]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0ed      	beq.n	80051b4 <HAL_RCC_OscConfig+0x53c>
 80051d8:	e015      	b.n	8005206 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fb fe4d 	bl	8000e78 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fb fe49 	bl	8000e78 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e151      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051f8:	4b80      	ldr	r3, [pc, #512]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ed      	bne.n	80051e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005206:	7ffb      	ldrb	r3, [r7, #31]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d105      	bne.n	8005218 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520c:	4b7b      	ldr	r3, [pc, #492]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 800520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005210:	4a7a      	ldr	r2, [pc, #488]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005216:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d03c      	beq.n	800529e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01c      	beq.n	8005266 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800522c:	4b73      	ldr	r3, [pc, #460]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 800522e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005232:	4a72      	ldr	r2, [pc, #456]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7fb fe1c 	bl	8000e78 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005244:	f7fb fe18 	bl	8000e78 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e122      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005256:	4b69      	ldr	r3, [pc, #420]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0ef      	beq.n	8005244 <HAL_RCC_OscConfig+0x5cc>
 8005264:	e01b      	b.n	800529e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005266:	4b65      	ldr	r3, [pc, #404]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800526c:	4a63      	ldr	r2, [pc, #396]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005276:	f7fb fdff 	bl	8000e78 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800527e:	f7fb fdfb 	bl	8000e78 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e105      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005290:	4b5a      	ldr	r3, [pc, #360]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1ef      	bne.n	800527e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80f9 	beq.w	800549a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	f040 80cf 	bne.w	8005450 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80052b2:	4b52      	ldr	r3, [pc, #328]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 0203 	and.w	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d12c      	bne.n	8005320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	3b01      	subs	r3, #1
 80052d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d123      	bne.n	8005320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d11b      	bne.n	8005320 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d113      	bne.n	8005320 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	085b      	lsrs	r3, r3, #1
 8005304:	3b01      	subs	r3, #1
 8005306:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005308:	429a      	cmp	r2, r3
 800530a:	d109      	bne.n	8005320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	3b01      	subs	r3, #1
 800531a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800531c:	429a      	cmp	r2, r3
 800531e:	d071      	beq.n	8005404 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b0c      	cmp	r3, #12
 8005324:	d068      	beq.n	80053f8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005326:	4b35      	ldr	r3, [pc, #212]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d105      	bne.n	800533e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005332:	4b32      	ldr	r3, [pc, #200]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e0ac      	b.n	800549c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005342:	4b2e      	ldr	r3, [pc, #184]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2d      	ldr	r2, [pc, #180]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800534c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800534e:	f7fb fd93 	bl	8000e78 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005356:	f7fb fd8f 	bl	8000e78 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e099      	b.n	800549c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005368:	4b24      	ldr	r3, [pc, #144]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f0      	bne.n	8005356 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005374:	4b21      	ldr	r3, [pc, #132]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	4b21      	ldr	r3, [pc, #132]	; (8005400 <HAL_RCC_OscConfig+0x788>)
 800537a:	4013      	ands	r3, r2
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005384:	3a01      	subs	r2, #1
 8005386:	0112      	lsls	r2, r2, #4
 8005388:	4311      	orrs	r1, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800538e:	0212      	lsls	r2, r2, #8
 8005390:	4311      	orrs	r1, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005396:	0852      	lsrs	r2, r2, #1
 8005398:	3a01      	subs	r2, #1
 800539a:	0552      	lsls	r2, r2, #21
 800539c:	4311      	orrs	r1, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053a2:	0852      	lsrs	r2, r2, #1
 80053a4:	3a01      	subs	r2, #1
 80053a6:	0652      	lsls	r2, r2, #25
 80053a8:	4311      	orrs	r1, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053ae:	06d2      	lsls	r2, r2, #27
 80053b0:	430a      	orrs	r2, r1
 80053b2:	4912      	ldr	r1, [pc, #72]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80053b8:	4b10      	ldr	r3, [pc, #64]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a0f      	ldr	r2, [pc, #60]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 80053be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4a0c      	ldr	r2, [pc, #48]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 80053ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053d0:	f7fb fd52 	bl	8000e78 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fb fd4e 	bl	8000e78 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e058      	b.n	800549c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ea:	4b04      	ldr	r3, [pc, #16]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053f6:	e050      	b.n	800549a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e04f      	b.n	800549c <HAL_RCC_OscConfig+0x824>
 80053fc:	40021000 	.word	0x40021000
 8005400:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005404:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <HAL_RCC_OscConfig+0x82c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d144      	bne.n	800549a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005410:	4b24      	ldr	r3, [pc, #144]	; (80054a4 <HAL_RCC_OscConfig+0x82c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a23      	ldr	r2, [pc, #140]	; (80054a4 <HAL_RCC_OscConfig+0x82c>)
 8005416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800541a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800541c:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <HAL_RCC_OscConfig+0x82c>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a20      	ldr	r2, [pc, #128]	; (80054a4 <HAL_RCC_OscConfig+0x82c>)
 8005422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005426:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005428:	f7fb fd26 	bl	8000e78 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005430:	f7fb fd22 	bl	8000e78 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e02c      	b.n	800549c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005442:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <HAL_RCC_OscConfig+0x82c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0x7b8>
 800544e:	e024      	b.n	800549a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2b0c      	cmp	r3, #12
 8005454:	d01f      	beq.n	8005496 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005456:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <HAL_RCC_OscConfig+0x82c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a12      	ldr	r2, [pc, #72]	; (80054a4 <HAL_RCC_OscConfig+0x82c>)
 800545c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005462:	f7fb fd09 	bl	8000e78 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800546a:	f7fb fd05 	bl	8000e78 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e00f      	b.n	800549c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <HAL_RCC_OscConfig+0x82c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1f0      	bne.n	800546a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005488:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <HAL_RCC_OscConfig+0x82c>)
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	4905      	ldr	r1, [pc, #20]	; (80054a4 <HAL_RCC_OscConfig+0x82c>)
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <HAL_RCC_OscConfig+0x830>)
 8005490:	4013      	ands	r3, r2
 8005492:	60cb      	str	r3, [r1, #12]
 8005494:	e001      	b.n	800549a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40021000 	.word	0x40021000
 80054a8:	feeefffc 	.word	0xfeeefffc

080054ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e11d      	b.n	8005700 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054c4:	4b90      	ldr	r3, [pc, #576]	; (8005708 <HAL_RCC_ClockConfig+0x25c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d910      	bls.n	80054f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d2:	4b8d      	ldr	r3, [pc, #564]	; (8005708 <HAL_RCC_ClockConfig+0x25c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 020f 	bic.w	r2, r3, #15
 80054da:	498b      	ldr	r1, [pc, #556]	; (8005708 <HAL_RCC_ClockConfig+0x25c>)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	4313      	orrs	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e2:	4b89      	ldr	r3, [pc, #548]	; (8005708 <HAL_RCC_ClockConfig+0x25c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e105      	b.n	8005700 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	4b81      	ldr	r3, [pc, #516]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800550c:	429a      	cmp	r2, r3
 800550e:	d908      	bls.n	8005522 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005510:	4b7e      	ldr	r3, [pc, #504]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	497b      	ldr	r1, [pc, #492]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 800551e:	4313      	orrs	r3, r2
 8005520:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d079      	beq.n	8005622 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b03      	cmp	r3, #3
 8005534:	d11e      	bne.n	8005574 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005536:	4b75      	ldr	r3, [pc, #468]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0dc      	b.n	8005700 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005546:	f000 fa3b 	bl	80059c0 <RCC_GetSysClockFreqFromPLLSource>
 800554a:	4603      	mov	r3, r0
 800554c:	4a70      	ldr	r2, [pc, #448]	; (8005710 <HAL_RCC_ClockConfig+0x264>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d946      	bls.n	80055e0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005552:	4b6e      	ldr	r3, [pc, #440]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d140      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800555e:	4b6b      	ldr	r3, [pc, #428]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005566:	4a69      	ldr	r2, [pc, #420]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 8005568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	e035      	b.n	80055e0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d107      	bne.n	800558c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800557c:	4b63      	ldr	r3, [pc, #396]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d115      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0b9      	b.n	8005700 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d107      	bne.n	80055a4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005594:	4b5d      	ldr	r3, [pc, #372]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0ad      	b.n	8005700 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055a4:	4b59      	ldr	r3, [pc, #356]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0a5      	b.n	8005700 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80055b4:	f000 f8b4 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 80055b8:	4603      	mov	r3, r0
 80055ba:	4a55      	ldr	r2, [pc, #340]	; (8005710 <HAL_RCC_ClockConfig+0x264>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d90f      	bls.n	80055e0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80055c0:	4b52      	ldr	r3, [pc, #328]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055cc:	4b4f      	ldr	r3, [pc, #316]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055d4:	4a4d      	ldr	r2, [pc, #308]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 80055d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055da:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055e0:	4b4a      	ldr	r3, [pc, #296]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 0203 	bic.w	r2, r3, #3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	4947      	ldr	r1, [pc, #284]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f2:	f7fb fc41 	bl	8000e78 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f8:	e00a      	b.n	8005610 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055fa:	f7fb fc3d 	bl	8000e78 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f241 3288 	movw	r2, #5000	; 0x1388
 8005608:	4293      	cmp	r3, r2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e077      	b.n	8005700 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005610:	4b3e      	ldr	r3, [pc, #248]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 020c 	and.w	r2, r3, #12
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	429a      	cmp	r2, r3
 8005620:	d1eb      	bne.n	80055fa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b80      	cmp	r3, #128	; 0x80
 8005626:	d105      	bne.n	8005634 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005628:	4b38      	ldr	r3, [pc, #224]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a37      	ldr	r2, [pc, #220]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 800562e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005632:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d010      	beq.n	8005662 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	4b31      	ldr	r3, [pc, #196]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800564c:	429a      	cmp	r2, r3
 800564e:	d208      	bcs.n	8005662 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005650:	4b2e      	ldr	r3, [pc, #184]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	492b      	ldr	r1, [pc, #172]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 800565e:	4313      	orrs	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005662:	4b29      	ldr	r3, [pc, #164]	; (8005708 <HAL_RCC_ClockConfig+0x25c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d210      	bcs.n	8005692 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005670:	4b25      	ldr	r3, [pc, #148]	; (8005708 <HAL_RCC_ClockConfig+0x25c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f023 020f 	bic.w	r2, r3, #15
 8005678:	4923      	ldr	r1, [pc, #140]	; (8005708 <HAL_RCC_ClockConfig+0x25c>)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	4313      	orrs	r3, r2
 800567e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005680:	4b21      	ldr	r3, [pc, #132]	; (8005708 <HAL_RCC_ClockConfig+0x25c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d001      	beq.n	8005692 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e036      	b.n	8005700 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800569e:	4b1b      	ldr	r3, [pc, #108]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	4918      	ldr	r1, [pc, #96]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d009      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056bc:	4b13      	ldr	r3, [pc, #76]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4910      	ldr	r1, [pc, #64]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056d0:	f000 f826 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 80056d4:	4602      	mov	r2, r0
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <HAL_RCC_ClockConfig+0x260>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	490c      	ldr	r1, [pc, #48]	; (8005714 <HAL_RCC_ClockConfig+0x268>)
 80056e2:	5ccb      	ldrb	r3, [r1, r3]
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ec:	4a0a      	ldr	r2, [pc, #40]	; (8005718 <HAL_RCC_ClockConfig+0x26c>)
 80056ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <HAL_RCC_ClockConfig+0x270>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f006 fa77 	bl	800bbe8 <HAL_InitTick>
 80056fa:	4603      	mov	r3, r0
 80056fc:	73fb      	strb	r3, [r7, #15]

  return status;
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40022000 	.word	0x40022000
 800570c:	40021000 	.word	0x40021000
 8005710:	04c4b400 	.word	0x04c4b400
 8005714:	0800c990 	.word	0x0800c990
 8005718:	20015914 	.word	0x20015914
 800571c:	20000000 	.word	0x20000000

08005720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005720:	b480      	push	{r7}
 8005722:	b089      	sub	sp, #36	; 0x24
 8005724:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	61fb      	str	r3, [r7, #28]
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800572e:	4b3e      	ldr	r3, [pc, #248]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005738:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_GetSysClockFreq+0x34>
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b0c      	cmp	r3, #12
 800574c:	d121      	bne.n	8005792 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d11e      	bne.n	8005792 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005754:	4b34      	ldr	r3, [pc, #208]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d107      	bne.n	8005770 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005760:	4b31      	ldr	r3, [pc, #196]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 8005762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005766:	0a1b      	lsrs	r3, r3, #8
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	e005      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005770:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800577c:	4a2b      	ldr	r2, [pc, #172]	; (800582c <HAL_RCC_GetSysClockFreq+0x10c>)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005784:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10d      	bne.n	80057a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005790:	e00a      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d102      	bne.n	800579e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005798:	4b25      	ldr	r3, [pc, #148]	; (8005830 <HAL_RCC_GetSysClockFreq+0x110>)
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	e004      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d101      	bne.n	80057a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057a4:	4b23      	ldr	r3, [pc, #140]	; (8005834 <HAL_RCC_GetSysClockFreq+0x114>)
 80057a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	d134      	bne.n	8005818 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057ae:	4b1e      	ldr	r3, [pc, #120]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d003      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0xac>
 80057c4:	e005      	b.n	80057d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057c6:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <HAL_RCC_GetSysClockFreq+0x110>)
 80057c8:	617b      	str	r3, [r7, #20]
      break;
 80057ca:	e005      	b.n	80057d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057cc:	4b19      	ldr	r3, [pc, #100]	; (8005834 <HAL_RCC_GetSysClockFreq+0x114>)
 80057ce:	617b      	str	r3, [r7, #20]
      break;
 80057d0:	e002      	b.n	80057d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	617b      	str	r3, [r7, #20]
      break;
 80057d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057d8:	4b13      	ldr	r3, [pc, #76]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	3301      	adds	r3, #1
 80057e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	0a1b      	lsrs	r3, r3, #8
 80057ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	fb03 f202 	mul.w	r2, r3, r2
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	0e5b      	lsrs	r3, r3, #25
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	3301      	adds	r3, #1
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	fbb2 f3f3 	udiv	r3, r2, r3
 8005816:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005818:	69bb      	ldr	r3, [r7, #24]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3724      	adds	r7, #36	; 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40021000 	.word	0x40021000
 800582c:	0800c9a8 	.word	0x0800c9a8
 8005830:	00f42400 	.word	0x00f42400
 8005834:	007a1200 	.word	0x007a1200

08005838 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <HAL_RCC_GetHCLKFreq+0x14>)
 800583e:	681b      	ldr	r3, [r3, #0]
}
 8005840:	4618      	mov	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20015914 	.word	0x20015914

08005850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005854:	f7ff fff0 	bl	8005838 <HAL_RCC_GetHCLKFreq>
 8005858:	4602      	mov	r2, r0
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	0a1b      	lsrs	r3, r3, #8
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	4904      	ldr	r1, [pc, #16]	; (8005878 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005866:	5ccb      	ldrb	r3, [r1, r3]
 8005868:	f003 031f 	and.w	r3, r3, #31
 800586c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005870:	4618      	mov	r0, r3
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40021000 	.word	0x40021000
 8005878:	0800c9a0 	.word	0x0800c9a0

0800587c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005880:	f7ff ffda 	bl	8005838 <HAL_RCC_GetHCLKFreq>
 8005884:	4602      	mov	r2, r0
 8005886:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	0adb      	lsrs	r3, r3, #11
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	4904      	ldr	r1, [pc, #16]	; (80058a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005892:	5ccb      	ldrb	r3, [r1, r3]
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40021000 	.word	0x40021000
 80058a4:	0800c9a0 	.word	0x0800c9a0

080058a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	220f      	movs	r2, #15
 80058b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80058b8:	4b12      	ldr	r3, [pc, #72]	; (8005904 <HAL_RCC_GetClockConfig+0x5c>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 0203 	and.w	r2, r3, #3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80058c4:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <HAL_RCC_GetClockConfig+0x5c>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80058d0:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <HAL_RCC_GetClockConfig+0x5c>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80058dc:	4b09      	ldr	r3, [pc, #36]	; (8005904 <HAL_RCC_GetClockConfig+0x5c>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	08db      	lsrs	r3, r3, #3
 80058e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80058ea:	4b07      	ldr	r3, [pc, #28]	; (8005908 <HAL_RCC_GetClockConfig+0x60>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 020f 	and.w	r2, r3, #15
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	601a      	str	r2, [r3, #0]
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40021000 	.word	0x40021000
 8005908:	40022000 	.word	0x40022000

0800590c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005918:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800591a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005924:	f7ff f8e4 	bl	8004af0 <HAL_PWREx_GetVoltageRange>
 8005928:	6178      	str	r0, [r7, #20]
 800592a:	e014      	b.n	8005956 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800592c:	4b22      	ldr	r3, [pc, #136]	; (80059b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800592e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005930:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005936:	6593      	str	r3, [r2, #88]	; 0x58
 8005938:	4b1f      	ldr	r3, [pc, #124]	; (80059b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800593a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005944:	f7ff f8d4 	bl	8004af0 <HAL_PWREx_GetVoltageRange>
 8005948:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800594a:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594e:	4a1a      	ldr	r2, [pc, #104]	; (80059b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005954:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800595c:	d10b      	bne.n	8005976 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b80      	cmp	r3, #128	; 0x80
 8005962:	d913      	bls.n	800598c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2ba0      	cmp	r3, #160	; 0xa0
 8005968:	d902      	bls.n	8005970 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800596a:	2302      	movs	r3, #2
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	e00d      	b.n	800598c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005970:	2301      	movs	r3, #1
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	e00a      	b.n	800598c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b7f      	cmp	r3, #127	; 0x7f
 800597a:	d902      	bls.n	8005982 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800597c:	2302      	movs	r3, #2
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	e004      	b.n	800598c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b70      	cmp	r3, #112	; 0x70
 8005986:	d101      	bne.n	800598c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005988:	2301      	movs	r3, #1
 800598a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f023 020f 	bic.w	r2, r3, #15
 8005994:	4909      	ldr	r1, [pc, #36]	; (80059bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800599c:	4b07      	ldr	r3, [pc, #28]	; (80059bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d001      	beq.n	80059ae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40022000 	.word	0x40022000

080059c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059c6:	4b2d      	ldr	r3, [pc, #180]	; (8005a7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d00b      	beq.n	80059ee <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d825      	bhi.n	8005a28 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d008      	beq.n	80059f4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d11f      	bne.n	8005a28 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80059e8:	4b25      	ldr	r3, [pc, #148]	; (8005a80 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80059ea:	613b      	str	r3, [r7, #16]
    break;
 80059ec:	e01f      	b.n	8005a2e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80059ee:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80059f0:	613b      	str	r3, [r7, #16]
    break;
 80059f2:	e01c      	b.n	8005a2e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059f4:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d107      	bne.n	8005a10 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a00:	4b1e      	ldr	r3, [pc, #120]	; (8005a7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	e005      	b.n	8005a1c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a10:	4b1a      	ldr	r3, [pc, #104]	; (8005a7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005a1c:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a24:	613b      	str	r3, [r7, #16]
    break;
 8005a26:	e002      	b.n	8005a2e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	613b      	str	r3, [r7, #16]
    break;
 8005a2c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	3301      	adds	r3, #1
 8005a3a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a3c:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	0a1b      	lsrs	r3, r3, #8
 8005a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	fb03 f202 	mul.w	r2, r3, r2
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a52:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a54:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	0e5b      	lsrs	r3, r3, #25
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005a6e:	683b      	ldr	r3, [r7, #0]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	00f42400 	.word	0x00f42400
 8005a84:	007a1200 	.word	0x007a1200
 8005a88:	0800c9a8 	.word	0x0800c9a8

08005a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a94:	2300      	movs	r3, #0
 8005a96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a98:	2300      	movs	r3, #0
 8005a9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d040      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aac:	2b80      	cmp	r3, #128	; 0x80
 8005aae:	d02a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ab0:	2b80      	cmp	r3, #128	; 0x80
 8005ab2:	d825      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ab4:	2b60      	cmp	r3, #96	; 0x60
 8005ab6:	d026      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ab8:	2b60      	cmp	r3, #96	; 0x60
 8005aba:	d821      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005abc:	2b40      	cmp	r3, #64	; 0x40
 8005abe:	d006      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d81d      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d010      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005acc:	e018      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ace:	4b89      	ldr	r3, [pc, #548]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	4a88      	ldr	r2, [pc, #544]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ada:	e015      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fb02 	bl	80060ec <RCCEx_PLLSAI1_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aec:	e00c      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3320      	adds	r3, #32
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fbed 	bl	80062d4 <RCCEx_PLLSAI2_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005afe:	e003      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	74fb      	strb	r3, [r7, #19]
      break;
 8005b04:	e000      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10b      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b0e:	4b79      	ldr	r3, [pc, #484]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b14:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b1c:	4975      	ldr	r1, [pc, #468]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005b24:	e001      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b26:	7cfb      	ldrb	r3, [r7, #19]
 8005b28:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d047      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3e:	d030      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b44:	d82a      	bhi.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4a:	d02a      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b50:	d824      	bhi.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b56:	d008      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b5c:	d81e      	bhi.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b66:	d010      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b68:	e018      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b6a:	4b62      	ldr	r3, [pc, #392]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	4a61      	ldr	r2, [pc, #388]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b74:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b76:	e015      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fab4 	bl	80060ec <RCCEx_PLLSAI1_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b88:	e00c      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3320      	adds	r3, #32
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fb9f 	bl	80062d4 <RCCEx_PLLSAI2_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b9a:	e003      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	74fb      	strb	r3, [r7, #19]
      break;
 8005ba0:	e000      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005baa:	4b52      	ldr	r3, [pc, #328]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	494e      	ldr	r1, [pc, #312]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005bc0:	e001      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc2:	7cfb      	ldrb	r3, [r7, #19]
 8005bc4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 809f 	beq.w	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bd8:	4b46      	ldr	r3, [pc, #280]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005be8:	2300      	movs	r3, #0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00d      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bee:	4b41      	ldr	r3, [pc, #260]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf2:	4a40      	ldr	r2, [pc, #256]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8005bfa:	4b3e      	ldr	r3, [pc, #248]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c02:	60bb      	str	r3, [r7, #8]
 8005c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c06:	2301      	movs	r3, #1
 8005c08:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c0a:	4b3b      	ldr	r3, [pc, #236]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a3a      	ldr	r2, [pc, #232]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c16:	f7fb f92f 	bl	8000e78 <HAL_GetTick>
 8005c1a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c1c:	e009      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c1e:	f7fb f92b 	bl	8000e78 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d902      	bls.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	74fb      	strb	r3, [r7, #19]
        break;
 8005c30:	e005      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c32:	4b31      	ldr	r3, [pc, #196]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0ef      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005c3e:	7cfb      	ldrb	r3, [r7, #19]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d15b      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c44:	4b2b      	ldr	r3, [pc, #172]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d01f      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d019      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c62:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c6e:	4b21      	ldr	r3, [pc, #132]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c74:	4a1f      	ldr	r2, [pc, #124]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c7e:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c8e:	4a19      	ldr	r2, [pc, #100]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d016      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca0:	f7fb f8ea 	bl	8000e78 <HAL_GetTick>
 8005ca4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca8:	f7fb f8e6 	bl	8000e78 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d902      	bls.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	74fb      	strb	r3, [r7, #19]
            break;
 8005cbe:	e006      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0ec      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005cce:	7cfb      	ldrb	r3, [r7, #19]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10c      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cd4:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce4:	4903      	ldr	r1, [pc, #12]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cec:	e008      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cee:	7cfb      	ldrb	r3, [r7, #19]
 8005cf0:	74bb      	strb	r3, [r7, #18]
 8005cf2:	e005      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfc:	7cfb      	ldrb	r3, [r7, #19]
 8005cfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d00:	7c7b      	ldrb	r3, [r7, #17]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d105      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d06:	4ba0      	ldr	r3, [pc, #640]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0a:	4a9f      	ldr	r2, [pc, #636]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d1e:	4b9a      	ldr	r3, [pc, #616]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d24:	f023 0203 	bic.w	r2, r3, #3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2c:	4996      	ldr	r1, [pc, #600]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d40:	4b91      	ldr	r3, [pc, #580]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d46:	f023 020c 	bic.w	r2, r3, #12
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	498e      	ldr	r1, [pc, #568]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d62:	4b89      	ldr	r3, [pc, #548]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d70:	4985      	ldr	r1, [pc, #532]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0308 	and.w	r3, r3, #8
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d84:	4b80      	ldr	r3, [pc, #512]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d92:	497d      	ldr	r1, [pc, #500]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005da6:	4b78      	ldr	r3, [pc, #480]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db4:	4974      	ldr	r1, [pc, #464]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dc8:	4b6f      	ldr	r3, [pc, #444]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd6:	496c      	ldr	r1, [pc, #432]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dea:	4b67      	ldr	r3, [pc, #412]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005df8:	4963      	ldr	r1, [pc, #396]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e0c:	4b5e      	ldr	r3, [pc, #376]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e1a:	495b      	ldr	r1, [pc, #364]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e2e:	4b56      	ldr	r3, [pc, #344]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3c:	4952      	ldr	r1, [pc, #328]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e50:	4b4d      	ldr	r3, [pc, #308]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5e:	494a      	ldr	r1, [pc, #296]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e72:	4b45      	ldr	r3, [pc, #276]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e80:	4941      	ldr	r1, [pc, #260]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e94:	4b3c      	ldr	r3, [pc, #240]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e9a:	f023 0203 	bic.w	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea2:	4939      	ldr	r1, [pc, #228]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d028      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005eb6:	4b34      	ldr	r3, [pc, #208]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec4:	4930      	ldr	r1, [pc, #192]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed4:	d106      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed6:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	4a2b      	ldr	r2, [pc, #172]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee0:	60d3      	str	r3, [r2, #12]
 8005ee2:	e011      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eec:	d10c      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f8f9 	bl	80060ec <RCCEx_PLLSAI1_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005efe:	7cfb      	ldrb	r3, [r7, #19]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005f04:	7cfb      	ldrb	r3, [r7, #19]
 8005f06:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d04d      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f1c:	d108      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f24:	4a18      	ldr	r2, [pc, #96]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005f2e:	e012      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005f30:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f36:	4a14      	ldr	r2, [pc, #80]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f4e:	490e      	ldr	r1, [pc, #56]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f5e:	d106      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f60:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4a08      	ldr	r2, [pc, #32]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f6a:	60d3      	str	r3, [r2, #12]
 8005f6c:	e020      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f76:	d109      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f78:	4b03      	ldr	r3, [pc, #12]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4a02      	ldr	r2, [pc, #8]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f82:	60d3      	str	r3, [r2, #12]
 8005f84:	e014      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f94:	d10c      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 f8a5 	bl	80060ec <RCCEx_PLLSAI1_Config>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fa6:	7cfb      	ldrb	r3, [r7, #19]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005fac:	7cfb      	ldrb	r3, [r7, #19]
 8005fae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d028      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fbc:	4b4a      	ldr	r3, [pc, #296]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fca:	4947      	ldr	r1, [pc, #284]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fda:	d106      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fdc:	4b42      	ldr	r3, [pc, #264]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a41      	ldr	r2, [pc, #260]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fe6:	60d3      	str	r3, [r2, #12]
 8005fe8:	e011      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ff2:	d10c      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 f876 	bl	80060ec <RCCEx_PLLSAI1_Config>
 8006000:	4603      	mov	r3, r0
 8006002:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006004:	7cfb      	ldrb	r3, [r7, #19]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800600a:	7cfb      	ldrb	r3, [r7, #19]
 800600c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01e      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800601a:	4b33      	ldr	r3, [pc, #204]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800601c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006020:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800602a:	492f      	ldr	r1, [pc, #188]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800603c:	d10c      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3304      	adds	r3, #4
 8006042:	2102      	movs	r1, #2
 8006044:	4618      	mov	r0, r3
 8006046:	f000 f851 	bl	80060ec <RCCEx_PLLSAI1_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800604e:	7cfb      	ldrb	r3, [r7, #19]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006054:	7cfb      	ldrb	r3, [r7, #19]
 8006056:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006064:	4b20      	ldr	r3, [pc, #128]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800606a:	f023 0204 	bic.w	r2, r3, #4
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006074:	491c      	ldr	r1, [pc, #112]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006088:	4b17      	ldr	r3, [pc, #92]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800608a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800608e:	f023 0218 	bic.w	r2, r3, #24
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	4913      	ldr	r1, [pc, #76]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d017      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80060ac:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060bc:	490a      	ldr	r1, [pc, #40]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ce:	d105      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	4a04      	ldr	r2, [pc, #16]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80060dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	40021000 	.word	0x40021000

080060ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060fa:	4b72      	ldr	r3, [pc, #456]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00e      	beq.n	8006124 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006106:	4b6f      	ldr	r3, [pc, #444]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f003 0203 	and.w	r2, r3, #3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d103      	bne.n	800611e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
       ||
 800611a:	2b00      	cmp	r3, #0
 800611c:	d142      	bne.n	80061a4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	73fb      	strb	r3, [r7, #15]
 8006122:	e03f      	b.n	80061a4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d018      	beq.n	800615e <RCCEx_PLLSAI1_Config+0x72>
 800612c:	2b03      	cmp	r3, #3
 800612e:	d825      	bhi.n	800617c <RCCEx_PLLSAI1_Config+0x90>
 8006130:	2b01      	cmp	r3, #1
 8006132:	d002      	beq.n	800613a <RCCEx_PLLSAI1_Config+0x4e>
 8006134:	2b02      	cmp	r3, #2
 8006136:	d009      	beq.n	800614c <RCCEx_PLLSAI1_Config+0x60>
 8006138:	e020      	b.n	800617c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800613a:	4b62      	ldr	r3, [pc, #392]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11d      	bne.n	8006182 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800614a:	e01a      	b.n	8006182 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800614c:	4b5d      	ldr	r3, [pc, #372]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006154:	2b00      	cmp	r3, #0
 8006156:	d116      	bne.n	8006186 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800615c:	e013      	b.n	8006186 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800615e:	4b59      	ldr	r3, [pc, #356]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800616a:	4b56      	ldr	r3, [pc, #344]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800617a:	e006      	b.n	800618a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	73fb      	strb	r3, [r7, #15]
      break;
 8006180:	e004      	b.n	800618c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006182:	bf00      	nop
 8006184:	e002      	b.n	800618c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006186:	bf00      	nop
 8006188:	e000      	b.n	800618c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800618a:	bf00      	nop
    }

    if(status == HAL_OK)
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d108      	bne.n	80061a4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006192:	4b4c      	ldr	r3, [pc, #304]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f023 0203 	bic.w	r2, r3, #3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4949      	ldr	r1, [pc, #292]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 8086 	bne.w	80062b8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80061ac:	4b45      	ldr	r3, [pc, #276]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a44      	ldr	r2, [pc, #272]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b8:	f7fa fe5e 	bl	8000e78 <HAL_GetTick>
 80061bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061be:	e009      	b.n	80061d4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061c0:	f7fa fe5a 	bl	8000e78 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d902      	bls.n	80061d4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	73fb      	strb	r3, [r7, #15]
        break;
 80061d2:	e005      	b.n	80061e0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061d4:	4b3b      	ldr	r3, [pc, #236]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1ef      	bne.n	80061c0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d168      	bne.n	80062b8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d113      	bne.n	8006214 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061ec:	4b35      	ldr	r3, [pc, #212]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	4b35      	ldr	r3, [pc, #212]	; (80062c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6892      	ldr	r2, [r2, #8]
 80061f8:	0211      	lsls	r1, r2, #8
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	68d2      	ldr	r2, [r2, #12]
 80061fe:	06d2      	lsls	r2, r2, #27
 8006200:	4311      	orrs	r1, r2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6852      	ldr	r2, [r2, #4]
 8006206:	3a01      	subs	r2, #1
 8006208:	0112      	lsls	r2, r2, #4
 800620a:	430a      	orrs	r2, r1
 800620c:	492d      	ldr	r1, [pc, #180]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800620e:	4313      	orrs	r3, r2
 8006210:	610b      	str	r3, [r1, #16]
 8006212:	e02d      	b.n	8006270 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d115      	bne.n	8006246 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800621a:	4b2a      	ldr	r3, [pc, #168]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	4b2b      	ldr	r3, [pc, #172]	; (80062cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006220:	4013      	ands	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6892      	ldr	r2, [r2, #8]
 8006226:	0211      	lsls	r1, r2, #8
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6912      	ldr	r2, [r2, #16]
 800622c:	0852      	lsrs	r2, r2, #1
 800622e:	3a01      	subs	r2, #1
 8006230:	0552      	lsls	r2, r2, #21
 8006232:	4311      	orrs	r1, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6852      	ldr	r2, [r2, #4]
 8006238:	3a01      	subs	r2, #1
 800623a:	0112      	lsls	r2, r2, #4
 800623c:	430a      	orrs	r2, r1
 800623e:	4921      	ldr	r1, [pc, #132]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006240:	4313      	orrs	r3, r2
 8006242:	610b      	str	r3, [r1, #16]
 8006244:	e014      	b.n	8006270 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006246:	4b1f      	ldr	r3, [pc, #124]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800624c:	4013      	ands	r3, r2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6892      	ldr	r2, [r2, #8]
 8006252:	0211      	lsls	r1, r2, #8
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6952      	ldr	r2, [r2, #20]
 8006258:	0852      	lsrs	r2, r2, #1
 800625a:	3a01      	subs	r2, #1
 800625c:	0652      	lsls	r2, r2, #25
 800625e:	4311      	orrs	r1, r2
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6852      	ldr	r2, [r2, #4]
 8006264:	3a01      	subs	r2, #1
 8006266:	0112      	lsls	r2, r2, #4
 8006268:	430a      	orrs	r2, r1
 800626a:	4916      	ldr	r1, [pc, #88]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800626c:	4313      	orrs	r3, r2
 800626e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006270:	4b14      	ldr	r3, [pc, #80]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a13      	ldr	r2, [pc, #76]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006276:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800627a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627c:	f7fa fdfc 	bl	8000e78 <HAL_GetTick>
 8006280:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006282:	e009      	b.n	8006298 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006284:	f7fa fdf8 	bl	8000e78 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d902      	bls.n	8006298 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	73fb      	strb	r3, [r7, #15]
          break;
 8006296:	e005      	b.n	80062a4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0ef      	beq.n	8006284 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80062aa:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	4904      	ldr	r1, [pc, #16]	; (80062c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	40021000 	.word	0x40021000
 80062c8:	07ff800f 	.word	0x07ff800f
 80062cc:	ff9f800f 	.word	0xff9f800f
 80062d0:	f9ff800f 	.word	0xf9ff800f

080062d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062e2:	4b72      	ldr	r3, [pc, #456]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00e      	beq.n	800630c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80062ee:	4b6f      	ldr	r3, [pc, #444]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f003 0203 	and.w	r2, r3, #3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d103      	bne.n	8006306 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
       ||
 8006302:	2b00      	cmp	r3, #0
 8006304:	d142      	bne.n	800638c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	73fb      	strb	r3, [r7, #15]
 800630a:	e03f      	b.n	800638c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b03      	cmp	r3, #3
 8006312:	d018      	beq.n	8006346 <RCCEx_PLLSAI2_Config+0x72>
 8006314:	2b03      	cmp	r3, #3
 8006316:	d825      	bhi.n	8006364 <RCCEx_PLLSAI2_Config+0x90>
 8006318:	2b01      	cmp	r3, #1
 800631a:	d002      	beq.n	8006322 <RCCEx_PLLSAI2_Config+0x4e>
 800631c:	2b02      	cmp	r3, #2
 800631e:	d009      	beq.n	8006334 <RCCEx_PLLSAI2_Config+0x60>
 8006320:	e020      	b.n	8006364 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006322:	4b62      	ldr	r3, [pc, #392]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d11d      	bne.n	800636a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006332:	e01a      	b.n	800636a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006334:	4b5d      	ldr	r3, [pc, #372]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800633c:	2b00      	cmp	r3, #0
 800633e:	d116      	bne.n	800636e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006344:	e013      	b.n	800636e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006346:	4b59      	ldr	r3, [pc, #356]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10f      	bne.n	8006372 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006352:	4b56      	ldr	r3, [pc, #344]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006362:	e006      	b.n	8006372 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
      break;
 8006368:	e004      	b.n	8006374 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800636a:	bf00      	nop
 800636c:	e002      	b.n	8006374 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800636e:	bf00      	nop
 8006370:	e000      	b.n	8006374 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006372:	bf00      	nop
    }

    if(status == HAL_OK)
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d108      	bne.n	800638c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800637a:	4b4c      	ldr	r3, [pc, #304]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f023 0203 	bic.w	r2, r3, #3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4949      	ldr	r1, [pc, #292]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006388:	4313      	orrs	r3, r2
 800638a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	2b00      	cmp	r3, #0
 8006390:	f040 8086 	bne.w	80064a0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006394:	4b45      	ldr	r3, [pc, #276]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a44      	ldr	r2, [pc, #272]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800639a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800639e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a0:	f7fa fd6a 	bl	8000e78 <HAL_GetTick>
 80063a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80063a6:	e009      	b.n	80063bc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063a8:	f7fa fd66 	bl	8000e78 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d902      	bls.n	80063bc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	73fb      	strb	r3, [r7, #15]
        break;
 80063ba:	e005      	b.n	80063c8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80063bc:	4b3b      	ldr	r3, [pc, #236]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1ef      	bne.n	80063a8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d168      	bne.n	80064a0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d113      	bne.n	80063fc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063d4:	4b35      	ldr	r3, [pc, #212]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80063d6:	695a      	ldr	r2, [r3, #20]
 80063d8:	4b35      	ldr	r3, [pc, #212]	; (80064b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80063da:	4013      	ands	r3, r2
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6892      	ldr	r2, [r2, #8]
 80063e0:	0211      	lsls	r1, r2, #8
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	68d2      	ldr	r2, [r2, #12]
 80063e6:	06d2      	lsls	r2, r2, #27
 80063e8:	4311      	orrs	r1, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6852      	ldr	r2, [r2, #4]
 80063ee:	3a01      	subs	r2, #1
 80063f0:	0112      	lsls	r2, r2, #4
 80063f2:	430a      	orrs	r2, r1
 80063f4:	492d      	ldr	r1, [pc, #180]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	614b      	str	r3, [r1, #20]
 80063fa:	e02d      	b.n	8006458 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d115      	bne.n	800642e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006402:	4b2a      	ldr	r3, [pc, #168]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	4b2b      	ldr	r3, [pc, #172]	; (80064b4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006408:	4013      	ands	r3, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6892      	ldr	r2, [r2, #8]
 800640e:	0211      	lsls	r1, r2, #8
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6912      	ldr	r2, [r2, #16]
 8006414:	0852      	lsrs	r2, r2, #1
 8006416:	3a01      	subs	r2, #1
 8006418:	0552      	lsls	r2, r2, #21
 800641a:	4311      	orrs	r1, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6852      	ldr	r2, [r2, #4]
 8006420:	3a01      	subs	r2, #1
 8006422:	0112      	lsls	r2, r2, #4
 8006424:	430a      	orrs	r2, r1
 8006426:	4921      	ldr	r1, [pc, #132]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006428:	4313      	orrs	r3, r2
 800642a:	614b      	str	r3, [r1, #20]
 800642c:	e014      	b.n	8006458 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800642e:	4b1f      	ldr	r3, [pc, #124]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006430:	695a      	ldr	r2, [r3, #20]
 8006432:	4b21      	ldr	r3, [pc, #132]	; (80064b8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006434:	4013      	ands	r3, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6892      	ldr	r2, [r2, #8]
 800643a:	0211      	lsls	r1, r2, #8
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6952      	ldr	r2, [r2, #20]
 8006440:	0852      	lsrs	r2, r2, #1
 8006442:	3a01      	subs	r2, #1
 8006444:	0652      	lsls	r2, r2, #25
 8006446:	4311      	orrs	r1, r2
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6852      	ldr	r2, [r2, #4]
 800644c:	3a01      	subs	r2, #1
 800644e:	0112      	lsls	r2, r2, #4
 8006450:	430a      	orrs	r2, r1
 8006452:	4916      	ldr	r1, [pc, #88]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006454:	4313      	orrs	r3, r2
 8006456:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006458:	4b14      	ldr	r3, [pc, #80]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a13      	ldr	r2, [pc, #76]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800645e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006462:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006464:	f7fa fd08 	bl	8000e78 <HAL_GetTick>
 8006468:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800646a:	e009      	b.n	8006480 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800646c:	f7fa fd04 	bl	8000e78 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d902      	bls.n	8006480 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	73fb      	strb	r3, [r7, #15]
          break;
 800647e:	e005      	b.n	800648c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006480:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0ef      	beq.n	800646c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006494:	695a      	ldr	r2, [r3, #20]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	4904      	ldr	r1, [pc, #16]	; (80064ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800649c:	4313      	orrs	r3, r2
 800649e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40021000 	.word	0x40021000
 80064b0:	07ff800f 	.word	0x07ff800f
 80064b4:	ff9f800f 	.word	0xff9f800f
 80064b8:	f9ff800f 	.word	0xf9ff800f

080064bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e049      	b.n	8006562 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f005 fafe 	bl	800bae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f000 fab6 	bl	8006a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	d001      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e04f      	b.n	8006624 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a23      	ldr	r2, [pc, #140]	; (8006630 <HAL_TIM_Base_Start_IT+0xc4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d01d      	beq.n	80065e2 <HAL_TIM_Base_Start_IT+0x76>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ae:	d018      	beq.n	80065e2 <HAL_TIM_Base_Start_IT+0x76>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <HAL_TIM_Base_Start_IT+0xc8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <HAL_TIM_Base_Start_IT+0x76>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <HAL_TIM_Base_Start_IT+0xcc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00e      	beq.n	80065e2 <HAL_TIM_Base_Start_IT+0x76>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <HAL_TIM_Base_Start_IT+0xd0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d009      	beq.n	80065e2 <HAL_TIM_Base_Start_IT+0x76>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <HAL_TIM_Base_Start_IT+0xd4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d004      	beq.n	80065e2 <HAL_TIM_Base_Start_IT+0x76>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a19      	ldr	r2, [pc, #100]	; (8006644 <HAL_TIM_Base_Start_IT+0xd8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d115      	bne.n	800660e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	4b17      	ldr	r3, [pc, #92]	; (8006648 <HAL_TIM_Base_Start_IT+0xdc>)
 80065ea:	4013      	ands	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b06      	cmp	r3, #6
 80065f2:	d015      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0xb4>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fa:	d011      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660c:	e008      	b.n	8006620 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0201 	orr.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e000      	b.n	8006622 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006620:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40013400 	.word	0x40013400
 8006644:	40014000 	.word	0x40014000
 8006648:	00010007 	.word	0x00010007

0800664c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b02      	cmp	r3, #2
 8006660:	d122      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d11b      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0202 	mvn.w	r2, #2
 8006678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f9ce 	bl	8006a30 <HAL_TIM_IC_CaptureCallback>
 8006694:	e005      	b.n	80066a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f9c0 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f9d1 	bl	8006a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d122      	bne.n	80066fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d11b      	bne.n	80066fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0204 	mvn.w	r2, #4
 80066cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9a4 	bl	8006a30 <HAL_TIM_IC_CaptureCallback>
 80066e8:	e005      	b.n	80066f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f996 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f9a7 	bl	8006a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b08      	cmp	r3, #8
 8006708:	d122      	bne.n	8006750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d11b      	bne.n	8006750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f06f 0208 	mvn.w	r2, #8
 8006720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2204      	movs	r2, #4
 8006726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f97a 	bl	8006a30 <HAL_TIM_IC_CaptureCallback>
 800673c:	e005      	b.n	800674a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f96c 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f97d 	bl	8006a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b10      	cmp	r3, #16
 800675c:	d122      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b10      	cmp	r3, #16
 800676a:	d11b      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0210 	mvn.w	r2, #16
 8006774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2208      	movs	r2, #8
 800677a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f950 	bl	8006a30 <HAL_TIM_IC_CaptureCallback>
 8006790:	e005      	b.n	800679e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f942 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f953 	bl	8006a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d10e      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d107      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0201 	mvn.w	r2, #1
 80067c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f004 f8ee 	bl	800a9ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b80      	cmp	r3, #128	; 0x80
 80067dc:	d10e      	bne.n	80067fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e8:	2b80      	cmp	r3, #128	; 0x80
 80067ea:	d107      	bne.n	80067fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fafe 	bl	8006df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680a:	d10e      	bne.n	800682a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006816:	2b80      	cmp	r3, #128	; 0x80
 8006818:	d107      	bne.n	800682a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 faf1 	bl	8006e0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	d10e      	bne.n	8006856 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d107      	bne.n	8006856 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800684e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f901 	bl	8006a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b20      	cmp	r3, #32
 8006862:	d10e      	bne.n	8006882 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b20      	cmp	r3, #32
 8006870:	d107      	bne.n	8006882 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f06f 0220 	mvn.w	r2, #32
 800687a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fab1 	bl	8006de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <HAL_TIM_ConfigClockSource+0x1c>
 80068a2:	2302      	movs	r3, #2
 80068a4:	e0b6      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x18a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2202      	movs	r2, #2
 80068b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e2:	d03e      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0xd8>
 80068e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e8:	f200 8087 	bhi.w	80069fa <HAL_TIM_ConfigClockSource+0x170>
 80068ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f0:	f000 8086 	beq.w	8006a00 <HAL_TIM_ConfigClockSource+0x176>
 80068f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f8:	d87f      	bhi.n	80069fa <HAL_TIM_ConfigClockSource+0x170>
 80068fa:	2b70      	cmp	r3, #112	; 0x70
 80068fc:	d01a      	beq.n	8006934 <HAL_TIM_ConfigClockSource+0xaa>
 80068fe:	2b70      	cmp	r3, #112	; 0x70
 8006900:	d87b      	bhi.n	80069fa <HAL_TIM_ConfigClockSource+0x170>
 8006902:	2b60      	cmp	r3, #96	; 0x60
 8006904:	d050      	beq.n	80069a8 <HAL_TIM_ConfigClockSource+0x11e>
 8006906:	2b60      	cmp	r3, #96	; 0x60
 8006908:	d877      	bhi.n	80069fa <HAL_TIM_ConfigClockSource+0x170>
 800690a:	2b50      	cmp	r3, #80	; 0x50
 800690c:	d03c      	beq.n	8006988 <HAL_TIM_ConfigClockSource+0xfe>
 800690e:	2b50      	cmp	r3, #80	; 0x50
 8006910:	d873      	bhi.n	80069fa <HAL_TIM_ConfigClockSource+0x170>
 8006912:	2b40      	cmp	r3, #64	; 0x40
 8006914:	d058      	beq.n	80069c8 <HAL_TIM_ConfigClockSource+0x13e>
 8006916:	2b40      	cmp	r3, #64	; 0x40
 8006918:	d86f      	bhi.n	80069fa <HAL_TIM_ConfigClockSource+0x170>
 800691a:	2b30      	cmp	r3, #48	; 0x30
 800691c:	d064      	beq.n	80069e8 <HAL_TIM_ConfigClockSource+0x15e>
 800691e:	2b30      	cmp	r3, #48	; 0x30
 8006920:	d86b      	bhi.n	80069fa <HAL_TIM_ConfigClockSource+0x170>
 8006922:	2b20      	cmp	r3, #32
 8006924:	d060      	beq.n	80069e8 <HAL_TIM_ConfigClockSource+0x15e>
 8006926:	2b20      	cmp	r3, #32
 8006928:	d867      	bhi.n	80069fa <HAL_TIM_ConfigClockSource+0x170>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d05c      	beq.n	80069e8 <HAL_TIM_ConfigClockSource+0x15e>
 800692e:	2b10      	cmp	r3, #16
 8006930:	d05a      	beq.n	80069e8 <HAL_TIM_ConfigClockSource+0x15e>
 8006932:	e062      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	6899      	ldr	r1, [r3, #8]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f000 f9a6 	bl	8006c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006956:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	609a      	str	r2, [r3, #8]
      break;
 8006960:	e04f      	b.n	8006a02 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6899      	ldr	r1, [r3, #8]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f000 f98f 	bl	8006c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006984:	609a      	str	r2, [r3, #8]
      break;
 8006986:	e03c      	b.n	8006a02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	6859      	ldr	r1, [r3, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	461a      	mov	r2, r3
 8006996:	f000 f903 	bl	8006ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2150      	movs	r1, #80	; 0x50
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 f95c 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 80069a6:	e02c      	b.n	8006a02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	6859      	ldr	r1, [r3, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	461a      	mov	r2, r3
 80069b6:	f000 f922 	bl	8006bfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2160      	movs	r1, #96	; 0x60
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 f94c 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 80069c6:	e01c      	b.n	8006a02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	6859      	ldr	r1, [r3, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	461a      	mov	r2, r3
 80069d6:	f000 f8e3 	bl	8006ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2140      	movs	r1, #64	; 0x40
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 f93c 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 80069e6:	e00c      	b.n	8006a02 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f000 f933 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 80069f8:	e003      	b.n	8006a02 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	73fb      	strb	r3, [r7, #15]
      break;
 80069fe:	e000      	b.n	8006a02 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a40      	ldr	r2, [pc, #256]	; (8006b80 <TIM_Base_SetConfig+0x114>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d013      	beq.n	8006aac <TIM_Base_SetConfig+0x40>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8a:	d00f      	beq.n	8006aac <TIM_Base_SetConfig+0x40>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a3d      	ldr	r2, [pc, #244]	; (8006b84 <TIM_Base_SetConfig+0x118>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00b      	beq.n	8006aac <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a3c      	ldr	r2, [pc, #240]	; (8006b88 <TIM_Base_SetConfig+0x11c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_Base_SetConfig+0x40>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a3b      	ldr	r2, [pc, #236]	; (8006b8c <TIM_Base_SetConfig+0x120>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_Base_SetConfig+0x40>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a3a      	ldr	r2, [pc, #232]	; (8006b90 <TIM_Base_SetConfig+0x124>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d108      	bne.n	8006abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2f      	ldr	r2, [pc, #188]	; (8006b80 <TIM_Base_SetConfig+0x114>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01f      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006acc:	d01b      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2c      	ldr	r2, [pc, #176]	; (8006b84 <TIM_Base_SetConfig+0x118>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d017      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a2b      	ldr	r2, [pc, #172]	; (8006b88 <TIM_Base_SetConfig+0x11c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d013      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a2a      	ldr	r2, [pc, #168]	; (8006b8c <TIM_Base_SetConfig+0x120>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00f      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a29      	ldr	r2, [pc, #164]	; (8006b90 <TIM_Base_SetConfig+0x124>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00b      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a28      	ldr	r2, [pc, #160]	; (8006b94 <TIM_Base_SetConfig+0x128>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d007      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a27      	ldr	r2, [pc, #156]	; (8006b98 <TIM_Base_SetConfig+0x12c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d003      	beq.n	8006b06 <TIM_Base_SetConfig+0x9a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a26      	ldr	r2, [pc, #152]	; (8006b9c <TIM_Base_SetConfig+0x130>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d108      	bne.n	8006b18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a10      	ldr	r2, [pc, #64]	; (8006b80 <TIM_Base_SetConfig+0x114>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00f      	beq.n	8006b64 <TIM_Base_SetConfig+0xf8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <TIM_Base_SetConfig+0x124>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <TIM_Base_SetConfig+0xf8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a11      	ldr	r2, [pc, #68]	; (8006b94 <TIM_Base_SetConfig+0x128>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_Base_SetConfig+0xf8>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a10      	ldr	r2, [pc, #64]	; (8006b98 <TIM_Base_SetConfig+0x12c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_Base_SetConfig+0xf8>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a0f      	ldr	r2, [pc, #60]	; (8006b9c <TIM_Base_SetConfig+0x130>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d103      	bne.n	8006b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	615a      	str	r2, [r3, #20]
}
 8006b72:	bf00      	nop
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40012c00 	.word	0x40012c00
 8006b84:	40000400 	.word	0x40000400
 8006b88:	40000800 	.word	0x40000800
 8006b8c:	40000c00 	.word	0x40000c00
 8006b90:	40013400 	.word	0x40013400
 8006b94:	40014000 	.word	0x40014000
 8006b98:	40014400 	.word	0x40014400
 8006b9c:	40014800 	.word	0x40014800

08006ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f023 0201 	bic.w	r2, r3, #1
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	011b      	lsls	r3, r3, #4
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f023 030a 	bic.w	r3, r3, #10
 8006bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	621a      	str	r2, [r3, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b087      	sub	sp, #28
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	f023 0210 	bic.w	r2, r3, #16
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	031b      	lsls	r3, r3, #12
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f043 0307 	orr.w	r3, r3, #7
 8006c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	609a      	str	r2, [r3, #8]
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	021a      	lsls	r2, r3, #8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	609a      	str	r2, [r3, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	371c      	adds	r7, #28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e068      	b.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2e      	ldr	r2, [pc, #184]	; (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d004      	beq.n	8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2d      	ldr	r2, [pc, #180]	; (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d108      	bne.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1e      	ldr	r2, [pc, #120]	; (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d01d      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5e:	d018      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1b      	ldr	r2, [pc, #108]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1a      	ldr	r2, [pc, #104]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a18      	ldr	r2, [pc, #96]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a13      	ldr	r2, [pc, #76]	; (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a14      	ldr	r2, [pc, #80]	; (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d10c      	bne.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40013400 	.word	0x40013400
 8006dd4:	40000400 	.word	0x40000400
 8006dd8:	40000800 	.word	0x40000800
 8006ddc:	40000c00 	.word	0x40000c00
 8006de0:	40014000 	.word	0x40014000

08006de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e042      	b.n	8006eb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f004 fe71 	bl	800bb2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2224      	movs	r2, #36	; 0x24
 8006e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0201 	bic.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f8c4 	bl	8006ff0 <UART_SetConfig>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d101      	bne.n	8006e72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e022      	b.n	8006eb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fbb4 	bl	80075e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0201 	orr.w	r2, r2, #1
 8006eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fc3b 	bl	800772c <UART_CheckIdleState>
 8006eb6:	4603      	mov	r3, r0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	; 0x28
 8006ec4:	af02      	add	r7, sp, #8
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	f040 8084 	bne.w	8006fe4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <HAL_UART_Transmit+0x28>
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e07c      	b.n	8006fe6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <HAL_UART_Transmit+0x3a>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e075      	b.n	8006fe6 <HAL_UART_Transmit+0x126>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2221      	movs	r2, #33	; 0x21
 8006f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f12:	f7f9 ffb1 	bl	8000e78 <HAL_GetTick>
 8006f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	88fa      	ldrh	r2, [r7, #6]
 8006f1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	88fa      	ldrh	r2, [r7, #6]
 8006f24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f30:	d108      	bne.n	8006f44 <HAL_UART_Transmit+0x84>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d104      	bne.n	8006f44 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	61bb      	str	r3, [r7, #24]
 8006f42:	e003      	b.n	8006f4c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006f54:	e02d      	b.n	8006fb2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2180      	movs	r1, #128	; 0x80
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 fc2e 	bl	80077c2 <UART_WaitOnFlagUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e03a      	b.n	8006fe6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10b      	bne.n	8006f8e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	881a      	ldrh	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f82:	b292      	uxth	r2, r2
 8006f84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	3302      	adds	r3, #2
 8006f8a:	61bb      	str	r3, [r7, #24]
 8006f8c:	e008      	b.n	8006fa0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	b292      	uxth	r2, r2
 8006f98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1cb      	bne.n	8006f56 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2140      	movs	r1, #64	; 0x40
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 fbfa 	bl	80077c2 <UART_WaitOnFlagUntilTimeout>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e006      	b.n	8006fe6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	e000      	b.n	8006fe6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006fe4:	2302      	movs	r3, #2
  }
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3720      	adds	r7, #32
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff4:	b08c      	sub	sp, #48	; 0x30
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	431a      	orrs	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	431a      	orrs	r2, r3
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	4313      	orrs	r3, r2
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4baa      	ldr	r3, [pc, #680]	; (80072c8 <UART_SetConfig+0x2d8>)
 8007020:	4013      	ands	r3, r2
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	6812      	ldr	r2, [r2, #0]
 8007026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007028:	430b      	orrs	r3, r1
 800702a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a9f      	ldr	r2, [pc, #636]	; (80072cc <UART_SetConfig+0x2dc>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d004      	beq.n	800705c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007058:	4313      	orrs	r3, r2
 800705a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007066:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	6812      	ldr	r2, [r2, #0]
 800706e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007070:	430b      	orrs	r3, r1
 8007072:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707a:	f023 010f 	bic.w	r1, r3, #15
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a90      	ldr	r2, [pc, #576]	; (80072d0 <UART_SetConfig+0x2e0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d125      	bne.n	80070e0 <UART_SetConfig+0xf0>
 8007094:	4b8f      	ldr	r3, [pc, #572]	; (80072d4 <UART_SetConfig+0x2e4>)
 8007096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d81a      	bhi.n	80070d8 <UART_SetConfig+0xe8>
 80070a2:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <UART_SetConfig+0xb8>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070b9 	.word	0x080070b9
 80070ac:	080070c9 	.word	0x080070c9
 80070b0:	080070c1 	.word	0x080070c1
 80070b4:	080070d1 	.word	0x080070d1
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070be:	e116      	b.n	80072ee <UART_SetConfig+0x2fe>
 80070c0:	2302      	movs	r3, #2
 80070c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070c6:	e112      	b.n	80072ee <UART_SetConfig+0x2fe>
 80070c8:	2304      	movs	r3, #4
 80070ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ce:	e10e      	b.n	80072ee <UART_SetConfig+0x2fe>
 80070d0:	2308      	movs	r3, #8
 80070d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070d6:	e10a      	b.n	80072ee <UART_SetConfig+0x2fe>
 80070d8:	2310      	movs	r3, #16
 80070da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070de:	e106      	b.n	80072ee <UART_SetConfig+0x2fe>
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a7c      	ldr	r2, [pc, #496]	; (80072d8 <UART_SetConfig+0x2e8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d138      	bne.n	800715c <UART_SetConfig+0x16c>
 80070ea:	4b7a      	ldr	r3, [pc, #488]	; (80072d4 <UART_SetConfig+0x2e4>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f0:	f003 030c 	and.w	r3, r3, #12
 80070f4:	2b0c      	cmp	r3, #12
 80070f6:	d82d      	bhi.n	8007154 <UART_SetConfig+0x164>
 80070f8:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <UART_SetConfig+0x110>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007135 	.word	0x08007135
 8007104:	08007155 	.word	0x08007155
 8007108:	08007155 	.word	0x08007155
 800710c:	08007155 	.word	0x08007155
 8007110:	08007145 	.word	0x08007145
 8007114:	08007155 	.word	0x08007155
 8007118:	08007155 	.word	0x08007155
 800711c:	08007155 	.word	0x08007155
 8007120:	0800713d 	.word	0x0800713d
 8007124:	08007155 	.word	0x08007155
 8007128:	08007155 	.word	0x08007155
 800712c:	08007155 	.word	0x08007155
 8007130:	0800714d 	.word	0x0800714d
 8007134:	2300      	movs	r3, #0
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800713a:	e0d8      	b.n	80072ee <UART_SetConfig+0x2fe>
 800713c:	2302      	movs	r3, #2
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007142:	e0d4      	b.n	80072ee <UART_SetConfig+0x2fe>
 8007144:	2304      	movs	r3, #4
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714a:	e0d0      	b.n	80072ee <UART_SetConfig+0x2fe>
 800714c:	2308      	movs	r3, #8
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007152:	e0cc      	b.n	80072ee <UART_SetConfig+0x2fe>
 8007154:	2310      	movs	r3, #16
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715a:	e0c8      	b.n	80072ee <UART_SetConfig+0x2fe>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a5e      	ldr	r2, [pc, #376]	; (80072dc <UART_SetConfig+0x2ec>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d125      	bne.n	80071b2 <UART_SetConfig+0x1c2>
 8007166:	4b5b      	ldr	r3, [pc, #364]	; (80072d4 <UART_SetConfig+0x2e4>)
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007170:	2b30      	cmp	r3, #48	; 0x30
 8007172:	d016      	beq.n	80071a2 <UART_SetConfig+0x1b2>
 8007174:	2b30      	cmp	r3, #48	; 0x30
 8007176:	d818      	bhi.n	80071aa <UART_SetConfig+0x1ba>
 8007178:	2b20      	cmp	r3, #32
 800717a:	d00a      	beq.n	8007192 <UART_SetConfig+0x1a2>
 800717c:	2b20      	cmp	r3, #32
 800717e:	d814      	bhi.n	80071aa <UART_SetConfig+0x1ba>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <UART_SetConfig+0x19a>
 8007184:	2b10      	cmp	r3, #16
 8007186:	d008      	beq.n	800719a <UART_SetConfig+0x1aa>
 8007188:	e00f      	b.n	80071aa <UART_SetConfig+0x1ba>
 800718a:	2300      	movs	r3, #0
 800718c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007190:	e0ad      	b.n	80072ee <UART_SetConfig+0x2fe>
 8007192:	2302      	movs	r3, #2
 8007194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007198:	e0a9      	b.n	80072ee <UART_SetConfig+0x2fe>
 800719a:	2304      	movs	r3, #4
 800719c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071a0:	e0a5      	b.n	80072ee <UART_SetConfig+0x2fe>
 80071a2:	2308      	movs	r3, #8
 80071a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071a8:	e0a1      	b.n	80072ee <UART_SetConfig+0x2fe>
 80071aa:	2310      	movs	r3, #16
 80071ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b0:	e09d      	b.n	80072ee <UART_SetConfig+0x2fe>
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a4a      	ldr	r2, [pc, #296]	; (80072e0 <UART_SetConfig+0x2f0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d125      	bne.n	8007208 <UART_SetConfig+0x218>
 80071bc:	4b45      	ldr	r3, [pc, #276]	; (80072d4 <UART_SetConfig+0x2e4>)
 80071be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071c6:	2bc0      	cmp	r3, #192	; 0xc0
 80071c8:	d016      	beq.n	80071f8 <UART_SetConfig+0x208>
 80071ca:	2bc0      	cmp	r3, #192	; 0xc0
 80071cc:	d818      	bhi.n	8007200 <UART_SetConfig+0x210>
 80071ce:	2b80      	cmp	r3, #128	; 0x80
 80071d0:	d00a      	beq.n	80071e8 <UART_SetConfig+0x1f8>
 80071d2:	2b80      	cmp	r3, #128	; 0x80
 80071d4:	d814      	bhi.n	8007200 <UART_SetConfig+0x210>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <UART_SetConfig+0x1f0>
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d008      	beq.n	80071f0 <UART_SetConfig+0x200>
 80071de:	e00f      	b.n	8007200 <UART_SetConfig+0x210>
 80071e0:	2300      	movs	r3, #0
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071e6:	e082      	b.n	80072ee <UART_SetConfig+0x2fe>
 80071e8:	2302      	movs	r3, #2
 80071ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ee:	e07e      	b.n	80072ee <UART_SetConfig+0x2fe>
 80071f0:	2304      	movs	r3, #4
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071f6:	e07a      	b.n	80072ee <UART_SetConfig+0x2fe>
 80071f8:	2308      	movs	r3, #8
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071fe:	e076      	b.n	80072ee <UART_SetConfig+0x2fe>
 8007200:	2310      	movs	r3, #16
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007206:	e072      	b.n	80072ee <UART_SetConfig+0x2fe>
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a35      	ldr	r2, [pc, #212]	; (80072e4 <UART_SetConfig+0x2f4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d12a      	bne.n	8007268 <UART_SetConfig+0x278>
 8007212:	4b30      	ldr	r3, [pc, #192]	; (80072d4 <UART_SetConfig+0x2e4>)
 8007214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007220:	d01a      	beq.n	8007258 <UART_SetConfig+0x268>
 8007222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007226:	d81b      	bhi.n	8007260 <UART_SetConfig+0x270>
 8007228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800722c:	d00c      	beq.n	8007248 <UART_SetConfig+0x258>
 800722e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007232:	d815      	bhi.n	8007260 <UART_SetConfig+0x270>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <UART_SetConfig+0x250>
 8007238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800723c:	d008      	beq.n	8007250 <UART_SetConfig+0x260>
 800723e:	e00f      	b.n	8007260 <UART_SetConfig+0x270>
 8007240:	2300      	movs	r3, #0
 8007242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007246:	e052      	b.n	80072ee <UART_SetConfig+0x2fe>
 8007248:	2302      	movs	r3, #2
 800724a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800724e:	e04e      	b.n	80072ee <UART_SetConfig+0x2fe>
 8007250:	2304      	movs	r3, #4
 8007252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007256:	e04a      	b.n	80072ee <UART_SetConfig+0x2fe>
 8007258:	2308      	movs	r3, #8
 800725a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725e:	e046      	b.n	80072ee <UART_SetConfig+0x2fe>
 8007260:	2310      	movs	r3, #16
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007266:	e042      	b.n	80072ee <UART_SetConfig+0x2fe>
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a17      	ldr	r2, [pc, #92]	; (80072cc <UART_SetConfig+0x2dc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d13a      	bne.n	80072e8 <UART_SetConfig+0x2f8>
 8007272:	4b18      	ldr	r3, [pc, #96]	; (80072d4 <UART_SetConfig+0x2e4>)
 8007274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800727c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007280:	d01a      	beq.n	80072b8 <UART_SetConfig+0x2c8>
 8007282:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007286:	d81b      	bhi.n	80072c0 <UART_SetConfig+0x2d0>
 8007288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800728c:	d00c      	beq.n	80072a8 <UART_SetConfig+0x2b8>
 800728e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007292:	d815      	bhi.n	80072c0 <UART_SetConfig+0x2d0>
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <UART_SetConfig+0x2b0>
 8007298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800729c:	d008      	beq.n	80072b0 <UART_SetConfig+0x2c0>
 800729e:	e00f      	b.n	80072c0 <UART_SetConfig+0x2d0>
 80072a0:	2300      	movs	r3, #0
 80072a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a6:	e022      	b.n	80072ee <UART_SetConfig+0x2fe>
 80072a8:	2302      	movs	r3, #2
 80072aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ae:	e01e      	b.n	80072ee <UART_SetConfig+0x2fe>
 80072b0:	2304      	movs	r3, #4
 80072b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b6:	e01a      	b.n	80072ee <UART_SetConfig+0x2fe>
 80072b8:	2308      	movs	r3, #8
 80072ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072be:	e016      	b.n	80072ee <UART_SetConfig+0x2fe>
 80072c0:	2310      	movs	r3, #16
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c6:	e012      	b.n	80072ee <UART_SetConfig+0x2fe>
 80072c8:	cfff69f3 	.word	0xcfff69f3
 80072cc:	40008000 	.word	0x40008000
 80072d0:	40013800 	.word	0x40013800
 80072d4:	40021000 	.word	0x40021000
 80072d8:	40004400 	.word	0x40004400
 80072dc:	40004800 	.word	0x40004800
 80072e0:	40004c00 	.word	0x40004c00
 80072e4:	40005000 	.word	0x40005000
 80072e8:	2310      	movs	r3, #16
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4aae      	ldr	r2, [pc, #696]	; (80075ac <UART_SetConfig+0x5bc>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	f040 8097 	bne.w	8007428 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072fe:	2b08      	cmp	r3, #8
 8007300:	d823      	bhi.n	800734a <UART_SetConfig+0x35a>
 8007302:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <UART_SetConfig+0x318>)
 8007304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007308:	0800732d 	.word	0x0800732d
 800730c:	0800734b 	.word	0x0800734b
 8007310:	08007335 	.word	0x08007335
 8007314:	0800734b 	.word	0x0800734b
 8007318:	0800733b 	.word	0x0800733b
 800731c:	0800734b 	.word	0x0800734b
 8007320:	0800734b 	.word	0x0800734b
 8007324:	0800734b 	.word	0x0800734b
 8007328:	08007343 	.word	0x08007343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800732c:	f7fe fa90 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
 8007330:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007332:	e010      	b.n	8007356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007334:	4b9e      	ldr	r3, [pc, #632]	; (80075b0 <UART_SetConfig+0x5c0>)
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007338:	e00d      	b.n	8007356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800733a:	f7fe f9f1 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 800733e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007340:	e009      	b.n	8007356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007348:	e005      	b.n	8007356 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007354:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 8130 	beq.w	80075be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	4a94      	ldr	r2, [pc, #592]	; (80075b4 <UART_SetConfig+0x5c4>)
 8007364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007368:	461a      	mov	r2, r3
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007370:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	4613      	mov	r3, r2
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	4413      	add	r3, r2
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	429a      	cmp	r2, r3
 8007380:	d305      	bcc.n	800738e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	429a      	cmp	r2, r3
 800738c:	d903      	bls.n	8007396 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007394:	e113      	b.n	80075be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	2200      	movs	r2, #0
 800739a:	60bb      	str	r3, [r7, #8]
 800739c:	60fa      	str	r2, [r7, #12]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	4a84      	ldr	r2, [pc, #528]	; (80075b4 <UART_SetConfig+0x5c4>)
 80073a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2200      	movs	r2, #0
 80073ac:	603b      	str	r3, [r7, #0]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073b8:	f7f9 fbb0 	bl	8000b1c <__aeabi_uldivmod>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4610      	mov	r0, r2
 80073c2:	4619      	mov	r1, r3
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	020b      	lsls	r3, r1, #8
 80073ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073d2:	0202      	lsls	r2, r0, #8
 80073d4:	6979      	ldr	r1, [r7, #20]
 80073d6:	6849      	ldr	r1, [r1, #4]
 80073d8:	0849      	lsrs	r1, r1, #1
 80073da:	2000      	movs	r0, #0
 80073dc:	460c      	mov	r4, r1
 80073de:	4605      	mov	r5, r0
 80073e0:	eb12 0804 	adds.w	r8, r2, r4
 80073e4:	eb43 0905 	adc.w	r9, r3, r5
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	469a      	mov	sl, r3
 80073f0:	4693      	mov	fp, r2
 80073f2:	4652      	mov	r2, sl
 80073f4:	465b      	mov	r3, fp
 80073f6:	4640      	mov	r0, r8
 80073f8:	4649      	mov	r1, r9
 80073fa:	f7f9 fb8f 	bl	8000b1c <__aeabi_uldivmod>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	4613      	mov	r3, r2
 8007404:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800740c:	d308      	bcc.n	8007420 <UART_SetConfig+0x430>
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007414:	d204      	bcs.n	8007420 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6a3a      	ldr	r2, [r7, #32]
 800741c:	60da      	str	r2, [r3, #12]
 800741e:	e0ce      	b.n	80075be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007426:	e0ca      	b.n	80075be <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007430:	d166      	bne.n	8007500 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007432:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007436:	2b08      	cmp	r3, #8
 8007438:	d827      	bhi.n	800748a <UART_SetConfig+0x49a>
 800743a:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <UART_SetConfig+0x450>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007465 	.word	0x08007465
 8007444:	0800746d 	.word	0x0800746d
 8007448:	08007475 	.word	0x08007475
 800744c:	0800748b 	.word	0x0800748b
 8007450:	0800747b 	.word	0x0800747b
 8007454:	0800748b 	.word	0x0800748b
 8007458:	0800748b 	.word	0x0800748b
 800745c:	0800748b 	.word	0x0800748b
 8007460:	08007483 	.word	0x08007483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007464:	f7fe f9f4 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
 8007468:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800746a:	e014      	b.n	8007496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800746c:	f7fe fa06 	bl	800587c <HAL_RCC_GetPCLK2Freq>
 8007470:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007472:	e010      	b.n	8007496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007474:	4b4e      	ldr	r3, [pc, #312]	; (80075b0 <UART_SetConfig+0x5c0>)
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007478:	e00d      	b.n	8007496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800747a:	f7fe f951 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 800747e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007480:	e009      	b.n	8007496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007488:	e005      	b.n	8007496 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 8090 	beq.w	80075be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	4a44      	ldr	r2, [pc, #272]	; (80075b4 <UART_SetConfig+0x5c4>)
 80074a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b0:	005a      	lsls	r2, r3, #1
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	441a      	add	r2, r3
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	d916      	bls.n	80074f8 <UART_SetConfig+0x508>
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d0:	d212      	bcs.n	80074f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	f023 030f 	bic.w	r3, r3, #15
 80074da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	085b      	lsrs	r3, r3, #1
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	8bfb      	ldrh	r3, [r7, #30]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	8bfa      	ldrh	r2, [r7, #30]
 80074f4:	60da      	str	r2, [r3, #12]
 80074f6:	e062      	b.n	80075be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074fe:	e05e      	b.n	80075be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007500:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007504:	2b08      	cmp	r3, #8
 8007506:	d828      	bhi.n	800755a <UART_SetConfig+0x56a>
 8007508:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <UART_SetConfig+0x520>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007535 	.word	0x08007535
 8007514:	0800753d 	.word	0x0800753d
 8007518:	08007545 	.word	0x08007545
 800751c:	0800755b 	.word	0x0800755b
 8007520:	0800754b 	.word	0x0800754b
 8007524:	0800755b 	.word	0x0800755b
 8007528:	0800755b 	.word	0x0800755b
 800752c:	0800755b 	.word	0x0800755b
 8007530:	08007553 	.word	0x08007553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007534:	f7fe f98c 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
 8007538:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800753a:	e014      	b.n	8007566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800753c:	f7fe f99e 	bl	800587c <HAL_RCC_GetPCLK2Freq>
 8007540:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007542:	e010      	b.n	8007566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007544:	4b1a      	ldr	r3, [pc, #104]	; (80075b0 <UART_SetConfig+0x5c0>)
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007548:	e00d      	b.n	8007566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800754a:	f7fe f8e9 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 800754e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007550:	e009      	b.n	8007566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007556:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007558:	e005      	b.n	8007566 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007564:	bf00      	nop
    }

    if (pclk != 0U)
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	2b00      	cmp	r3, #0
 800756a:	d028      	beq.n	80075be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	4a10      	ldr	r2, [pc, #64]	; (80075b4 <UART_SetConfig+0x5c4>)
 8007572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007576:	461a      	mov	r2, r3
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	fbb3 f2f2 	udiv	r2, r3, r2
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	085b      	lsrs	r3, r3, #1
 8007584:	441a      	add	r2, r3
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	fbb2 f3f3 	udiv	r3, r2, r3
 800758e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	2b0f      	cmp	r3, #15
 8007594:	d910      	bls.n	80075b8 <UART_SetConfig+0x5c8>
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759c:	d20c      	bcs.n	80075b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60da      	str	r2, [r3, #12]
 80075a8:	e009      	b.n	80075be <UART_SetConfig+0x5ce>
 80075aa:	bf00      	nop
 80075ac:	40008000 	.word	0x40008000
 80075b0:	00f42400 	.word	0x00f42400
 80075b4:	0800c968 	.word	0x0800c968
      }
      else
      {
        ret = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2200      	movs	r2, #0
 80075d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2200      	movs	r2, #0
 80075d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80075da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3730      	adds	r7, #48	; 0x30
 80075e2:	46bd      	mov	sp, r7
 80075e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080075e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d01a      	beq.n	80076fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076e6:	d10a      	bne.n	80076fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	605a      	str	r2, [r3, #4]
  }
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af02      	add	r7, sp, #8
 8007732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800773c:	f7f9 fb9c 	bl	8000e78 <HAL_GetTick>
 8007740:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0308 	and.w	r3, r3, #8
 800774c:	2b08      	cmp	r3, #8
 800774e:	d10e      	bne.n	800776e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f82f 	bl	80077c2 <UART_WaitOnFlagUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e025      	b.n	80077ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0304 	and.w	r3, r3, #4
 8007778:	2b04      	cmp	r3, #4
 800777a:	d10e      	bne.n	800779a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800777c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f819 	bl	80077c2 <UART_WaitOnFlagUntilTimeout>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e00f      	b.n	80077ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b09c      	sub	sp, #112	; 0x70
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	603b      	str	r3, [r7, #0]
 80077ce:	4613      	mov	r3, r2
 80077d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d2:	e0a9      	b.n	8007928 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077da:	f000 80a5 	beq.w	8007928 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077de:	f7f9 fb4b 	bl	8000e78 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80077ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d140      	bne.n	8007876 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007804:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007808:	667b      	str	r3, [r7, #100]	; 0x64
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007814:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007818:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e6      	bne.n	80077f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	663b      	str	r3, [r7, #96]	; 0x60
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007846:	64ba      	str	r2, [r7, #72]	; 0x48
 8007848:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800784c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e5      	bne.n	8007826 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2220      	movs	r2, #32
 800785e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2220      	movs	r2, #32
 8007866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e069      	b.n	800794a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d051      	beq.n	8007928 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800788e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007892:	d149      	bne.n	8007928 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800789c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
 80078be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e6      	bne.n	800789e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3308      	adds	r3, #8
 80078d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	613b      	str	r3, [r7, #16]
   return(result);
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f023 0301 	bic.w	r3, r3, #1
 80078e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3308      	adds	r3, #8
 80078ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078f0:	623a      	str	r2, [r7, #32]
 80078f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	69f9      	ldr	r1, [r7, #28]
 80078f6:	6a3a      	ldr	r2, [r7, #32]
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e5      	bne.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2220      	movs	r2, #32
 8007918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e010      	b.n	800794a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69da      	ldr	r2, [r3, #28]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4013      	ands	r3, r2
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	bf0c      	ite	eq
 8007938:	2301      	moveq	r3, #1
 800793a:	2300      	movne	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	461a      	mov	r2, r3
 8007940:	79fb      	ldrb	r3, [r7, #7]
 8007942:	429a      	cmp	r2, r3
 8007944:	f43f af46 	beq.w	80077d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3770      	adds	r7, #112	; 0x70
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007952:	b480      	push	{r7}
 8007954:	b085      	sub	sp, #20
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007960:	2b01      	cmp	r3, #1
 8007962:	d101      	bne.n	8007968 <HAL_UARTEx_DisableFifoMode+0x16>
 8007964:	2302      	movs	r3, #2
 8007966:	e027      	b.n	80079b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2224      	movs	r2, #36	; 0x24
 8007974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0201 	bic.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007996:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079d8:	2302      	movs	r3, #2
 80079da:	e02d      	b.n	8007a38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2224      	movs	r2, #36	; 0x24
 80079e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0201 	bic.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f84f 	bl	8007abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e02d      	b.n	8007ab4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2224      	movs	r2, #36	; 0x24
 8007a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0201 	bic.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f811 	bl	8007abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d108      	bne.n	8007ade <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007adc:	e031      	b.n	8007b42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ade:	2308      	movs	r3, #8
 8007ae0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ae2:	2308      	movs	r3, #8
 8007ae4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	0e5b      	lsrs	r3, r3, #25
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	0f5b      	lsrs	r3, r3, #29
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	7b3a      	ldrb	r2, [r7, #12]
 8007b0a:	4911      	ldr	r1, [pc, #68]	; (8007b50 <UARTEx_SetNbDataToProcess+0x94>)
 8007b0c:	5c8a      	ldrb	r2, [r1, r2]
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b12:	7b3a      	ldrb	r2, [r7, #12]
 8007b14:	490f      	ldr	r1, [pc, #60]	; (8007b54 <UARTEx_SetNbDataToProcess+0x98>)
 8007b16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b18:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	7b7a      	ldrb	r2, [r7, #13]
 8007b28:	4909      	ldr	r1, [pc, #36]	; (8007b50 <UARTEx_SetNbDataToProcess+0x94>)
 8007b2a:	5c8a      	ldrb	r2, [r1, r2]
 8007b2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b30:	7b7a      	ldrb	r2, [r7, #13]
 8007b32:	4908      	ldr	r1, [pc, #32]	; (8007b54 <UARTEx_SetNbDataToProcess+0x98>)
 8007b34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b36:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	0800c980 	.word	0x0800c980
 8007b54:	0800c988 	.word	0x0800c988

08007b58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b6a:	2b84      	cmp	r3, #132	; 0x84
 8007b6c:	d005      	beq.n	8007b7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4413      	add	r3, r2
 8007b76:	3303      	adds	r3, #3
 8007b78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b8c:	f000 fade 	bl	800814c <vTaskStartScheduler>
  
  return osOK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b98:	b089      	sub	sp, #36	; 0x24
 8007b9a:	af04      	add	r7, sp, #16
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d020      	beq.n	8007bea <osThreadCreate+0x54>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d01c      	beq.n	8007bea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685c      	ldr	r4, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681d      	ldr	r5, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691e      	ldr	r6, [r3, #16]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff ffc8 	bl	8007b58 <makeFreeRtosPriority>
 8007bc8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bd2:	9202      	str	r2, [sp, #8]
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	9100      	str	r1, [sp, #0]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	4632      	mov	r2, r6
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 f8ed 	bl	8007dbe <xTaskCreateStatic>
 8007be4:	4603      	mov	r3, r0
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	e01c      	b.n	8007c24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685c      	ldr	r4, [r3, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bf6:	b29e      	uxth	r6, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff ffaa 	bl	8007b58 <makeFreeRtosPriority>
 8007c04:	4602      	mov	r2, r0
 8007c06:	f107 030c 	add.w	r3, r7, #12
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	9200      	str	r2, [sp, #0]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	4632      	mov	r2, r6
 8007c12:	4629      	mov	r1, r5
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 f92f 	bl	8007e78 <xTaskCreate>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d001      	beq.n	8007c24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	e000      	b.n	8007c26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c24:	68fb      	ldr	r3, [r7, #12]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <osDelay+0x16>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	e000      	b.n	8007c46 <osDelay+0x18>
 8007c44:	2301      	movs	r3, #1
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fa4c 	bl	80080e4 <vTaskDelay>
  
  return osOK;
 8007c4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f103 0208 	add.w	r2, r3, #8
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f103 0208 	add.w	r2, r3, #8
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f103 0208 	add.w	r2, r3, #8
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	601a      	str	r2, [r3, #0]
}
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0e:	d103      	bne.n	8007d18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	e00c      	b.n	8007d32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	e002      	b.n	8007d26 <vListInsert+0x2e>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	60fb      	str	r3, [r7, #12]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d2f6      	bcs.n	8007d20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	601a      	str	r2, [r3, #0]
}
 8007d5e:	bf00      	nop
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b085      	sub	sp, #20
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6892      	ldr	r2, [r2, #8]
 8007d80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6852      	ldr	r2, [r2, #4]
 8007d8a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d103      	bne.n	8007d9e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	1e5a      	subs	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b08e      	sub	sp, #56	; 0x38
 8007dc2:	af04      	add	r7, sp, #16
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	607a      	str	r2, [r7, #4]
 8007dca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007de4:	bf00      	nop
 8007de6:	e7fe      	b.n	8007de6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10a      	bne.n	8007e04 <xTaskCreateStatic+0x46>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	61fb      	str	r3, [r7, #28]
}
 8007e00:	bf00      	nop
 8007e02:	e7fe      	b.n	8007e02 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e04:	2354      	movs	r3, #84	; 0x54
 8007e06:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2b54      	cmp	r3, #84	; 0x54
 8007e0c:	d00a      	beq.n	8007e24 <xTaskCreateStatic+0x66>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	61bb      	str	r3, [r7, #24]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01e      	beq.n	8007e6a <xTaskCreateStatic+0xac>
 8007e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01b      	beq.n	8007e6a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e44:	2300      	movs	r3, #0
 8007e46:	9303      	str	r3, [sp, #12]
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	9302      	str	r3, [sp, #8]
 8007e4c:	f107 0314 	add.w	r3, r7, #20
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f850 	bl	8007f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e64:	f000 f8d4 	bl	8008010 <prvAddNewTaskToReadyList>
 8007e68:	e001      	b.n	8007e6e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e6e:	697b      	ldr	r3, [r7, #20]
	}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3728      	adds	r7, #40	; 0x28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08c      	sub	sp, #48	; 0x30
 8007e7c:	af04      	add	r7, sp, #16
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	4613      	mov	r3, r2
 8007e86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e88:	88fb      	ldrh	r3, [r7, #6]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fec3 	bl	8008c18 <pvPortMalloc>
 8007e92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00e      	beq.n	8007eb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e9a:	2054      	movs	r0, #84	; 0x54
 8007e9c:	f000 febc 	bl	8008c18 <pvPortMalloc>
 8007ea0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	631a      	str	r2, [r3, #48]	; 0x30
 8007eae:	e005      	b.n	8007ebc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007eb0:	6978      	ldr	r0, [r7, #20]
 8007eb2:	f000 ff7d 	bl	8008db0 <vPortFree>
 8007eb6:	e001      	b.n	8007ebc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d017      	beq.n	8007ef2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007eca:	88fa      	ldrh	r2, [r7, #6]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	9302      	str	r3, [sp, #8]
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f80e 	bl	8007f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ee6:	69f8      	ldr	r0, [r7, #28]
 8007ee8:	f000 f892 	bl	8008010 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007eec:	2301      	movs	r3, #1
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	e002      	b.n	8007ef8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
	}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b088      	sub	sp, #32
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	f023 0307 	bic.w	r3, r3, #7
 8007f28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <prvInitialiseNewTask+0x48>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	617b      	str	r3, [r7, #20]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01f      	beq.n	8007f90 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f50:	2300      	movs	r3, #0
 8007f52:	61fb      	str	r3, [r7, #28]
 8007f54:	e012      	b.n	8007f7c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	7819      	ldrb	r1, [r3, #0]
 8007f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	4413      	add	r3, r2
 8007f64:	3334      	adds	r3, #52	; 0x34
 8007f66:	460a      	mov	r2, r1
 8007f68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	4413      	add	r3, r2
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d006      	beq.n	8007f84 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	61fb      	str	r3, [r7, #28]
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	2b0f      	cmp	r3, #15
 8007f80:	d9e9      	bls.n	8007f56 <prvInitialiseNewTask+0x54>
 8007f82:	e000      	b.n	8007f86 <prvInitialiseNewTask+0x84>
			{
				break;
 8007f84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f8e:	e003      	b.n	8007f98 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	2b06      	cmp	r3, #6
 8007f9c:	d901      	bls.n	8007fa2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f9e:	2306      	movs	r3, #6
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fa6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7ff fe6c 	bl	8007c96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	3318      	adds	r3, #24
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff fe67 	bl	8007c96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fcc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	f1c3 0207 	rsb	r2, r3, #7
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fdc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	68f9      	ldr	r1, [r7, #12]
 8007ff0:	69b8      	ldr	r0, [r7, #24]
 8007ff2:	f000 fc05 	bl	8008800 <pxPortInitialiseStack>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008006:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008008:	bf00      	nop
 800800a:	3720      	adds	r7, #32
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008018:	f000 fd1c 	bl	8008a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800801c:	4b2a      	ldr	r3, [pc, #168]	; (80080c8 <prvAddNewTaskToReadyList+0xb8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3301      	adds	r3, #1
 8008022:	4a29      	ldr	r2, [pc, #164]	; (80080c8 <prvAddNewTaskToReadyList+0xb8>)
 8008024:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008026:	4b29      	ldr	r3, [pc, #164]	; (80080cc <prvAddNewTaskToReadyList+0xbc>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d109      	bne.n	8008042 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800802e:	4a27      	ldr	r2, [pc, #156]	; (80080cc <prvAddNewTaskToReadyList+0xbc>)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008034:	4b24      	ldr	r3, [pc, #144]	; (80080c8 <prvAddNewTaskToReadyList+0xb8>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d110      	bne.n	800805e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800803c:	f000 fabc 	bl	80085b8 <prvInitialiseTaskLists>
 8008040:	e00d      	b.n	800805e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008042:	4b23      	ldr	r3, [pc, #140]	; (80080d0 <prvAddNewTaskToReadyList+0xc0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d109      	bne.n	800805e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800804a:	4b20      	ldr	r3, [pc, #128]	; (80080cc <prvAddNewTaskToReadyList+0xbc>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	429a      	cmp	r2, r3
 8008056:	d802      	bhi.n	800805e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008058:	4a1c      	ldr	r2, [pc, #112]	; (80080cc <prvAddNewTaskToReadyList+0xbc>)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800805e:	4b1d      	ldr	r3, [pc, #116]	; (80080d4 <prvAddNewTaskToReadyList+0xc4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3301      	adds	r3, #1
 8008064:	4a1b      	ldr	r2, [pc, #108]	; (80080d4 <prvAddNewTaskToReadyList+0xc4>)
 8008066:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	2201      	movs	r2, #1
 800806e:	409a      	lsls	r2, r3
 8008070:	4b19      	ldr	r3, [pc, #100]	; (80080d8 <prvAddNewTaskToReadyList+0xc8>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4313      	orrs	r3, r2
 8008076:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <prvAddNewTaskToReadyList+0xc8>)
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807e:	4613      	mov	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4a15      	ldr	r2, [pc, #84]	; (80080dc <prvAddNewTaskToReadyList+0xcc>)
 8008088:	441a      	add	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3304      	adds	r3, #4
 800808e:	4619      	mov	r1, r3
 8008090:	4610      	mov	r0, r2
 8008092:	f7ff fe0d 	bl	8007cb0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008096:	f000 fd0d 	bl	8008ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800809a:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <prvAddNewTaskToReadyList+0xc0>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00e      	beq.n	80080c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080a2:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <prvAddNewTaskToReadyList+0xbc>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d207      	bcs.n	80080c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080b0:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <prvAddNewTaskToReadyList+0xd0>)
 80080b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20015a9c 	.word	0x20015a9c
 80080cc:	2001599c 	.word	0x2001599c
 80080d0:	20015aa8 	.word	0x20015aa8
 80080d4:	20015ab8 	.word	0x20015ab8
 80080d8:	20015aa4 	.word	0x20015aa4
 80080dc:	200159a0 	.word	0x200159a0
 80080e0:	e000ed04 	.word	0xe000ed04

080080e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d017      	beq.n	8008126 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <vTaskDelay+0x60>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <vTaskDelay+0x30>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	60bb      	str	r3, [r7, #8]
}
 8008110:	bf00      	nop
 8008112:	e7fe      	b.n	8008112 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008114:	f000 f87a 	bl	800820c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008118:	2100      	movs	r1, #0
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fb0a 	bl	8008734 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008120:	f000 f882 	bl	8008228 <xTaskResumeAll>
 8008124:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d107      	bne.n	800813c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <vTaskDelay+0x64>)
 800812e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	20015ac4 	.word	0x20015ac4
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08a      	sub	sp, #40	; 0x28
 8008150:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800815a:	463a      	mov	r2, r7
 800815c:	1d39      	adds	r1, r7, #4
 800815e:	f107 0308 	add.w	r3, r7, #8
 8008162:	4618      	mov	r0, r3
 8008164:	f000 ff42 	bl	8008fec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	9202      	str	r2, [sp, #8]
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	2300      	movs	r3, #0
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	2300      	movs	r3, #0
 8008178:	460a      	mov	r2, r1
 800817a:	491e      	ldr	r1, [pc, #120]	; (80081f4 <vTaskStartScheduler+0xa8>)
 800817c:	481e      	ldr	r0, [pc, #120]	; (80081f8 <vTaskStartScheduler+0xac>)
 800817e:	f7ff fe1e 	bl	8007dbe <xTaskCreateStatic>
 8008182:	4603      	mov	r3, r0
 8008184:	4a1d      	ldr	r2, [pc, #116]	; (80081fc <vTaskStartScheduler+0xb0>)
 8008186:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008188:	4b1c      	ldr	r3, [pc, #112]	; (80081fc <vTaskStartScheduler+0xb0>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008190:	2301      	movs	r3, #1
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	e001      	b.n	800819a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d116      	bne.n	80081ce <vTaskStartScheduler+0x82>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	613b      	str	r3, [r7, #16]
}
 80081b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081b4:	4b12      	ldr	r3, [pc, #72]	; (8008200 <vTaskStartScheduler+0xb4>)
 80081b6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081bc:	4b11      	ldr	r3, [pc, #68]	; (8008204 <vTaskStartScheduler+0xb8>)
 80081be:	2201      	movs	r2, #1
 80081c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081c2:	4b11      	ldr	r3, [pc, #68]	; (8008208 <vTaskStartScheduler+0xbc>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081c8:	f000 fba2 	bl	8008910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081cc:	e00e      	b.n	80081ec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d4:	d10a      	bne.n	80081ec <vTaskStartScheduler+0xa0>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	60fb      	str	r3, [r7, #12]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <vTaskStartScheduler+0x9e>
}
 80081ec:	bf00      	nop
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	0800c860 	.word	0x0800c860
 80081f8:	08008589 	.word	0x08008589
 80081fc:	20015ac0 	.word	0x20015ac0
 8008200:	20015abc 	.word	0x20015abc
 8008204:	20015aa8 	.word	0x20015aa8
 8008208:	20015aa0 	.word	0x20015aa0

0800820c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008210:	4b04      	ldr	r3, [pc, #16]	; (8008224 <vTaskSuspendAll+0x18>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3301      	adds	r3, #1
 8008216:	4a03      	ldr	r2, [pc, #12]	; (8008224 <vTaskSuspendAll+0x18>)
 8008218:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800821a:	bf00      	nop
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	20015ac4 	.word	0x20015ac4

08008228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008232:	2300      	movs	r3, #0
 8008234:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008236:	4b41      	ldr	r3, [pc, #260]	; (800833c <xTaskResumeAll+0x114>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <xTaskResumeAll+0x2c>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	603b      	str	r3, [r7, #0]
}
 8008250:	bf00      	nop
 8008252:	e7fe      	b.n	8008252 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008254:	f000 fbfe 	bl	8008a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008258:	4b38      	ldr	r3, [pc, #224]	; (800833c <xTaskResumeAll+0x114>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3b01      	subs	r3, #1
 800825e:	4a37      	ldr	r2, [pc, #220]	; (800833c <xTaskResumeAll+0x114>)
 8008260:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008262:	4b36      	ldr	r3, [pc, #216]	; (800833c <xTaskResumeAll+0x114>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d161      	bne.n	800832e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800826a:	4b35      	ldr	r3, [pc, #212]	; (8008340 <xTaskResumeAll+0x118>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d05d      	beq.n	800832e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008272:	e02e      	b.n	80082d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008274:	4b33      	ldr	r3, [pc, #204]	; (8008344 <xTaskResumeAll+0x11c>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3318      	adds	r3, #24
 8008280:	4618      	mov	r0, r3
 8008282:	f7ff fd72 	bl	8007d6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3304      	adds	r3, #4
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fd6d 	bl	8007d6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	2201      	movs	r2, #1
 8008296:	409a      	lsls	r2, r3
 8008298:	4b2b      	ldr	r3, [pc, #172]	; (8008348 <xTaskResumeAll+0x120>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4313      	orrs	r3, r2
 800829e:	4a2a      	ldr	r2, [pc, #168]	; (8008348 <xTaskResumeAll+0x120>)
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4a27      	ldr	r2, [pc, #156]	; (800834c <xTaskResumeAll+0x124>)
 80082b0:	441a      	add	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3304      	adds	r3, #4
 80082b6:	4619      	mov	r1, r3
 80082b8:	4610      	mov	r0, r2
 80082ba:	f7ff fcf9 	bl	8007cb0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c2:	4b23      	ldr	r3, [pc, #140]	; (8008350 <xTaskResumeAll+0x128>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d302      	bcc.n	80082d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80082cc:	4b21      	ldr	r3, [pc, #132]	; (8008354 <xTaskResumeAll+0x12c>)
 80082ce:	2201      	movs	r2, #1
 80082d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082d2:	4b1c      	ldr	r3, [pc, #112]	; (8008344 <xTaskResumeAll+0x11c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1cc      	bne.n	8008274 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082e0:	f000 fa08 	bl	80086f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80082e4:	4b1c      	ldr	r3, [pc, #112]	; (8008358 <xTaskResumeAll+0x130>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d010      	beq.n	8008312 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082f0:	f000 f836 	bl	8008360 <xTaskIncrementTick>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80082fa:	4b16      	ldr	r3, [pc, #88]	; (8008354 <xTaskResumeAll+0x12c>)
 80082fc:	2201      	movs	r2, #1
 80082fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3b01      	subs	r3, #1
 8008304:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f1      	bne.n	80082f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800830c:	4b12      	ldr	r3, [pc, #72]	; (8008358 <xTaskResumeAll+0x130>)
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008312:	4b10      	ldr	r3, [pc, #64]	; (8008354 <xTaskResumeAll+0x12c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800831a:	2301      	movs	r3, #1
 800831c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <xTaskResumeAll+0x134>)
 8008320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800832e:	f000 fbc1 	bl	8008ab4 <vPortExitCritical>

	return xAlreadyYielded;
 8008332:	68bb      	ldr	r3, [r7, #8]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20015ac4 	.word	0x20015ac4
 8008340:	20015a9c 	.word	0x20015a9c
 8008344:	20015a5c 	.word	0x20015a5c
 8008348:	20015aa4 	.word	0x20015aa4
 800834c:	200159a0 	.word	0x200159a0
 8008350:	2001599c 	.word	0x2001599c
 8008354:	20015ab0 	.word	0x20015ab0
 8008358:	20015aac 	.word	0x20015aac
 800835c:	e000ed04 	.word	0xe000ed04

08008360 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800836a:	4b4e      	ldr	r3, [pc, #312]	; (80084a4 <xTaskIncrementTick+0x144>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f040 808e 	bne.w	8008490 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008374:	4b4c      	ldr	r3, [pc, #304]	; (80084a8 <xTaskIncrementTick+0x148>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800837c:	4a4a      	ldr	r2, [pc, #296]	; (80084a8 <xTaskIncrementTick+0x148>)
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d120      	bne.n	80083ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008388:	4b48      	ldr	r3, [pc, #288]	; (80084ac <xTaskIncrementTick+0x14c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	603b      	str	r3, [r7, #0]
}
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <xTaskIncrementTick+0x46>
 80083a8:	4b40      	ldr	r3, [pc, #256]	; (80084ac <xTaskIncrementTick+0x14c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	4b40      	ldr	r3, [pc, #256]	; (80084b0 <xTaskIncrementTick+0x150>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a3e      	ldr	r2, [pc, #248]	; (80084ac <xTaskIncrementTick+0x14c>)
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	4a3e      	ldr	r2, [pc, #248]	; (80084b0 <xTaskIncrementTick+0x150>)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	4b3d      	ldr	r3, [pc, #244]	; (80084b4 <xTaskIncrementTick+0x154>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3301      	adds	r3, #1
 80083c2:	4a3c      	ldr	r2, [pc, #240]	; (80084b4 <xTaskIncrementTick+0x154>)
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	f000 f995 	bl	80086f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083ca:	4b3b      	ldr	r3, [pc, #236]	; (80084b8 <xTaskIncrementTick+0x158>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d348      	bcc.n	8008466 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083d4:	4b35      	ldr	r3, [pc, #212]	; (80084ac <xTaskIncrementTick+0x14c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d104      	bne.n	80083e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083de:	4b36      	ldr	r3, [pc, #216]	; (80084b8 <xTaskIncrementTick+0x158>)
 80083e0:	f04f 32ff 	mov.w	r2, #4294967295
 80083e4:	601a      	str	r2, [r3, #0]
					break;
 80083e6:	e03e      	b.n	8008466 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e8:	4b30      	ldr	r3, [pc, #192]	; (80084ac <xTaskIncrementTick+0x14c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d203      	bcs.n	8008408 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008400:	4a2d      	ldr	r2, [pc, #180]	; (80084b8 <xTaskIncrementTick+0x158>)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008406:	e02e      	b.n	8008466 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	3304      	adds	r3, #4
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff fcac 	bl	8007d6a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	2b00      	cmp	r3, #0
 8008418:	d004      	beq.n	8008424 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	3318      	adds	r3, #24
 800841e:	4618      	mov	r0, r3
 8008420:	f7ff fca3 	bl	8007d6a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	2201      	movs	r2, #1
 800842a:	409a      	lsls	r2, r3
 800842c:	4b23      	ldr	r3, [pc, #140]	; (80084bc <xTaskIncrementTick+0x15c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4313      	orrs	r3, r2
 8008432:	4a22      	ldr	r2, [pc, #136]	; (80084bc <xTaskIncrementTick+0x15c>)
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <xTaskIncrementTick+0x160>)
 8008444:	441a      	add	r2, r3
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	3304      	adds	r3, #4
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f7ff fc2f 	bl	8007cb0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008456:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <xTaskIncrementTick+0x164>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845c:	429a      	cmp	r2, r3
 800845e:	d3b9      	bcc.n	80083d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008460:	2301      	movs	r3, #1
 8008462:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008464:	e7b6      	b.n	80083d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008466:	4b17      	ldr	r3, [pc, #92]	; (80084c4 <xTaskIncrementTick+0x164>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846c:	4914      	ldr	r1, [pc, #80]	; (80084c0 <xTaskIncrementTick+0x160>)
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d901      	bls.n	8008482 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800847e:	2301      	movs	r3, #1
 8008480:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008482:	4b11      	ldr	r3, [pc, #68]	; (80084c8 <xTaskIncrementTick+0x168>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d007      	beq.n	800849a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800848a:	2301      	movs	r3, #1
 800848c:	617b      	str	r3, [r7, #20]
 800848e:	e004      	b.n	800849a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008490:	4b0e      	ldr	r3, [pc, #56]	; (80084cc <xTaskIncrementTick+0x16c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3301      	adds	r3, #1
 8008496:	4a0d      	ldr	r2, [pc, #52]	; (80084cc <xTaskIncrementTick+0x16c>)
 8008498:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800849a:	697b      	ldr	r3, [r7, #20]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20015ac4 	.word	0x20015ac4
 80084a8:	20015aa0 	.word	0x20015aa0
 80084ac:	20015a54 	.word	0x20015a54
 80084b0:	20015a58 	.word	0x20015a58
 80084b4:	20015ab4 	.word	0x20015ab4
 80084b8:	20015abc 	.word	0x20015abc
 80084bc:	20015aa4 	.word	0x20015aa4
 80084c0:	200159a0 	.word	0x200159a0
 80084c4:	2001599c 	.word	0x2001599c
 80084c8:	20015ab0 	.word	0x20015ab0
 80084cc:	20015aac 	.word	0x20015aac

080084d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084d0:	b480      	push	{r7}
 80084d2:	b087      	sub	sp, #28
 80084d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084d6:	4b27      	ldr	r3, [pc, #156]	; (8008574 <vTaskSwitchContext+0xa4>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084de:	4b26      	ldr	r3, [pc, #152]	; (8008578 <vTaskSwitchContext+0xa8>)
 80084e0:	2201      	movs	r2, #1
 80084e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084e4:	e03f      	b.n	8008566 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80084e6:	4b24      	ldr	r3, [pc, #144]	; (8008578 <vTaskSwitchContext+0xa8>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ec:	4b23      	ldr	r3, [pc, #140]	; (800857c <vTaskSwitchContext+0xac>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	fab3 f383 	clz	r3, r3
 80084f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	f1c3 031f 	rsb	r3, r3, #31
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	491f      	ldr	r1, [pc, #124]	; (8008580 <vTaskSwitchContext+0xb0>)
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	4613      	mov	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	440b      	add	r3, r1
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	607b      	str	r3, [r7, #4]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <vTaskSwitchContext+0x5a>
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4a12      	ldr	r2, [pc, #72]	; (8008580 <vTaskSwitchContext+0xb0>)
 8008538:	4413      	add	r3, r2
 800853a:	613b      	str	r3, [r7, #16]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	605a      	str	r2, [r3, #4]
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	3308      	adds	r3, #8
 800854e:	429a      	cmp	r2, r3
 8008550:	d104      	bne.n	800855c <vTaskSwitchContext+0x8c>
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	605a      	str	r2, [r3, #4]
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	4a08      	ldr	r2, [pc, #32]	; (8008584 <vTaskSwitchContext+0xb4>)
 8008564:	6013      	str	r3, [r2, #0]
}
 8008566:	bf00      	nop
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20015ac4 	.word	0x20015ac4
 8008578:	20015ab0 	.word	0x20015ab0
 800857c:	20015aa4 	.word	0x20015aa4
 8008580:	200159a0 	.word	0x200159a0
 8008584:	2001599c 	.word	0x2001599c

08008588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008590:	f000 f852 	bl	8008638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008594:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <prvIdleTask+0x28>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d9f9      	bls.n	8008590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800859c:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <prvIdleTask+0x2c>)
 800859e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085ac:	e7f0      	b.n	8008590 <prvIdleTask+0x8>
 80085ae:	bf00      	nop
 80085b0:	200159a0 	.word	0x200159a0
 80085b4:	e000ed04 	.word	0xe000ed04

080085b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085be:	2300      	movs	r3, #0
 80085c0:	607b      	str	r3, [r7, #4]
 80085c2:	e00c      	b.n	80085de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	4613      	mov	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4a12      	ldr	r2, [pc, #72]	; (8008618 <prvInitialiseTaskLists+0x60>)
 80085d0:	4413      	add	r3, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7ff fb3f 	bl	8007c56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	3301      	adds	r3, #1
 80085dc:	607b      	str	r3, [r7, #4]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b06      	cmp	r3, #6
 80085e2:	d9ef      	bls.n	80085c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085e4:	480d      	ldr	r0, [pc, #52]	; (800861c <prvInitialiseTaskLists+0x64>)
 80085e6:	f7ff fb36 	bl	8007c56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085ea:	480d      	ldr	r0, [pc, #52]	; (8008620 <prvInitialiseTaskLists+0x68>)
 80085ec:	f7ff fb33 	bl	8007c56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085f0:	480c      	ldr	r0, [pc, #48]	; (8008624 <prvInitialiseTaskLists+0x6c>)
 80085f2:	f7ff fb30 	bl	8007c56 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085f6:	480c      	ldr	r0, [pc, #48]	; (8008628 <prvInitialiseTaskLists+0x70>)
 80085f8:	f7ff fb2d 	bl	8007c56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085fc:	480b      	ldr	r0, [pc, #44]	; (800862c <prvInitialiseTaskLists+0x74>)
 80085fe:	f7ff fb2a 	bl	8007c56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008602:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <prvInitialiseTaskLists+0x78>)
 8008604:	4a05      	ldr	r2, [pc, #20]	; (800861c <prvInitialiseTaskLists+0x64>)
 8008606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008608:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <prvInitialiseTaskLists+0x7c>)
 800860a:	4a05      	ldr	r2, [pc, #20]	; (8008620 <prvInitialiseTaskLists+0x68>)
 800860c:	601a      	str	r2, [r3, #0]
}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	200159a0 	.word	0x200159a0
 800861c:	20015a2c 	.word	0x20015a2c
 8008620:	20015a40 	.word	0x20015a40
 8008624:	20015a5c 	.word	0x20015a5c
 8008628:	20015a70 	.word	0x20015a70
 800862c:	20015a88 	.word	0x20015a88
 8008630:	20015a54 	.word	0x20015a54
 8008634:	20015a58 	.word	0x20015a58

08008638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800863e:	e019      	b.n	8008674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008640:	f000 fa08 	bl	8008a54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008644:	4b10      	ldr	r3, [pc, #64]	; (8008688 <prvCheckTasksWaitingTermination+0x50>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3304      	adds	r3, #4
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff fb8a 	bl	8007d6a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008656:	4b0d      	ldr	r3, [pc, #52]	; (800868c <prvCheckTasksWaitingTermination+0x54>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3b01      	subs	r3, #1
 800865c:	4a0b      	ldr	r2, [pc, #44]	; (800868c <prvCheckTasksWaitingTermination+0x54>)
 800865e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008660:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <prvCheckTasksWaitingTermination+0x58>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3b01      	subs	r3, #1
 8008666:	4a0a      	ldr	r2, [pc, #40]	; (8008690 <prvCheckTasksWaitingTermination+0x58>)
 8008668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800866a:	f000 fa23 	bl	8008ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f810 	bl	8008694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008674:	4b06      	ldr	r3, [pc, #24]	; (8008690 <prvCheckTasksWaitingTermination+0x58>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e1      	bne.n	8008640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800867c:	bf00      	nop
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20015a70 	.word	0x20015a70
 800868c:	20015a9c 	.word	0x20015a9c
 8008690:	20015a84 	.word	0x20015a84

08008694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d108      	bne.n	80086b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fb80 	bl	8008db0 <vPortFree>
				vPortFree( pxTCB );
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fb7d 	bl	8008db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086b6:	e018      	b.n	80086ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d103      	bne.n	80086ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fb74 	bl	8008db0 <vPortFree>
	}
 80086c8:	e00f      	b.n	80086ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d00a      	beq.n	80086ea <prvDeleteTCB+0x56>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	60fb      	str	r3, [r7, #12]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <prvDeleteTCB+0x54>
	}
 80086ea:	bf00      	nop
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086fa:	4b0c      	ldr	r3, [pc, #48]	; (800872c <prvResetNextTaskUnblockTime+0x38>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d104      	bne.n	800870e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008704:	4b0a      	ldr	r3, [pc, #40]	; (8008730 <prvResetNextTaskUnblockTime+0x3c>)
 8008706:	f04f 32ff 	mov.w	r2, #4294967295
 800870a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800870c:	e008      	b.n	8008720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870e:	4b07      	ldr	r3, [pc, #28]	; (800872c <prvResetNextTaskUnblockTime+0x38>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	4a04      	ldr	r2, [pc, #16]	; (8008730 <prvResetNextTaskUnblockTime+0x3c>)
 800871e:	6013      	str	r3, [r2, #0]
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	20015a54 	.word	0x20015a54
 8008730:	20015abc 	.word	0x20015abc

08008734 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800873e:	4b29      	ldr	r3, [pc, #164]	; (80087e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008744:	4b28      	ldr	r3, [pc, #160]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3304      	adds	r3, #4
 800874a:	4618      	mov	r0, r3
 800874c:	f7ff fb0d 	bl	8007d6a <uxListRemove>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10b      	bne.n	800876e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008756:	4b24      	ldr	r3, [pc, #144]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	2201      	movs	r2, #1
 800875e:	fa02 f303 	lsl.w	r3, r2, r3
 8008762:	43da      	mvns	r2, r3
 8008764:	4b21      	ldr	r3, [pc, #132]	; (80087ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4013      	ands	r3, r2
 800876a:	4a20      	ldr	r2, [pc, #128]	; (80087ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800876c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008774:	d10a      	bne.n	800878c <prvAddCurrentTaskToDelayedList+0x58>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d007      	beq.n	800878c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800877c:	4b1a      	ldr	r3, [pc, #104]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3304      	adds	r3, #4
 8008782:	4619      	mov	r1, r3
 8008784:	481a      	ldr	r0, [pc, #104]	; (80087f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008786:	f7ff fa93 	bl	8007cb0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800878a:	e026      	b.n	80087da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4413      	add	r3, r2
 8008792:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008794:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d209      	bcs.n	80087b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087a4:	4b13      	ldr	r3, [pc, #76]	; (80087f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3304      	adds	r3, #4
 80087ae:	4619      	mov	r1, r3
 80087b0:	4610      	mov	r0, r2
 80087b2:	f7ff faa1 	bl	8007cf8 <vListInsert>
}
 80087b6:	e010      	b.n	80087da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087b8:	4b0f      	ldr	r3, [pc, #60]	; (80087f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3304      	adds	r3, #4
 80087c2:	4619      	mov	r1, r3
 80087c4:	4610      	mov	r0, r2
 80087c6:	f7ff fa97 	bl	8007cf8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087ca:	4b0c      	ldr	r3, [pc, #48]	; (80087fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d202      	bcs.n	80087da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80087d4:	4a09      	ldr	r2, [pc, #36]	; (80087fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6013      	str	r3, [r2, #0]
}
 80087da:	bf00      	nop
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20015aa0 	.word	0x20015aa0
 80087e8:	2001599c 	.word	0x2001599c
 80087ec:	20015aa4 	.word	0x20015aa4
 80087f0:	20015a88 	.word	0x20015a88
 80087f4:	20015a58 	.word	0x20015a58
 80087f8:	20015a54 	.word	0x20015a54
 80087fc:	20015abc 	.word	0x20015abc

08008800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3b04      	subs	r3, #4
 8008810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3b04      	subs	r3, #4
 800881e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f023 0201 	bic.w	r2, r3, #1
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3b04      	subs	r3, #4
 800882e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008830:	4a0c      	ldr	r2, [pc, #48]	; (8008864 <pxPortInitialiseStack+0x64>)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3b14      	subs	r3, #20
 800883a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3b04      	subs	r3, #4
 8008846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f06f 0202 	mvn.w	r2, #2
 800884e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3b20      	subs	r3, #32
 8008854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008856:	68fb      	ldr	r3, [r7, #12]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	08008869 	.word	0x08008869

08008868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008872:	4b12      	ldr	r3, [pc, #72]	; (80088bc <prvTaskExitError+0x54>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887a:	d00a      	beq.n	8008892 <prvTaskExitError+0x2a>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	60fb      	str	r3, [r7, #12]
}
 800888e:	bf00      	nop
 8008890:	e7fe      	b.n	8008890 <prvTaskExitError+0x28>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	60bb      	str	r3, [r7, #8]
}
 80088a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088a6:	bf00      	nop
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0fc      	beq.n	80088a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088ae:	bf00      	nop
 80088b0:	bf00      	nop
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	20000008 	.word	0x20000008

080088c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088c0:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <pxCurrentTCBConst2>)
 80088c2:	6819      	ldr	r1, [r3, #0]
 80088c4:	6808      	ldr	r0, [r1, #0]
 80088c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ca:	f380 8809 	msr	PSP, r0
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f04f 0000 	mov.w	r0, #0
 80088d6:	f380 8811 	msr	BASEPRI, r0
 80088da:	4770      	bx	lr
 80088dc:	f3af 8000 	nop.w

080088e0 <pxCurrentTCBConst2>:
 80088e0:	2001599c 	.word	0x2001599c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop

080088e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088e8:	4808      	ldr	r0, [pc, #32]	; (800890c <prvPortStartFirstTask+0x24>)
 80088ea:	6800      	ldr	r0, [r0, #0]
 80088ec:	6800      	ldr	r0, [r0, #0]
 80088ee:	f380 8808 	msr	MSP, r0
 80088f2:	f04f 0000 	mov.w	r0, #0
 80088f6:	f380 8814 	msr	CONTROL, r0
 80088fa:	b662      	cpsie	i
 80088fc:	b661      	cpsie	f
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	df00      	svc	0
 8008908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800890a:	bf00      	nop
 800890c:	e000ed08 	.word	0xe000ed08

08008910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008916:	4b46      	ldr	r3, [pc, #280]	; (8008a30 <xPortStartScheduler+0x120>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a46      	ldr	r2, [pc, #280]	; (8008a34 <xPortStartScheduler+0x124>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d10a      	bne.n	8008936 <xPortStartScheduler+0x26>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	613b      	str	r3, [r7, #16]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008936:	4b3e      	ldr	r3, [pc, #248]	; (8008a30 <xPortStartScheduler+0x120>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a3f      	ldr	r2, [pc, #252]	; (8008a38 <xPortStartScheduler+0x128>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d10a      	bne.n	8008956 <xPortStartScheduler+0x46>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	60fb      	str	r3, [r7, #12]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008956:	4b39      	ldr	r3, [pc, #228]	; (8008a3c <xPortStartScheduler+0x12c>)
 8008958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	b2db      	uxtb	r3, r3
 8008960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	22ff      	movs	r2, #255	; 0xff
 8008966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008978:	b2da      	uxtb	r2, r3
 800897a:	4b31      	ldr	r3, [pc, #196]	; (8008a40 <xPortStartScheduler+0x130>)
 800897c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800897e:	4b31      	ldr	r3, [pc, #196]	; (8008a44 <xPortStartScheduler+0x134>)
 8008980:	2207      	movs	r2, #7
 8008982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008984:	e009      	b.n	800899a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008986:	4b2f      	ldr	r3, [pc, #188]	; (8008a44 <xPortStartScheduler+0x134>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3b01      	subs	r3, #1
 800898c:	4a2d      	ldr	r2, [pc, #180]	; (8008a44 <xPortStartScheduler+0x134>)
 800898e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008990:	78fb      	ldrb	r3, [r7, #3]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	b2db      	uxtb	r3, r3
 8008998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a2:	2b80      	cmp	r3, #128	; 0x80
 80089a4:	d0ef      	beq.n	8008986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089a6:	4b27      	ldr	r3, [pc, #156]	; (8008a44 <xPortStartScheduler+0x134>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f1c3 0307 	rsb	r3, r3, #7
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d00a      	beq.n	80089c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	60bb      	str	r3, [r7, #8]
}
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089c8:	4b1e      	ldr	r3, [pc, #120]	; (8008a44 <xPortStartScheduler+0x134>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	021b      	lsls	r3, r3, #8
 80089ce:	4a1d      	ldr	r2, [pc, #116]	; (8008a44 <xPortStartScheduler+0x134>)
 80089d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089d2:	4b1c      	ldr	r3, [pc, #112]	; (8008a44 <xPortStartScheduler+0x134>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089da:	4a1a      	ldr	r2, [pc, #104]	; (8008a44 <xPortStartScheduler+0x134>)
 80089dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089e6:	4b18      	ldr	r3, [pc, #96]	; (8008a48 <xPortStartScheduler+0x138>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a17      	ldr	r2, [pc, #92]	; (8008a48 <xPortStartScheduler+0x138>)
 80089ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089f2:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <xPortStartScheduler+0x138>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a14      	ldr	r2, [pc, #80]	; (8008a48 <xPortStartScheduler+0x138>)
 80089f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089fe:	f000 f8dd 	bl	8008bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a02:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <xPortStartScheduler+0x13c>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a08:	f000 f8fc 	bl	8008c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a0c:	4b10      	ldr	r3, [pc, #64]	; (8008a50 <xPortStartScheduler+0x140>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a0f      	ldr	r2, [pc, #60]	; (8008a50 <xPortStartScheduler+0x140>)
 8008a12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a18:	f7ff ff66 	bl	80088e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a1c:	f7ff fd58 	bl	80084d0 <vTaskSwitchContext>
	prvTaskExitError();
 8008a20:	f7ff ff22 	bl	8008868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	e000ed00 	.word	0xe000ed00
 8008a34:	410fc271 	.word	0x410fc271
 8008a38:	410fc270 	.word	0x410fc270
 8008a3c:	e000e400 	.word	0xe000e400
 8008a40:	20015ac8 	.word	0x20015ac8
 8008a44:	20015acc 	.word	0x20015acc
 8008a48:	e000ed20 	.word	0xe000ed20
 8008a4c:	20000008 	.word	0x20000008
 8008a50:	e000ef34 	.word	0xe000ef34

08008a54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	607b      	str	r3, [r7, #4]
}
 8008a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a6e:	4b0f      	ldr	r3, [pc, #60]	; (8008aac <vPortEnterCritical+0x58>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3301      	adds	r3, #1
 8008a74:	4a0d      	ldr	r2, [pc, #52]	; (8008aac <vPortEnterCritical+0x58>)
 8008a76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a78:	4b0c      	ldr	r3, [pc, #48]	; (8008aac <vPortEnterCritical+0x58>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d10f      	bne.n	8008aa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a80:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <vPortEnterCritical+0x5c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	603b      	str	r3, [r7, #0]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <vPortEnterCritical+0x4a>
	}
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	20000008 	.word	0x20000008
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008aba:	4b12      	ldr	r3, [pc, #72]	; (8008b04 <vPortExitCritical+0x50>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <vPortExitCritical+0x24>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	607b      	str	r3, [r7, #4]
}
 8008ad4:	bf00      	nop
 8008ad6:	e7fe      	b.n	8008ad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <vPortExitCritical+0x50>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	4a09      	ldr	r2, [pc, #36]	; (8008b04 <vPortExitCritical+0x50>)
 8008ae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ae2:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <vPortExitCritical+0x50>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d105      	bne.n	8008af6 <vPortExitCritical+0x42>
 8008aea:	2300      	movs	r3, #0
 8008aec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008af4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008af6:	bf00      	nop
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	20000008 	.word	0x20000008
	...

08008b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b10:	f3ef 8009 	mrs	r0, PSP
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <pxCurrentTCBConst>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	f01e 0f10 	tst.w	lr, #16
 8008b20:	bf08      	it	eq
 8008b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2a:	6010      	str	r0, [r2, #0]
 8008b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b34:	f380 8811 	msr	BASEPRI, r0
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f7ff fcc6 	bl	80084d0 <vTaskSwitchContext>
 8008b44:	f04f 0000 	mov.w	r0, #0
 8008b48:	f380 8811 	msr	BASEPRI, r0
 8008b4c:	bc09      	pop	{r0, r3}
 8008b4e:	6819      	ldr	r1, [r3, #0]
 8008b50:	6808      	ldr	r0, [r1, #0]
 8008b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b56:	f01e 0f10 	tst.w	lr, #16
 8008b5a:	bf08      	it	eq
 8008b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b60:	f380 8809 	msr	PSP, r0
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	f3af 8000 	nop.w

08008b70 <pxCurrentTCBConst>:
 8008b70:	2001599c 	.word	0x2001599c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop

08008b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	607b      	str	r3, [r7, #4]
}
 8008b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b92:	f7ff fbe5 	bl	8008360 <xTaskIncrementTick>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b9c:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <SysTick_Handler+0x40>)
 8008b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	f383 8811 	msr	BASEPRI, r3
}
 8008bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	e000ed04 	.word	0xe000ed04

08008bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bc0:	4b0b      	ldr	r3, [pc, #44]	; (8008bf0 <vPortSetupTimerInterrupt+0x34>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bc6:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <vPortSetupTimerInterrupt+0x38>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <vPortSetupTimerInterrupt+0x3c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a0a      	ldr	r2, [pc, #40]	; (8008bfc <vPortSetupTimerInterrupt+0x40>)
 8008bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd6:	099b      	lsrs	r3, r3, #6
 8008bd8:	4a09      	ldr	r2, [pc, #36]	; (8008c00 <vPortSetupTimerInterrupt+0x44>)
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bde:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <vPortSetupTimerInterrupt+0x34>)
 8008be0:	2207      	movs	r2, #7
 8008be2:	601a      	str	r2, [r3, #0]
}
 8008be4:	bf00      	nop
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	e000e010 	.word	0xe000e010
 8008bf4:	e000e018 	.word	0xe000e018
 8008bf8:	20015914 	.word	0x20015914
 8008bfc:	10624dd3 	.word	0x10624dd3
 8008c00:	e000e014 	.word	0xe000e014

08008c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c14 <vPortEnableVFP+0x10>
 8008c08:	6801      	ldr	r1, [r0, #0]
 8008c0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c0e:	6001      	str	r1, [r0, #0]
 8008c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c12:	bf00      	nop
 8008c14:	e000ed88 	.word	0xe000ed88

08008c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08a      	sub	sp, #40	; 0x28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c20:	2300      	movs	r3, #0
 8008c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c24:	f7ff faf2 	bl	800820c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c28:	4b5b      	ldr	r3, [pc, #364]	; (8008d98 <pvPortMalloc+0x180>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c30:	f000 f920 	bl	8008e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c34:	4b59      	ldr	r3, [pc, #356]	; (8008d9c <pvPortMalloc+0x184>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f040 8093 	bne.w	8008d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01d      	beq.n	8008c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c48:	2208      	movs	r2, #8
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d014      	beq.n	8008c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f023 0307 	bic.w	r3, r3, #7
 8008c60:	3308      	adds	r3, #8
 8008c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <pvPortMalloc+0x6c>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	617b      	str	r3, [r7, #20]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d06e      	beq.n	8008d68 <pvPortMalloc+0x150>
 8008c8a:	4b45      	ldr	r3, [pc, #276]	; (8008da0 <pvPortMalloc+0x188>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d869      	bhi.n	8008d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c94:	4b43      	ldr	r3, [pc, #268]	; (8008da4 <pvPortMalloc+0x18c>)
 8008c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c98:	4b42      	ldr	r3, [pc, #264]	; (8008da4 <pvPortMalloc+0x18c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c9e:	e004      	b.n	8008caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d903      	bls.n	8008cbc <pvPortMalloc+0xa4>
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1f1      	bne.n	8008ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cbc:	4b36      	ldr	r3, [pc, #216]	; (8008d98 <pvPortMalloc+0x180>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d050      	beq.n	8008d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2208      	movs	r2, #8
 8008ccc:	4413      	add	r3, r2
 8008cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	1ad2      	subs	r2, r2, r3
 8008ce0:	2308      	movs	r3, #8
 8008ce2:	005b      	lsls	r3, r3, #1
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d91f      	bls.n	8008d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4413      	add	r3, r2
 8008cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <pvPortMalloc+0xf8>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	613b      	str	r3, [r7, #16]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	1ad2      	subs	r2, r2, r3
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d22:	69b8      	ldr	r0, [r7, #24]
 8008d24:	f000 f908 	bl	8008f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d28:	4b1d      	ldr	r3, [pc, #116]	; (8008da0 <pvPortMalloc+0x188>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	4a1b      	ldr	r2, [pc, #108]	; (8008da0 <pvPortMalloc+0x188>)
 8008d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d36:	4b1a      	ldr	r3, [pc, #104]	; (8008da0 <pvPortMalloc+0x188>)
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	; (8008da8 <pvPortMalloc+0x190>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d203      	bcs.n	8008d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d42:	4b17      	ldr	r3, [pc, #92]	; (8008da0 <pvPortMalloc+0x188>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a18      	ldr	r2, [pc, #96]	; (8008da8 <pvPortMalloc+0x190>)
 8008d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	4b13      	ldr	r3, [pc, #76]	; (8008d9c <pvPortMalloc+0x184>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d5e:	4b13      	ldr	r3, [pc, #76]	; (8008dac <pvPortMalloc+0x194>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3301      	adds	r3, #1
 8008d64:	4a11      	ldr	r2, [pc, #68]	; (8008dac <pvPortMalloc+0x194>)
 8008d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d68:	f7ff fa5e 	bl	8008228 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f003 0307 	and.w	r3, r3, #7
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <pvPortMalloc+0x174>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	60fb      	str	r3, [r7, #12]
}
 8008d88:	bf00      	nop
 8008d8a:	e7fe      	b.n	8008d8a <pvPortMalloc+0x172>
	return pvReturn;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3728      	adds	r7, #40	; 0x28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	20016690 	.word	0x20016690
 8008d9c:	200166a4 	.word	0x200166a4
 8008da0:	20016694 	.word	0x20016694
 8008da4:	20016688 	.word	0x20016688
 8008da8:	20016698 	.word	0x20016698
 8008dac:	2001669c 	.word	0x2001669c

08008db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d04d      	beq.n	8008e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008dc2:	2308      	movs	r3, #8
 8008dc4:	425b      	negs	r3, r3
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	4413      	add	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	4b24      	ldr	r3, [pc, #144]	; (8008e68 <vPortFree+0xb8>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4013      	ands	r3, r2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10a      	bne.n	8008df4 <vPortFree+0x44>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	60fb      	str	r3, [r7, #12]
}
 8008df0:	bf00      	nop
 8008df2:	e7fe      	b.n	8008df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <vPortFree+0x62>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	60bb      	str	r3, [r7, #8]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	4b14      	ldr	r3, [pc, #80]	; (8008e68 <vPortFree+0xb8>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d01e      	beq.n	8008e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d11a      	bne.n	8008e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	4b0e      	ldr	r3, [pc, #56]	; (8008e68 <vPortFree+0xb8>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	43db      	mvns	r3, r3
 8008e32:	401a      	ands	r2, r3
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e38:	f7ff f9e8 	bl	800820c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	4b0a      	ldr	r3, [pc, #40]	; (8008e6c <vPortFree+0xbc>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4413      	add	r3, r2
 8008e46:	4a09      	ldr	r2, [pc, #36]	; (8008e6c <vPortFree+0xbc>)
 8008e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e4a:	6938      	ldr	r0, [r7, #16]
 8008e4c:	f000 f874 	bl	8008f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e50:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <vPortFree+0xc0>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	3301      	adds	r3, #1
 8008e56:	4a06      	ldr	r2, [pc, #24]	; (8008e70 <vPortFree+0xc0>)
 8008e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e5a:	f7ff f9e5 	bl	8008228 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e5e:	bf00      	nop
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	200166a4 	.word	0x200166a4
 8008e6c:	20016694 	.word	0x20016694
 8008e70:	200166a0 	.word	0x200166a0

08008e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e80:	4b27      	ldr	r3, [pc, #156]	; (8008f20 <prvHeapInit+0xac>)
 8008e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00c      	beq.n	8008ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3307      	adds	r3, #7
 8008e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 0307 	bic.w	r3, r3, #7
 8008e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	4a1f      	ldr	r2, [pc, #124]	; (8008f20 <prvHeapInit+0xac>)
 8008ea4:	4413      	add	r3, r2
 8008ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008eac:	4a1d      	ldr	r2, [pc, #116]	; (8008f24 <prvHeapInit+0xb0>)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008eb2:	4b1c      	ldr	r3, [pc, #112]	; (8008f24 <prvHeapInit+0xb0>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ec0:	2208      	movs	r2, #8
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	1a9b      	subs	r3, r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f023 0307 	bic.w	r3, r3, #7
 8008ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4a15      	ldr	r2, [pc, #84]	; (8008f28 <prvHeapInit+0xb4>)
 8008ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ed6:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <prvHeapInit+0xb4>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2200      	movs	r2, #0
 8008edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ede:	4b12      	ldr	r3, [pc, #72]	; (8008f28 <prvHeapInit+0xb4>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ef4:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <prvHeapInit+0xb4>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	4a0a      	ldr	r2, [pc, #40]	; (8008f2c <prvHeapInit+0xb8>)
 8008f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	4a09      	ldr	r2, [pc, #36]	; (8008f30 <prvHeapInit+0xbc>)
 8008f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f0c:	4b09      	ldr	r3, [pc, #36]	; (8008f34 <prvHeapInit+0xc0>)
 8008f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f12:	601a      	str	r2, [r3, #0]
}
 8008f14:	bf00      	nop
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	20015ad0 	.word	0x20015ad0
 8008f24:	20016688 	.word	0x20016688
 8008f28:	20016690 	.word	0x20016690
 8008f2c:	20016698 	.word	0x20016698
 8008f30:	20016694 	.word	0x20016694
 8008f34:	200166a4 	.word	0x200166a4

08008f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f40:	4b28      	ldr	r3, [pc, #160]	; (8008fe4 <prvInsertBlockIntoFreeList+0xac>)
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	e002      	b.n	8008f4c <prvInsertBlockIntoFreeList+0x14>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d8f7      	bhi.n	8008f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	4413      	add	r3, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d108      	bne.n	8008f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	441a      	add	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	441a      	add	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d118      	bne.n	8008fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	4b15      	ldr	r3, [pc, #84]	; (8008fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d00d      	beq.n	8008fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	441a      	add	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	e008      	b.n	8008fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fb6:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	e003      	b.n	8008fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d002      	beq.n	8008fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fd6:	bf00      	nop
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20016688 	.word	0x20016688
 8008fe8:	20016690 	.word	0x20016690

08008fec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4a07      	ldr	r2, [pc, #28]	; (8009018 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ffc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	4a06      	ldr	r2, [pc, #24]	; (800901c <vApplicationGetIdleTaskMemory+0x30>)
 8009002:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2280      	movs	r2, #128	; 0x80
 8009008:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800900a:	bf00      	nop
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	200166a8 	.word	0x200166a8
 800901c:	200166fc 	.word	0x200166fc

08009020 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800902a:	88fb      	ldrh	r3, [r7, #6]
 800902c:	4618      	mov	r0, r3
 800902e:	f000 f879 	bl	8009124 <LPS22HB_Init>
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	4603      	mov	r3, r0
 8009042:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8009048:	f001 fdb8 	bl	800abbc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800904c:	88fb      	ldrh	r3, [r7, #6]
 800904e:	b2db      	uxtb	r3, r3
 8009050:	210f      	movs	r1, #15
 8009052:	4618      	mov	r0, r3
 8009054:	f001 fdd6 	bl	800ac04 <SENSOR_IO_Read>
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8009068:	b590      	push	{r4, r7, lr}
 800906a:	b087      	sub	sp, #28
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8009076:	2300      	movs	r3, #0
 8009078:	74fb      	strb	r3, [r7, #19]
 800907a:	e013      	b.n	80090a4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800907c:	88fb      	ldrh	r3, [r7, #6]
 800907e:	b2da      	uxtb	r2, r3
 8009080:	7cfb      	ldrb	r3, [r7, #19]
 8009082:	3328      	adds	r3, #40	; 0x28
 8009084:	b2db      	uxtb	r3, r3
 8009086:	7cfc      	ldrb	r4, [r7, #19]
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f001 fdba 	bl	800ac04 <SENSOR_IO_Read>
 8009090:	4603      	mov	r3, r0
 8009092:	461a      	mov	r2, r3
 8009094:	f104 0318 	add.w	r3, r4, #24
 8009098:	443b      	add	r3, r7
 800909a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800909e:	7cfb      	ldrb	r3, [r7, #19]
 80090a0:	3301      	adds	r3, #1
 80090a2:	74fb      	strb	r3, [r7, #19]
 80090a4:	7cfb      	ldrb	r3, [r7, #19]
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d9e8      	bls.n	800907c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80090aa:	2300      	movs	r3, #0
 80090ac:	74fb      	strb	r3, [r7, #19]
 80090ae:	e00f      	b.n	80090d0 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80090b0:	7cfb      	ldrb	r3, [r7, #19]
 80090b2:	3318      	adds	r3, #24
 80090b4:	443b      	add	r3, r7
 80090b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80090ba:	461a      	mov	r2, r3
 80090bc:	7cfb      	ldrb	r3, [r7, #19]
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	fa02 f303 	lsl.w	r3, r2, r3
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80090ca:	7cfb      	ldrb	r3, [r7, #19]
 80090cc:	3301      	adds	r3, #1
 80090ce:	74fb      	strb	r3, [r7, #19]
 80090d0:	7cfb      	ldrb	r3, [r7, #19]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d9ec      	bls.n	80090b0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090e6:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2264      	movs	r2, #100	; 0x64
 80090f0:	fb02 f303 	mul.w	r3, r2, r3
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	da01      	bge.n	80090fc <LPS22HB_P_ReadPressure+0x94>
 80090f8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80090fc:	131b      	asrs	r3, r3, #12
 80090fe:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800910a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009120 <LPS22HB_P_ReadPressure+0xb8>
 800910e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009112:	eef0 7a66 	vmov.f32	s15, s13
}
 8009116:	eeb0 0a67 	vmov.f32	s0, s15
 800911a:	371c      	adds	r7, #28
 800911c:	46bd      	mov	sp, r7
 800911e:	bd90      	pop	{r4, r7, pc}
 8009120:	42c80000 	.word	0x42c80000

08009124 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	4603      	mov	r3, r0
 800912c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	211a      	movs	r1, #26
 8009134:	4618      	mov	r0, r3
 8009136:	f001 fd65 	bl	800ac04 <SENSOR_IO_Read>
 800913a:	4603      	mov	r3, r0
 800913c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	f023 0301 	bic.w	r3, r3, #1
 8009144:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	f043 0301 	orr.w	r3, r3, #1
 800914c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800914e:	88fb      	ldrh	r3, [r7, #6]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	7bfa      	ldrb	r2, [r7, #15]
 8009154:	211a      	movs	r1, #26
 8009156:	4618      	mov	r0, r3
 8009158:	f001 fd3a 	bl	800abd0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800915c:	88fb      	ldrh	r3, [r7, #6]
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2110      	movs	r1, #16
 8009162:	4618      	mov	r0, r3
 8009164:	f001 fd4e 	bl	800ac04 <SENSOR_IO_Read>
 8009168:	4603      	mov	r3, r0
 800916a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009172:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800917a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	f023 0302 	bic.w	r3, r3, #2
 8009182:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	f043 0302 	orr.w	r3, r3, #2
 800918a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800918c:	88fb      	ldrh	r3, [r7, #6]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	7bfa      	ldrb	r2, [r7, #15]
 8009192:	2110      	movs	r1, #16
 8009194:	4618      	mov	r0, r3
 8009196:	f001 fd1b 	bl	800abd0 <SENSOR_IO_Write>
}  
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	4603      	mov	r3, r0
 80091aa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80091b0:	2111      	movs	r1, #17
 80091b2:	20d4      	movs	r0, #212	; 0xd4
 80091b4:	f001 fd26 	bl	800ac04 <SENSOR_IO_Read>
 80091b8:	4603      	mov	r3, r0
 80091ba:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80091bc:	88fb      	ldrh	r3, [r7, #6]
 80091be:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80091c8:	7bba      	ldrb	r2, [r7, #14]
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	461a      	mov	r2, r3
 80091d4:	2111      	movs	r1, #17
 80091d6:	20d4      	movs	r0, #212	; 0xd4
 80091d8:	f001 fcfa 	bl	800abd0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80091dc:	2112      	movs	r1, #18
 80091de:	20d4      	movs	r0, #212	; 0xd4
 80091e0:	f001 fd10 	bl	800ac04 <SENSOR_IO_Read>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80091e8:	88fb      	ldrh	r3, [r7, #6]
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
 80091f2:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80091f6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80091f8:	7bba      	ldrb	r2, [r7, #14]
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	461a      	mov	r2, r3
 8009204:	2112      	movs	r1, #18
 8009206:	20d4      	movs	r0, #212	; 0xd4
 8009208:	f001 fce2 	bl	800abd0 <SENSOR_IO_Write>
}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800921a:	2300      	movs	r3, #0
 800921c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800921e:	2111      	movs	r1, #17
 8009220:	20d4      	movs	r0, #212	; 0xd4
 8009222:	f001 fcef 	bl	800ac04 <SENSOR_IO_Read>
 8009226:	4603      	mov	r3, r0
 8009228:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800922a:	79fb      	ldrb	r3, [r7, #7]
 800922c:	f003 030f 	and.w	r3, r3, #15
 8009230:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	461a      	mov	r2, r3
 8009236:	2111      	movs	r1, #17
 8009238:	20d4      	movs	r0, #212	; 0xd4
 800923a:	f001 fcc9 	bl	800abd0 <SENSOR_IO_Write>
}
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800924a:	f001 fcb7 	bl	800abbc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800924e:	210f      	movs	r1, #15
 8009250:	20d4      	movs	r0, #212	; 0xd4
 8009252:	f001 fcd7 	bl	800ac04 <SENSOR_IO_Read>
 8009256:	4603      	mov	r3, r0
}
 8009258:	4618      	mov	r0, r3
 800925a:	bd80      	pop	{r7, pc}

0800925c <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800926a:	2116      	movs	r1, #22
 800926c:	20d4      	movs	r0, #212	; 0xd4
 800926e:	f001 fcc9 	bl	800ac04 <SENSOR_IO_Read>
 8009272:	4603      	mov	r3, r0
 8009274:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800927c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800927e:	88fb      	ldrh	r3, [r7, #6]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800928a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	461a      	mov	r2, r3
 8009290:	2116      	movs	r1, #22
 8009292:	20d4      	movs	r0, #212	; 0xd4
 8009294:	f001 fc9c 	bl	800abd0 <SENSOR_IO_Write>
}
 8009298:	bf00      	nop
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80092a8:	2300      	movs	r3, #0
 80092aa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80092b0:	f04f 0300 	mov.w	r3, #0
 80092b4:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80092b6:	2111      	movs	r1, #17
 80092b8:	20d4      	movs	r0, #212	; 0xd4
 80092ba:	f001 fca3 	bl	800ac04 <SENSOR_IO_Read>
 80092be:	4603      	mov	r3, r0
 80092c0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80092c2:	f107 0208 	add.w	r2, r7, #8
 80092c6:	2306      	movs	r3, #6
 80092c8:	2122      	movs	r1, #34	; 0x22
 80092ca:	20d4      	movs	r0, #212	; 0xd4
 80092cc:	f001 fcb8 	bl	800ac40 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80092d0:	2300      	movs	r3, #0
 80092d2:	77fb      	strb	r3, [r7, #31]
 80092d4:	e01c      	b.n	8009310 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80092d6:	7ffb      	ldrb	r3, [r7, #31]
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	3301      	adds	r3, #1
 80092dc:	3320      	adds	r3, #32
 80092de:	443b      	add	r3, r7
 80092e0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	021b      	lsls	r3, r3, #8
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	7ffb      	ldrb	r3, [r7, #31]
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	3320      	adds	r3, #32
 80092f0:	443b      	add	r3, r7
 80092f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	4413      	add	r3, r2
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	7ffb      	ldrb	r3, [r7, #31]
 80092fe:	b212      	sxth	r2, r2
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	3320      	adds	r3, #32
 8009304:	443b      	add	r3, r7
 8009306:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800930a:	7ffb      	ldrb	r3, [r7, #31]
 800930c:	3301      	adds	r3, #1
 800930e:	77fb      	strb	r3, [r7, #31]
 8009310:	7ffb      	ldrb	r3, [r7, #31]
 8009312:	2b02      	cmp	r3, #2
 8009314:	d9df      	bls.n	80092d6 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8009316:	7dfb      	ldrb	r3, [r7, #23]
 8009318:	f003 030c 	and.w	r3, r3, #12
 800931c:	2b0c      	cmp	r3, #12
 800931e:	d829      	bhi.n	8009374 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8009320:	a201      	add	r2, pc, #4	; (adr r2, 8009328 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8009322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009326:	bf00      	nop
 8009328:	0800935d 	.word	0x0800935d
 800932c:	08009375 	.word	0x08009375
 8009330:	08009375 	.word	0x08009375
 8009334:	08009375 	.word	0x08009375
 8009338:	08009363 	.word	0x08009363
 800933c:	08009375 	.word	0x08009375
 8009340:	08009375 	.word	0x08009375
 8009344:	08009375 	.word	0x08009375
 8009348:	08009369 	.word	0x08009369
 800934c:	08009375 	.word	0x08009375
 8009350:	08009375 	.word	0x08009375
 8009354:	08009375 	.word	0x08009375
 8009358:	0800936f 	.word	0x0800936f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800935c:	4b16      	ldr	r3, [pc, #88]	; (80093b8 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800935e:	61bb      	str	r3, [r7, #24]
    break;
 8009360:	e008      	b.n	8009374 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8009362:	4b16      	ldr	r3, [pc, #88]	; (80093bc <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8009364:	61bb      	str	r3, [r7, #24]
    break;
 8009366:	e005      	b.n	8009374 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8009368:	4b15      	ldr	r3, [pc, #84]	; (80093c0 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800936a:	61bb      	str	r3, [r7, #24]
    break;
 800936c:	e002      	b.n	8009374 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800936e:	4b15      	ldr	r3, [pc, #84]	; (80093c4 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8009370:	61bb      	str	r3, [r7, #24]
    break;    
 8009372:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8009374:	2300      	movs	r3, #0
 8009376:	77fb      	strb	r3, [r7, #31]
 8009378:	e016      	b.n	80093a8 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800937a:	7ffb      	ldrb	r3, [r7, #31]
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	3320      	adds	r3, #32
 8009380:	443b      	add	r3, r7
 8009382:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800938e:	7ffb      	ldrb	r3, [r7, #31]
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	4413      	add	r3, r2
 8009396:	edd7 7a06 	vldr	s15, [r7, #24]
 800939a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80093a2:	7ffb      	ldrb	r3, [r7, #31]
 80093a4:	3301      	adds	r3, #1
 80093a6:	77fb      	strb	r3, [r7, #31]
 80093a8:	7ffb      	ldrb	r3, [r7, #31]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d9e5      	bls.n	800937a <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	3720      	adds	r7, #32
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	410c0000 	.word	0x410c0000
 80093bc:	418c0000 	.word	0x418c0000
 80093c0:	420c0000 	.word	0x420c0000
 80093c4:	428c0000 	.word	0x428c0000

080093c8 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	463b      	mov	r3, r7
 80093d0:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80093d4:	783b      	ldrb	r3, [r7, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	2120      	movs	r1, #32
 80093da:	203c      	movs	r0, #60	; 0x3c
 80093dc:	f001 fbf8 	bl	800abd0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80093e0:	787b      	ldrb	r3, [r7, #1]
 80093e2:	461a      	mov	r2, r3
 80093e4:	2121      	movs	r1, #33	; 0x21
 80093e6:	203c      	movs	r0, #60	; 0x3c
 80093e8:	f001 fbf2 	bl	800abd0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80093ec:	78bb      	ldrb	r3, [r7, #2]
 80093ee:	461a      	mov	r2, r3
 80093f0:	2122      	movs	r1, #34	; 0x22
 80093f2:	203c      	movs	r0, #60	; 0x3c
 80093f4:	f001 fbec 	bl	800abd0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	461a      	mov	r2, r3
 80093fc:	2123      	movs	r1, #35	; 0x23
 80093fe:	203c      	movs	r0, #60	; 0x3c
 8009400:	f001 fbe6 	bl	800abd0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8009404:	793b      	ldrb	r3, [r7, #4]
 8009406:	461a      	mov	r2, r3
 8009408:	2124      	movs	r1, #36	; 0x24
 800940a:	203c      	movs	r0, #60	; 0x3c
 800940c:	f001 fbe0 	bl	800abd0 <SENSOR_IO_Write>
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800941e:	2300      	movs	r3, #0
 8009420:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8009422:	2122      	movs	r1, #34	; 0x22
 8009424:	203c      	movs	r0, #60	; 0x3c
 8009426:	f001 fbed 	bl	800ac04 <SENSOR_IO_Read>
 800942a:	4603      	mov	r3, r0
 800942c:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 800942e:	79fb      	ldrb	r3, [r7, #7]
 8009430:	f023 0303 	bic.w	r3, r3, #3
 8009434:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8009436:	79fb      	ldrb	r3, [r7, #7]
 8009438:	f043 0303 	orr.w	r3, r3, #3
 800943c:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	461a      	mov	r2, r3
 8009442:	2122      	movs	r1, #34	; 0x22
 8009444:	203c      	movs	r0, #60	; 0x3c
 8009446:	f001 fbc3 	bl	800abd0 <SENSOR_IO_Write>
}
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8009456:	f001 fbb1 	bl	800abbc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800945a:	210f      	movs	r1, #15
 800945c:	203c      	movs	r0, #60	; 0x3c
 800945e:	f001 fbd1 	bl	800ac04 <SENSOR_IO_Read>
 8009462:	4603      	mov	r3, r0
}
 8009464:	4618      	mov	r0, r3
 8009466:	bd80      	pop	{r7, pc}

08009468 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8009476:	2122      	movs	r1, #34	; 0x22
 8009478:	203c      	movs	r0, #60	; 0x3c
 800947a:	f001 fbc3 	bl	800ac04 <SENSOR_IO_Read>
 800947e:	4603      	mov	r3, r0
 8009480:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	f023 0320 	bic.w	r3, r3, #32
 8009488:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d003      	beq.n	8009498 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	f043 0320 	orr.w	r3, r3, #32
 8009496:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	461a      	mov	r2, r3
 800949c:	2122      	movs	r1, #34	; 0x22
 800949e:	203c      	movs	r0, #60	; 0x3c
 80094a0:	f001 fb96 	bl	800abd0 <SENSOR_IO_Write>
}
 80094a4:	bf00      	nop
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80094bc:	f04f 0300 	mov.w	r3, #0
 80094c0:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80094c2:	2121      	movs	r1, #33	; 0x21
 80094c4:	203c      	movs	r0, #60	; 0x3c
 80094c6:	f001 fb9d 	bl	800ac04 <SENSOR_IO_Read>
 80094ca:	4603      	mov	r3, r0
 80094cc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80094ce:	f107 0208 	add.w	r2, r7, #8
 80094d2:	2306      	movs	r3, #6
 80094d4:	21a8      	movs	r1, #168	; 0xa8
 80094d6:	203c      	movs	r0, #60	; 0x3c
 80094d8:	f001 fbb2 	bl	800ac40 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80094dc:	2300      	movs	r3, #0
 80094de:	77fb      	strb	r3, [r7, #31]
 80094e0:	e01c      	b.n	800951c <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80094e2:	7ffb      	ldrb	r3, [r7, #31]
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	3301      	adds	r3, #1
 80094e8:	3320      	adds	r3, #32
 80094ea:	443b      	add	r3, r7
 80094ec:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	021b      	lsls	r3, r3, #8
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	7ffb      	ldrb	r3, [r7, #31]
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	3320      	adds	r3, #32
 80094fc:	443b      	add	r3, r7
 80094fe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009502:	b29b      	uxth	r3, r3
 8009504:	4413      	add	r3, r2
 8009506:	b29a      	uxth	r2, r3
 8009508:	7ffb      	ldrb	r3, [r7, #31]
 800950a:	b212      	sxth	r2, r2
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	3320      	adds	r3, #32
 8009510:	443b      	add	r3, r7
 8009512:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8009516:	7ffb      	ldrb	r3, [r7, #31]
 8009518:	3301      	adds	r3, #1
 800951a:	77fb      	strb	r3, [r7, #31]
 800951c:	7ffb      	ldrb	r3, [r7, #31]
 800951e:	2b02      	cmp	r3, #2
 8009520:	d9df      	bls.n	80094e2 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009528:	2b60      	cmp	r3, #96	; 0x60
 800952a:	d013      	beq.n	8009554 <LIS3MDL_MagReadXYZ+0xa8>
 800952c:	2b60      	cmp	r3, #96	; 0x60
 800952e:	dc14      	bgt.n	800955a <LIS3MDL_MagReadXYZ+0xae>
 8009530:	2b40      	cmp	r3, #64	; 0x40
 8009532:	d00c      	beq.n	800954e <LIS3MDL_MagReadXYZ+0xa2>
 8009534:	2b40      	cmp	r3, #64	; 0x40
 8009536:	dc10      	bgt.n	800955a <LIS3MDL_MagReadXYZ+0xae>
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <LIS3MDL_MagReadXYZ+0x96>
 800953c:	2b20      	cmp	r3, #32
 800953e:	d003      	beq.n	8009548 <LIS3MDL_MagReadXYZ+0x9c>
 8009540:	e00b      	b.n	800955a <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8009542:	4b19      	ldr	r3, [pc, #100]	; (80095a8 <LIS3MDL_MagReadXYZ+0xfc>)
 8009544:	61bb      	str	r3, [r7, #24]
    break;
 8009546:	e008      	b.n	800955a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8009548:	4b18      	ldr	r3, [pc, #96]	; (80095ac <LIS3MDL_MagReadXYZ+0x100>)
 800954a:	61bb      	str	r3, [r7, #24]
    break;
 800954c:	e005      	b.n	800955a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800954e:	4b18      	ldr	r3, [pc, #96]	; (80095b0 <LIS3MDL_MagReadXYZ+0x104>)
 8009550:	61bb      	str	r3, [r7, #24]
    break;
 8009552:	e002      	b.n	800955a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8009554:	4b17      	ldr	r3, [pc, #92]	; (80095b4 <LIS3MDL_MagReadXYZ+0x108>)
 8009556:	61bb      	str	r3, [r7, #24]
    break;    
 8009558:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800955a:	2300      	movs	r3, #0
 800955c:	77fb      	strb	r3, [r7, #31]
 800955e:	e01a      	b.n	8009596 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8009560:	7ffb      	ldrb	r3, [r7, #31]
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	3320      	adds	r3, #32
 8009566:	443b      	add	r3, r7
 8009568:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800956c:	ee07 3a90 	vmov	s15, r3
 8009570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009574:	edd7 7a06 	vldr	s15, [r7, #24]
 8009578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800957c:	7ffb      	ldrb	r3, [r7, #31]
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	4413      	add	r3, r2
 8009584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009588:	ee17 2a90 	vmov	r2, s15
 800958c:	b212      	sxth	r2, r2
 800958e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8009590:	7ffb      	ldrb	r3, [r7, #31]
 8009592:	3301      	adds	r3, #1
 8009594:	77fb      	strb	r3, [r7, #31]
 8009596:	7ffb      	ldrb	r3, [r7, #31]
 8009598:	2b02      	cmp	r3, #2
 800959a:	d9e1      	bls.n	8009560 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 800959c:	bf00      	nop
 800959e:	bf00      	nop
 80095a0:	3720      	adds	r7, #32
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	3e0f5c29 	.word	0x3e0f5c29
 80095ac:	3e947ae1 	.word	0x3e947ae1
 80095b0:	3edc28f6 	.word	0x3edc28f6
 80095b4:	3f147ae1 	.word	0x3f147ae1

080095b8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80095c2:	88fb      	ldrh	r3, [r7, #6]
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2120      	movs	r1, #32
 80095c8:	4618      	mov	r0, r3
 80095ca:	f001 fb1b 	bl	800ac04 <SENSOR_IO_Read>
 80095ce:	4603      	mov	r3, r0
 80095d0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	f023 0304 	bic.w	r3, r3, #4
 80095d8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	f043 0304 	orr.w	r3, r3, #4
 80095e0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	f023 0303 	bic.w	r3, r3, #3
 80095e8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	f043 0301 	orr.w	r3, r3, #1
 80095f0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095f8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80095fa:	88fb      	ldrh	r3, [r7, #6]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	7bfa      	ldrb	r2, [r7, #15]
 8009600:	2120      	movs	r1, #32
 8009602:	4618      	mov	r0, r3
 8009604:	f001 fae4 	bl	800abd0 <SENSOR_IO_Write>
}
 8009608:	bf00      	nop
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800961a:	2300      	movs	r3, #0
 800961c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800961e:	f001 facd 	bl	800abbc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8009622:	88fb      	ldrh	r3, [r7, #6]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	210f      	movs	r1, #15
 8009628:	4618      	mov	r0, r3
 800962a:	f001 faeb 	bl	800ac04 <SENSOR_IO_Read>
 800962e:	4603      	mov	r3, r0
 8009630:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8009632:	7bfb      	ldrb	r3, [r7, #15]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	b2d8      	uxtb	r0, r3
 800964a:	f107 020c 	add.w	r2, r7, #12
 800964e:	2302      	movs	r3, #2
 8009650:	21b0      	movs	r1, #176	; 0xb0
 8009652:	f001 faf5 	bl	800ac40 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8009656:	7b3b      	ldrb	r3, [r7, #12]
 8009658:	085b      	lsrs	r3, r3, #1
 800965a:	b2db      	uxtb	r3, r3
 800965c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800965e:	7b7b      	ldrb	r3, [r7, #13]
 8009660:	085b      	lsrs	r3, r3, #1
 8009662:	b2db      	uxtb	r3, r3
 8009664:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8009666:	88fb      	ldrh	r3, [r7, #6]
 8009668:	b2d8      	uxtb	r0, r3
 800966a:	f107 020c 	add.w	r2, r7, #12
 800966e:	2302      	movs	r3, #2
 8009670:	21b6      	movs	r1, #182	; 0xb6
 8009672:	f001 fae5 	bl	800ac40 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009676:	7b7b      	ldrb	r3, [r7, #13]
 8009678:	021b      	lsls	r3, r3, #8
 800967a:	b21a      	sxth	r2, r3
 800967c:	7b3b      	ldrb	r3, [r7, #12]
 800967e:	b21b      	sxth	r3, r3
 8009680:	4313      	orrs	r3, r2
 8009682:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8009684:	88fb      	ldrh	r3, [r7, #6]
 8009686:	b2d8      	uxtb	r0, r3
 8009688:	f107 020c 	add.w	r2, r7, #12
 800968c:	2302      	movs	r3, #2
 800968e:	21ba      	movs	r1, #186	; 0xba
 8009690:	f001 fad6 	bl	800ac40 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009694:	7b7b      	ldrb	r3, [r7, #13]
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	b21a      	sxth	r2, r3
 800969a:	7b3b      	ldrb	r3, [r7, #12]
 800969c:	b21b      	sxth	r3, r3
 800969e:	4313      	orrs	r3, r2
 80096a0:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80096a2:	88fb      	ldrh	r3, [r7, #6]
 80096a4:	b2d8      	uxtb	r0, r3
 80096a6:	f107 020c 	add.w	r2, r7, #12
 80096aa:	2302      	movs	r3, #2
 80096ac:	21a8      	movs	r1, #168	; 0xa8
 80096ae:	f001 fac7 	bl	800ac40 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80096b2:	7b7b      	ldrb	r3, [r7, #13]
 80096b4:	021b      	lsls	r3, r3, #8
 80096b6:	b21a      	sxth	r2, r3
 80096b8:	7b3b      	ldrb	r3, [r7, #12]
 80096ba:	b21b      	sxth	r3, r3
 80096bc:	4313      	orrs	r3, r2
 80096be:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80096c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80096c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096d2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80096d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	ee07 3a90 	vmov	s15, r3
 80096e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80096e8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80096ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800970a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800970e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8009712:	edd7 7a04 	vldr	s15, [r7, #16]
 8009716:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800971a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800971e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8009722:	edd7 7a04 	vldr	s15, [r7, #16]
 8009726:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800976c <HTS221_H_ReadHumidity+0x130>
 800972a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800972e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009732:	dd01      	ble.n	8009738 <HTS221_H_ReadHumidity+0xfc>
 8009734:	4b0e      	ldr	r3, [pc, #56]	; (8009770 <HTS221_H_ReadHumidity+0x134>)
 8009736:	e00a      	b.n	800974e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8009738:	edd7 7a04 	vldr	s15, [r7, #16]
 800973c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009744:	d502      	bpl.n	800974c <HTS221_H_ReadHumidity+0x110>
 8009746:	f04f 0300 	mov.w	r3, #0
 800974a:	e000      	b.n	800974e <HTS221_H_ReadHumidity+0x112>
 800974c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800974e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8009750:	edd7 7a04 	vldr	s15, [r7, #16]
 8009754:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009758:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800975c:	eef0 7a66 	vmov.f32	s15, s13
}
 8009760:	eeb0 0a67 	vmov.f32	s0, s15
 8009764:	3720      	adds	r7, #32
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	447a0000 	.word	0x447a0000
 8009770:	447a0000 	.word	0x447a0000

08009774 <HAL_GPIO_EXTI_Callback>:
uint32_t play[22050]={1};//33075
uint8_t sound_counter=0;


//each time the blue button is pressed, modify the counter to change the detected sensor.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	4603      	mov	r3, r0
 800977c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_13) {
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009784:	d107      	bne.n	8009796 <HAL_GPIO_EXTI_Callback+0x22>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8009786:	2120      	movs	r1, #32
 8009788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800978c:	f7f8 fd64 	bl	8002258 <HAL_GPIO_TogglePin>
//		count++;
		flag = 1;
 8009790:	4b03      	ldr	r3, [pc, #12]	; (80097a0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8009792:	2201      	movs	r2, #1
 8009794:	601a      	str	r2, [r3, #0]
	}
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20016be4 	.word	0x20016be4
 80097a4:	00000000 	.word	0x00000000

080097a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80097a8:	b5b0      	push	{r4, r5, r7, lr}
 80097aa:	f5ad 4daf 	sub.w	sp, sp, #22400	; 0x5780
 80097ae:	b088      	sub	sp, #32
 80097b0:	af02      	add	r7, sp, #8
	//Tone 1
	//C6 1046.5 Hz
	//sample n = 44.1k/1046.5 = 42
	uint8_t C6[42];

		for(int i = 0; i < 42; i++){
 80097b2:	2300      	movs	r3, #0
 80097b4:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 80097b8:	f102 0214 	add.w	r2, r2, #20
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	e056      	b.n	800986e <main+0xc6>
			C6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/42))*256;
 80097c0:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 80097c4:	f103 0314 	add.w	r3, r3, #20
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	f7f6 febb 	bl	8000544 <__aeabi_i2d>
 80097ce:	a3c8      	add	r3, pc, #800	; (adr r3, 8009af0 <main+0x348>)
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	f7f6 ff20 	bl	8000618 <__aeabi_dmul>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4610      	mov	r0, r2
 80097de:	4619      	mov	r1, r3
 80097e0:	f04f 0200 	mov.w	r2, #0
 80097e4:	4bc4      	ldr	r3, [pc, #784]	; (8009af8 <main+0x350>)
 80097e6:	f7f7 f841 	bl	800086c <__aeabi_ddiv>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4610      	mov	r0, r2
 80097f0:	4619      	mov	r1, r3
 80097f2:	f7f7 f943 	bl	8000a7c <__aeabi_d2f>
 80097f6:	4603      	mov	r3, r0
 80097f8:	ee00 3a10 	vmov	s0, r3
 80097fc:	f002 fb3e 	bl	800be7c <arm_sin_f32>
 8009800:	eef0 7a40 	vmov.f32	s15, s0
 8009804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009808:	ee77 7a87 	vadd.f32	s15, s15, s14
 800980c:	ee17 0a90 	vmov	r0, s15
 8009810:	f7f6 feaa 	bl	8000568 <__aeabi_f2d>
 8009814:	a3b4      	add	r3, pc, #720	; (adr r3, 8009ae8 <main+0x340>)
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	f7f6 fefd 	bl	8000618 <__aeabi_dmul>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4610      	mov	r0, r2
 8009824:	4619      	mov	r1, r3
 8009826:	f04f 0200 	mov.w	r2, #0
 800982a:	4bb4      	ldr	r3, [pc, #720]	; (8009afc <main+0x354>)
 800982c:	f7f6 fef4 	bl	8000618 <__aeabi_dmul>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4610      	mov	r0, r2
 8009836:	4619      	mov	r1, r3
 8009838:	f7f7 f900 	bl	8000a3c <__aeabi_d2uiz>
 800983c:	4603      	mov	r3, r0
 800983e:	b2d9      	uxtb	r1, r3
 8009840:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009844:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8009848:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 800984c:	f103 0314 	add.w	r3, r3, #20
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4413      	add	r3, r2
 8009854:	460a      	mov	r2, r1
 8009856:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 42; i++){
 8009858:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 800985c:	f103 0314 	add.w	r3, r3, #20
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 8009868:	f102 0214 	add.w	r2, r2, #20
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009872:	f103 0314 	add.w	r3, r3, #20
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b29      	cmp	r3, #41	; 0x29
 800987a:	dda1      	ble.n	80097c0 <main+0x18>
	//Tone 2
	//E6 1318.5 Hz
	//sample n = 44.1k/1318.5 = 34
	uint8_t E6[34];

		for(int i = 0; i < 34; i++){
 800987c:	2300      	movs	r3, #0
 800987e:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 8009882:	f102 0210 	add.w	r2, r2, #16
 8009886:	6013      	str	r3, [r2, #0]
 8009888:	e056      	b.n	8009938 <main+0x190>
			E6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/34))*256;
 800988a:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 800988e:	f103 0310 	add.w	r3, r3, #16
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	f7f6 fe56 	bl	8000544 <__aeabi_i2d>
 8009898:	a395      	add	r3, pc, #596	; (adr r3, 8009af0 <main+0x348>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f7f6 febb 	bl	8000618 <__aeabi_dmul>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4610      	mov	r0, r2
 80098a8:	4619      	mov	r1, r3
 80098aa:	f04f 0200 	mov.w	r2, #0
 80098ae:	4b94      	ldr	r3, [pc, #592]	; (8009b00 <main+0x358>)
 80098b0:	f7f6 ffdc 	bl	800086c <__aeabi_ddiv>
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	4610      	mov	r0, r2
 80098ba:	4619      	mov	r1, r3
 80098bc:	f7f7 f8de 	bl	8000a7c <__aeabi_d2f>
 80098c0:	4603      	mov	r3, r0
 80098c2:	ee00 3a10 	vmov	s0, r3
 80098c6:	f002 fad9 	bl	800be7c <arm_sin_f32>
 80098ca:	eef0 7a40 	vmov.f32	s15, s0
 80098ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098d6:	ee17 0a90 	vmov	r0, s15
 80098da:	f7f6 fe45 	bl	8000568 <__aeabi_f2d>
 80098de:	a382      	add	r3, pc, #520	; (adr r3, 8009ae8 <main+0x340>)
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f7f6 fe98 	bl	8000618 <__aeabi_dmul>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4610      	mov	r0, r2
 80098ee:	4619      	mov	r1, r3
 80098f0:	f04f 0200 	mov.w	r2, #0
 80098f4:	4b81      	ldr	r3, [pc, #516]	; (8009afc <main+0x354>)
 80098f6:	f7f6 fe8f 	bl	8000618 <__aeabi_dmul>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	4610      	mov	r0, r2
 8009900:	4619      	mov	r1, r3
 8009902:	f7f7 f89b 	bl	8000a3c <__aeabi_d2uiz>
 8009906:	4603      	mov	r3, r0
 8009908:	b2d9      	uxtb	r1, r3
 800990a:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 800990e:	f102 0214 	add.w	r2, r2, #20
 8009912:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009916:	f103 0310 	add.w	r3, r3, #16
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4413      	add	r3, r2
 800991e:	460a      	mov	r2, r1
 8009920:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 34; i++){
 8009922:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009926:	f103 0310 	add.w	r3, r3, #16
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3301      	adds	r3, #1
 800992e:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 8009932:	f102 0210 	add.w	r2, r2, #16
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 800993c:	f103 0310 	add.w	r3, r3, #16
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b21      	cmp	r3, #33	; 0x21
 8009944:	dda1      	ble.n	800988a <main+0xe2>
	//Tone 3
	//G6 1568.0 Hz
	//sample n = 44.1k/1568 = 28
	uint8_t G6[28];

		for(int i = 0; i < 28; i++){
 8009946:	2300      	movs	r3, #0
 8009948:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 800994c:	f102 020c 	add.w	r2, r2, #12
 8009950:	6013      	str	r3, [r2, #0]
 8009952:	e056      	b.n	8009a02 <main+0x25a>
			G6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/28))*256;
 8009954:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009958:	f103 030c 	add.w	r3, r3, #12
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	f7f6 fdf1 	bl	8000544 <__aeabi_i2d>
 8009962:	a363      	add	r3, pc, #396	; (adr r3, 8009af0 <main+0x348>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	f7f6 fe56 	bl	8000618 <__aeabi_dmul>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4610      	mov	r0, r2
 8009972:	4619      	mov	r1, r3
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	4b62      	ldr	r3, [pc, #392]	; (8009b04 <main+0x35c>)
 800997a:	f7f6 ff77 	bl	800086c <__aeabi_ddiv>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4610      	mov	r0, r2
 8009984:	4619      	mov	r1, r3
 8009986:	f7f7 f879 	bl	8000a7c <__aeabi_d2f>
 800998a:	4603      	mov	r3, r0
 800998c:	ee00 3a10 	vmov	s0, r3
 8009990:	f002 fa74 	bl	800be7c <arm_sin_f32>
 8009994:	eef0 7a40 	vmov.f32	s15, s0
 8009998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800999c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099a0:	ee17 0a90 	vmov	r0, s15
 80099a4:	f7f6 fde0 	bl	8000568 <__aeabi_f2d>
 80099a8:	a34f      	add	r3, pc, #316	; (adr r3, 8009ae8 <main+0x340>)
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f7f6 fe33 	bl	8000618 <__aeabi_dmul>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	4610      	mov	r0, r2
 80099b8:	4619      	mov	r1, r3
 80099ba:	f04f 0200 	mov.w	r2, #0
 80099be:	4b4f      	ldr	r3, [pc, #316]	; (8009afc <main+0x354>)
 80099c0:	f7f6 fe2a 	bl	8000618 <__aeabi_dmul>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	4610      	mov	r0, r2
 80099ca:	4619      	mov	r1, r3
 80099cc:	f7f7 f836 	bl	8000a3c <__aeabi_d2uiz>
 80099d0:	4603      	mov	r3, r0
 80099d2:	b2d9      	uxtb	r1, r3
 80099d4:	f507 42ad 	add.w	r2, r7, #22144	; 0x5680
 80099d8:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80099dc:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 80099e0:	f103 030c 	add.w	r3, r3, #12
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4413      	add	r3, r2
 80099e8:	460a      	mov	r2, r1
 80099ea:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 28; i++){
 80099ec:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 80099f0:	f103 030c 	add.w	r3, r3, #12
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3301      	adds	r3, #1
 80099f8:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 80099fc:	f102 020c 	add.w	r2, r2, #12
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009a06:	f103 030c 	add.w	r3, r3, #12
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b1b      	cmp	r3, #27
 8009a0e:	dda1      	ble.n	8009954 <main+0x1ac>
	//Tone 4
	//A6 1760.0 Hz
	// sample n = 44.1k/1760 = 25
	uint8_t A6[25];

		for(int i = 0; i < 25; i++){
 8009a10:	2300      	movs	r3, #0
 8009a12:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 8009a16:	f102 0208 	add.w	r2, r2, #8
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	e056      	b.n	8009acc <main+0x324>
			A6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/25))*256;
 8009a1e:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009a22:	f103 0308 	add.w	r3, r3, #8
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	f7f6 fd8c 	bl	8000544 <__aeabi_i2d>
 8009a2c:	a330      	add	r3, pc, #192	; (adr r3, 8009af0 <main+0x348>)
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f7f6 fdf1 	bl	8000618 <__aeabi_dmul>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	f04f 0200 	mov.w	r2, #0
 8009a42:	4b31      	ldr	r3, [pc, #196]	; (8009b08 <main+0x360>)
 8009a44:	f7f6 ff12 	bl	800086c <__aeabi_ddiv>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4619      	mov	r1, r3
 8009a50:	f7f7 f814 	bl	8000a7c <__aeabi_d2f>
 8009a54:	4603      	mov	r3, r0
 8009a56:	ee00 3a10 	vmov	s0, r3
 8009a5a:	f002 fa0f 	bl	800be7c <arm_sin_f32>
 8009a5e:	eef0 7a40 	vmov.f32	s15, s0
 8009a62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a6a:	ee17 0a90 	vmov	r0, s15
 8009a6e:	f7f6 fd7b 	bl	8000568 <__aeabi_f2d>
 8009a72:	a31d      	add	r3, pc, #116	; (adr r3, 8009ae8 <main+0x340>)
 8009a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a78:	f7f6 fdce 	bl	8000618 <__aeabi_dmul>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4610      	mov	r0, r2
 8009a82:	4619      	mov	r1, r3
 8009a84:	f04f 0200 	mov.w	r2, #0
 8009a88:	4b1c      	ldr	r3, [pc, #112]	; (8009afc <main+0x354>)
 8009a8a:	f7f6 fdc5 	bl	8000618 <__aeabi_dmul>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4610      	mov	r0, r2
 8009a94:	4619      	mov	r1, r3
 8009a96:	f7f6 ffd1 	bl	8000a3c <__aeabi_d2uiz>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	b2d9      	uxtb	r1, r3
 8009a9e:	f507 42ad 	add.w	r2, r7, #22144	; 0x5680
 8009aa2:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8009aa6:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009aaa:	f103 0308 	add.w	r3, r3, #8
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	460a      	mov	r2, r1
 8009ab4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 25; i++){
 8009ab6:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009aba:	f103 0308 	add.w	r3, r3, #8
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 8009ac6:	f102 0208 	add.w	r2, r2, #8
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009ad0:	f103 0308 	add.w	r3, r3, #8
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b18      	cmp	r3, #24
 8009ad8:	dda1      	ble.n	8009a1e <main+0x276>
	//Tone 5
	//B6 1975.53 Hz
	//sample n = 44.1k/1975.5 = 22
	uint8_t B6[22];

		for(int i = 0; i < 22; i++){
 8009ada:	2300      	movs	r3, #0
 8009adc:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 8009ae0:	f102 0204 	add.w	r2, r2, #4
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	e068      	b.n	8009bba <main+0x412>
 8009ae8:	51eb851f 	.word	0x51eb851f
 8009aec:	3fd51eb8 	.word	0x3fd51eb8
 8009af0:	4d12d84a 	.word	0x4d12d84a
 8009af4:	401921fb 	.word	0x401921fb
 8009af8:	40450000 	.word	0x40450000
 8009afc:	40700000 	.word	0x40700000
 8009b00:	40410000 	.word	0x40410000
 8009b04:	403c0000 	.word	0x403c0000
 8009b08:	40390000 	.word	0x40390000
			B6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/22))*256;
 8009b0c:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009b10:	f103 0304 	add.w	r3, r3, #4
 8009b14:	6818      	ldr	r0, [r3, #0]
 8009b16:	f7f6 fd15 	bl	8000544 <__aeabi_i2d>
 8009b1a:	a3c3      	add	r3, pc, #780	; (adr r3, 8009e28 <main+0x680>)
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	f7f6 fd7a 	bl	8000618 <__aeabi_dmul>
 8009b24:	4602      	mov	r2, r0
 8009b26:	460b      	mov	r3, r1
 8009b28:	4610      	mov	r0, r2
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	f04f 0200 	mov.w	r2, #0
 8009b30:	4bbf      	ldr	r3, [pc, #764]	; (8009e30 <main+0x688>)
 8009b32:	f7f6 fe9b 	bl	800086c <__aeabi_ddiv>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	f7f6 ff9d 	bl	8000a7c <__aeabi_d2f>
 8009b42:	4603      	mov	r3, r0
 8009b44:	ee00 3a10 	vmov	s0, r3
 8009b48:	f002 f998 	bl	800be7c <arm_sin_f32>
 8009b4c:	eef0 7a40 	vmov.f32	s15, s0
 8009b50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b58:	ee17 0a90 	vmov	r0, s15
 8009b5c:	f7f6 fd04 	bl	8000568 <__aeabi_f2d>
 8009b60:	a3af      	add	r3, pc, #700	; (adr r3, 8009e20 <main+0x678>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fd57 	bl	8000618 <__aeabi_dmul>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4610      	mov	r0, r2
 8009b70:	4619      	mov	r1, r3
 8009b72:	f04f 0200 	mov.w	r2, #0
 8009b76:	4baf      	ldr	r3, [pc, #700]	; (8009e34 <main+0x68c>)
 8009b78:	f7f6 fd4e 	bl	8000618 <__aeabi_dmul>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4610      	mov	r0, r2
 8009b82:	4619      	mov	r1, r3
 8009b84:	f7f6 ff5a 	bl	8000a3c <__aeabi_d2uiz>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	b2d9      	uxtb	r1, r3
 8009b8c:	f507 42ad 	add.w	r2, r7, #22144	; 0x5680
 8009b90:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8009b94:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009b98:	f103 0304 	add.w	r3, r3, #4
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	460a      	mov	r2, r1
 8009ba2:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 22; i++){
 8009ba4:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009ba8:	f103 0304 	add.w	r3, r3, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 8009bb4:	f102 0204 	add.w	r2, r2, #4
 8009bb8:	6013      	str	r3, [r2, #0]
 8009bba:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009bbe:	f103 0304 	add.w	r3, r3, #4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b15      	cmp	r3, #21
 8009bc6:	dda1      	ble.n	8009b0c <main+0x364>
	//Tone 6
	//B5 987.78 Hz
	//sample n = 44.1k/987.78 = 45
	uint8_t B5[45];

		for(int i = 0; i < 45; i++){
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 8009bce:	6013      	str	r3, [r2, #0]
 8009bd0:	e050      	b.n	8009c74 <main+0x4cc>
			B5[i] =  0.33*(1 + arm_sin_f32(2*pi*i/45))*256;
 8009bd2:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009bd6:	6818      	ldr	r0, [r3, #0]
 8009bd8:	f7f6 fcb4 	bl	8000544 <__aeabi_i2d>
 8009bdc:	a392      	add	r3, pc, #584	; (adr r3, 8009e28 <main+0x680>)
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	f7f6 fd19 	bl	8000618 <__aeabi_dmul>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4610      	mov	r0, r2
 8009bec:	4619      	mov	r1, r3
 8009bee:	f04f 0200 	mov.w	r2, #0
 8009bf2:	4b91      	ldr	r3, [pc, #580]	; (8009e38 <main+0x690>)
 8009bf4:	f7f6 fe3a 	bl	800086c <__aeabi_ddiv>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4619      	mov	r1, r3
 8009c00:	f7f6 ff3c 	bl	8000a7c <__aeabi_d2f>
 8009c04:	4603      	mov	r3, r0
 8009c06:	ee00 3a10 	vmov	s0, r3
 8009c0a:	f002 f937 	bl	800be7c <arm_sin_f32>
 8009c0e:	eef0 7a40 	vmov.f32	s15, s0
 8009c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c1a:	ee17 0a90 	vmov	r0, s15
 8009c1e:	f7f6 fca3 	bl	8000568 <__aeabi_f2d>
 8009c22:	a37f      	add	r3, pc, #508	; (adr r3, 8009e20 <main+0x678>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	f7f6 fcf6 	bl	8000618 <__aeabi_dmul>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4610      	mov	r0, r2
 8009c32:	4619      	mov	r1, r3
 8009c34:	f04f 0200 	mov.w	r2, #0
 8009c38:	4b7e      	ldr	r3, [pc, #504]	; (8009e34 <main+0x68c>)
 8009c3a:	f7f6 fced 	bl	8000618 <__aeabi_dmul>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4610      	mov	r0, r2
 8009c44:	4619      	mov	r1, r3
 8009c46:	f7f6 fef9 	bl	8000a3c <__aeabi_d2uiz>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	b2d9      	uxtb	r1, r3
 8009c4e:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009c52:	f103 0318 	add.w	r3, r3, #24
 8009c56:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8009c5a:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4413      	add	r3, r2
 8009c62:	460a      	mov	r2, r1
 8009c64:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 45; i++){
 8009c66:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	f507 42af 	add.w	r2, r7, #22400	; 0x5780
 8009c72:	6013      	str	r3, [r2, #0]
 8009c74:	f507 43af 	add.w	r3, r7, #22400	; 0x5780
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b2c      	cmp	r3, #44	; 0x2c
 8009c7c:	dda9      	ble.n	8009bd2 <main+0x42a>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009c7e:	f7f7 f8cf 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009c82:	f000 fa4d 	bl	800a120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009c86:	f000 fc3f 	bl	800a508 <MX_GPIO_Init>
  MX_DMA_Init();
 8009c8a:	f000 fc0b 	bl	800a4a4 <MX_DMA_Init>
  MX_I2C2_Init();
 8009c8e:	f000 fad9 	bl	800a244 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009c92:	f000 fbbb 	bl	800a40c <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 8009c96:	f000 fb15 	bl	800a2c4 <MX_OCTOSPI1_Init>
  MX_TIM2_Init();
 8009c9a:	f000 fb69 	bl	800a370 <MX_TIM2_Init>
  MX_DAC1_Init();
 8009c9e:	f000 fa91 	bl	800a1c4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  BSP_QSPI_Init();
 8009ca2:	f001 f8e5 	bl	800ae70 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8009ca6:	4865      	ldr	r0, [pc, #404]	; (8009e3c <main+0x694>)
 8009ca8:	f7fc fc60 	bl	800656c <HAL_TIM_Base_Start_IT>
  
  BSP_HSENSOR_Init();
 8009cac:	f001 f840 	bl	800ad30 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init();
 8009cb0:	f001 f86c 	bl	800ad8c <BSP_MAGNETO_Init>
  BSP_GYRO_Init();
 8009cb4:	f000 ffe2 	bl	800ac7c <BSP_GYRO_Init>
  BSP_PSENSOR_Init();
 8009cb8:	f001 f8ac 	bl	800ae14 <BSP_PSENSOR_Init>
  
  //Erase 3 blocks prior to write in

  if(BSP_QSPI_Erase_Block(0) != QSPI_OK){
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	f001 fa2d 	bl	800b11c <BSP_QSPI_Erase_Block>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <main+0x524>
	  Error_Handler();
 8009cc8:	f000 fe82 	bl	800a9d0 <Error_Handler>
  }

  if(BSP_QSPI_Erase_Block(65536) != QSPI_OK){
 8009ccc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009cd0:	f001 fa24 	bl	800b11c <BSP_QSPI_Erase_Block>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <main+0x536>
	  Error_Handler();
 8009cda:	f000 fe79 	bl	800a9d0 <Error_Handler>
  }

  if(BSP_QSPI_Erase_Block(131072) != QSPI_OK){
 8009cde:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009ce2:	f001 fa1b 	bl	800b11c <BSP_QSPI_Erase_Block>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <main+0x548>
	  Error_Handler();
 8009cec:	f000 fe70 	bl	800a9d0 <Error_Handler>
  }
  

      //After erased the blocks, we can write in the samples of tones
      //Write in tone1 B5, start at 0
      uint32_t tone_addr = 0x000000;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009cf6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8009cfa:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < 490; i++){
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009d02:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	e027      	b.n	8009d5a <main+0x5b2>
    	  if(BSP_QSPI_Write((uint8_t *)B5, tone_addr, 45) != QSPI_OK){
 8009d0a:	f507 43ad 	add.w	r3, r7, #22144	; 0x5680
 8009d0e:	f103 0314 	add.w	r3, r3, #20
 8009d12:	222d      	movs	r2, #45	; 0x2d
 8009d14:	f507 41ae 	add.w	r1, r7, #22272	; 0x5700
 8009d18:	f101 017c 	add.w	r1, r1, #124	; 0x7c
 8009d1c:	6809      	ldr	r1, [r1, #0]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f001 f976 	bl	800b010 <BSP_QSPI_Write>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <main+0x586>
    		  Error_Handler();
 8009d2a:	f000 fe51 	bl	800a9d0 <Error_Handler>
    	  }
    	  tone_addr += 45;
 8009d2e:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009d32:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	332d      	adds	r3, #45	; 0x2d
 8009d3a:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009d3e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8009d42:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < 490; i++){
 8009d44:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009d48:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009d54:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8009d58:	6013      	str	r3, [r2, #0]
 8009d5a:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009d5e:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8009d68:	dbcf      	blt.n	8009d0a <main+0x562>
      }


      //Test if it is written (tone 1)

      uint8_t test_written[22050]={1};
 8009d6a:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 8009d6e:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 8009d72:	2201      	movs	r2, #1
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	3304      	adds	r3, #4
 8009d78:	f245 621e 	movw	r2, #22046	; 0x561e
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f002 f8fa 	bl	800bf78 <memset>

      if(BSP_QSPI_Read((uint8_t *)test_written, 0x00000000, 22050) != QSPI_OK){
 8009d84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009d88:	3b28      	subs	r3, #40	; 0x28
 8009d8a:	f245 6222 	movw	r2, #22050	; 0x5622
 8009d8e:	2100      	movs	r1, #0
 8009d90:	4618      	mov	r0, r3
 8009d92:	f001 f8eb 	bl	800af6c <BSP_QSPI_Read>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <main+0x5f8>
    	  Error_Handler();
 8009d9c:	f000 fe18 	bl	800a9d0 <Error_Handler>
      }



      //Write in tone2 C6, start at 22050
      for(int i = 0; i < 525; i++){
 8009da0:	2300      	movs	r3, #0
 8009da2:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009da6:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8009daa:	6013      	str	r3, [r2, #0]
 8009dac:	e027      	b.n	8009dfe <main+0x656>
    	  if(BSP_QSPI_Write((uint8_t *)C6, tone_addr, 42) != QSPI_OK){
 8009dae:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009db2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8009db6:	222a      	movs	r2, #42	; 0x2a
 8009db8:	f507 41ae 	add.w	r1, r7, #22272	; 0x5700
 8009dbc:	f101 017c 	add.w	r1, r1, #124	; 0x7c
 8009dc0:	6809      	ldr	r1, [r1, #0]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f001 f924 	bl	800b010 <BSP_QSPI_Write>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <main+0x62a>
    		  Error_Handler();
 8009dce:	f000 fdff 	bl	800a9d0 <Error_Handler>
    	  }
    	  tone_addr += 42;
 8009dd2:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009dd6:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	332a      	adds	r3, #42	; 0x2a
 8009dde:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009de2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8009de6:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < 525; i++){
 8009de8:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009dec:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3301      	adds	r3, #1
 8009df4:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009df8:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8009dfc:	6013      	str	r3, [r2, #0]
 8009dfe:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009e02:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8009e0c:	ddcf      	ble.n	8009dae <main+0x606>
      }
      //Write in tone3 E6, start at 44100
      for(int i = 0; i < 648; i++){
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009e14:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8009e18:	6013      	str	r3, [r2, #0]
 8009e1a:	e039      	b.n	8009e90 <main+0x6e8>
 8009e1c:	f3af 8000 	nop.w
 8009e20:	51eb851f 	.word	0x51eb851f
 8009e24:	3fd51eb8 	.word	0x3fd51eb8
 8009e28:	4d12d84a 	.word	0x4d12d84a
 8009e2c:	401921fb 	.word	0x401921fb
 8009e30:	40360000 	.word	0x40360000
 8009e34:	40700000 	.word	0x40700000
 8009e38:	40468000 	.word	0x40468000
 8009e3c:	20016a74 	.word	0x20016a74
    	  if(BSP_QSPI_Write((uint8_t *)E6, tone_addr, 34) != QSPI_OK){
 8009e40:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009e44:	f103 0314 	add.w	r3, r3, #20
 8009e48:	2222      	movs	r2, #34	; 0x22
 8009e4a:	f507 41ae 	add.w	r1, r7, #22272	; 0x5700
 8009e4e:	f101 017c 	add.w	r1, r1, #124	; 0x7c
 8009e52:	6809      	ldr	r1, [r1, #0]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f001 f8db 	bl	800b010 <BSP_QSPI_Write>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <main+0x6bc>
    		  Error_Handler();
 8009e60:	f000 fdb6 	bl	800a9d0 <Error_Handler>
    	  }
    	  tone_addr += 34;
 8009e64:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009e68:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3322      	adds	r3, #34	; 0x22
 8009e70:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009e74:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8009e78:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < 648; i++){
 8009e7a:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009e7e:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3301      	adds	r3, #1
 8009e86:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009e8a:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009e94:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f5b3 7f22 	cmp.w	r3, #648	; 0x288
 8009e9e:	dbcf      	blt.n	8009e40 <main+0x698>
      }
      tone_addr = 0x010266;
 8009ea0:	4b93      	ldr	r3, [pc, #588]	; (800a0f0 <main+0x948>)
 8009ea2:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009ea6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8009eaa:	6013      	str	r3, [r2, #0]
      //Write in tone4 G6, start at 66150
      for(int i = 0; i < 787; i++){
 8009eac:	2300      	movs	r3, #0
 8009eae:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009eb2:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8009eb6:	6013      	str	r3, [r2, #0]
 8009eb8:	e027      	b.n	8009f0a <main+0x762>
    	  if(BSP_QSPI_Write((uint8_t *)G6, tone_addr, 28) != QSPI_OK){
 8009eba:	f507 43ad 	add.w	r3, r7, #22144	; 0x5680
 8009ebe:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8009ec2:	221c      	movs	r2, #28
 8009ec4:	f507 41ae 	add.w	r1, r7, #22272	; 0x5700
 8009ec8:	f101 017c 	add.w	r1, r1, #124	; 0x7c
 8009ecc:	6809      	ldr	r1, [r1, #0]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f001 f89e 	bl	800b010 <BSP_QSPI_Write>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <main+0x736>
    		  Error_Handler();
 8009eda:	f000 fd79 	bl	800a9d0 <Error_Handler>
    	  }
    	  tone_addr += 28;
 8009ede:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009ee2:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	331c      	adds	r3, #28
 8009eea:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009eee:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8009ef2:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < 787; i++){
 8009ef4:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009ef8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3301      	adds	r3, #1
 8009f00:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009f04:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8009f08:	6013      	str	r3, [r2, #0]
 8009f0a:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009f0e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f240 3212 	movw	r2, #786	; 0x312
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	ddce      	ble.n	8009eba <main+0x712>
      }
      tone_addr = 0x015888;
 8009f1c:	4b75      	ldr	r3, [pc, #468]	; (800a0f4 <main+0x94c>)
 8009f1e:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009f22:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8009f26:	6013      	str	r3, [r2, #0]
      //Write in tone5 A6, start at 88200
      for(int i = 0; i < 882; i++){
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009f2e:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	e027      	b.n	8009f86 <main+0x7de>
    	  if(BSP_QSPI_Write((uint8_t *)A6, tone_addr, 25) != QSPI_OK){
 8009f36:	f507 43ad 	add.w	r3, r7, #22144	; 0x5680
 8009f3a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8009f3e:	2219      	movs	r2, #25
 8009f40:	f507 41ae 	add.w	r1, r7, #22272	; 0x5700
 8009f44:	f101 017c 	add.w	r1, r1, #124	; 0x7c
 8009f48:	6809      	ldr	r1, [r1, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f001 f860 	bl	800b010 <BSP_QSPI_Write>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <main+0x7b2>
    		  Error_Handler();
 8009f56:	f000 fd3b 	bl	800a9d0 <Error_Handler>
    	  }
    	  tone_addr += 25;
 8009f5a:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009f5e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3319      	adds	r3, #25
 8009f66:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009f6a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8009f6e:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < 882; i++){
 8009f70:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009f74:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009f80:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009f8a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f240 3271 	movw	r2, #881	; 0x371
 8009f94:	4293      	cmp	r3, r2
 8009f96:	ddce      	ble.n	8009f36 <main+0x78e>
      }


      //Write in tone6 B6, start at 110250
      for(int i = 0; i < 1002; i++){
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009f9e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	e027      	b.n	8009ff6 <main+0x84e>
    	  if(BSP_QSPI_Write((uint8_t *)B6, tone_addr, 22) != QSPI_OK){
 8009fa6:	f507 43ad 	add.w	r3, r7, #22144	; 0x5680
 8009faa:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8009fae:	2216      	movs	r2, #22
 8009fb0:	f507 41ae 	add.w	r1, r7, #22272	; 0x5700
 8009fb4:	f101 017c 	add.w	r1, r1, #124	; 0x7c
 8009fb8:	6809      	ldr	r1, [r1, #0]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f001 f828 	bl	800b010 <BSP_QSPI_Write>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <main+0x822>
    		  Error_Handler();
 8009fc6:	f000 fd03 	bl	800a9d0 <Error_Handler>
    	  }
    	  tone_addr += 22;
 8009fca:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009fce:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3316      	adds	r3, #22
 8009fd6:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009fda:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8009fde:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < 1002; i++){
 8009fe0:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009fe4:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3301      	adds	r3, #1
 8009fec:	f507 42ae 	add.w	r2, r7, #22272	; 0x5700
 8009ff0:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8009ff4:	6013      	str	r3, [r2, #0]
 8009ff6:	f507 43ae 	add.w	r3, r7, #22272	; 0x5700
 8009ffa:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a004:	4293      	cmp	r3, r2
 800a006:	ddce      	ble.n	8009fa6 <main+0x7fe>
      }

      //Now read the data
      if(BSP_QSPI_Read((uint8_t *)play, 0x00000000, 22050) != QSPI_OK){
 800a008:	f245 6222 	movw	r2, #22050	; 0x5622
 800a00c:	2100      	movs	r1, #0
 800a00e:	483a      	ldr	r0, [pc, #232]	; (800a0f8 <main+0x950>)
 800a010:	f000 ffac 	bl	800af6c <BSP_QSPI_Read>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <main+0x876>
    	  Error_Handler();
 800a01a:	f000 fcd9 	bl	800a9d0 <Error_Handler>
      }

      HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 800a01e:	2308      	movs	r3, #8
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	f245 6322 	movw	r3, #22050	; 0x5622
 800a026:	4a34      	ldr	r2, [pc, #208]	; (800a0f8 <main+0x950>)
 800a028:	2100      	movs	r1, #0
 800a02a:	4834      	ldr	r0, [pc, #208]	; (800a0fc <main+0x954>)
 800a02c:	f7f7 f88a 	bl	8001144 <HAL_DAC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of read_sensor */
  osThreadDef(read_sensor, start_read_sensor, osPriorityNormal, 0, 128);
 800a030:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 800a034:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 800a038:	4a31      	ldr	r2, [pc, #196]	; (800a100 <main+0x958>)
 800a03a:	461c      	mov	r4, r3
 800a03c:	4615      	mov	r5, r2
 800a03e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a042:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_sensorHandle = osThreadCreate(osThread(read_sensor), NULL);
 800a04a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a04e:	3b44      	subs	r3, #68	; 0x44
 800a050:	2100      	movs	r1, #0
 800a052:	4618      	mov	r0, r3
 800a054:	f7fd fd9f 	bl	8007b96 <osThreadCreate>
 800a058:	4603      	mov	r3, r0
 800a05a:	4a2a      	ldr	r2, [pc, #168]	; (800a104 <main+0x95c>)
 800a05c:	6013      	str	r3, [r2, #0]

  /* definition and creation of press_button */
  osThreadDef(press_button, start_press_button, osPriorityNormal, 0, 128);
 800a05e:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 800a062:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 800a066:	4a28      	ldr	r2, [pc, #160]	; (800a108 <main+0x960>)
 800a068:	461c      	mov	r4, r3
 800a06a:	4615      	mov	r5, r2
 800a06c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a06e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a070:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a074:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  press_buttonHandle = osThreadCreate(osThread(press_button), NULL);
 800a078:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a07c:	3b60      	subs	r3, #96	; 0x60
 800a07e:	2100      	movs	r1, #0
 800a080:	4618      	mov	r0, r3
 800a082:	f7fd fd88 	bl	8007b96 <osThreadCreate>
 800a086:	4603      	mov	r3, r0
 800a088:	4a20      	ldr	r2, [pc, #128]	; (800a10c <main+0x964>)
 800a08a:	6013      	str	r3, [r2, #0]

  /* definition and creation of change_sensor */
  osThreadDef(change_sensor, start_change_sensor, osPriorityNormal, 0, 128);
 800a08c:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 800a090:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 800a094:	4a1e      	ldr	r2, [pc, #120]	; (800a110 <main+0x968>)
 800a096:	461c      	mov	r4, r3
 800a098:	4615      	mov	r5, r2
 800a09a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a09c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a09e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a0a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  change_sensorHandle = osThreadCreate(osThread(change_sensor), NULL);
 800a0a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a0aa:	3b7c      	subs	r3, #124	; 0x7c
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fd fd71 	bl	8007b96 <osThreadCreate>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	4a17      	ldr	r2, [pc, #92]	; (800a114 <main+0x96c>)
 800a0b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of send_terminal */
  osThreadDef(send_terminal, start_send_terminal, osPriorityNormal, 0, 128);
 800a0ba:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 800a0be:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 800a0c2:	4a15      	ldr	r2, [pc, #84]	; (800a118 <main+0x970>)
 800a0c4:	461c      	mov	r4, r3
 800a0c6:	4615      	mov	r5, r2
 800a0c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a0d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  send_terminalHandle = osThreadCreate(osThread(send_terminal), NULL);
 800a0d4:	f107 0318 	add.w	r3, r7, #24
 800a0d8:	3b18      	subs	r3, #24
 800a0da:	2100      	movs	r1, #0
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7fd fd5a 	bl	8007b96 <osThreadCreate>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	4a0d      	ldr	r2, [pc, #52]	; (800a11c <main+0x974>)
 800a0e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800a0e8:	f7fd fd4e 	bl	8007b88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a0ec:	e7fe      	b.n	800a0ec <main+0x944>
 800a0ee:	bf00      	nop
 800a0f0:	00010266 	.word	0x00010266
 800a0f4:	00015888 	.word	0x00015888
 800a0f8:	2000008c 	.word	0x2000008c
 800a0fc:	200168fc 	.word	0x200168fc
 800a100:	0800c8a4 	.word	0x0800c8a4
 800a104:	20016b50 	.word	0x20016b50
 800a108:	0800c8c0 	.word	0x0800c8c0
 800a10c:	20016b54 	.word	0x20016b54
 800a110:	0800c8dc 	.word	0x0800c8dc
 800a114:	20016b58 	.word	0x20016b58
 800a118:	0800c8f8 	.word	0x0800c8f8
 800a11c:	20016b5c 	.word	0x20016b5c

0800a120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b096      	sub	sp, #88	; 0x58
 800a124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a126:	f107 0314 	add.w	r3, r7, #20
 800a12a:	2244      	movs	r2, #68	; 0x44
 800a12c:	2100      	movs	r1, #0
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 ff22 	bl	800bf78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a134:	463b      	mov	r3, r7
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]
 800a13a:	605a      	str	r2, [r3, #4]
 800a13c:	609a      	str	r2, [r3, #8]
 800a13e:	60da      	str	r2, [r3, #12]
 800a140:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800a142:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a146:	f7fa fcf3 	bl	8004b30 <HAL_PWREx_ControlVoltageScaling>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800a150:	f000 fc3e 	bl	800a9d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800a154:	2310      	movs	r3, #16
 800a156:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a158:	2301      	movs	r3, #1
 800a15a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800a160:	2360      	movs	r3, #96	; 0x60
 800a162:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a164:	2302      	movs	r3, #2
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a168:	2301      	movs	r3, #1
 800a16a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a16c:	2301      	movs	r3, #1
 800a16e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800a170:	2328      	movs	r3, #40	; 0x28
 800a172:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a174:	2302      	movs	r3, #2
 800a176:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a178:	2302      	movs	r3, #2
 800a17a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a17c:	2302      	movs	r3, #2
 800a17e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a180:	f107 0314 	add.w	r3, r7, #20
 800a184:	4618      	mov	r0, r3
 800a186:	f7fa fd77 	bl	8004c78 <HAL_RCC_OscConfig>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800a190:	f000 fc1e 	bl	800a9d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a194:	230f      	movs	r3, #15
 800a196:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a198:	2303      	movs	r3, #3
 800a19a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a19c:	2300      	movs	r3, #0
 800a19e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800a1a8:	463b      	mov	r3, r7
 800a1aa:	2103      	movs	r1, #3
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fb f97d 	bl	80054ac <HAL_RCC_ClockConfig>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800a1b8:	f000 fc0a 	bl	800a9d0 <Error_Handler>
  }
}
 800a1bc:	bf00      	nop
 800a1be:	3758      	adds	r7, #88	; 0x58
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08a      	sub	sp, #40	; 0x28
 800a1c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a1ca:	463b      	mov	r3, r7
 800a1cc:	2228      	movs	r2, #40	; 0x28
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f001 fed1 	bl	800bf78 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a1d6:	4b19      	ldr	r3, [pc, #100]	; (800a23c <MX_DAC1_Init+0x78>)
 800a1d8:	4a19      	ldr	r2, [pc, #100]	; (800a240 <MX_DAC1_Init+0x7c>)
 800a1da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a1dc:	4817      	ldr	r0, [pc, #92]	; (800a23c <MX_DAC1_Init+0x78>)
 800a1de:	f7f6 ff8f 	bl	8001100 <HAL_DAC_Init>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a1e8:	f000 fbf2 	bl	800a9d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800a1f0:	230a      	movs	r3, #10
 800a1f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a1f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1f8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800a1fe:	2300      	movs	r3, #0
 800a200:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a202:	2300      	movs	r3, #0
 800a204:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a206:	463b      	mov	r3, r7
 800a208:	2200      	movs	r2, #0
 800a20a:	4619      	mov	r1, r3
 800a20c:	480b      	ldr	r0, [pc, #44]	; (800a23c <MX_DAC1_Init+0x78>)
 800a20e:	f7f7 f8d3 	bl	80013b8 <HAL_DAC_ConfigChannel>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 800a218:	f000 fbda 	bl	800a9d0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800a21c:	463b      	mov	r3, r7
 800a21e:	2210      	movs	r2, #16
 800a220:	4619      	mov	r1, r3
 800a222:	4806      	ldr	r0, [pc, #24]	; (800a23c <MX_DAC1_Init+0x78>)
 800a224:	f7f7 f8c8 	bl	80013b8 <HAL_DAC_ConfigChannel>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 800a22e:	f000 fbcf 	bl	800a9d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800a232:	bf00      	nop
 800a234:	3728      	adds	r7, #40	; 0x28
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	200168fc 	.word	0x200168fc
 800a240:	40007400 	.word	0x40007400

0800a244 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a248:	4b1b      	ldr	r3, [pc, #108]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a24a:	4a1c      	ldr	r2, [pc, #112]	; (800a2bc <MX_I2C2_Init+0x78>)
 800a24c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800a24e:	4b1a      	ldr	r3, [pc, #104]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a250:	4a1b      	ldr	r2, [pc, #108]	; (800a2c0 <MX_I2C2_Init+0x7c>)
 800a252:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a254:	4b18      	ldr	r3, [pc, #96]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a256:	2200      	movs	r2, #0
 800a258:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a25a:	4b17      	ldr	r3, [pc, #92]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a260:	4b15      	ldr	r3, [pc, #84]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a262:	2200      	movs	r2, #0
 800a264:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a266:	4b14      	ldr	r3, [pc, #80]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a268:	2200      	movs	r2, #0
 800a26a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a26c:	4b12      	ldr	r3, [pc, #72]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a26e:	2200      	movs	r2, #0
 800a270:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a272:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a274:	2200      	movs	r2, #0
 800a276:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a278:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a27e:	480e      	ldr	r0, [pc, #56]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a280:	f7f8 f81c 	bl	80022bc <HAL_I2C_Init>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a28a:	f000 fba1 	bl	800a9d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a28e:	2100      	movs	r1, #0
 800a290:	4809      	ldr	r0, [pc, #36]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a292:	f7f9 fb19 	bl	80038c8 <HAL_I2CEx_ConfigAnalogFilter>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a29c:	f000 fb98 	bl	800a9d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	4805      	ldr	r0, [pc, #20]	; (800a2b8 <MX_I2C2_Init+0x74>)
 800a2a4:	f7f9 fb5b 	bl	800395e <HAL_I2CEx_ConfigDigitalFilter>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a2ae:	f000 fb8f 	bl	800a9d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a2b2:	bf00      	nop
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	200169d0 	.word	0x200169d0
 800a2bc:	40005800 	.word	0x40005800
 800a2c0:	10909cec 	.word	0x10909cec

0800a2c4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800a2ca:	1d3b      	adds	r3, r7, #4
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	605a      	str	r2, [r3, #4]
 800a2d2:	609a      	str	r2, [r3, #8]
 800a2d4:	60da      	str	r2, [r3, #12]
 800a2d6:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800a2d8:	4b23      	ldr	r3, [pc, #140]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a2da:	4a24      	ldr	r2, [pc, #144]	; (800a36c <MX_OCTOSPI1_Init+0xa8>)
 800a2dc:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800a2de:	4b22      	ldr	r3, [pc, #136]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800a2e4:	4b20      	ldr	r3, [pc, #128]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800a2ea:	4b1f      	ldr	r3, [pc, #124]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a2ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2f0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800a2f2:	4b1d      	ldr	r3, [pc, #116]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a2f4:	2220      	movs	r2, #32
 800a2f6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800a2f8:	4b1b      	ldr	r3, [pc, #108]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800a2fe:	4b1a      	ldr	r3, [pc, #104]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a300:	2200      	movs	r2, #0
 800a302:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800a304:	4b18      	ldr	r3, [pc, #96]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a306:	2200      	movs	r2, #0
 800a308:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800a30a:	4b17      	ldr	r3, [pc, #92]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a30c:	2201      	movs	r2, #1
 800a30e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800a310:	4b15      	ldr	r3, [pc, #84]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a312:	2200      	movs	r2, #0
 800a314:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800a316:	4b14      	ldr	r3, [pc, #80]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a318:	2200      	movs	r2, #0
 800a31a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 800a31c:	4b12      	ldr	r3, [pc, #72]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a31e:	2200      	movs	r2, #0
 800a320:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800a322:	4b11      	ldr	r3, [pc, #68]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a324:	2208      	movs	r2, #8
 800a326:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800a328:	480f      	ldr	r0, [pc, #60]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a32a:	f7f9 fb65 	bl	80039f8 <HAL_OSPI_Init>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 800a334:	f000 fb4c 	bl	800a9d0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800a338:	2301      	movs	r3, #1
 800a33a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800a33c:	2301      	movs	r3, #1
 800a33e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800a340:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800a344:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a346:	1d3b      	adds	r3, r7, #4
 800a348:	f241 3288 	movw	r2, #5000	; 0x1388
 800a34c:	4619      	mov	r1, r3
 800a34e:	4806      	ldr	r0, [pc, #24]	; (800a368 <MX_OCTOSPI1_Init+0xa4>)
 800a350:	f7f9 fe50 	bl	8003ff4 <HAL_OSPIM_Config>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800a35a:	f000 fb39 	bl	800a9d0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800a35e:	bf00      	nop
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20016a24 	.word	0x20016a24
 800a36c:	a0001000 	.word	0xa0001000

0800a370 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a376:	f107 0310 	add.w	r3, r7, #16
 800a37a:	2200      	movs	r2, #0
 800a37c:	601a      	str	r2, [r3, #0]
 800a37e:	605a      	str	r2, [r3, #4]
 800a380:	609a      	str	r2, [r3, #8]
 800a382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a384:	1d3b      	adds	r3, r7, #4
 800a386:	2200      	movs	r2, #0
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	605a      	str	r2, [r3, #4]
 800a38c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a38e:	4b1e      	ldr	r3, [pc, #120]	; (800a408 <MX_TIM2_Init+0x98>)
 800a390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a394:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800a396:	4b1c      	ldr	r3, [pc, #112]	; (800a408 <MX_TIM2_Init+0x98>)
 800a398:	2201      	movs	r2, #1
 800a39a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a39c:	4b1a      	ldr	r3, [pc, #104]	; (800a408 <MX_TIM2_Init+0x98>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 800a3a2:	4b19      	ldr	r3, [pc, #100]	; (800a408 <MX_TIM2_Init+0x98>)
 800a3a4:	f240 7216 	movw	r2, #1814	; 0x716
 800a3a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3aa:	4b17      	ldr	r3, [pc, #92]	; (800a408 <MX_TIM2_Init+0x98>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3b0:	4b15      	ldr	r3, [pc, #84]	; (800a408 <MX_TIM2_Init+0x98>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a3b6:	4814      	ldr	r0, [pc, #80]	; (800a408 <MX_TIM2_Init+0x98>)
 800a3b8:	f7fc f880 	bl	80064bc <HAL_TIM_Base_Init>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a3c2:	f000 fb05 	bl	800a9d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a3c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a3cc:	f107 0310 	add.w	r3, r7, #16
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	480d      	ldr	r0, [pc, #52]	; (800a408 <MX_TIM2_Init+0x98>)
 800a3d4:	f7fc fa59 	bl	800688a <HAL_TIM_ConfigClockSource>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a3de:	f000 faf7 	bl	800a9d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a3e2:	2320      	movs	r3, #32
 800a3e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a3ea:	1d3b      	adds	r3, r7, #4
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4806      	ldr	r0, [pc, #24]	; (800a408 <MX_TIM2_Init+0x98>)
 800a3f0:	f7fc fc70 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a3fa:	f000 fae9 	bl	800a9d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a3fe:	bf00      	nop
 800a400:	3720      	adds	r7, #32
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20016a74 	.word	0x20016a74

0800a40c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a410:	4b22      	ldr	r3, [pc, #136]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a412:	4a23      	ldr	r2, [pc, #140]	; (800a4a0 <MX_USART1_UART_Init+0x94>)
 800a414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a416:	4b21      	ldr	r3, [pc, #132]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a41c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a41e:	4b1f      	ldr	r3, [pc, #124]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a420:	2200      	movs	r2, #0
 800a422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a424:	4b1d      	ldr	r3, [pc, #116]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a426:	2200      	movs	r2, #0
 800a428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a42a:	4b1c      	ldr	r3, [pc, #112]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a430:	4b1a      	ldr	r3, [pc, #104]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a432:	220c      	movs	r2, #12
 800a434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a436:	4b19      	ldr	r3, [pc, #100]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a438:	2200      	movs	r2, #0
 800a43a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a43c:	4b17      	ldr	r3, [pc, #92]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a43e:	2200      	movs	r2, #0
 800a440:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a442:	4b16      	ldr	r3, [pc, #88]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a444:	2200      	movs	r2, #0
 800a446:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a448:	4b14      	ldr	r3, [pc, #80]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a44e:	4b13      	ldr	r3, [pc, #76]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a450:	2200      	movs	r2, #0
 800a452:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a454:	4811      	ldr	r0, [pc, #68]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a456:	f7fc fce3 	bl	8006e20 <HAL_UART_Init>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d001      	beq.n	800a464 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800a460:	f000 fab6 	bl	800a9d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a464:	2100      	movs	r1, #0
 800a466:	480d      	ldr	r0, [pc, #52]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a468:	f7fd faac 	bl	80079c4 <HAL_UARTEx_SetTxFifoThreshold>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800a472:	f000 faad 	bl	800a9d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a476:	2100      	movs	r1, #0
 800a478:	4808      	ldr	r0, [pc, #32]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a47a:	f7fd fae1 	bl	8007a40 <HAL_UARTEx_SetRxFifoThreshold>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d001      	beq.n	800a488 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800a484:	f000 faa4 	bl	800a9d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a488:	4804      	ldr	r0, [pc, #16]	; (800a49c <MX_USART1_UART_Init+0x90>)
 800a48a:	f7fd fa62 	bl	8007952 <HAL_UARTEx_DisableFifoMode>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800a494:	f000 fa9c 	bl	800a9d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a498:	bf00      	nop
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	20016ac0 	.word	0x20016ac0
 800a4a0:	40013800 	.word	0x40013800

0800a4a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a4aa:	4b16      	ldr	r3, [pc, #88]	; (800a504 <MX_DMA_Init+0x60>)
 800a4ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ae:	4a15      	ldr	r2, [pc, #84]	; (800a504 <MX_DMA_Init+0x60>)
 800a4b0:	f043 0304 	orr.w	r3, r3, #4
 800a4b4:	6493      	str	r3, [r2, #72]	; 0x48
 800a4b6:	4b13      	ldr	r3, [pc, #76]	; (800a504 <MX_DMA_Init+0x60>)
 800a4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ba:	f003 0304 	and.w	r3, r3, #4
 800a4be:	607b      	str	r3, [r7, #4]
 800a4c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a4c2:	4b10      	ldr	r3, [pc, #64]	; (800a504 <MX_DMA_Init+0x60>)
 800a4c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4c6:	4a0f      	ldr	r2, [pc, #60]	; (800a504 <MX_DMA_Init+0x60>)
 800a4c8:	f043 0301 	orr.w	r3, r3, #1
 800a4cc:	6493      	str	r3, [r2, #72]	; 0x48
 800a4ce:	4b0d      	ldr	r3, [pc, #52]	; (800a504 <MX_DMA_Init+0x60>)
 800a4d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2105      	movs	r1, #5
 800a4de:	200b      	movs	r0, #11
 800a4e0:	f7f6 fdd6 	bl	8001090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a4e4:	200b      	movs	r0, #11
 800a4e6:	f7f6 fdef 	bl	80010c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2105      	movs	r1, #5
 800a4ee:	200c      	movs	r0, #12
 800a4f0:	f7f6 fdce 	bl	8001090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a4f4:	200c      	movs	r0, #12
 800a4f6:	f7f6 fde7 	bl	80010c8 <HAL_NVIC_EnableIRQ>

}
 800a4fa:	bf00      	nop
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	40021000 	.word	0x40021000

0800a508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08a      	sub	sp, #40	; 0x28
 800a50c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a50e:	f107 0314 	add.w	r3, r7, #20
 800a512:	2200      	movs	r2, #0
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	605a      	str	r2, [r3, #4]
 800a518:	609a      	str	r2, [r3, #8]
 800a51a:	60da      	str	r2, [r3, #12]
 800a51c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a51e:	4b43      	ldr	r3, [pc, #268]	; (800a62c <MX_GPIO_Init+0x124>)
 800a520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a522:	4a42      	ldr	r2, [pc, #264]	; (800a62c <MX_GPIO_Init+0x124>)
 800a524:	f043 0310 	orr.w	r3, r3, #16
 800a528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a52a:	4b40      	ldr	r3, [pc, #256]	; (800a62c <MX_GPIO_Init+0x124>)
 800a52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52e:	f003 0310 	and.w	r3, r3, #16
 800a532:	613b      	str	r3, [r7, #16]
 800a534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a536:	4b3d      	ldr	r3, [pc, #244]	; (800a62c <MX_GPIO_Init+0x124>)
 800a538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a53a:	4a3c      	ldr	r2, [pc, #240]	; (800a62c <MX_GPIO_Init+0x124>)
 800a53c:	f043 0304 	orr.w	r3, r3, #4
 800a540:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a542:	4b3a      	ldr	r3, [pc, #232]	; (800a62c <MX_GPIO_Init+0x124>)
 800a544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a54e:	4b37      	ldr	r3, [pc, #220]	; (800a62c <MX_GPIO_Init+0x124>)
 800a550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a552:	4a36      	ldr	r2, [pc, #216]	; (800a62c <MX_GPIO_Init+0x124>)
 800a554:	f043 0301 	orr.w	r3, r3, #1
 800a558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a55a:	4b34      	ldr	r3, [pc, #208]	; (800a62c <MX_GPIO_Init+0x124>)
 800a55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	60bb      	str	r3, [r7, #8]
 800a564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a566:	4b31      	ldr	r3, [pc, #196]	; (800a62c <MX_GPIO_Init+0x124>)
 800a568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a56a:	4a30      	ldr	r2, [pc, #192]	; (800a62c <MX_GPIO_Init+0x124>)
 800a56c:	f043 0302 	orr.w	r3, r3, #2
 800a570:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a572:	4b2e      	ldr	r3, [pc, #184]	; (800a62c <MX_GPIO_Init+0x124>)
 800a574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	607b      	str	r3, [r7, #4]
 800a57c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800a57e:	2200      	movs	r2, #0
 800a580:	2108      	movs	r1, #8
 800a582:	482b      	ldr	r0, [pc, #172]	; (800a630 <MX_GPIO_Init+0x128>)
 800a584:	f7f7 fe50 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800a588:	2200      	movs	r2, #0
 800a58a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a58e:	4829      	ldr	r0, [pc, #164]	; (800a634 <MX_GPIO_Init+0x12c>)
 800a590:	f7f7 fe4a 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800a594:	2200      	movs	r2, #0
 800a596:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a59a:	4827      	ldr	r0, [pc, #156]	; (800a638 <MX_GPIO_Init+0x130>)
 800a59c:	f7f7 fe44 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800a5a0:	2308      	movs	r3, #8
 800a5a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800a5b0:	f107 0314 	add.w	r3, r7, #20
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	481e      	ldr	r0, [pc, #120]	; (800a630 <MX_GPIO_Init+0x128>)
 800a5b8:	f7f7 fbb2 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_button_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin;
 800a5bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a5c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a5c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(blue_button_GPIO_Port, &GPIO_InitStruct);
 800a5cc:	f107 0314 	add.w	r3, r7, #20
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	4819      	ldr	r0, [pc, #100]	; (800a638 <MX_GPIO_Init+0x130>)
 800a5d4:	f7f7 fba4 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800a5d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a5dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800a5ea:	f107 0314 	add.w	r3, r7, #20
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	4810      	ldr	r0, [pc, #64]	; (800a634 <MX_GPIO_Init+0x12c>)
 800a5f2:	f7f7 fb95 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800a5f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a600:	2300      	movs	r3, #0
 800a602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a604:	2300      	movs	r3, #0
 800a606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800a608:	f107 0314 	add.w	r3, r7, #20
 800a60c:	4619      	mov	r1, r3
 800a60e:	480a      	ldr	r0, [pc, #40]	; (800a638 <MX_GPIO_Init+0x130>)
 800a610:	f7f7 fb86 	bl	8001d20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800a614:	2200      	movs	r2, #0
 800a616:	2105      	movs	r1, #5
 800a618:	2028      	movs	r0, #40	; 0x28
 800a61a:	f7f6 fd39 	bl	8001090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a61e:	2028      	movs	r0, #40	; 0x28
 800a620:	f7f6 fd52 	bl	80010c8 <HAL_NVIC_EnableIRQ>

}
 800a624:	bf00      	nop
 800a626:	3728      	adds	r7, #40	; 0x28
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	40021000 	.word	0x40021000
 800a630:	48001000 	.word	0x48001000
 800a634:	48000400 	.word	0x48000400
 800a638:	48000800 	.word	0x48000800

0800a63c <HAL_DAC_ConvHalfCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
void HAL_DAC_ConvHalfCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 800a644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a648:	480a      	ldr	r0, [pc, #40]	; (800a674 <HAL_DAC_ConvHalfCpltCallbackCh1+0x38>)
 800a64a:	f7f7 fe05 	bl	8002258 <HAL_GPIO_TogglePin>
//	HAL_GPIO_TogglePin(RED_LED_GPIO_Port,RED_LED_Pin);
//
//	HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);

	if(sound_counter == 5){
 800a64e:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <HAL_DAC_ConvHalfCpltCallbackCh1+0x3c>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2b05      	cmp	r3, #5
 800a654:	d103      	bne.n	800a65e <HAL_DAC_ConvHalfCpltCallbackCh1+0x22>
		sound_counter = 0;
 800a656:	4b08      	ldr	r3, [pc, #32]	; (800a678 <HAL_DAC_ConvHalfCpltCallbackCh1+0x3c>)
 800a658:	2200      	movs	r2, #0
 800a65a:	701a      	strb	r2, [r3, #0]
	}else{
		sound_counter++;
	}

}
 800a65c:	e005      	b.n	800a66a <HAL_DAC_ConvHalfCpltCallbackCh1+0x2e>
		sound_counter++;
 800a65e:	4b06      	ldr	r3, [pc, #24]	; (800a678 <HAL_DAC_ConvHalfCpltCallbackCh1+0x3c>)
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	3301      	adds	r3, #1
 800a664:	b2da      	uxtb	r2, r3
 800a666:	4b04      	ldr	r3, [pc, #16]	; (800a678 <HAL_DAC_ConvHalfCpltCallbackCh1+0x3c>)
 800a668:	701a      	strb	r2, [r3, #0]
}
 800a66a:	bf00      	nop
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	48000400 	.word	0x48000400
 800a678:	20016be8 	.word	0x20016be8

0800a67c <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af02      	add	r7, sp, #8
 800a682:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 800a684:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a688:	484c      	ldr	r0, [pc, #304]	; (800a7bc <HAL_DAC_ConvCpltCallbackCh1+0x140>)
 800a68a:	f7f7 fde5 	bl	8002258 <HAL_GPIO_TogglePin>
	if(sound_counter == 0){
 800a68e:	4b4c      	ldr	r3, [pc, #304]	; (800a7c0 <HAL_DAC_ConvCpltCallbackCh1+0x144>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d113      	bne.n	800a6be <HAL_DAC_ConvCpltCallbackCh1+0x42>
		if(BSP_QSPI_Read((uint8_t *)play, 0x000000, 22050) != QSPI_OK){
 800a696:	f245 6222 	movw	r2, #22050	; 0x5622
 800a69a:	2100      	movs	r1, #0
 800a69c:	4849      	ldr	r0, [pc, #292]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a69e:	f000 fc65 	bl	800af6c <BSP_QSPI_Read>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <HAL_DAC_ConvCpltCallbackCh1+0x30>
			  Error_Handler();
 800a6a8:	f000 f992 	bl	800a9d0 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 800a6ac:	2308      	movs	r3, #8
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	f245 6322 	movw	r3, #22050	; 0x5622
 800a6b4:	4a43      	ldr	r2, [pc, #268]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	4843      	ldr	r0, [pc, #268]	; (800a7c8 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 800a6ba:	f7f6 fd43 	bl	8001144 <HAL_DAC_Start_DMA>
	}
	if(sound_counter == 1){
 800a6be:	4b40      	ldr	r3, [pc, #256]	; (800a7c0 <HAL_DAC_ConvCpltCallbackCh1+0x144>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d114      	bne.n	800a6f0 <HAL_DAC_ConvCpltCallbackCh1+0x74>
		if(BSP_QSPI_Read((uint8_t *)play, 0x005622, 22050) != QSPI_OK){
 800a6c6:	f245 6222 	movw	r2, #22050	; 0x5622
 800a6ca:	f245 6122 	movw	r1, #22050	; 0x5622
 800a6ce:	483d      	ldr	r0, [pc, #244]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a6d0:	f000 fc4c 	bl	800af6c <BSP_QSPI_Read>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <HAL_DAC_ConvCpltCallbackCh1+0x62>
			  Error_Handler();
 800a6da:	f000 f979 	bl	800a9d0 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 800a6de:	2308      	movs	r3, #8
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	f245 6322 	movw	r3, #22050	; 0x5622
 800a6e6:	4a37      	ldr	r2, [pc, #220]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4837      	ldr	r0, [pc, #220]	; (800a7c8 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 800a6ec:	f7f6 fd2a 	bl	8001144 <HAL_DAC_Start_DMA>
	}
	if(sound_counter == 2){
 800a6f0:	4b33      	ldr	r3, [pc, #204]	; (800a7c0 <HAL_DAC_ConvCpltCallbackCh1+0x144>)
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d114      	bne.n	800a722 <HAL_DAC_ConvCpltCallbackCh1+0xa6>
		if(BSP_QSPI_Read((uint8_t *)play, 0x00AC44, 22050) != QSPI_OK){
 800a6f8:	f245 6222 	movw	r2, #22050	; 0x5622
 800a6fc:	f64a 4144 	movw	r1, #44100	; 0xac44
 800a700:	4830      	ldr	r0, [pc, #192]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a702:	f000 fc33 	bl	800af6c <BSP_QSPI_Read>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <HAL_DAC_ConvCpltCallbackCh1+0x94>
			  Error_Handler();
 800a70c:	f000 f960 	bl	800a9d0 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 800a710:	2308      	movs	r3, #8
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	f245 6322 	movw	r3, #22050	; 0x5622
 800a718:	4a2a      	ldr	r2, [pc, #168]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a71a:	2100      	movs	r1, #0
 800a71c:	482a      	ldr	r0, [pc, #168]	; (800a7c8 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 800a71e:	f7f6 fd11 	bl	8001144 <HAL_DAC_Start_DMA>
	}
	if(sound_counter == 3){
 800a722:	4b27      	ldr	r3, [pc, #156]	; (800a7c0 <HAL_DAC_ConvCpltCallbackCh1+0x144>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	2b03      	cmp	r3, #3
 800a728:	d113      	bne.n	800a752 <HAL_DAC_ConvCpltCallbackCh1+0xd6>
		if(BSP_QSPI_Read((uint8_t *)play, 0x010266, 22050) != QSPI_OK){
 800a72a:	f245 6222 	movw	r2, #22050	; 0x5622
 800a72e:	4927      	ldr	r1, [pc, #156]	; (800a7cc <HAL_DAC_ConvCpltCallbackCh1+0x150>)
 800a730:	4824      	ldr	r0, [pc, #144]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a732:	f000 fc1b 	bl	800af6c <BSP_QSPI_Read>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d001      	beq.n	800a740 <HAL_DAC_ConvCpltCallbackCh1+0xc4>
			  Error_Handler();
 800a73c:	f000 f948 	bl	800a9d0 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 800a740:	2308      	movs	r3, #8
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	f245 6322 	movw	r3, #22050	; 0x5622
 800a748:	4a1e      	ldr	r2, [pc, #120]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a74a:	2100      	movs	r1, #0
 800a74c:	481e      	ldr	r0, [pc, #120]	; (800a7c8 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 800a74e:	f7f6 fcf9 	bl	8001144 <HAL_DAC_Start_DMA>
	}
	if(sound_counter == 4){
 800a752:	4b1b      	ldr	r3, [pc, #108]	; (800a7c0 <HAL_DAC_ConvCpltCallbackCh1+0x144>)
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	2b04      	cmp	r3, #4
 800a758:	d113      	bne.n	800a782 <HAL_DAC_ConvCpltCallbackCh1+0x106>
		if(BSP_QSPI_Read((uint8_t *)play, 0x015888, 22050) != QSPI_OK){
 800a75a:	f245 6222 	movw	r2, #22050	; 0x5622
 800a75e:	491c      	ldr	r1, [pc, #112]	; (800a7d0 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 800a760:	4818      	ldr	r0, [pc, #96]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a762:	f000 fc03 	bl	800af6c <BSP_QSPI_Read>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <HAL_DAC_ConvCpltCallbackCh1+0xf4>
			  Error_Handler();
 800a76c:	f000 f930 	bl	800a9d0 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 800a770:	2308      	movs	r3, #8
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	f245 6322 	movw	r3, #22050	; 0x5622
 800a778:	4a12      	ldr	r2, [pc, #72]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a77a:	2100      	movs	r1, #0
 800a77c:	4812      	ldr	r0, [pc, #72]	; (800a7c8 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 800a77e:	f7f6 fce1 	bl	8001144 <HAL_DAC_Start_DMA>
	}
	if(sound_counter == 5){
 800a782:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <HAL_DAC_ConvCpltCallbackCh1+0x144>)
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b05      	cmp	r3, #5
 800a788:	d113      	bne.n	800a7b2 <HAL_DAC_ConvCpltCallbackCh1+0x136>
		if(BSP_QSPI_Read((uint8_t *)play, 0x01AEAA, 22050) != QSPI_OK){
 800a78a:	f245 6222 	movw	r2, #22050	; 0x5622
 800a78e:	4911      	ldr	r1, [pc, #68]	; (800a7d4 <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 800a790:	480c      	ldr	r0, [pc, #48]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a792:	f000 fbeb 	bl	800af6c <BSP_QSPI_Read>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <HAL_DAC_ConvCpltCallbackCh1+0x124>
			  Error_Handler();
 800a79c:	f000 f918 	bl	800a9d0 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	f245 6322 	movw	r3, #22050	; 0x5622
 800a7a8:	4a06      	ldr	r2, [pc, #24]	; (800a7c4 <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	4806      	ldr	r0, [pc, #24]	; (800a7c8 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 800a7ae:	f7f6 fcc9 	bl	8001144 <HAL_DAC_Start_DMA>
	}
}
 800a7b2:	bf00      	nop
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	48000400 	.word	0x48000400
 800a7c0:	20016be8 	.word	0x20016be8
 800a7c4:	2000008c 	.word	0x2000008c
 800a7c8:	200168fc 	.word	0x200168fc
 800a7cc:	00010266 	.word	0x00010266
 800a7d0:	00015888 	.word	0x00015888
 800a7d4:	0001aeaa 	.word	0x0001aeaa

0800a7d8 <start_read_sensor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_read_sensor */
void start_read_sensor(void const * argument)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(100);
 800a7e0:	2064      	movs	r0, #100	; 0x64
 800a7e2:	f7fd fa24 	bl	8007c2e <osDelay>
	humidity = BSP_HSENSOR_ReadHumidity();
 800a7e6:	f000 fac3 	bl	800ad70 <BSP_HSENSOR_ReadHumidity>
 800a7ea:	eef0 7a40 	vmov.f32	s15, s0
 800a7ee:	4b08      	ldr	r3, [pc, #32]	; (800a810 <start_read_sensor+0x38>)
 800a7f0:	edc3 7a00 	vstr	s15, [r3]
	BSP_MAGNETO_GetXYZ(magne);
 800a7f4:	4807      	ldr	r0, [pc, #28]	; (800a814 <start_read_sensor+0x3c>)
 800a7f6:	f000 faf5 	bl	800ade4 <BSP_MAGNETO_GetXYZ>
	BSP_GYRO_GetXYZ(gyro);
 800a7fa:	4807      	ldr	r0, [pc, #28]	; (800a818 <start_read_sensor+0x40>)
 800a7fc:	f000 fa80 	bl	800ad00 <BSP_GYRO_GetXYZ>
	pressure = BSP_PSENSOR_ReadPressure();
 800a800:	f000 fb28 	bl	800ae54 <BSP_PSENSOR_ReadPressure>
 800a804:	eef0 7a40 	vmov.f32	s15, s0
 800a808:	4b04      	ldr	r3, [pc, #16]	; (800a81c <start_read_sensor+0x44>)
 800a80a:	edc3 7a00 	vstr	s15, [r3]
	osDelay(100);
 800a80e:	e7e7      	b.n	800a7e0 <start_read_sensor+0x8>
 800a810:	20016bc8 	.word	0x20016bc8
 800a814:	20016bd8 	.word	0x20016bd8
 800a818:	20016bcc 	.word	0x20016bcc
 800a81c:	20016be0 	.word	0x20016be0

0800a820 <start_press_button>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_press_button */
void start_press_button(void const * argument)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_press_button */
  /* Infinite loop */
  for(;;)
  {
	osDelay(100);
 800a828:	2064      	movs	r0, #100	; 0x64
 800a82a:	f7fd fa00 	bl	8007c2e <osDelay>
	if (flag == 1){
 800a82e:	4b06      	ldr	r3, [pc, #24]	; (800a848 <start_press_button+0x28>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d1f8      	bne.n	800a828 <start_press_button+0x8>
		flag = 0;
 800a836:	4b04      	ldr	r3, [pc, #16]	; (800a848 <start_press_button+0x28>)
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]
		count++;
 800a83c:	4b03      	ldr	r3, [pc, #12]	; (800a84c <start_press_button+0x2c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3301      	adds	r3, #1
 800a842:	4a02      	ldr	r2, [pc, #8]	; (800a84c <start_press_button+0x2c>)
 800a844:	6013      	str	r3, [r2, #0]
	osDelay(100);
 800a846:	e7ef      	b.n	800a828 <start_press_button+0x8>
 800a848:	20016be4 	.word	0x20016be4
 800a84c:	20016bc4 	.word	0x20016bc4

0800a850 <start_change_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_change_sensor */
void start_change_sensor(void const * argument)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_change_sensor */
  /* Infinite loop */
  for(;;)
  {
	osDelay(30000); //30s
 800a858:	f247 5030 	movw	r0, #30000	; 0x7530
 800a85c:	f7fd f9e7 	bl	8007c2e <osDelay>
	if(count == 3) {
 800a860:	4b06      	ldr	r3, [pc, #24]	; (800a87c <start_change_sensor+0x2c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b03      	cmp	r3, #3
 800a866:	d103      	bne.n	800a870 <start_change_sensor+0x20>
		count =0;
 800a868:	4b04      	ldr	r3, [pc, #16]	; (800a87c <start_change_sensor+0x2c>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	e7f3      	b.n	800a858 <start_change_sensor+0x8>
	}else{
		count++;
 800a870:	4b02      	ldr	r3, [pc, #8]	; (800a87c <start_change_sensor+0x2c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3301      	adds	r3, #1
 800a876:	4a01      	ldr	r2, [pc, #4]	; (800a87c <start_change_sensor+0x2c>)
 800a878:	6013      	str	r3, [r2, #0]
	osDelay(30000); //30s
 800a87a:	e7ed      	b.n	800a858 <start_change_sensor+0x8>
 800a87c:	20016bc4 	.word	0x20016bc4

0800a880 <start_send_terminal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_send_terminal */
void start_send_terminal(void const * argument)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af02      	add	r7, sp, #8
 800a886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_send_terminal */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800a888:	2064      	movs	r0, #100	; 0x64
 800a88a:	f7fd f9d0 	bl	8007c2e <osDelay>
	for (int i = 0; i < 100; i++){
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
 800a892:	e007      	b.n	800a8a4 <start_send_terminal+0x24>
		buffer[i] = '\0';
 800a894:	4a3a      	ldr	r2, [pc, #232]	; (800a980 <start_send_terminal+0x100>)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4413      	add	r3, r2
 800a89a:	2200      	movs	r2, #0
 800a89c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++){
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b63      	cmp	r3, #99	; 0x63
 800a8a8:	ddf4      	ble.n	800a894 <start_send_terminal+0x14>
	}
	if(count % 4 == 0){
 800a8aa:	4b36      	ldr	r3, [pc, #216]	; (800a984 <start_send_terminal+0x104>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0303 	and.w	r3, r3, #3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10b      	bne.n	800a8ce <start_send_terminal+0x4e>
	    sprintf(buffer, "Humidity is %d \r\n", (int) humidity);
 800a8b6:	4b34      	ldr	r3, [pc, #208]	; (800a988 <start_send_terminal+0x108>)
 800a8b8:	edd3 7a00 	vldr	s15, [r3]
 800a8bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8c0:	ee17 2a90 	vmov	r2, s15
 800a8c4:	4931      	ldr	r1, [pc, #196]	; (800a98c <start_send_terminal+0x10c>)
 800a8c6:	482e      	ldr	r0, [pc, #184]	; (800a980 <start_send_terminal+0x100>)
 800a8c8:	f001 fb5e 	bl	800bf88 <siprintf>
 800a8cc:	e04d      	b.n	800a96a <start_send_terminal+0xea>
	} else if (count % 4 == 1){
 800a8ce:	4b2d      	ldr	r3, [pc, #180]	; (800a984 <start_send_terminal+0x104>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	425a      	negs	r2, r3
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	f002 0203 	and.w	r2, r2, #3
 800a8dc:	bf58      	it	pl
 800a8de:	4253      	negpl	r3, r2
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d111      	bne.n	800a908 <start_send_terminal+0x88>
	    sprintf(buffer, "Magnetic: %d, %d, %d \r\n", (int) magne[0], (int) magne[1], (int) magne[2]);
 800a8e4:	4b2a      	ldr	r3, [pc, #168]	; (800a990 <start_send_terminal+0x110>)
 800a8e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	4b28      	ldr	r3, [pc, #160]	; (800a990 <start_send_terminal+0x110>)
 800a8ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4b26      	ldr	r3, [pc, #152]	; (800a990 <start_send_terminal+0x110>)
 800a8f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4925      	ldr	r1, [pc, #148]	; (800a994 <start_send_terminal+0x114>)
 800a900:	481f      	ldr	r0, [pc, #124]	; (800a980 <start_send_terminal+0x100>)
 800a902:	f001 fb41 	bl	800bf88 <siprintf>
 800a906:	e030      	b.n	800a96a <start_send_terminal+0xea>
	} else if (count % 4 == 2){
 800a908:	4b1e      	ldr	r3, [pc, #120]	; (800a984 <start_send_terminal+0x104>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	425a      	negs	r2, r3
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	f002 0203 	and.w	r2, r2, #3
 800a916:	bf58      	it	pl
 800a918:	4253      	negpl	r3, r2
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d11a      	bne.n	800a954 <start_send_terminal+0xd4>
	    sprintf(buffer, "Gyro: %d, %d, %d \r\n", (int) gyro[0], (int) gyro[1], (int) gyro[2]);
 800a91e:	4b1e      	ldr	r3, [pc, #120]	; (800a998 <start_send_terminal+0x118>)
 800a920:	edd3 7a00 	vldr	s15, [r3]
 800a924:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a928:	4b1b      	ldr	r3, [pc, #108]	; (800a998 <start_send_terminal+0x118>)
 800a92a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a92e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800a932:	4b19      	ldr	r3, [pc, #100]	; (800a998 <start_send_terminal+0x118>)
 800a934:	edd3 7a02 	vldr	s15, [r3, #8]
 800a938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a93c:	ee17 3a90 	vmov	r3, s15
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	ee16 3a90 	vmov	r3, s13
 800a946:	ee17 2a10 	vmov	r2, s14
 800a94a:	4914      	ldr	r1, [pc, #80]	; (800a99c <start_send_terminal+0x11c>)
 800a94c:	480c      	ldr	r0, [pc, #48]	; (800a980 <start_send_terminal+0x100>)
 800a94e:	f001 fb1b 	bl	800bf88 <siprintf>
 800a952:	e00a      	b.n	800a96a <start_send_terminal+0xea>
	} else{
	    sprintf(buffer, "Pressure is %d \r\n", (int) pressure);
 800a954:	4b12      	ldr	r3, [pc, #72]	; (800a9a0 <start_send_terminal+0x120>)
 800a956:	edd3 7a00 	vldr	s15, [r3]
 800a95a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a95e:	ee17 2a90 	vmov	r2, s15
 800a962:	4910      	ldr	r1, [pc, #64]	; (800a9a4 <start_send_terminal+0x124>)
 800a964:	4806      	ldr	r0, [pc, #24]	; (800a980 <start_send_terminal+0x100>)
 800a966:	f001 fb0f 	bl	800bf88 <siprintf>





	HAL_Delay(100);
 800a96a:	2064      	movs	r0, #100	; 0x64
 800a96c:	f7f6 fa90 	bl	8000e90 <HAL_Delay>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 10000);
 800a970:	f242 7310 	movw	r3, #10000	; 0x2710
 800a974:	2264      	movs	r2, #100	; 0x64
 800a976:	4902      	ldr	r1, [pc, #8]	; (800a980 <start_send_terminal+0x100>)
 800a978:	480b      	ldr	r0, [pc, #44]	; (800a9a8 <start_send_terminal+0x128>)
 800a97a:	f7fc faa1 	bl	8006ec0 <HAL_UART_Transmit>
    osDelay(100);
 800a97e:	e783      	b.n	800a888 <start_send_terminal+0x8>
 800a980:	20016b60 	.word	0x20016b60
 800a984:	20016bc4 	.word	0x20016bc4
 800a988:	20016bc8 	.word	0x20016bc8
 800a98c:	0800c914 	.word	0x0800c914
 800a990:	20016bd8 	.word	0x20016bd8
 800a994:	0800c928 	.word	0x0800c928
 800a998:	20016bcc 	.word	0x20016bcc
 800a99c:	0800c940 	.word	0x0800c940
 800a9a0:	20016be0 	.word	0x20016be0
 800a9a4:	0800c954 	.word	0x0800c954
 800a9a8:	20016ac0 	.word	0x20016ac0

0800a9ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a04      	ldr	r2, [pc, #16]	; (800a9cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d101      	bne.n	800a9c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a9be:	f7f6 fa47 	bl	8000e50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a9c2:	bf00      	nop
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	40001000 	.word	0x40001000

0800a9d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a9d4:	b672      	cpsid	i
}
 800a9d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a9d8:	e7fe      	b.n	800a9d8 <Error_Handler+0x8>
	...

0800a9dc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08a      	sub	sp, #40	; 0x28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800a9e4:	4b27      	ldr	r3, [pc, #156]	; (800aa84 <I2Cx_MspInit+0xa8>)
 800a9e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e8:	4a26      	ldr	r2, [pc, #152]	; (800aa84 <I2Cx_MspInit+0xa8>)
 800a9ea:	f043 0302 	orr.w	r3, r3, #2
 800a9ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9f0:	4b24      	ldr	r3, [pc, #144]	; (800aa84 <I2Cx_MspInit+0xa8>)
 800a9f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9f4:	f003 0302 	and.w	r3, r3, #2
 800a9f8:	613b      	str	r3, [r7, #16]
 800a9fa:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800a9fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800aa00:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800aa02:	2312      	movs	r3, #18
 800aa04:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800aa06:	2301      	movs	r3, #1
 800aa08:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800aa0e:	2304      	movs	r3, #4
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800aa12:	f107 0314 	add.w	r3, r7, #20
 800aa16:	4619      	mov	r1, r3
 800aa18:	481b      	ldr	r0, [pc, #108]	; (800aa88 <I2Cx_MspInit+0xac>)
 800aa1a:	f7f7 f981 	bl	8001d20 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800aa1e:	f107 0314 	add.w	r3, r7, #20
 800aa22:	4619      	mov	r1, r3
 800aa24:	4818      	ldr	r0, [pc, #96]	; (800aa88 <I2Cx_MspInit+0xac>)
 800aa26:	f7f7 f97b 	bl	8001d20 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800aa2a:	4b16      	ldr	r3, [pc, #88]	; (800aa84 <I2Cx_MspInit+0xa8>)
 800aa2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2e:	4a15      	ldr	r2, [pc, #84]	; (800aa84 <I2Cx_MspInit+0xa8>)
 800aa30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aa34:	6593      	str	r3, [r2, #88]	; 0x58
 800aa36:	4b13      	ldr	r3, [pc, #76]	; (800aa84 <I2Cx_MspInit+0xa8>)
 800aa38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800aa42:	4b10      	ldr	r3, [pc, #64]	; (800aa84 <I2Cx_MspInit+0xa8>)
 800aa44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa46:	4a0f      	ldr	r2, [pc, #60]	; (800aa84 <I2Cx_MspInit+0xa8>)
 800aa48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aa4c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800aa4e:	4b0d      	ldr	r3, [pc, #52]	; (800aa84 <I2Cx_MspInit+0xa8>)
 800aa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa52:	4a0c      	ldr	r2, [pc, #48]	; (800aa84 <I2Cx_MspInit+0xa8>)
 800aa54:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800aa58:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	210f      	movs	r1, #15
 800aa5e:	2021      	movs	r0, #33	; 0x21
 800aa60:	f7f6 fb16 	bl	8001090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800aa64:	2021      	movs	r0, #33	; 0x21
 800aa66:	f7f6 fb2f 	bl	80010c8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	210f      	movs	r1, #15
 800aa6e:	2022      	movs	r0, #34	; 0x22
 800aa70:	f7f6 fb0e 	bl	8001090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800aa74:	2022      	movs	r0, #34	; 0x22
 800aa76:	f7f6 fb27 	bl	80010c8 <HAL_NVIC_EnableIRQ>
}
 800aa7a:	bf00      	nop
 800aa7c:	3728      	adds	r7, #40	; 0x28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	40021000 	.word	0x40021000
 800aa88:	48000400 	.word	0x48000400

0800aa8c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a12      	ldr	r2, [pc, #72]	; (800aae0 <I2Cx_Init+0x54>)
 800aa98:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a11      	ldr	r2, [pc, #68]	; (800aae4 <I2Cx_Init+0x58>)
 800aa9e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7ff ff89 	bl	800a9dc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7f7 fbf6 	bl	80022bc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800aad0:	2100      	movs	r1, #0
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7f8 fef8 	bl	80038c8 <HAL_I2CEx_ConfigAnalogFilter>
}
 800aad8:	bf00      	nop
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	40005800 	.word	0x40005800
 800aae4:	00702681 	.word	0x00702681

0800aae8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b08a      	sub	sp, #40	; 0x28
 800aaec:	af04      	add	r7, sp, #16
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	72fb      	strb	r3, [r7, #11]
 800aafa:	460b      	mov	r3, r1
 800aafc:	813b      	strh	r3, [r7, #8]
 800aafe:	4613      	mov	r3, r2
 800ab00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800ab06:	7afb      	ldrb	r3, [r7, #11]
 800ab08:	b299      	uxth	r1, r3
 800ab0a:	88f8      	ldrh	r0, [r7, #6]
 800ab0c:	893a      	ldrh	r2, [r7, #8]
 800ab0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab12:	9302      	str	r3, [sp, #8]
 800ab14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	6a3b      	ldr	r3, [r7, #32]
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7f7 fd9e 	bl	8002660 <HAL_I2C_Mem_Read>
 800ab24:	4603      	mov	r3, r0
 800ab26:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800ab28:	7dfb      	ldrb	r3, [r7, #23]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d004      	beq.n	800ab38 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800ab2e:	7afb      	ldrb	r3, [r7, #11]
 800ab30:	4619      	mov	r1, r3
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f000 f832 	bl	800ab9c <I2Cx_Error>
  }
  return status;
 800ab38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b08a      	sub	sp, #40	; 0x28
 800ab46:	af04      	add	r7, sp, #16
 800ab48:	60f8      	str	r0, [r7, #12]
 800ab4a:	4608      	mov	r0, r1
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	461a      	mov	r2, r3
 800ab50:	4603      	mov	r3, r0
 800ab52:	72fb      	strb	r3, [r7, #11]
 800ab54:	460b      	mov	r3, r1
 800ab56:	813b      	strh	r3, [r7, #8]
 800ab58:	4613      	mov	r3, r2
 800ab5a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800ab60:	7afb      	ldrb	r3, [r7, #11]
 800ab62:	b299      	uxth	r1, r3
 800ab64:	88f8      	ldrh	r0, [r7, #6]
 800ab66:	893a      	ldrh	r2, [r7, #8]
 800ab68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab6c:	9302      	str	r3, [sp, #8]
 800ab6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	4603      	mov	r3, r0
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f7f7 fc5d 	bl	8002438 <HAL_I2C_Mem_Write>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d004      	beq.n	800ab92 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800ab88:	7afb      	ldrb	r3, [r7, #11]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 f805 	bl	800ab9c <I2Cx_Error>
  }
  return status;
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3718      	adds	r7, #24
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7f7 fc16 	bl	80023da <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7ff ff6c 	bl	800aa8c <I2Cx_Init>
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800abc0:	4802      	ldr	r0, [pc, #8]	; (800abcc <SENSOR_IO_Init+0x10>)
 800abc2:	f7ff ff63 	bl	800aa8c <I2Cx_Init>
}
 800abc6:	bf00      	nop
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20016bec 	.word	0x20016bec

0800abd0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af02      	add	r7, sp, #8
 800abd6:	4603      	mov	r3, r0
 800abd8:	71fb      	strb	r3, [r7, #7]
 800abda:	460b      	mov	r3, r1
 800abdc:	71bb      	strb	r3, [r7, #6]
 800abde:	4613      	mov	r3, r2
 800abe0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800abe2:	79bb      	ldrb	r3, [r7, #6]
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	79f9      	ldrb	r1, [r7, #7]
 800abe8:	2301      	movs	r3, #1
 800abea:	9301      	str	r3, [sp, #4]
 800abec:	1d7b      	adds	r3, r7, #5
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	2301      	movs	r3, #1
 800abf2:	4803      	ldr	r0, [pc, #12]	; (800ac00 <SENSOR_IO_Write+0x30>)
 800abf4:	f7ff ffa5 	bl	800ab42 <I2Cx_WriteMultiple>
}
 800abf8:	bf00      	nop
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	20016bec 	.word	0x20016bec

0800ac04 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af02      	add	r7, sp, #8
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	460a      	mov	r2, r1
 800ac0e:	71fb      	strb	r3, [r7, #7]
 800ac10:	4613      	mov	r3, r2
 800ac12:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800ac18:	79bb      	ldrb	r3, [r7, #6]
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	79f9      	ldrb	r1, [r7, #7]
 800ac1e:	2301      	movs	r3, #1
 800ac20:	9301      	str	r3, [sp, #4]
 800ac22:	f107 030f 	add.w	r3, r7, #15
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	2301      	movs	r3, #1
 800ac2a:	4804      	ldr	r0, [pc, #16]	; (800ac3c <SENSOR_IO_Read+0x38>)
 800ac2c:	f7ff ff5c 	bl	800aae8 <I2Cx_ReadMultiple>

  return read_value;
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20016bec 	.word	0x20016bec

0800ac40 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af02      	add	r7, sp, #8
 800ac46:	603a      	str	r2, [r7, #0]
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	71fb      	strb	r3, [r7, #7]
 800ac4e:	460b      	mov	r3, r1
 800ac50:	71bb      	strb	r3, [r7, #6]
 800ac52:	4613      	mov	r3, r2
 800ac54:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800ac56:	79bb      	ldrb	r3, [r7, #6]
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	79f9      	ldrb	r1, [r7, #7]
 800ac5c:	88bb      	ldrh	r3, [r7, #4]
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	2301      	movs	r3, #1
 800ac66:	4804      	ldr	r0, [pc, #16]	; (800ac78 <SENSOR_IO_ReadMultiple+0x38>)
 800ac68:	f7ff ff3e 	bl	800aae8 <I2Cx_ReadMultiple>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	b29b      	uxth	r3, r3
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20016bec 	.word	0x20016bec

0800ac7c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800ac86:	2300      	movs	r3, #0
 800ac88:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800ac8a:	4b1b      	ldr	r3, [pc, #108]	; (800acf8 <BSP_GYRO_Init+0x7c>)
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	4798      	blx	r3
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b6a      	cmp	r3, #106	; 0x6a
 800ac94:	d002      	beq.n	800ac9c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	73fb      	strb	r3, [r7, #15]
 800ac9a:	e028      	b.n	800acee <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800ac9c:	4b17      	ldr	r3, [pc, #92]	; (800acfc <BSP_GYRO_Init+0x80>)
 800ac9e:	4a16      	ldr	r2, [pc, #88]	; (800acf8 <BSP_GYRO_Init+0x7c>)
 800aca0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800aca6:	2330      	movs	r3, #48	; 0x30
 800aca8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800acb2:	2340      	movs	r3, #64	; 0x40
 800acb4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800acb6:	2300      	movs	r3, #0
 800acb8:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800acba:	230c      	movs	r3, #12
 800acbc:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800acbe:	7aba      	ldrb	r2, [r7, #10]
 800acc0:	797b      	ldrb	r3, [r7, #5]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800acc8:	7a3b      	ldrb	r3, [r7, #8]
 800acca:	f043 0304 	orr.w	r3, r3, #4
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	021b      	lsls	r3, r3, #8
 800acd2:	b21a      	sxth	r2, r3
 800acd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800acd8:	4313      	orrs	r3, r2
 800acda:	b21b      	sxth	r3, r3
 800acdc:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800acde:	4b07      	ldr	r3, [pc, #28]	; (800acfc <BSP_GYRO_Init+0x80>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	89ba      	ldrh	r2, [r7, #12]
 800ace6:	4610      	mov	r0, r2
 800ace8:	4798      	blx	r3
    
    ret = GYRO_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800acee:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	20000018 	.word	0x20000018
 800acfc:	20016c40 	.word	0x20016c40

0800ad00 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800ad08:	4b08      	ldr	r3, [pc, #32]	; (800ad2c <BSP_GYRO_GetXYZ+0x2c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d009      	beq.n	800ad24 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800ad10:	4b06      	ldr	r3, [pc, #24]	; (800ad2c <BSP_GYRO_GetXYZ+0x2c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d004      	beq.n	800ad24 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800ad1a:	4b04      	ldr	r3, [pc, #16]	; (800ad2c <BSP_GYRO_GetXYZ+0x2c>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	4798      	blx	r3
    }
  }
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	20016c40 	.word	0x20016c40

0800ad30 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800ad36:	4b0c      	ldr	r3, [pc, #48]	; (800ad68 <BSP_HSENSOR_Init+0x38>)
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	20be      	movs	r0, #190	; 0xbe
 800ad3c:	4798      	blx	r3
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2bbc      	cmp	r3, #188	; 0xbc
 800ad42:	d002      	beq.n	800ad4a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	607b      	str	r3, [r7, #4]
 800ad48:	e009      	b.n	800ad5e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800ad4a:	4b08      	ldr	r3, [pc, #32]	; (800ad6c <BSP_HSENSOR_Init+0x3c>)
 800ad4c:	4a06      	ldr	r2, [pc, #24]	; (800ad68 <BSP_HSENSOR_Init+0x38>)
 800ad4e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800ad50:	4b06      	ldr	r3, [pc, #24]	; (800ad6c <BSP_HSENSOR_Init+0x3c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	20be      	movs	r0, #190	; 0xbe
 800ad58:	4798      	blx	r3
    ret = HSENSOR_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800ad5e:	687b      	ldr	r3, [r7, #4]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	20000080 	.word	0x20000080
 800ad6c:	20016c44 	.word	0x20016c44

0800ad70 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800ad70:	b580      	push	{r7, lr}
 800ad72:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800ad74:	4b04      	ldr	r3, [pc, #16]	; (800ad88 <BSP_HSENSOR_ReadHumidity+0x18>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	20be      	movs	r0, #190	; 0xbe
 800ad7c:	4798      	blx	r3
 800ad7e:	eef0 7a40 	vmov.f32	s15, s0
}
 800ad82:	eeb0 0a67 	vmov.f32	s0, s15
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20016c44 	.word	0x20016c44

0800ad8c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800ad96:	4b11      	ldr	r3, [pc, #68]	; (800addc <BSP_MAGNETO_Init+0x50>)
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	4798      	blx	r3
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b3d      	cmp	r3, #61	; 0x3d
 800ada0:	d002      	beq.n	800ada8 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	71fb      	strb	r3, [r7, #7]
 800ada6:	e013      	b.n	800add0 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800ada8:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <BSP_MAGNETO_Init+0x54>)
 800adaa:	4a0c      	ldr	r2, [pc, #48]	; (800addc <BSP_MAGNETO_Init+0x50>)
 800adac:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800adae:	2358      	movs	r3, #88	; 0x58
 800adb0:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800adb2:	2300      	movs	r3, #0
 800adb4:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800adb6:	2300      	movs	r3, #0
 800adb8:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800adba:	2308      	movs	r3, #8
 800adbc:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800adbe:	2340      	movs	r3, #64	; 0x40
 800adc0:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800adc2:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <BSP_MAGNETO_Init+0x54>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	463a      	mov	r2, r7
 800adca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adce:	4798      	blx	r3
  } 

  return ret;  
 800add0:	79fb      	ldrb	r3, [r7, #7]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	2000004c 	.word	0x2000004c
 800ade0:	20016c48 	.word	0x20016c48

0800ade4 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 800adec:	4b08      	ldr	r3, [pc, #32]	; (800ae10 <BSP_MAGNETO_GetXYZ+0x2c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d009      	beq.n	800ae08 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 800adf4:	4b06      	ldr	r3, [pc, #24]	; (800ae10 <BSP_MAGNETO_GetXYZ+0x2c>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d004      	beq.n	800ae08 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800adfe:	4b04      	ldr	r3, [pc, #16]	; (800ae10 <BSP_MAGNETO_GetXYZ+0x2c>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	4798      	blx	r3
    }
  }
}
 800ae08:	bf00      	nop
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	20016c48 	.word	0x20016c48

0800ae14 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800ae1a:	4b0c      	ldr	r3, [pc, #48]	; (800ae4c <BSP_PSENSOR_Init+0x38>)
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	20ba      	movs	r0, #186	; 0xba
 800ae20:	4798      	blx	r3
 800ae22:	4603      	mov	r3, r0
 800ae24:	2bb1      	cmp	r3, #177	; 0xb1
 800ae26:	d002      	beq.n	800ae2e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	607b      	str	r3, [r7, #4]
 800ae2c:	e009      	b.n	800ae42 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800ae2e:	4b08      	ldr	r3, [pc, #32]	; (800ae50 <BSP_PSENSOR_Init+0x3c>)
 800ae30:	4a06      	ldr	r2, [pc, #24]	; (800ae4c <BSP_PSENSOR_Init+0x38>)
 800ae32:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800ae34:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <BSP_PSENSOR_Init+0x3c>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	20ba      	movs	r0, #186	; 0xba
 800ae3c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800ae42:	687b      	ldr	r3, [r7, #4]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	2000000c 	.word	0x2000000c
 800ae50:	20016c4c 	.word	0x20016c4c

0800ae54 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <BSP_PSENSOR_ReadPressure+0x18>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	20ba      	movs	r0, #186	; 0xba
 800ae60:	4798      	blx	r3
 800ae62:	eef0 7a40 	vmov.f32	s15, s0
}
 800ae66:	eeb0 0a67 	vmov.f32	s0, s15
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	20016c4c 	.word	0x20016c4c

0800ae70 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 800ae76:	4b3b      	ldr	r3, [pc, #236]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800ae78:	4a3b      	ldr	r2, [pc, #236]	; (800af68 <BSP_QSPI_Init+0xf8>)
 800ae7a:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 800ae7c:	4839      	ldr	r0, [pc, #228]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800ae7e:	f7f8 fe65 	bl	8003b4c <HAL_OSPI_DeInit>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e067      	b.n	800af5c <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 800ae8c:	f000 f990 	bl	800b1b0 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 800ae90:	4b34      	ldr	r3, [pc, #208]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800ae92:	2204      	movs	r2, #4
 800ae94:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 800ae96:	4b33      	ldr	r3, [pc, #204]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800ae9c:	4b31      	ldr	r3, [pc, #196]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800ae9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aea2:	60da      	str	r2, [r3, #12]
 800aea4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aea8:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	fa93 f3a3 	rbit	r3, r3
 800aeb0:	607b      	str	r3, [r7, #4]
  return result;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d101      	bne.n	800aec0 <BSP_QSPI_Init+0x50>
    return 32U;
 800aebc:	2320      	movs	r3, #32
 800aebe:	e003      	b.n	800aec8 <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	fab3 f383 	clz	r3, r3
 800aec6:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 800aec8:	461a      	mov	r2, r3
 800aeca:	4b26      	ldr	r3, [pc, #152]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800aecc:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 800aece:	4b25      	ldr	r3, [pc, #148]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 800aed4:	4b23      	ldr	r3, [pc, #140]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800aeda:	4b22      	ldr	r3, [pc, #136]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800aedc:	2200      	movs	r2, #0
 800aede:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 800aee0:	4b20      	ldr	r3, [pc, #128]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800aee2:	2204      	movs	r2, #4
 800aee4:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800aee6:	4b1f      	ldr	r3, [pc, #124]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800aeec:	4b1d      	ldr	r3, [pc, #116]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800aeee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef2:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 800aef4:	4b1b      	ldr	r3, [pc, #108]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800aefa:	4b1a      	ldr	r3, [pc, #104]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800aefc:	2200      	movs	r2, #0
 800aefe:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800af00:	4818      	ldr	r0, [pc, #96]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800af02:	f7f8 fd79 	bl	80039f8 <HAL_OSPI_Init>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	e025      	b.n	800af5c <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 800af10:	4814      	ldr	r0, [pc, #80]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800af12:	f000 f98d 	bl	800b230 <QSPI_ResetMemory>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d001      	beq.n	800af20 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 800af1c:	2304      	movs	r3, #4
 800af1e:	e01d      	b.n	800af5c <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800af20:	2101      	movs	r1, #1
 800af22:	4810      	ldr	r0, [pc, #64]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800af24:	f000 fa72 	bl	800b40c <QSPI_QuadMode>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e014      	b.n	800af5c <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 800af32:	2101      	movs	r1, #1
 800af34:	480b      	ldr	r0, [pc, #44]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800af36:	f000 fb15 	bl	800b564 <QSPI_HighPerfMode>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e00b      	b.n	800af5c <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 800af44:	4b07      	ldr	r3, [pc, #28]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800af46:	2202      	movs	r2, #2
 800af48:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800af4a:	4806      	ldr	r0, [pc, #24]	; (800af64 <BSP_QSPI_Init+0xf4>)
 800af4c:	f7f8 fd54 	bl	80039f8 <HAL_OSPI_Init>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	e000      	b.n	800af5c <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	20016c50 	.word	0x20016c50
 800af68:	a0001000 	.word	0xa0001000

0800af6c <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b098      	sub	sp, #96	; 0x60
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 800af78:	2300      	movs	r3, #0
 800af7a:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 800af7c:	2300      	movs	r3, #0
 800af7e:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 800af80:	23eb      	movs	r3, #235	; 0xeb
 800af82:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 800af84:	2301      	movs	r3, #1
 800af86:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 800af88:	2300      	movs	r3, #0
 800af8a:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800af8c:	2300      	movs	r3, #0
 800af8e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 800af94:	f44f 7340 	mov.w	r3, #768	; 0x300
 800af98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 800af9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af9e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800afa0:	2300      	movs	r3, #0
 800afa2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 800afa4:	23aa      	movs	r3, #170	; 0xaa
 800afa6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 800afa8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800afac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 800afae:	2300      	movs	r3, #0
 800afb0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 800afb2:	2300      	movs	r3, #0
 800afb4:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 800afb6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800afba:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 800afc0:	2300      	movs	r3, #0
 800afc2:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 800afc4:	2304      	movs	r3, #4
 800afc6:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 800afc8:	2300      	movs	r3, #0
 800afca:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800afcc:	2300      	movs	r3, #0
 800afce:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800afd0:	f107 0310 	add.w	r3, r7, #16
 800afd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afd8:	4619      	mov	r1, r3
 800afda:	480c      	ldr	r0, [pc, #48]	; (800b00c <BSP_QSPI_Read+0xa0>)
 800afdc:	f7f8 fddd 	bl	8003b9a <HAL_OSPI_Command>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e00b      	b.n	800b002 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800afea:	f241 3288 	movw	r2, #5000	; 0x1388
 800afee:	68f9      	ldr	r1, [r7, #12]
 800aff0:	4806      	ldr	r0, [pc, #24]	; (800b00c <BSP_QSPI_Read+0xa0>)
 800aff2:	f7f8 fec6 	bl	8003d82 <HAL_OSPI_Receive>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e000      	b.n	800b002 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3760      	adds	r7, #96	; 0x60
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20016c50 	.word	0x20016c50

0800b010 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b09c      	sub	sp, #112	; 0x70
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b024:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800b026:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d901      	bls.n	800b032 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4413      	add	r3, r2
 800b03c:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b042:	2300      	movs	r3, #0
 800b044:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 800b046:	2338      	movs	r3, #56	; 0x38
 800b048:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b04a:	2301      	movs	r3, #1
 800b04c:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b04e:	2300      	movs	r3, #0
 800b050:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b052:	2300      	movs	r3, #0
 800b054:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 800b056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b05a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800b05c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b060:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800b062:	2300      	movs	r3, #0
 800b064:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b066:	2300      	movs	r3, #0
 800b068:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 800b06a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b06e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800b070:	2300      	movs	r3, #0
 800b072:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b078:	2300      	movs	r3, #0
 800b07a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b07c:	2300      	movs	r3, #0
 800b07e:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800b080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b082:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 800b084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b086:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 800b088:	4823      	ldr	r0, [pc, #140]	; (800b118 <BSP_QSPI_Write+0x108>)
 800b08a:	f000 f918 	bl	800b2be <QSPI_WriteEnable>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e03b      	b.n	800b110 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b098:	f107 0314 	add.w	r3, r7, #20
 800b09c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	481d      	ldr	r0, [pc, #116]	; (800b118 <BSP_QSPI_Write+0x108>)
 800b0a4:	f7f8 fd79 	bl	8003b9a <HAL_OSPI_Command>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e02e      	b.n	800b110 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b0b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b6:	68f9      	ldr	r1, [r7, #12]
 800b0b8:	4817      	ldr	r0, [pc, #92]	; (800b118 <BSP_QSPI_Write+0x108>)
 800b0ba:	f7f8 fdef 	bl	8003c9c <HAL_OSPI_Transmit>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e023      	b.n	800b110 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800b0c8:	f241 3188 	movw	r1, #5000	; 0x1388
 800b0cc:	4812      	ldr	r0, [pc, #72]	; (800b118 <BSP_QSPI_Write+0x108>)
 800b0ce:	f000 f952 	bl	800b376 <QSPI_AutoPollingMemReady>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e019      	b.n	800b110 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800b0dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b0de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0e0:	4413      	add	r3, r2
 800b0e2:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0e8:	4413      	add	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 800b0ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b0f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d203      	bcs.n	800b100 <BSP_QSPI_Write+0xf0>
 800b0f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b0fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	e001      	b.n	800b104 <BSP_QSPI_Write+0xf4>
 800b100:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b104:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 800b106:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d3b8      	bcc.n	800b080 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3770      	adds	r7, #112	; 0x70
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	20016c50 	.word	0x20016c50

0800b11c <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b096      	sub	sp, #88	; 0x58
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b124:	2300      	movs	r3, #0
 800b126:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b128:	2300      	movs	r3, #0
 800b12a:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 800b12c:	23d8      	movs	r3, #216	; 0xd8
 800b12e:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b130:	2301      	movs	r3, #1
 800b132:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b134:	2300      	movs	r3, #0
 800b136:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b138:	2300      	movs	r3, #0
 800b13a:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 800b140:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b144:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800b146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b14a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800b14c:	2300      	movs	r3, #0
 800b14e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b150:	2300      	movs	r3, #0
 800b152:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800b154:	2300      	movs	r3, #0
 800b156:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b15c:	2300      	movs	r3, #0
 800b15e:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b160:	2300      	movs	r3, #0
 800b162:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 800b164:	4811      	ldr	r0, [pc, #68]	; (800b1ac <BSP_QSPI_Erase_Block+0x90>)
 800b166:	f000 f8aa 	bl	800b2be <QSPI_WriteEnable>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e017      	b.n	800b1a4 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b174:	f107 0308 	add.w	r3, r7, #8
 800b178:	f241 3288 	movw	r2, #5000	; 0x1388
 800b17c:	4619      	mov	r1, r3
 800b17e:	480b      	ldr	r0, [pc, #44]	; (800b1ac <BSP_QSPI_Erase_Block+0x90>)
 800b180:	f7f8 fd0b 	bl	8003b9a <HAL_OSPI_Command>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e00a      	b.n	800b1a4 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 800b18e:	f640 51ac 	movw	r1, #3500	; 0xdac
 800b192:	4806      	ldr	r0, [pc, #24]	; (800b1ac <BSP_QSPI_Erase_Block+0x90>)
 800b194:	f000 f8ef 	bl	800b376 <QSPI_AutoPollingMemReady>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e000      	b.n	800b1a4 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3758      	adds	r7, #88	; 0x58
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	20016c50 	.word	0x20016c50

0800b1b0 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b088      	sub	sp, #32
 800b1b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 800b1b6:	4b1c      	ldr	r3, [pc, #112]	; (800b228 <BSP_QSPI_MspInit+0x78>)
 800b1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ba:	4a1b      	ldr	r2, [pc, #108]	; (800b228 <BSP_QSPI_MspInit+0x78>)
 800b1bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1c0:	6513      	str	r3, [r2, #80]	; 0x50
 800b1c2:	4b19      	ldr	r3, [pc, #100]	; (800b228 <BSP_QSPI_MspInit+0x78>)
 800b1c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1ca:	60bb      	str	r3, [r7, #8]
 800b1cc:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 800b1ce:	4b16      	ldr	r3, [pc, #88]	; (800b228 <BSP_QSPI_MspInit+0x78>)
 800b1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d2:	4a15      	ldr	r2, [pc, #84]	; (800b228 <BSP_QSPI_MspInit+0x78>)
 800b1d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1d8:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800b1da:	4b13      	ldr	r3, [pc, #76]	; (800b228 <BSP_QSPI_MspInit+0x78>)
 800b1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1de:	4a12      	ldr	r2, [pc, #72]	; (800b228 <BSP_QSPI_MspInit+0x78>)
 800b1e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b1e6:	4b10      	ldr	r3, [pc, #64]	; (800b228 <BSP_QSPI_MspInit+0x78>)
 800b1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ea:	4a0f      	ldr	r2, [pc, #60]	; (800b228 <BSP_QSPI_MspInit+0x78>)
 800b1ec:	f043 0310 	orr.w	r3, r3, #16
 800b1f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b1f2:	4b0d      	ldr	r3, [pc, #52]	; (800b228 <BSP_QSPI_MspInit+0x78>)
 800b1f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1f6:	f003 0310 	and.w	r3, r3, #16
 800b1fa:	607b      	str	r3, [r7, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 800b1fe:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800b202:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800b204:	2302      	movs	r3, #2
 800b206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800b208:	2300      	movs	r3, #0
 800b20a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800b20c:	2303      	movs	r3, #3
 800b20e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800b210:	230a      	movs	r3, #10
 800b212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b214:	f107 030c 	add.w	r3, r7, #12
 800b218:	4619      	mov	r1, r3
 800b21a:	4804      	ldr	r0, [pc, #16]	; (800b22c <BSP_QSPI_MspInit+0x7c>)
 800b21c:	f7f6 fd80 	bl	8001d20 <HAL_GPIO_Init>
}
 800b220:	bf00      	nop
 800b222:	3720      	adds	r7, #32
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	40021000 	.word	0x40021000
 800b22c:	48001000 	.word	0x48001000

0800b230 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b096      	sub	sp, #88	; 0x58
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b238:	2300      	movs	r3, #0
 800b23a:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b23c:	2300      	movs	r3, #0
 800b23e:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 800b240:	2366      	movs	r3, #102	; 0x66
 800b242:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b244:	2301      	movs	r3, #1
 800b246:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b248:	2300      	movs	r3, #0
 800b24a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b250:	2300      	movs	r3, #0
 800b252:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b254:	2300      	movs	r3, #0
 800b256:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800b258:	2300      	movs	r3, #0
 800b25a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 800b25c:	2300      	movs	r3, #0
 800b25e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b260:	2300      	movs	r3, #0
 800b262:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b264:	2300      	movs	r3, #0
 800b266:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b268:	f107 0308 	add.w	r3, r7, #8
 800b26c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7f8 fc91 	bl	8003b9a <HAL_OSPI_Command>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d001      	beq.n	800b282 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e019      	b.n	800b2b6 <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 800b282:	2399      	movs	r3, #153	; 0x99
 800b284:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b286:	f107 0308 	add.w	r3, r7, #8
 800b28a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b28e:	4619      	mov	r1, r3
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7f8 fc82 	bl	8003b9a <HAL_OSPI_Command>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e00a      	b.n	800b2b6 <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800b2a0:	f241 3188 	movw	r1, #5000	; 0x1388
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f866 	bl	800b376 <QSPI_AutoPollingMemReady>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e000      	b.n	800b2b6 <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3758      	adds	r7, #88	; 0x58
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b09c      	sub	sp, #112	; 0x70
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 800b2ce:	2306      	movs	r3, #6
 800b2d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b2f6:	f107 0320 	add.w	r3, r7, #32
 800b2fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7f8 fc4a 	bl	8003b9a <HAL_OSPI_Command>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	e02e      	b.n	800b36e <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 800b310:	2302      	movs	r3, #2
 800b312:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 800b314:	2302      	movs	r3, #2
 800b316:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800b318:	2300      	movs	r3, #0
 800b31a:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800b31c:	2310      	movs	r3, #16
 800b31e:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800b320:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b324:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800b326:	2305      	movs	r3, #5
 800b328:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800b32a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b32e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 800b330:	2301      	movs	r3, #1
 800b332:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 800b334:	2300      	movs	r3, #0
 800b336:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b338:	f107 0320 	add.w	r3, r7, #32
 800b33c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b340:	4619      	mov	r1, r3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7f8 fc29 	bl	8003b9a <HAL_OSPI_Command>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e00d      	b.n	800b36e <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b352:	f107 030c 	add.w	r3, r7, #12
 800b356:	f241 3288 	movw	r2, #5000	; 0x1388
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7f8 fdb3 	bl	8003ec8 <HAL_OSPI_AutoPolling>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e000      	b.n	800b36e <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3770      	adds	r7, #112	; 0x70
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b09c      	sub	sp, #112	; 0x70
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b380:	2300      	movs	r3, #0
 800b382:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b384:	2300      	movs	r3, #0
 800b386:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800b388:	2305      	movs	r3, #5
 800b38a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b38c:	2301      	movs	r3, #1
 800b38e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b390:	2300      	movs	r3, #0
 800b392:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b394:	2300      	movs	r3, #0
 800b396:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b398:	2300      	movs	r3, #0
 800b39a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b39c:	2300      	movs	r3, #0
 800b39e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800b3a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3a4:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800b3c6:	2310      	movs	r3, #16
 800b3c8:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800b3ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b3ce:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b3d0:	f107 0320 	add.w	r3, r7, #32
 800b3d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7f8 fbdd 	bl	8003b9a <HAL_OSPI_Command>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d001      	beq.n	800b3ea <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e00c      	b.n	800b404 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 800b3ea:	f107 030c 	add.w	r3, r7, #12
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7f8 fd68 	bl	8003ec8 <HAL_OSPI_AutoPolling>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e000      	b.n	800b404 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3770      	adds	r7, #112	; 0x70
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b098      	sub	sp, #96	; 0x60
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b418:	2300      	movs	r3, #0
 800b41a:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800b420:	2305      	movs	r3, #5
 800b422:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b424:	2301      	movs	r3, #1
 800b426:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b428:	2300      	movs	r3, #0
 800b42a:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b42c:	2300      	movs	r3, #0
 800b42e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b430:	2300      	movs	r3, #0
 800b432:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b434:	2300      	movs	r3, #0
 800b436:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800b438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b43c:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800b43e:	2300      	movs	r3, #0
 800b440:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800b442:	2300      	movs	r3, #0
 800b444:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800b446:	2301      	movs	r3, #1
 800b448:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b44a:	2300      	movs	r3, #0
 800b44c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b44e:	2300      	movs	r3, #0
 800b450:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b452:	f107 0310 	add.w	r3, r7, #16
 800b456:	f241 3288 	movw	r2, #5000	; 0x1388
 800b45a:	4619      	mov	r1, r3
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7f8 fb9c 	bl	8003b9a <HAL_OSPI_Command>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	e077      	b.n	800b55c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b46c:	f107 030f 	add.w	r3, r7, #15
 800b470:	f241 3288 	movw	r2, #5000	; 0x1388
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7f8 fc83 	bl	8003d82 <HAL_OSPI_Receive>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e06a      	b.n	800b55c <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7ff ff19 	bl	800b2be <QSPI_WriteEnable>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d001      	beq.n	800b496 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	e062      	b.n	800b55c <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800b496:	78fb      	ldrb	r3, [r7, #3]
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d105      	bne.n	800b4a8 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	73fb      	strb	r3, [r7, #15]
 800b4a6:	e004      	b.n	800b4b2 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
 800b4aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b4b6:	f107 0310 	add.w	r3, r7, #16
 800b4ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7f8 fb6a 	bl	8003b9a <HAL_OSPI_Command>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e045      	b.n	800b55c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b4d0:	f107 030f 	add.w	r3, r7, #15
 800b4d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7f8 fbde 	bl	8003c9c <HAL_OSPI_Transmit>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e038      	b.n	800b55c <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800b4ea:	f241 3188 	movw	r1, #5000	; 0x1388
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7ff ff41 	bl	800b376 <QSPI_AutoPollingMemReady>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d001      	beq.n	800b4fe <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e02e      	b.n	800b55c <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 800b4fe:	2305      	movs	r3, #5
 800b500:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b502:	f107 0310 	add.w	r3, r7, #16
 800b506:	f241 3288 	movw	r2, #5000	; 0x1388
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7f8 fb44 	bl	8003b9a <HAL_OSPI_Command>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d001      	beq.n	800b51c <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e01f      	b.n	800b55c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b51c:	f107 030f 	add.w	r3, r7, #15
 800b520:	f241 3288 	movw	r2, #5000	; 0x1388
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7f8 fc2b 	bl	8003d82 <HAL_OSPI_Receive>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d001      	beq.n	800b536 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e012      	b.n	800b55c <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800b536:	7bfb      	ldrb	r3, [r7, #15]
 800b538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d102      	bne.n	800b546 <QSPI_QuadMode+0x13a>
 800b540:	78fb      	ldrb	r3, [r7, #3]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d007      	beq.n	800b556 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800b546:	7bfb      	ldrb	r3, [r7, #15]
 800b548:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d004      	beq.n	800b55a <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	e000      	b.n	800b55c <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3760      	adds	r7, #96	; 0x60
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b098      	sub	sp, #96	; 0x60
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b570:	2300      	movs	r3, #0
 800b572:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b574:	2300      	movs	r3, #0
 800b576:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800b578:	2305      	movs	r3, #5
 800b57a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b57c:	2301      	movs	r3, #1
 800b57e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b580:	2300      	movs	r3, #0
 800b582:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b584:	2300      	movs	r3, #0
 800b586:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b588:	2300      	movs	r3, #0
 800b58a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b58c:	2300      	movs	r3, #0
 800b58e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800b590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b594:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800b596:	2300      	movs	r3, #0
 800b598:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b5aa:	f107 0310 	add.w	r3, r7, #16
 800b5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f7f8 faf0 	bl	8003b9a <HAL_OSPI_Command>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d001      	beq.n	800b5c4 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e09a      	b.n	800b6fa <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b5c4:	f107 030c 	add.w	r3, r7, #12
 800b5c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7f8 fbd7 	bl	8003d82 <HAL_OSPI_Receive>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e08d      	b.n	800b6fa <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800b5de:	2315      	movs	r3, #21
 800b5e0:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b5e6:	f107 0310 	add.w	r3, r7, #16
 800b5ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f7f8 fad2 	bl	8003b9a <HAL_OSPI_Command>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e07c      	b.n	800b6fa <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b600:	f107 030c 	add.w	r3, r7, #12
 800b604:	3301      	adds	r3, #1
 800b606:	f241 3288 	movw	r2, #5000	; 0x1388
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7f8 fbb8 	bl	8003d82 <HAL_OSPI_Receive>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e06e      	b.n	800b6fa <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff fe4e 	bl	800b2be <QSPI_WriteEnable>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	e066      	b.n	800b6fa <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 800b62c:	78fb      	ldrb	r3, [r7, #3]
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d105      	bne.n	800b63e <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800b632:	7bbb      	ldrb	r3, [r7, #14]
 800b634:	f043 0302 	orr.w	r3, r3, #2
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	73bb      	strb	r3, [r7, #14]
 800b63c:	e004      	b.n	800b648 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800b63e:	7bbb      	ldrb	r3, [r7, #14]
 800b640:	f023 0302 	bic.w	r3, r3, #2
 800b644:	b2db      	uxtb	r3, r3
 800b646:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800b648:	2301      	movs	r3, #1
 800b64a:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 800b64c:	2303      	movs	r3, #3
 800b64e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b650:	f107 0310 	add.w	r3, r7, #16
 800b654:	f241 3288 	movw	r2, #5000	; 0x1388
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7f8 fa9d 	bl	8003b9a <HAL_OSPI_Command>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e047      	b.n	800b6fa <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b66a:	f107 030c 	add.w	r3, r7, #12
 800b66e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b672:	4619      	mov	r1, r3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7f8 fb11 	bl	8003c9c <HAL_OSPI_Transmit>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d001      	beq.n	800b684 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	e03a      	b.n	800b6fa <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800b684:	f241 3188 	movw	r1, #5000	; 0x1388
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff fe74 	bl	800b376 <QSPI_AutoPollingMemReady>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d001      	beq.n	800b698 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	e030      	b.n	800b6fa <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800b698:	2315      	movs	r3, #21
 800b69a:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800b69c:	2302      	movs	r3, #2
 800b69e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b6a0:	f107 0310 	add.w	r3, r7, #16
 800b6a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7f8 fa75 	bl	8003b9a <HAL_OSPI_Command>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e01f      	b.n	800b6fa <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b6ba:	f107 030c 	add.w	r3, r7, #12
 800b6be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7f8 fb5c 	bl	8003d82 <HAL_OSPI_Receive>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e012      	b.n	800b6fa <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800b6d4:	7b7b      	ldrb	r3, [r7, #13]
 800b6d6:	f003 0302 	and.w	r3, r3, #2
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d102      	bne.n	800b6e4 <QSPI_HighPerfMode+0x180>
 800b6de:	78fb      	ldrb	r3, [r7, #3]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d007      	beq.n	800b6f4 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800b6e4:	7b7b      	ldrb	r3, [r7, #13]
 800b6e6:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d004      	beq.n	800b6f8 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800b6ee:	78fb      	ldrb	r3, [r7, #3]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e000      	b.n	800b6fa <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3760      	adds	r7, #96	; 0x60
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
	...

0800b704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b70a:	4b11      	ldr	r3, [pc, #68]	; (800b750 <HAL_MspInit+0x4c>)
 800b70c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b70e:	4a10      	ldr	r2, [pc, #64]	; (800b750 <HAL_MspInit+0x4c>)
 800b710:	f043 0301 	orr.w	r3, r3, #1
 800b714:	6613      	str	r3, [r2, #96]	; 0x60
 800b716:	4b0e      	ldr	r3, [pc, #56]	; (800b750 <HAL_MspInit+0x4c>)
 800b718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b71a:	f003 0301 	and.w	r3, r3, #1
 800b71e:	607b      	str	r3, [r7, #4]
 800b720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b722:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <HAL_MspInit+0x4c>)
 800b724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b726:	4a0a      	ldr	r2, [pc, #40]	; (800b750 <HAL_MspInit+0x4c>)
 800b728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b72c:	6593      	str	r3, [r2, #88]	; 0x58
 800b72e:	4b08      	ldr	r3, [pc, #32]	; (800b750 <HAL_MspInit+0x4c>)
 800b730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b736:	603b      	str	r3, [r7, #0]
 800b738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b73a:	2200      	movs	r2, #0
 800b73c:	210f      	movs	r1, #15
 800b73e:	f06f 0001 	mvn.w	r0, #1
 800b742:	f7f5 fca5 	bl	8001090 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b746:	bf00      	nop
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	40021000 	.word	0x40021000

0800b754 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b08a      	sub	sp, #40	; 0x28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b75c:	f107 0314 	add.w	r3, r7, #20
 800b760:	2200      	movs	r2, #0
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	605a      	str	r2, [r3, #4]
 800b766:	609a      	str	r2, [r3, #8]
 800b768:	60da      	str	r2, [r3, #12]
 800b76a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a42      	ldr	r2, [pc, #264]	; (800b87c <HAL_DAC_MspInit+0x128>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d17e      	bne.n	800b874 <HAL_DAC_MspInit+0x120>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800b776:	4b42      	ldr	r3, [pc, #264]	; (800b880 <HAL_DAC_MspInit+0x12c>)
 800b778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b77a:	4a41      	ldr	r2, [pc, #260]	; (800b880 <HAL_DAC_MspInit+0x12c>)
 800b77c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b780:	6593      	str	r3, [r2, #88]	; 0x58
 800b782:	4b3f      	ldr	r3, [pc, #252]	; (800b880 <HAL_DAC_MspInit+0x12c>)
 800b784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b786:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b78a:	613b      	str	r3, [r7, #16]
 800b78c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b78e:	4b3c      	ldr	r3, [pc, #240]	; (800b880 <HAL_DAC_MspInit+0x12c>)
 800b790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b792:	4a3b      	ldr	r2, [pc, #236]	; (800b880 <HAL_DAC_MspInit+0x12c>)
 800b794:	f043 0301 	orr.w	r3, r3, #1
 800b798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b79a:	4b39      	ldr	r3, [pc, #228]	; (800b880 <HAL_DAC_MspInit+0x12c>)
 800b79c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b7a6:	2330      	movs	r3, #48	; 0x30
 800b7a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7b2:	f107 0314 	add.w	r3, r7, #20
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b7bc:	f7f6 fab0 	bl	8001d20 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800b7c0:	4b30      	ldr	r3, [pc, #192]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b7c2:	4a31      	ldr	r2, [pc, #196]	; (800b888 <HAL_DAC_MspInit+0x134>)
 800b7c4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800b7c6:	4b2f      	ldr	r3, [pc, #188]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b7c8:	2206      	movs	r2, #6
 800b7ca:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b7cc:	4b2d      	ldr	r3, [pc, #180]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b7ce:	2210      	movs	r2, #16
 800b7d0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b7d2:	4b2c      	ldr	r3, [pc, #176]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800b7d8:	4b2a      	ldr	r3, [pc, #168]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b7da:	2280      	movs	r2, #128	; 0x80
 800b7dc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7de:	4b29      	ldr	r3, [pc, #164]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7e4:	4b27      	ldr	r3, [pc, #156]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800b7ea:	4b26      	ldr	r3, [pc, #152]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b7ec:	2220      	movs	r2, #32
 800b7ee:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800b7f0:	4b24      	ldr	r3, [pc, #144]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800b7f6:	4823      	ldr	r0, [pc, #140]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b7f8:	f7f5 ffb2 	bl	8001760 <HAL_DMA_Init>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 800b802:	f7ff f8e5 	bl	800a9d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a1e      	ldr	r2, [pc, #120]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b80a:	609a      	str	r2, [r3, #8]
 800b80c:	4a1d      	ldr	r2, [pc, #116]	; (800b884 <HAL_DAC_MspInit+0x130>)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 800b812:	4b1e      	ldr	r3, [pc, #120]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b814:	4a1e      	ldr	r2, [pc, #120]	; (800b890 <HAL_DAC_MspInit+0x13c>)
 800b816:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CH2;
 800b818:	4b1c      	ldr	r3, [pc, #112]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b81a:	2207      	movs	r2, #7
 800b81c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b81e:	4b1b      	ldr	r3, [pc, #108]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b820:	2210      	movs	r2, #16
 800b822:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800b824:	4b19      	ldr	r3, [pc, #100]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b826:	2200      	movs	r2, #0
 800b828:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800b82a:	4b18      	ldr	r3, [pc, #96]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b82c:	2280      	movs	r2, #128	; 0x80
 800b82e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b830:	4b16      	ldr	r3, [pc, #88]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b832:	2200      	movs	r2, #0
 800b834:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b836:	4b15      	ldr	r3, [pc, #84]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b838:	2200      	movs	r2, #0
 800b83a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800b83c:	4b13      	ldr	r3, [pc, #76]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b83e:	2220      	movs	r2, #32
 800b840:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800b842:	4b12      	ldr	r3, [pc, #72]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b844:	2200      	movs	r2, #0
 800b846:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800b848:	4810      	ldr	r0, [pc, #64]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b84a:	f7f5 ff89 	bl	8001760 <HAL_DMA_Init>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d001      	beq.n	800b858 <HAL_DAC_MspInit+0x104>
    {
      Error_Handler();
 800b854:	f7ff f8bc 	bl	800a9d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a0c      	ldr	r2, [pc, #48]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b85c:	60da      	str	r2, [r3, #12]
 800b85e:	4a0b      	ldr	r2, [pc, #44]	; (800b88c <HAL_DAC_MspInit+0x138>)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800b864:	2200      	movs	r2, #0
 800b866:	2105      	movs	r1, #5
 800b868:	2036      	movs	r0, #54	; 0x36
 800b86a:	f7f5 fc11 	bl	8001090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b86e:	2036      	movs	r0, #54	; 0x36
 800b870:	f7f5 fc2a 	bl	80010c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800b874:	bf00      	nop
 800b876:	3728      	adds	r7, #40	; 0x28
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	40007400 	.word	0x40007400
 800b880:	40021000 	.word	0x40021000
 800b884:	20016910 	.word	0x20016910
 800b888:	40020008 	.word	0x40020008
 800b88c:	20016970 	.word	0x20016970
 800b890:	4002001c 	.word	0x4002001c

0800b894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b0ae      	sub	sp, #184	; 0xb8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b89c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]
 800b8a4:	605a      	str	r2, [r3, #4]
 800b8a6:	609a      	str	r2, [r3, #8]
 800b8a8:	60da      	str	r2, [r3, #12]
 800b8aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b8ac:	f107 0310 	add.w	r3, r7, #16
 800b8b0:	2294      	movs	r2, #148	; 0x94
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f000 fb5f 	bl	800bf78 <memset>
  if(hi2c->Instance==I2C2)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a29      	ldr	r2, [pc, #164]	; (800b964 <HAL_I2C_MspInit+0xd0>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d14b      	bne.n	800b95c <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800b8c4:	2380      	movs	r3, #128	; 0x80
 800b8c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b8cc:	f107 0310 	add.w	r3, r7, #16
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fa f8db 	bl	8005a8c <HAL_RCCEx_PeriphCLKConfig>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800b8dc:	f7ff f878 	bl	800a9d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b8e0:	4b21      	ldr	r3, [pc, #132]	; (800b968 <HAL_I2C_MspInit+0xd4>)
 800b8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e4:	4a20      	ldr	r2, [pc, #128]	; (800b968 <HAL_I2C_MspInit+0xd4>)
 800b8e6:	f043 0302 	orr.w	r3, r3, #2
 800b8ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b8ec:	4b1e      	ldr	r3, [pc, #120]	; (800b968 <HAL_I2C_MspInit+0xd4>)
 800b8ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8f0:	f003 0302 	and.w	r3, r3, #2
 800b8f4:	60fb      	str	r3, [r7, #12]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b8f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b8fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b900:	2312      	movs	r3, #18
 800b902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b906:	2300      	movs	r3, #0
 800b908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b90c:	2303      	movs	r3, #3
 800b90e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b912:	2304      	movs	r3, #4
 800b914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b918:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b91c:	4619      	mov	r1, r3
 800b91e:	4813      	ldr	r0, [pc, #76]	; (800b96c <HAL_I2C_MspInit+0xd8>)
 800b920:	f7f6 f9fe 	bl	8001d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b924:	4b10      	ldr	r3, [pc, #64]	; (800b968 <HAL_I2C_MspInit+0xd4>)
 800b926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b928:	4a0f      	ldr	r2, [pc, #60]	; (800b968 <HAL_I2C_MspInit+0xd4>)
 800b92a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b92e:	6593      	str	r3, [r2, #88]	; 0x58
 800b930:	4b0d      	ldr	r3, [pc, #52]	; (800b968 <HAL_I2C_MspInit+0xd4>)
 800b932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b938:	60bb      	str	r3, [r7, #8]
 800b93a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800b93c:	2200      	movs	r2, #0
 800b93e:	2105      	movs	r1, #5
 800b940:	2021      	movs	r0, #33	; 0x21
 800b942:	f7f5 fba5 	bl	8001090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800b946:	2021      	movs	r0, #33	; 0x21
 800b948:	f7f5 fbbe 	bl	80010c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800b94c:	2200      	movs	r2, #0
 800b94e:	2105      	movs	r1, #5
 800b950:	2022      	movs	r0, #34	; 0x22
 800b952:	f7f5 fb9d 	bl	8001090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800b956:	2022      	movs	r0, #34	; 0x22
 800b958:	f7f5 fbb6 	bl	80010c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b95c:	bf00      	nop
 800b95e:	37b8      	adds	r7, #184	; 0xb8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	40005800 	.word	0x40005800
 800b968:	40021000 	.word	0x40021000
 800b96c:	48000400 	.word	0x48000400

0800b970 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a0e      	ldr	r2, [pc, #56]	; (800b9b8 <HAL_I2C_MspDeInit+0x48>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d115      	bne.n	800b9ae <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800b982:	4b0e      	ldr	r3, [pc, #56]	; (800b9bc <HAL_I2C_MspDeInit+0x4c>)
 800b984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b986:	4a0d      	ldr	r2, [pc, #52]	; (800b9bc <HAL_I2C_MspDeInit+0x4c>)
 800b988:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800b98c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800b98e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b992:	480b      	ldr	r0, [pc, #44]	; (800b9c0 <HAL_I2C_MspDeInit+0x50>)
 800b994:	f7f6 fb56 	bl	8002044 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800b998:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b99c:	4808      	ldr	r0, [pc, #32]	; (800b9c0 <HAL_I2C_MspDeInit+0x50>)
 800b99e:	f7f6 fb51 	bl	8002044 <HAL_GPIO_DeInit>

    /* I2C2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800b9a2:	2021      	movs	r0, #33	; 0x21
 800b9a4:	f7f5 fb9e 	bl	80010e4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800b9a8:	2022      	movs	r0, #34	; 0x22
 800b9aa:	f7f5 fb9b 	bl	80010e4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800b9ae:	bf00      	nop
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	40005800 	.word	0x40005800
 800b9bc:	40021000 	.word	0x40021000
 800b9c0:	48000400 	.word	0x48000400

0800b9c4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b0b0      	sub	sp, #192	; 0xc0
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	605a      	str	r2, [r3, #4]
 800b9d6:	609a      	str	r2, [r3, #8]
 800b9d8:	60da      	str	r2, [r3, #12]
 800b9da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b9dc:	f107 0318 	add.w	r3, r7, #24
 800b9e0:	2294      	movs	r2, #148	; 0x94
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 fac7 	bl	800bf78 <memset>
  if(hospi->Instance==OCTOSPI1)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a28      	ldr	r2, [pc, #160]	; (800ba90 <HAL_OSPI_MspInit+0xcc>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d149      	bne.n	800ba88 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800b9f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ba00:	f107 0318 	add.w	r3, r7, #24
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fa f841 	bl	8005a8c <HAL_RCCEx_PeriphCLKConfig>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800ba10:	f7fe ffde 	bl	800a9d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800ba14:	4b1f      	ldr	r3, [pc, #124]	; (800ba94 <HAL_OSPI_MspInit+0xd0>)
 800ba16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba18:	4a1e      	ldr	r2, [pc, #120]	; (800ba94 <HAL_OSPI_MspInit+0xd0>)
 800ba1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba20:	4b1c      	ldr	r3, [pc, #112]	; (800ba94 <HAL_OSPI_MspInit+0xd0>)
 800ba22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba28:	617b      	str	r3, [r7, #20]
 800ba2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800ba2c:	4b19      	ldr	r3, [pc, #100]	; (800ba94 <HAL_OSPI_MspInit+0xd0>)
 800ba2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba30:	4a18      	ldr	r2, [pc, #96]	; (800ba94 <HAL_OSPI_MspInit+0xd0>)
 800ba32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba36:	6513      	str	r3, [r2, #80]	; 0x50
 800ba38:	4b16      	ldr	r3, [pc, #88]	; (800ba94 <HAL_OSPI_MspInit+0xd0>)
 800ba3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba40:	613b      	str	r3, [r7, #16]
 800ba42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ba44:	4b13      	ldr	r3, [pc, #76]	; (800ba94 <HAL_OSPI_MspInit+0xd0>)
 800ba46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba48:	4a12      	ldr	r2, [pc, #72]	; (800ba94 <HAL_OSPI_MspInit+0xd0>)
 800ba4a:	f043 0310 	orr.w	r3, r3, #16
 800ba4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba50:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <HAL_OSPI_MspInit+0xd0>)
 800ba52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba54:	f003 0310 	and.w	r3, r3, #16
 800ba58:	60fb      	str	r3, [r7, #12]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800ba5c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800ba60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba64:	2302      	movs	r3, #2
 800ba66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba70:	2303      	movs	r3, #3
 800ba72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800ba76:	230a      	movs	r3, #10
 800ba78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ba7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ba80:	4619      	mov	r1, r3
 800ba82:	4805      	ldr	r0, [pc, #20]	; (800ba98 <HAL_OSPI_MspInit+0xd4>)
 800ba84:	f7f6 f94c 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800ba88:	bf00      	nop
 800ba8a:	37c0      	adds	r7, #192	; 0xc0
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	a0001000 	.word	0xa0001000
 800ba94:	40021000 	.word	0x40021000
 800ba98:	48001000 	.word	0x48001000

0800ba9c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a0b      	ldr	r2, [pc, #44]	; (800bad8 <HAL_OSPI_MspDeInit+0x3c>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d110      	bne.n	800bad0 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800baae:	4b0b      	ldr	r3, [pc, #44]	; (800badc <HAL_OSPI_MspDeInit+0x40>)
 800bab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bab2:	4a0a      	ldr	r2, [pc, #40]	; (800badc <HAL_OSPI_MspDeInit+0x40>)
 800bab4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bab8:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800baba:	4b08      	ldr	r3, [pc, #32]	; (800badc <HAL_OSPI_MspDeInit+0x40>)
 800babc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800babe:	4a07      	ldr	r2, [pc, #28]	; (800badc <HAL_OSPI_MspDeInit+0x40>)
 800bac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bac4:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800bac6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800baca:	4805      	ldr	r0, [pc, #20]	; (800bae0 <HAL_OSPI_MspDeInit+0x44>)
 800bacc:	f7f6 faba 	bl	8002044 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 800bad0:	bf00      	nop
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	a0001000 	.word	0xa0001000
 800badc:	40021000 	.word	0x40021000
 800bae0:	48001000 	.word	0x48001000

0800bae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baf4:	d113      	bne.n	800bb1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800baf6:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <HAL_TIM_Base_MspInit+0x44>)
 800baf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bafa:	4a0b      	ldr	r2, [pc, #44]	; (800bb28 <HAL_TIM_Base_MspInit+0x44>)
 800bafc:	f043 0301 	orr.w	r3, r3, #1
 800bb00:	6593      	str	r3, [r2, #88]	; 0x58
 800bb02:	4b09      	ldr	r3, [pc, #36]	; (800bb28 <HAL_TIM_Base_MspInit+0x44>)
 800bb04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	60fb      	str	r3, [r7, #12]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800bb0e:	2200      	movs	r2, #0
 800bb10:	2105      	movs	r1, #5
 800bb12:	201c      	movs	r0, #28
 800bb14:	f7f5 fabc 	bl	8001090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800bb18:	201c      	movs	r0, #28
 800bb1a:	f7f5 fad5 	bl	80010c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800bb1e:	bf00      	nop
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	40021000 	.word	0x40021000

0800bb2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b0ae      	sub	sp, #184	; 0xb8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bb38:	2200      	movs	r2, #0
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	605a      	str	r2, [r3, #4]
 800bb3e:	609a      	str	r2, [r3, #8]
 800bb40:	60da      	str	r2, [r3, #12]
 800bb42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bb44:	f107 0310 	add.w	r3, r7, #16
 800bb48:	2294      	movs	r2, #148	; 0x94
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f000 fa13 	bl	800bf78 <memset>
  if(huart->Instance==USART1)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a21      	ldr	r2, [pc, #132]	; (800bbdc <HAL_UART_MspInit+0xb0>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d13a      	bne.n	800bbd2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800bb60:	2300      	movs	r3, #0
 800bb62:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bb64:	f107 0310 	add.w	r3, r7, #16
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7f9 ff8f 	bl	8005a8c <HAL_RCCEx_PeriphCLKConfig>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800bb74:	f7fe ff2c 	bl	800a9d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800bb78:	4b19      	ldr	r3, [pc, #100]	; (800bbe0 <HAL_UART_MspInit+0xb4>)
 800bb7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb7c:	4a18      	ldr	r2, [pc, #96]	; (800bbe0 <HAL_UART_MspInit+0xb4>)
 800bb7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb82:	6613      	str	r3, [r2, #96]	; 0x60
 800bb84:	4b16      	ldr	r3, [pc, #88]	; (800bbe0 <HAL_UART_MspInit+0xb4>)
 800bb86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb8c:	60fb      	str	r3, [r7, #12]
 800bb8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb90:	4b13      	ldr	r3, [pc, #76]	; (800bbe0 <HAL_UART_MspInit+0xb4>)
 800bb92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb94:	4a12      	ldr	r2, [pc, #72]	; (800bbe0 <HAL_UART_MspInit+0xb4>)
 800bb96:	f043 0302 	orr.w	r3, r3, #2
 800bb9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb9c:	4b10      	ldr	r3, [pc, #64]	; (800bbe0 <HAL_UART_MspInit+0xb4>)
 800bb9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bba0:	f003 0302 	and.w	r3, r3, #2
 800bba4:	60bb      	str	r3, [r7, #8]
 800bba6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bba8:	23c0      	movs	r3, #192	; 0xc0
 800bbaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbae:	2302      	movs	r3, #2
 800bbb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bbc0:	2307      	movs	r3, #7
 800bbc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbc6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4805      	ldr	r0, [pc, #20]	; (800bbe4 <HAL_UART_MspInit+0xb8>)
 800bbce:	f7f6 f8a7 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800bbd2:	bf00      	nop
 800bbd4:	37b8      	adds	r7, #184	; 0xb8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	40013800 	.word	0x40013800
 800bbe0:	40021000 	.word	0x40021000
 800bbe4:	48000400 	.word	0x48000400

0800bbe8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08e      	sub	sp, #56	; 0x38
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800bbf6:	4b34      	ldr	r3, [pc, #208]	; (800bcc8 <HAL_InitTick+0xe0>)
 800bbf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbfa:	4a33      	ldr	r2, [pc, #204]	; (800bcc8 <HAL_InitTick+0xe0>)
 800bbfc:	f043 0310 	orr.w	r3, r3, #16
 800bc00:	6593      	str	r3, [r2, #88]	; 0x58
 800bc02:	4b31      	ldr	r3, [pc, #196]	; (800bcc8 <HAL_InitTick+0xe0>)
 800bc04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc06:	f003 0310 	and.w	r3, r3, #16
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800bc0e:	f107 0210 	add.w	r2, r7, #16
 800bc12:	f107 0314 	add.w	r3, r7, #20
 800bc16:	4611      	mov	r1, r2
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7f9 fe45 	bl	80058a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800bc1e:	6a3b      	ldr	r3, [r7, #32]
 800bc20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800bc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d103      	bne.n	800bc30 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800bc28:	f7f9 fe12 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
 800bc2c:	6378      	str	r0, [r7, #52]	; 0x34
 800bc2e:	e004      	b.n	800bc3a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800bc30:	f7f9 fe0e 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
 800bc34:	4603      	mov	r3, r0
 800bc36:	005b      	lsls	r3, r3, #1
 800bc38:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800bc3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3c:	4a23      	ldr	r2, [pc, #140]	; (800bccc <HAL_InitTick+0xe4>)
 800bc3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc42:	0c9b      	lsrs	r3, r3, #18
 800bc44:	3b01      	subs	r3, #1
 800bc46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800bc48:	4b21      	ldr	r3, [pc, #132]	; (800bcd0 <HAL_InitTick+0xe8>)
 800bc4a:	4a22      	ldr	r2, [pc, #136]	; (800bcd4 <HAL_InitTick+0xec>)
 800bc4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800bc4e:	4b20      	ldr	r3, [pc, #128]	; (800bcd0 <HAL_InitTick+0xe8>)
 800bc50:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bc54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800bc56:	4a1e      	ldr	r2, [pc, #120]	; (800bcd0 <HAL_InitTick+0xe8>)
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800bc5c:	4b1c      	ldr	r3, [pc, #112]	; (800bcd0 <HAL_InitTick+0xe8>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bc62:	4b1b      	ldr	r3, [pc, #108]	; (800bcd0 <HAL_InitTick+0xe8>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bc68:	4b19      	ldr	r3, [pc, #100]	; (800bcd0 <HAL_InitTick+0xe8>)
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800bc6e:	4818      	ldr	r0, [pc, #96]	; (800bcd0 <HAL_InitTick+0xe8>)
 800bc70:	f7fa fc24 	bl	80064bc <HAL_TIM_Base_Init>
 800bc74:	4603      	mov	r3, r0
 800bc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800bc7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d11b      	bne.n	800bcba <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800bc82:	4813      	ldr	r0, [pc, #76]	; (800bcd0 <HAL_InitTick+0xe8>)
 800bc84:	f7fa fc72 	bl	800656c <HAL_TIM_Base_Start_IT>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800bc8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d111      	bne.n	800bcba <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800bc96:	2036      	movs	r0, #54	; 0x36
 800bc98:	f7f5 fa16 	bl	80010c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b0f      	cmp	r3, #15
 800bca0:	d808      	bhi.n	800bcb4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800bca2:	2200      	movs	r2, #0
 800bca4:	6879      	ldr	r1, [r7, #4]
 800bca6:	2036      	movs	r0, #54	; 0x36
 800bca8:	f7f5 f9f2 	bl	8001090 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bcac:	4a0a      	ldr	r2, [pc, #40]	; (800bcd8 <HAL_InitTick+0xf0>)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6013      	str	r3, [r2, #0]
 800bcb2:	e002      	b.n	800bcba <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800bcba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3738      	adds	r7, #56	; 0x38
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	40021000 	.word	0x40021000
 800bccc:	431bde83 	.word	0x431bde83
 800bcd0:	20016ca0 	.word	0x20016ca0
 800bcd4:	40001000 	.word	0x40001000
 800bcd8:	20000000 	.word	0x20000000

0800bcdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800bce0:	e7fe      	b.n	800bce0 <NMI_Handler+0x4>

0800bce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bce2:	b480      	push	{r7}
 800bce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bce6:	e7fe      	b.n	800bce6 <HardFault_Handler+0x4>

0800bce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bce8:	b480      	push	{r7}
 800bcea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bcec:	e7fe      	b.n	800bcec <MemManage_Handler+0x4>

0800bcee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bcf2:	e7fe      	b.n	800bcf2 <BusFault_Handler+0x4>

0800bcf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bcf8:	e7fe      	b.n	800bcf8 <UsageFault_Handler+0x4>

0800bcfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bcfe:	bf00      	nop
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800bd0c:	4802      	ldr	r0, [pc, #8]	; (800bd18 <DMA1_Channel1_IRQHandler+0x10>)
 800bd0e:	f7f5 fea9 	bl	8001a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800bd12:	bf00      	nop
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20016910 	.word	0x20016910

0800bd1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800bd20:	4802      	ldr	r0, [pc, #8]	; (800bd2c <DMA1_Channel2_IRQHandler+0x10>)
 800bd22:	f7f5 fe9f 	bl	8001a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800bd26:	bf00      	nop
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	20016970 	.word	0x20016970

0800bd30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800bd34:	4802      	ldr	r0, [pc, #8]	; (800bd40 <TIM2_IRQHandler+0x10>)
 800bd36:	f7fa fc89 	bl	800664c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800bd3a:	bf00      	nop
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20016a74 	.word	0x20016a74

0800bd44 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800bd48:	4802      	ldr	r0, [pc, #8]	; (800bd54 <I2C2_EV_IRQHandler+0x10>)
 800bd4a:	f7f6 fda3 	bl	8002894 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800bd4e:	bf00      	nop
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	200169d0 	.word	0x200169d0

0800bd58 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800bd5c:	4802      	ldr	r0, [pc, #8]	; (800bd68 <I2C2_ER_IRQHandler+0x10>)
 800bd5e:	f7f6 fdb3 	bl	80028c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800bd62:	bf00      	nop
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	200169d0 	.word	0x200169d0

0800bd6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(blue_button_Pin);
 800bd70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bd74:	f7f6 fa8a 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800bd78:	bf00      	nop
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800bd80:	4803      	ldr	r0, [pc, #12]	; (800bd90 <TIM6_DAC_IRQHandler+0x14>)
 800bd82:	f7fa fc63 	bl	800664c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800bd86:	4803      	ldr	r0, [pc, #12]	; (800bd94 <TIM6_DAC_IRQHandler+0x18>)
 800bd88:	f7f5 faa8 	bl	80012dc <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800bd8c:	bf00      	nop
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	20016ca0 	.word	0x20016ca0
 800bd94:	200168fc 	.word	0x200168fc

0800bd98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bda0:	4a14      	ldr	r2, [pc, #80]	; (800bdf4 <_sbrk+0x5c>)
 800bda2:	4b15      	ldr	r3, [pc, #84]	; (800bdf8 <_sbrk+0x60>)
 800bda4:	1ad3      	subs	r3, r2, r3
 800bda6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bdac:	4b13      	ldr	r3, [pc, #76]	; (800bdfc <_sbrk+0x64>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d102      	bne.n	800bdba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bdb4:	4b11      	ldr	r3, [pc, #68]	; (800bdfc <_sbrk+0x64>)
 800bdb6:	4a12      	ldr	r2, [pc, #72]	; (800be00 <_sbrk+0x68>)
 800bdb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bdba:	4b10      	ldr	r3, [pc, #64]	; (800bdfc <_sbrk+0x64>)
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d207      	bcs.n	800bdd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bdc8:	f000 f89e 	bl	800bf08 <__errno>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	220c      	movs	r2, #12
 800bdd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bdd2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd6:	e009      	b.n	800bdec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bdd8:	4b08      	ldr	r3, [pc, #32]	; (800bdfc <_sbrk+0x64>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bdde:	4b07      	ldr	r3, [pc, #28]	; (800bdfc <_sbrk+0x64>)
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4413      	add	r3, r2
 800bde6:	4a05      	ldr	r2, [pc, #20]	; (800bdfc <_sbrk+0x64>)
 800bde8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bdea:	68fb      	ldr	r3, [r7, #12]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3718      	adds	r7, #24
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	200a0000 	.word	0x200a0000
 800bdf8:	00000400 	.word	0x00000400
 800bdfc:	20016cec 	.word	0x20016cec
 800be00:	20016d00 	.word	0x20016d00

0800be04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800be04:	b480      	push	{r7}
 800be06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800be08:	4b06      	ldr	r3, [pc, #24]	; (800be24 <SystemInit+0x20>)
 800be0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be0e:	4a05      	ldr	r2, [pc, #20]	; (800be24 <SystemInit+0x20>)
 800be10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800be14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800be18:	bf00      	nop
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	e000ed00 	.word	0xe000ed00

0800be28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800be28:	f8df d034 	ldr.w	sp, [pc, #52]	; 800be60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800be2c:	f7ff ffea 	bl	800be04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800be30:	480c      	ldr	r0, [pc, #48]	; (800be64 <LoopForever+0x6>)
  ldr r1, =_edata
 800be32:	490d      	ldr	r1, [pc, #52]	; (800be68 <LoopForever+0xa>)
  ldr r2, =_sidata
 800be34:	4a0d      	ldr	r2, [pc, #52]	; (800be6c <LoopForever+0xe>)
  movs r3, #0
 800be36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800be38:	e002      	b.n	800be40 <LoopCopyDataInit>

0800be3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800be3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800be3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800be3e:	3304      	adds	r3, #4

0800be40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800be40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800be42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800be44:	d3f9      	bcc.n	800be3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800be46:	4a0a      	ldr	r2, [pc, #40]	; (800be70 <LoopForever+0x12>)
  ldr r4, =_ebss
 800be48:	4c0a      	ldr	r4, [pc, #40]	; (800be74 <LoopForever+0x16>)
  movs r3, #0
 800be4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800be4c:	e001      	b.n	800be52 <LoopFillZerobss>

0800be4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800be4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800be50:	3204      	adds	r2, #4

0800be52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800be52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800be54:	d3fb      	bcc.n	800be4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800be56:	f000 f85d 	bl	800bf14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800be5a:	f7fd fca5 	bl	80097a8 <main>

0800be5e <LoopForever>:

LoopForever:
    b LoopForever
 800be5e:	e7fe      	b.n	800be5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800be60:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800be64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800be68:	2001597c 	.word	0x2001597c
  ldr r2, =_sidata
 800be6c:	0800d220 	.word	0x0800d220
  ldr r2, =_sbss
 800be70:	2001597c 	.word	0x2001597c
  ldr r4, =_ebss
 800be74:	20016d00 	.word	0x20016d00

0800be78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800be78:	e7fe      	b.n	800be78 <ADC1_IRQHandler>
	...

0800be7c <arm_sin_f32>:
 800be7c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800befc <arm_sin_f32+0x80>
 800be80:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800be88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800be90:	d504      	bpl.n	800be9c <arm_sin_f32+0x20>
 800be92:	ee17 3a90 	vmov	r3, s15
 800be96:	3b01      	subs	r3, #1
 800be98:	ee07 3a90 	vmov	s15, r3
 800be9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bea0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800bf00 <arm_sin_f32+0x84>
 800bea4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bea8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800beac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800beb0:	ee17 3a90 	vmov	r3, s15
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800beba:	d21a      	bcs.n	800bef2 <arm_sin_f32+0x76>
 800bebc:	ee07 3a90 	vmov	s15, r3
 800bec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec4:	1c59      	adds	r1, r3, #1
 800bec6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800beca:	4a0e      	ldr	r2, [pc, #56]	; (800bf04 <arm_sin_f32+0x88>)
 800becc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bed0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bed4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800bed8:	ed93 7a00 	vldr	s14, [r3]
 800bedc:	edd2 6a00 	vldr	s13, [r2]
 800bee0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bee4:	ee20 0a26 	vmul.f32	s0, s0, s13
 800bee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800beec:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bef0:	4770      	bx	lr
 800bef2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bef6:	2101      	movs	r1, #1
 800bef8:	2300      	movs	r3, #0
 800befa:	e7e6      	b.n	800beca <arm_sin_f32+0x4e>
 800befc:	3e22f983 	.word	0x3e22f983
 800bf00:	44000000 	.word	0x44000000
 800bf04:	0800c9d8 	.word	0x0800c9d8

0800bf08 <__errno>:
 800bf08:	4b01      	ldr	r3, [pc, #4]	; (800bf10 <__errno+0x8>)
 800bf0a:	6818      	ldr	r0, [r3, #0]
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	20015918 	.word	0x20015918

0800bf14 <__libc_init_array>:
 800bf14:	b570      	push	{r4, r5, r6, lr}
 800bf16:	4d0d      	ldr	r5, [pc, #52]	; (800bf4c <__libc_init_array+0x38>)
 800bf18:	4c0d      	ldr	r4, [pc, #52]	; (800bf50 <__libc_init_array+0x3c>)
 800bf1a:	1b64      	subs	r4, r4, r5
 800bf1c:	10a4      	asrs	r4, r4, #2
 800bf1e:	2600      	movs	r6, #0
 800bf20:	42a6      	cmp	r6, r4
 800bf22:	d109      	bne.n	800bf38 <__libc_init_array+0x24>
 800bf24:	4d0b      	ldr	r5, [pc, #44]	; (800bf54 <__libc_init_array+0x40>)
 800bf26:	4c0c      	ldr	r4, [pc, #48]	; (800bf58 <__libc_init_array+0x44>)
 800bf28:	f000 fc8e 	bl	800c848 <_init>
 800bf2c:	1b64      	subs	r4, r4, r5
 800bf2e:	10a4      	asrs	r4, r4, #2
 800bf30:	2600      	movs	r6, #0
 800bf32:	42a6      	cmp	r6, r4
 800bf34:	d105      	bne.n	800bf42 <__libc_init_array+0x2e>
 800bf36:	bd70      	pop	{r4, r5, r6, pc}
 800bf38:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf3c:	4798      	blx	r3
 800bf3e:	3601      	adds	r6, #1
 800bf40:	e7ee      	b.n	800bf20 <__libc_init_array+0xc>
 800bf42:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf46:	4798      	blx	r3
 800bf48:	3601      	adds	r6, #1
 800bf4a:	e7f2      	b.n	800bf32 <__libc_init_array+0x1e>
 800bf4c:	0800d218 	.word	0x0800d218
 800bf50:	0800d218 	.word	0x0800d218
 800bf54:	0800d218 	.word	0x0800d218
 800bf58:	0800d21c 	.word	0x0800d21c

0800bf5c <memcpy>:
 800bf5c:	440a      	add	r2, r1
 800bf5e:	4291      	cmp	r1, r2
 800bf60:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf64:	d100      	bne.n	800bf68 <memcpy+0xc>
 800bf66:	4770      	bx	lr
 800bf68:	b510      	push	{r4, lr}
 800bf6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf72:	4291      	cmp	r1, r2
 800bf74:	d1f9      	bne.n	800bf6a <memcpy+0xe>
 800bf76:	bd10      	pop	{r4, pc}

0800bf78 <memset>:
 800bf78:	4402      	add	r2, r0
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d100      	bne.n	800bf82 <memset+0xa>
 800bf80:	4770      	bx	lr
 800bf82:	f803 1b01 	strb.w	r1, [r3], #1
 800bf86:	e7f9      	b.n	800bf7c <memset+0x4>

0800bf88 <siprintf>:
 800bf88:	b40e      	push	{r1, r2, r3}
 800bf8a:	b500      	push	{lr}
 800bf8c:	b09c      	sub	sp, #112	; 0x70
 800bf8e:	ab1d      	add	r3, sp, #116	; 0x74
 800bf90:	9002      	str	r0, [sp, #8]
 800bf92:	9006      	str	r0, [sp, #24]
 800bf94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf98:	4809      	ldr	r0, [pc, #36]	; (800bfc0 <siprintf+0x38>)
 800bf9a:	9107      	str	r1, [sp, #28]
 800bf9c:	9104      	str	r1, [sp, #16]
 800bf9e:	4909      	ldr	r1, [pc, #36]	; (800bfc4 <siprintf+0x3c>)
 800bfa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfa4:	9105      	str	r1, [sp, #20]
 800bfa6:	6800      	ldr	r0, [r0, #0]
 800bfa8:	9301      	str	r3, [sp, #4]
 800bfaa:	a902      	add	r1, sp, #8
 800bfac:	f000 f868 	bl	800c080 <_svfiprintf_r>
 800bfb0:	9b02      	ldr	r3, [sp, #8]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	b01c      	add	sp, #112	; 0x70
 800bfb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfbc:	b003      	add	sp, #12
 800bfbe:	4770      	bx	lr
 800bfc0:	20015918 	.word	0x20015918
 800bfc4:	ffff0208 	.word	0xffff0208

0800bfc8 <__ssputs_r>:
 800bfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfcc:	688e      	ldr	r6, [r1, #8]
 800bfce:	429e      	cmp	r6, r3
 800bfd0:	4682      	mov	sl, r0
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	4690      	mov	r8, r2
 800bfd6:	461f      	mov	r7, r3
 800bfd8:	d838      	bhi.n	800c04c <__ssputs_r+0x84>
 800bfda:	898a      	ldrh	r2, [r1, #12]
 800bfdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfe0:	d032      	beq.n	800c048 <__ssputs_r+0x80>
 800bfe2:	6825      	ldr	r5, [r4, #0]
 800bfe4:	6909      	ldr	r1, [r1, #16]
 800bfe6:	eba5 0901 	sub.w	r9, r5, r1
 800bfea:	6965      	ldr	r5, [r4, #20]
 800bfec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bff4:	3301      	adds	r3, #1
 800bff6:	444b      	add	r3, r9
 800bff8:	106d      	asrs	r5, r5, #1
 800bffa:	429d      	cmp	r5, r3
 800bffc:	bf38      	it	cc
 800bffe:	461d      	movcc	r5, r3
 800c000:	0553      	lsls	r3, r2, #21
 800c002:	d531      	bpl.n	800c068 <__ssputs_r+0xa0>
 800c004:	4629      	mov	r1, r5
 800c006:	f000 fb55 	bl	800c6b4 <_malloc_r>
 800c00a:	4606      	mov	r6, r0
 800c00c:	b950      	cbnz	r0, 800c024 <__ssputs_r+0x5c>
 800c00e:	230c      	movs	r3, #12
 800c010:	f8ca 3000 	str.w	r3, [sl]
 800c014:	89a3      	ldrh	r3, [r4, #12]
 800c016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c01a:	81a3      	strh	r3, [r4, #12]
 800c01c:	f04f 30ff 	mov.w	r0, #4294967295
 800c020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c024:	6921      	ldr	r1, [r4, #16]
 800c026:	464a      	mov	r2, r9
 800c028:	f7ff ff98 	bl	800bf5c <memcpy>
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c036:	81a3      	strh	r3, [r4, #12]
 800c038:	6126      	str	r6, [r4, #16]
 800c03a:	6165      	str	r5, [r4, #20]
 800c03c:	444e      	add	r6, r9
 800c03e:	eba5 0509 	sub.w	r5, r5, r9
 800c042:	6026      	str	r6, [r4, #0]
 800c044:	60a5      	str	r5, [r4, #8]
 800c046:	463e      	mov	r6, r7
 800c048:	42be      	cmp	r6, r7
 800c04a:	d900      	bls.n	800c04e <__ssputs_r+0x86>
 800c04c:	463e      	mov	r6, r7
 800c04e:	6820      	ldr	r0, [r4, #0]
 800c050:	4632      	mov	r2, r6
 800c052:	4641      	mov	r1, r8
 800c054:	f000 faa8 	bl	800c5a8 <memmove>
 800c058:	68a3      	ldr	r3, [r4, #8]
 800c05a:	1b9b      	subs	r3, r3, r6
 800c05c:	60a3      	str	r3, [r4, #8]
 800c05e:	6823      	ldr	r3, [r4, #0]
 800c060:	4433      	add	r3, r6
 800c062:	6023      	str	r3, [r4, #0]
 800c064:	2000      	movs	r0, #0
 800c066:	e7db      	b.n	800c020 <__ssputs_r+0x58>
 800c068:	462a      	mov	r2, r5
 800c06a:	f000 fb97 	bl	800c79c <_realloc_r>
 800c06e:	4606      	mov	r6, r0
 800c070:	2800      	cmp	r0, #0
 800c072:	d1e1      	bne.n	800c038 <__ssputs_r+0x70>
 800c074:	6921      	ldr	r1, [r4, #16]
 800c076:	4650      	mov	r0, sl
 800c078:	f000 fab0 	bl	800c5dc <_free_r>
 800c07c:	e7c7      	b.n	800c00e <__ssputs_r+0x46>
	...

0800c080 <_svfiprintf_r>:
 800c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c084:	4698      	mov	r8, r3
 800c086:	898b      	ldrh	r3, [r1, #12]
 800c088:	061b      	lsls	r3, r3, #24
 800c08a:	b09d      	sub	sp, #116	; 0x74
 800c08c:	4607      	mov	r7, r0
 800c08e:	460d      	mov	r5, r1
 800c090:	4614      	mov	r4, r2
 800c092:	d50e      	bpl.n	800c0b2 <_svfiprintf_r+0x32>
 800c094:	690b      	ldr	r3, [r1, #16]
 800c096:	b963      	cbnz	r3, 800c0b2 <_svfiprintf_r+0x32>
 800c098:	2140      	movs	r1, #64	; 0x40
 800c09a:	f000 fb0b 	bl	800c6b4 <_malloc_r>
 800c09e:	6028      	str	r0, [r5, #0]
 800c0a0:	6128      	str	r0, [r5, #16]
 800c0a2:	b920      	cbnz	r0, 800c0ae <_svfiprintf_r+0x2e>
 800c0a4:	230c      	movs	r3, #12
 800c0a6:	603b      	str	r3, [r7, #0]
 800c0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ac:	e0d1      	b.n	800c252 <_svfiprintf_r+0x1d2>
 800c0ae:	2340      	movs	r3, #64	; 0x40
 800c0b0:	616b      	str	r3, [r5, #20]
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0b6:	2320      	movs	r3, #32
 800c0b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0c0:	2330      	movs	r3, #48	; 0x30
 800c0c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c26c <_svfiprintf_r+0x1ec>
 800c0c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0ca:	f04f 0901 	mov.w	r9, #1
 800c0ce:	4623      	mov	r3, r4
 800c0d0:	469a      	mov	sl, r3
 800c0d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0d6:	b10a      	cbz	r2, 800c0dc <_svfiprintf_r+0x5c>
 800c0d8:	2a25      	cmp	r2, #37	; 0x25
 800c0da:	d1f9      	bne.n	800c0d0 <_svfiprintf_r+0x50>
 800c0dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c0e0:	d00b      	beq.n	800c0fa <_svfiprintf_r+0x7a>
 800c0e2:	465b      	mov	r3, fp
 800c0e4:	4622      	mov	r2, r4
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	4638      	mov	r0, r7
 800c0ea:	f7ff ff6d 	bl	800bfc8 <__ssputs_r>
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	f000 80aa 	beq.w	800c248 <_svfiprintf_r+0x1c8>
 800c0f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0f6:	445a      	add	r2, fp
 800c0f8:	9209      	str	r2, [sp, #36]	; 0x24
 800c0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	f000 80a2 	beq.w	800c248 <_svfiprintf_r+0x1c8>
 800c104:	2300      	movs	r3, #0
 800c106:	f04f 32ff 	mov.w	r2, #4294967295
 800c10a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c10e:	f10a 0a01 	add.w	sl, sl, #1
 800c112:	9304      	str	r3, [sp, #16]
 800c114:	9307      	str	r3, [sp, #28]
 800c116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c11a:	931a      	str	r3, [sp, #104]	; 0x68
 800c11c:	4654      	mov	r4, sl
 800c11e:	2205      	movs	r2, #5
 800c120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c124:	4851      	ldr	r0, [pc, #324]	; (800c26c <_svfiprintf_r+0x1ec>)
 800c126:	f7f4 f86b 	bl	8000200 <memchr>
 800c12a:	9a04      	ldr	r2, [sp, #16]
 800c12c:	b9d8      	cbnz	r0, 800c166 <_svfiprintf_r+0xe6>
 800c12e:	06d0      	lsls	r0, r2, #27
 800c130:	bf44      	itt	mi
 800c132:	2320      	movmi	r3, #32
 800c134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c138:	0711      	lsls	r1, r2, #28
 800c13a:	bf44      	itt	mi
 800c13c:	232b      	movmi	r3, #43	; 0x2b
 800c13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c142:	f89a 3000 	ldrb.w	r3, [sl]
 800c146:	2b2a      	cmp	r3, #42	; 0x2a
 800c148:	d015      	beq.n	800c176 <_svfiprintf_r+0xf6>
 800c14a:	9a07      	ldr	r2, [sp, #28]
 800c14c:	4654      	mov	r4, sl
 800c14e:	2000      	movs	r0, #0
 800c150:	f04f 0c0a 	mov.w	ip, #10
 800c154:	4621      	mov	r1, r4
 800c156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c15a:	3b30      	subs	r3, #48	; 0x30
 800c15c:	2b09      	cmp	r3, #9
 800c15e:	d94e      	bls.n	800c1fe <_svfiprintf_r+0x17e>
 800c160:	b1b0      	cbz	r0, 800c190 <_svfiprintf_r+0x110>
 800c162:	9207      	str	r2, [sp, #28]
 800c164:	e014      	b.n	800c190 <_svfiprintf_r+0x110>
 800c166:	eba0 0308 	sub.w	r3, r0, r8
 800c16a:	fa09 f303 	lsl.w	r3, r9, r3
 800c16e:	4313      	orrs	r3, r2
 800c170:	9304      	str	r3, [sp, #16]
 800c172:	46a2      	mov	sl, r4
 800c174:	e7d2      	b.n	800c11c <_svfiprintf_r+0x9c>
 800c176:	9b03      	ldr	r3, [sp, #12]
 800c178:	1d19      	adds	r1, r3, #4
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	9103      	str	r1, [sp, #12]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	bfbb      	ittet	lt
 800c182:	425b      	neglt	r3, r3
 800c184:	f042 0202 	orrlt.w	r2, r2, #2
 800c188:	9307      	strge	r3, [sp, #28]
 800c18a:	9307      	strlt	r3, [sp, #28]
 800c18c:	bfb8      	it	lt
 800c18e:	9204      	strlt	r2, [sp, #16]
 800c190:	7823      	ldrb	r3, [r4, #0]
 800c192:	2b2e      	cmp	r3, #46	; 0x2e
 800c194:	d10c      	bne.n	800c1b0 <_svfiprintf_r+0x130>
 800c196:	7863      	ldrb	r3, [r4, #1]
 800c198:	2b2a      	cmp	r3, #42	; 0x2a
 800c19a:	d135      	bne.n	800c208 <_svfiprintf_r+0x188>
 800c19c:	9b03      	ldr	r3, [sp, #12]
 800c19e:	1d1a      	adds	r2, r3, #4
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	9203      	str	r2, [sp, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	bfb8      	it	lt
 800c1a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1ac:	3402      	adds	r4, #2
 800c1ae:	9305      	str	r3, [sp, #20]
 800c1b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c27c <_svfiprintf_r+0x1fc>
 800c1b4:	7821      	ldrb	r1, [r4, #0]
 800c1b6:	2203      	movs	r2, #3
 800c1b8:	4650      	mov	r0, sl
 800c1ba:	f7f4 f821 	bl	8000200 <memchr>
 800c1be:	b140      	cbz	r0, 800c1d2 <_svfiprintf_r+0x152>
 800c1c0:	2340      	movs	r3, #64	; 0x40
 800c1c2:	eba0 000a 	sub.w	r0, r0, sl
 800c1c6:	fa03 f000 	lsl.w	r0, r3, r0
 800c1ca:	9b04      	ldr	r3, [sp, #16]
 800c1cc:	4303      	orrs	r3, r0
 800c1ce:	3401      	adds	r4, #1
 800c1d0:	9304      	str	r3, [sp, #16]
 800c1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1d6:	4826      	ldr	r0, [pc, #152]	; (800c270 <_svfiprintf_r+0x1f0>)
 800c1d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1dc:	2206      	movs	r2, #6
 800c1de:	f7f4 f80f 	bl	8000200 <memchr>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d038      	beq.n	800c258 <_svfiprintf_r+0x1d8>
 800c1e6:	4b23      	ldr	r3, [pc, #140]	; (800c274 <_svfiprintf_r+0x1f4>)
 800c1e8:	bb1b      	cbnz	r3, 800c232 <_svfiprintf_r+0x1b2>
 800c1ea:	9b03      	ldr	r3, [sp, #12]
 800c1ec:	3307      	adds	r3, #7
 800c1ee:	f023 0307 	bic.w	r3, r3, #7
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	9303      	str	r3, [sp, #12]
 800c1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f8:	4433      	add	r3, r6
 800c1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c1fc:	e767      	b.n	800c0ce <_svfiprintf_r+0x4e>
 800c1fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800c202:	460c      	mov	r4, r1
 800c204:	2001      	movs	r0, #1
 800c206:	e7a5      	b.n	800c154 <_svfiprintf_r+0xd4>
 800c208:	2300      	movs	r3, #0
 800c20a:	3401      	adds	r4, #1
 800c20c:	9305      	str	r3, [sp, #20]
 800c20e:	4619      	mov	r1, r3
 800c210:	f04f 0c0a 	mov.w	ip, #10
 800c214:	4620      	mov	r0, r4
 800c216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c21a:	3a30      	subs	r2, #48	; 0x30
 800c21c:	2a09      	cmp	r2, #9
 800c21e:	d903      	bls.n	800c228 <_svfiprintf_r+0x1a8>
 800c220:	2b00      	cmp	r3, #0
 800c222:	d0c5      	beq.n	800c1b0 <_svfiprintf_r+0x130>
 800c224:	9105      	str	r1, [sp, #20]
 800c226:	e7c3      	b.n	800c1b0 <_svfiprintf_r+0x130>
 800c228:	fb0c 2101 	mla	r1, ip, r1, r2
 800c22c:	4604      	mov	r4, r0
 800c22e:	2301      	movs	r3, #1
 800c230:	e7f0      	b.n	800c214 <_svfiprintf_r+0x194>
 800c232:	ab03      	add	r3, sp, #12
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	462a      	mov	r2, r5
 800c238:	4b0f      	ldr	r3, [pc, #60]	; (800c278 <_svfiprintf_r+0x1f8>)
 800c23a:	a904      	add	r1, sp, #16
 800c23c:	4638      	mov	r0, r7
 800c23e:	f3af 8000 	nop.w
 800c242:	1c42      	adds	r2, r0, #1
 800c244:	4606      	mov	r6, r0
 800c246:	d1d6      	bne.n	800c1f6 <_svfiprintf_r+0x176>
 800c248:	89ab      	ldrh	r3, [r5, #12]
 800c24a:	065b      	lsls	r3, r3, #25
 800c24c:	f53f af2c 	bmi.w	800c0a8 <_svfiprintf_r+0x28>
 800c250:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c252:	b01d      	add	sp, #116	; 0x74
 800c254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c258:	ab03      	add	r3, sp, #12
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	462a      	mov	r2, r5
 800c25e:	4b06      	ldr	r3, [pc, #24]	; (800c278 <_svfiprintf_r+0x1f8>)
 800c260:	a904      	add	r1, sp, #16
 800c262:	4638      	mov	r0, r7
 800c264:	f000 f87a 	bl	800c35c <_printf_i>
 800c268:	e7eb      	b.n	800c242 <_svfiprintf_r+0x1c2>
 800c26a:	bf00      	nop
 800c26c:	0800d1dc 	.word	0x0800d1dc
 800c270:	0800d1e6 	.word	0x0800d1e6
 800c274:	00000000 	.word	0x00000000
 800c278:	0800bfc9 	.word	0x0800bfc9
 800c27c:	0800d1e2 	.word	0x0800d1e2

0800c280 <_printf_common>:
 800c280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c284:	4616      	mov	r6, r2
 800c286:	4699      	mov	r9, r3
 800c288:	688a      	ldr	r2, [r1, #8]
 800c28a:	690b      	ldr	r3, [r1, #16]
 800c28c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c290:	4293      	cmp	r3, r2
 800c292:	bfb8      	it	lt
 800c294:	4613      	movlt	r3, r2
 800c296:	6033      	str	r3, [r6, #0]
 800c298:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c29c:	4607      	mov	r7, r0
 800c29e:	460c      	mov	r4, r1
 800c2a0:	b10a      	cbz	r2, 800c2a6 <_printf_common+0x26>
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	6033      	str	r3, [r6, #0]
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	0699      	lsls	r1, r3, #26
 800c2aa:	bf42      	ittt	mi
 800c2ac:	6833      	ldrmi	r3, [r6, #0]
 800c2ae:	3302      	addmi	r3, #2
 800c2b0:	6033      	strmi	r3, [r6, #0]
 800c2b2:	6825      	ldr	r5, [r4, #0]
 800c2b4:	f015 0506 	ands.w	r5, r5, #6
 800c2b8:	d106      	bne.n	800c2c8 <_printf_common+0x48>
 800c2ba:	f104 0a19 	add.w	sl, r4, #25
 800c2be:	68e3      	ldr	r3, [r4, #12]
 800c2c0:	6832      	ldr	r2, [r6, #0]
 800c2c2:	1a9b      	subs	r3, r3, r2
 800c2c4:	42ab      	cmp	r3, r5
 800c2c6:	dc26      	bgt.n	800c316 <_printf_common+0x96>
 800c2c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2cc:	1e13      	subs	r3, r2, #0
 800c2ce:	6822      	ldr	r2, [r4, #0]
 800c2d0:	bf18      	it	ne
 800c2d2:	2301      	movne	r3, #1
 800c2d4:	0692      	lsls	r2, r2, #26
 800c2d6:	d42b      	bmi.n	800c330 <_printf_common+0xb0>
 800c2d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2dc:	4649      	mov	r1, r9
 800c2de:	4638      	mov	r0, r7
 800c2e0:	47c0      	blx	r8
 800c2e2:	3001      	adds	r0, #1
 800c2e4:	d01e      	beq.n	800c324 <_printf_common+0xa4>
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	68e5      	ldr	r5, [r4, #12]
 800c2ea:	6832      	ldr	r2, [r6, #0]
 800c2ec:	f003 0306 	and.w	r3, r3, #6
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	bf08      	it	eq
 800c2f4:	1aad      	subeq	r5, r5, r2
 800c2f6:	68a3      	ldr	r3, [r4, #8]
 800c2f8:	6922      	ldr	r2, [r4, #16]
 800c2fa:	bf0c      	ite	eq
 800c2fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c300:	2500      	movne	r5, #0
 800c302:	4293      	cmp	r3, r2
 800c304:	bfc4      	itt	gt
 800c306:	1a9b      	subgt	r3, r3, r2
 800c308:	18ed      	addgt	r5, r5, r3
 800c30a:	2600      	movs	r6, #0
 800c30c:	341a      	adds	r4, #26
 800c30e:	42b5      	cmp	r5, r6
 800c310:	d11a      	bne.n	800c348 <_printf_common+0xc8>
 800c312:	2000      	movs	r0, #0
 800c314:	e008      	b.n	800c328 <_printf_common+0xa8>
 800c316:	2301      	movs	r3, #1
 800c318:	4652      	mov	r2, sl
 800c31a:	4649      	mov	r1, r9
 800c31c:	4638      	mov	r0, r7
 800c31e:	47c0      	blx	r8
 800c320:	3001      	adds	r0, #1
 800c322:	d103      	bne.n	800c32c <_printf_common+0xac>
 800c324:	f04f 30ff 	mov.w	r0, #4294967295
 800c328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c32c:	3501      	adds	r5, #1
 800c32e:	e7c6      	b.n	800c2be <_printf_common+0x3e>
 800c330:	18e1      	adds	r1, r4, r3
 800c332:	1c5a      	adds	r2, r3, #1
 800c334:	2030      	movs	r0, #48	; 0x30
 800c336:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c33a:	4422      	add	r2, r4
 800c33c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c340:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c344:	3302      	adds	r3, #2
 800c346:	e7c7      	b.n	800c2d8 <_printf_common+0x58>
 800c348:	2301      	movs	r3, #1
 800c34a:	4622      	mov	r2, r4
 800c34c:	4649      	mov	r1, r9
 800c34e:	4638      	mov	r0, r7
 800c350:	47c0      	blx	r8
 800c352:	3001      	adds	r0, #1
 800c354:	d0e6      	beq.n	800c324 <_printf_common+0xa4>
 800c356:	3601      	adds	r6, #1
 800c358:	e7d9      	b.n	800c30e <_printf_common+0x8e>
	...

0800c35c <_printf_i>:
 800c35c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c360:	7e0f      	ldrb	r7, [r1, #24]
 800c362:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c364:	2f78      	cmp	r7, #120	; 0x78
 800c366:	4691      	mov	r9, r2
 800c368:	4680      	mov	r8, r0
 800c36a:	460c      	mov	r4, r1
 800c36c:	469a      	mov	sl, r3
 800c36e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c372:	d807      	bhi.n	800c384 <_printf_i+0x28>
 800c374:	2f62      	cmp	r7, #98	; 0x62
 800c376:	d80a      	bhi.n	800c38e <_printf_i+0x32>
 800c378:	2f00      	cmp	r7, #0
 800c37a:	f000 80d8 	beq.w	800c52e <_printf_i+0x1d2>
 800c37e:	2f58      	cmp	r7, #88	; 0x58
 800c380:	f000 80a3 	beq.w	800c4ca <_printf_i+0x16e>
 800c384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c38c:	e03a      	b.n	800c404 <_printf_i+0xa8>
 800c38e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c392:	2b15      	cmp	r3, #21
 800c394:	d8f6      	bhi.n	800c384 <_printf_i+0x28>
 800c396:	a101      	add	r1, pc, #4	; (adr r1, 800c39c <_printf_i+0x40>)
 800c398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c39c:	0800c3f5 	.word	0x0800c3f5
 800c3a0:	0800c409 	.word	0x0800c409
 800c3a4:	0800c385 	.word	0x0800c385
 800c3a8:	0800c385 	.word	0x0800c385
 800c3ac:	0800c385 	.word	0x0800c385
 800c3b0:	0800c385 	.word	0x0800c385
 800c3b4:	0800c409 	.word	0x0800c409
 800c3b8:	0800c385 	.word	0x0800c385
 800c3bc:	0800c385 	.word	0x0800c385
 800c3c0:	0800c385 	.word	0x0800c385
 800c3c4:	0800c385 	.word	0x0800c385
 800c3c8:	0800c515 	.word	0x0800c515
 800c3cc:	0800c439 	.word	0x0800c439
 800c3d0:	0800c4f7 	.word	0x0800c4f7
 800c3d4:	0800c385 	.word	0x0800c385
 800c3d8:	0800c385 	.word	0x0800c385
 800c3dc:	0800c537 	.word	0x0800c537
 800c3e0:	0800c385 	.word	0x0800c385
 800c3e4:	0800c439 	.word	0x0800c439
 800c3e8:	0800c385 	.word	0x0800c385
 800c3ec:	0800c385 	.word	0x0800c385
 800c3f0:	0800c4ff 	.word	0x0800c4ff
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	1d1a      	adds	r2, r3, #4
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	602a      	str	r2, [r5, #0]
 800c3fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c404:	2301      	movs	r3, #1
 800c406:	e0a3      	b.n	800c550 <_printf_i+0x1f4>
 800c408:	6820      	ldr	r0, [r4, #0]
 800c40a:	6829      	ldr	r1, [r5, #0]
 800c40c:	0606      	lsls	r6, r0, #24
 800c40e:	f101 0304 	add.w	r3, r1, #4
 800c412:	d50a      	bpl.n	800c42a <_printf_i+0xce>
 800c414:	680e      	ldr	r6, [r1, #0]
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	2e00      	cmp	r6, #0
 800c41a:	da03      	bge.n	800c424 <_printf_i+0xc8>
 800c41c:	232d      	movs	r3, #45	; 0x2d
 800c41e:	4276      	negs	r6, r6
 800c420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c424:	485e      	ldr	r0, [pc, #376]	; (800c5a0 <_printf_i+0x244>)
 800c426:	230a      	movs	r3, #10
 800c428:	e019      	b.n	800c45e <_printf_i+0x102>
 800c42a:	680e      	ldr	r6, [r1, #0]
 800c42c:	602b      	str	r3, [r5, #0]
 800c42e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c432:	bf18      	it	ne
 800c434:	b236      	sxthne	r6, r6
 800c436:	e7ef      	b.n	800c418 <_printf_i+0xbc>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	6820      	ldr	r0, [r4, #0]
 800c43c:	1d19      	adds	r1, r3, #4
 800c43e:	6029      	str	r1, [r5, #0]
 800c440:	0601      	lsls	r1, r0, #24
 800c442:	d501      	bpl.n	800c448 <_printf_i+0xec>
 800c444:	681e      	ldr	r6, [r3, #0]
 800c446:	e002      	b.n	800c44e <_printf_i+0xf2>
 800c448:	0646      	lsls	r6, r0, #25
 800c44a:	d5fb      	bpl.n	800c444 <_printf_i+0xe8>
 800c44c:	881e      	ldrh	r6, [r3, #0]
 800c44e:	4854      	ldr	r0, [pc, #336]	; (800c5a0 <_printf_i+0x244>)
 800c450:	2f6f      	cmp	r7, #111	; 0x6f
 800c452:	bf0c      	ite	eq
 800c454:	2308      	moveq	r3, #8
 800c456:	230a      	movne	r3, #10
 800c458:	2100      	movs	r1, #0
 800c45a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c45e:	6865      	ldr	r5, [r4, #4]
 800c460:	60a5      	str	r5, [r4, #8]
 800c462:	2d00      	cmp	r5, #0
 800c464:	bfa2      	ittt	ge
 800c466:	6821      	ldrge	r1, [r4, #0]
 800c468:	f021 0104 	bicge.w	r1, r1, #4
 800c46c:	6021      	strge	r1, [r4, #0]
 800c46e:	b90e      	cbnz	r6, 800c474 <_printf_i+0x118>
 800c470:	2d00      	cmp	r5, #0
 800c472:	d04d      	beq.n	800c510 <_printf_i+0x1b4>
 800c474:	4615      	mov	r5, r2
 800c476:	fbb6 f1f3 	udiv	r1, r6, r3
 800c47a:	fb03 6711 	mls	r7, r3, r1, r6
 800c47e:	5dc7      	ldrb	r7, [r0, r7]
 800c480:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c484:	4637      	mov	r7, r6
 800c486:	42bb      	cmp	r3, r7
 800c488:	460e      	mov	r6, r1
 800c48a:	d9f4      	bls.n	800c476 <_printf_i+0x11a>
 800c48c:	2b08      	cmp	r3, #8
 800c48e:	d10b      	bne.n	800c4a8 <_printf_i+0x14c>
 800c490:	6823      	ldr	r3, [r4, #0]
 800c492:	07de      	lsls	r6, r3, #31
 800c494:	d508      	bpl.n	800c4a8 <_printf_i+0x14c>
 800c496:	6923      	ldr	r3, [r4, #16]
 800c498:	6861      	ldr	r1, [r4, #4]
 800c49a:	4299      	cmp	r1, r3
 800c49c:	bfde      	ittt	le
 800c49e:	2330      	movle	r3, #48	; 0x30
 800c4a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4a8:	1b52      	subs	r2, r2, r5
 800c4aa:	6122      	str	r2, [r4, #16]
 800c4ac:	f8cd a000 	str.w	sl, [sp]
 800c4b0:	464b      	mov	r3, r9
 800c4b2:	aa03      	add	r2, sp, #12
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	4640      	mov	r0, r8
 800c4b8:	f7ff fee2 	bl	800c280 <_printf_common>
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d14c      	bne.n	800c55a <_printf_i+0x1fe>
 800c4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c4:	b004      	add	sp, #16
 800c4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ca:	4835      	ldr	r0, [pc, #212]	; (800c5a0 <_printf_i+0x244>)
 800c4cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c4d0:	6829      	ldr	r1, [r5, #0]
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4d8:	6029      	str	r1, [r5, #0]
 800c4da:	061d      	lsls	r5, r3, #24
 800c4dc:	d514      	bpl.n	800c508 <_printf_i+0x1ac>
 800c4de:	07df      	lsls	r7, r3, #31
 800c4e0:	bf44      	itt	mi
 800c4e2:	f043 0320 	orrmi.w	r3, r3, #32
 800c4e6:	6023      	strmi	r3, [r4, #0]
 800c4e8:	b91e      	cbnz	r6, 800c4f2 <_printf_i+0x196>
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	f023 0320 	bic.w	r3, r3, #32
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	2310      	movs	r3, #16
 800c4f4:	e7b0      	b.n	800c458 <_printf_i+0xfc>
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	f043 0320 	orr.w	r3, r3, #32
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	2378      	movs	r3, #120	; 0x78
 800c500:	4828      	ldr	r0, [pc, #160]	; (800c5a4 <_printf_i+0x248>)
 800c502:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c506:	e7e3      	b.n	800c4d0 <_printf_i+0x174>
 800c508:	0659      	lsls	r1, r3, #25
 800c50a:	bf48      	it	mi
 800c50c:	b2b6      	uxthmi	r6, r6
 800c50e:	e7e6      	b.n	800c4de <_printf_i+0x182>
 800c510:	4615      	mov	r5, r2
 800c512:	e7bb      	b.n	800c48c <_printf_i+0x130>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	6826      	ldr	r6, [r4, #0]
 800c518:	6961      	ldr	r1, [r4, #20]
 800c51a:	1d18      	adds	r0, r3, #4
 800c51c:	6028      	str	r0, [r5, #0]
 800c51e:	0635      	lsls	r5, r6, #24
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	d501      	bpl.n	800c528 <_printf_i+0x1cc>
 800c524:	6019      	str	r1, [r3, #0]
 800c526:	e002      	b.n	800c52e <_printf_i+0x1d2>
 800c528:	0670      	lsls	r0, r6, #25
 800c52a:	d5fb      	bpl.n	800c524 <_printf_i+0x1c8>
 800c52c:	8019      	strh	r1, [r3, #0]
 800c52e:	2300      	movs	r3, #0
 800c530:	6123      	str	r3, [r4, #16]
 800c532:	4615      	mov	r5, r2
 800c534:	e7ba      	b.n	800c4ac <_printf_i+0x150>
 800c536:	682b      	ldr	r3, [r5, #0]
 800c538:	1d1a      	adds	r2, r3, #4
 800c53a:	602a      	str	r2, [r5, #0]
 800c53c:	681d      	ldr	r5, [r3, #0]
 800c53e:	6862      	ldr	r2, [r4, #4]
 800c540:	2100      	movs	r1, #0
 800c542:	4628      	mov	r0, r5
 800c544:	f7f3 fe5c 	bl	8000200 <memchr>
 800c548:	b108      	cbz	r0, 800c54e <_printf_i+0x1f2>
 800c54a:	1b40      	subs	r0, r0, r5
 800c54c:	6060      	str	r0, [r4, #4]
 800c54e:	6863      	ldr	r3, [r4, #4]
 800c550:	6123      	str	r3, [r4, #16]
 800c552:	2300      	movs	r3, #0
 800c554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c558:	e7a8      	b.n	800c4ac <_printf_i+0x150>
 800c55a:	6923      	ldr	r3, [r4, #16]
 800c55c:	462a      	mov	r2, r5
 800c55e:	4649      	mov	r1, r9
 800c560:	4640      	mov	r0, r8
 800c562:	47d0      	blx	sl
 800c564:	3001      	adds	r0, #1
 800c566:	d0ab      	beq.n	800c4c0 <_printf_i+0x164>
 800c568:	6823      	ldr	r3, [r4, #0]
 800c56a:	079b      	lsls	r3, r3, #30
 800c56c:	d413      	bmi.n	800c596 <_printf_i+0x23a>
 800c56e:	68e0      	ldr	r0, [r4, #12]
 800c570:	9b03      	ldr	r3, [sp, #12]
 800c572:	4298      	cmp	r0, r3
 800c574:	bfb8      	it	lt
 800c576:	4618      	movlt	r0, r3
 800c578:	e7a4      	b.n	800c4c4 <_printf_i+0x168>
 800c57a:	2301      	movs	r3, #1
 800c57c:	4632      	mov	r2, r6
 800c57e:	4649      	mov	r1, r9
 800c580:	4640      	mov	r0, r8
 800c582:	47d0      	blx	sl
 800c584:	3001      	adds	r0, #1
 800c586:	d09b      	beq.n	800c4c0 <_printf_i+0x164>
 800c588:	3501      	adds	r5, #1
 800c58a:	68e3      	ldr	r3, [r4, #12]
 800c58c:	9903      	ldr	r1, [sp, #12]
 800c58e:	1a5b      	subs	r3, r3, r1
 800c590:	42ab      	cmp	r3, r5
 800c592:	dcf2      	bgt.n	800c57a <_printf_i+0x21e>
 800c594:	e7eb      	b.n	800c56e <_printf_i+0x212>
 800c596:	2500      	movs	r5, #0
 800c598:	f104 0619 	add.w	r6, r4, #25
 800c59c:	e7f5      	b.n	800c58a <_printf_i+0x22e>
 800c59e:	bf00      	nop
 800c5a0:	0800d1ed 	.word	0x0800d1ed
 800c5a4:	0800d1fe 	.word	0x0800d1fe

0800c5a8 <memmove>:
 800c5a8:	4288      	cmp	r0, r1
 800c5aa:	b510      	push	{r4, lr}
 800c5ac:	eb01 0402 	add.w	r4, r1, r2
 800c5b0:	d902      	bls.n	800c5b8 <memmove+0x10>
 800c5b2:	4284      	cmp	r4, r0
 800c5b4:	4623      	mov	r3, r4
 800c5b6:	d807      	bhi.n	800c5c8 <memmove+0x20>
 800c5b8:	1e43      	subs	r3, r0, #1
 800c5ba:	42a1      	cmp	r1, r4
 800c5bc:	d008      	beq.n	800c5d0 <memmove+0x28>
 800c5be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5c6:	e7f8      	b.n	800c5ba <memmove+0x12>
 800c5c8:	4402      	add	r2, r0
 800c5ca:	4601      	mov	r1, r0
 800c5cc:	428a      	cmp	r2, r1
 800c5ce:	d100      	bne.n	800c5d2 <memmove+0x2a>
 800c5d0:	bd10      	pop	{r4, pc}
 800c5d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5da:	e7f7      	b.n	800c5cc <memmove+0x24>

0800c5dc <_free_r>:
 800c5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5de:	2900      	cmp	r1, #0
 800c5e0:	d044      	beq.n	800c66c <_free_r+0x90>
 800c5e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5e6:	9001      	str	r0, [sp, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f1a1 0404 	sub.w	r4, r1, #4
 800c5ee:	bfb8      	it	lt
 800c5f0:	18e4      	addlt	r4, r4, r3
 800c5f2:	f000 f913 	bl	800c81c <__malloc_lock>
 800c5f6:	4a1e      	ldr	r2, [pc, #120]	; (800c670 <_free_r+0x94>)
 800c5f8:	9801      	ldr	r0, [sp, #4]
 800c5fa:	6813      	ldr	r3, [r2, #0]
 800c5fc:	b933      	cbnz	r3, 800c60c <_free_r+0x30>
 800c5fe:	6063      	str	r3, [r4, #4]
 800c600:	6014      	str	r4, [r2, #0]
 800c602:	b003      	add	sp, #12
 800c604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c608:	f000 b90e 	b.w	800c828 <__malloc_unlock>
 800c60c:	42a3      	cmp	r3, r4
 800c60e:	d908      	bls.n	800c622 <_free_r+0x46>
 800c610:	6825      	ldr	r5, [r4, #0]
 800c612:	1961      	adds	r1, r4, r5
 800c614:	428b      	cmp	r3, r1
 800c616:	bf01      	itttt	eq
 800c618:	6819      	ldreq	r1, [r3, #0]
 800c61a:	685b      	ldreq	r3, [r3, #4]
 800c61c:	1949      	addeq	r1, r1, r5
 800c61e:	6021      	streq	r1, [r4, #0]
 800c620:	e7ed      	b.n	800c5fe <_free_r+0x22>
 800c622:	461a      	mov	r2, r3
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	b10b      	cbz	r3, 800c62c <_free_r+0x50>
 800c628:	42a3      	cmp	r3, r4
 800c62a:	d9fa      	bls.n	800c622 <_free_r+0x46>
 800c62c:	6811      	ldr	r1, [r2, #0]
 800c62e:	1855      	adds	r5, r2, r1
 800c630:	42a5      	cmp	r5, r4
 800c632:	d10b      	bne.n	800c64c <_free_r+0x70>
 800c634:	6824      	ldr	r4, [r4, #0]
 800c636:	4421      	add	r1, r4
 800c638:	1854      	adds	r4, r2, r1
 800c63a:	42a3      	cmp	r3, r4
 800c63c:	6011      	str	r1, [r2, #0]
 800c63e:	d1e0      	bne.n	800c602 <_free_r+0x26>
 800c640:	681c      	ldr	r4, [r3, #0]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	6053      	str	r3, [r2, #4]
 800c646:	4421      	add	r1, r4
 800c648:	6011      	str	r1, [r2, #0]
 800c64a:	e7da      	b.n	800c602 <_free_r+0x26>
 800c64c:	d902      	bls.n	800c654 <_free_r+0x78>
 800c64e:	230c      	movs	r3, #12
 800c650:	6003      	str	r3, [r0, #0]
 800c652:	e7d6      	b.n	800c602 <_free_r+0x26>
 800c654:	6825      	ldr	r5, [r4, #0]
 800c656:	1961      	adds	r1, r4, r5
 800c658:	428b      	cmp	r3, r1
 800c65a:	bf04      	itt	eq
 800c65c:	6819      	ldreq	r1, [r3, #0]
 800c65e:	685b      	ldreq	r3, [r3, #4]
 800c660:	6063      	str	r3, [r4, #4]
 800c662:	bf04      	itt	eq
 800c664:	1949      	addeq	r1, r1, r5
 800c666:	6021      	streq	r1, [r4, #0]
 800c668:	6054      	str	r4, [r2, #4]
 800c66a:	e7ca      	b.n	800c602 <_free_r+0x26>
 800c66c:	b003      	add	sp, #12
 800c66e:	bd30      	pop	{r4, r5, pc}
 800c670:	20016cf0 	.word	0x20016cf0

0800c674 <sbrk_aligned>:
 800c674:	b570      	push	{r4, r5, r6, lr}
 800c676:	4e0e      	ldr	r6, [pc, #56]	; (800c6b0 <sbrk_aligned+0x3c>)
 800c678:	460c      	mov	r4, r1
 800c67a:	6831      	ldr	r1, [r6, #0]
 800c67c:	4605      	mov	r5, r0
 800c67e:	b911      	cbnz	r1, 800c686 <sbrk_aligned+0x12>
 800c680:	f000 f8bc 	bl	800c7fc <_sbrk_r>
 800c684:	6030      	str	r0, [r6, #0]
 800c686:	4621      	mov	r1, r4
 800c688:	4628      	mov	r0, r5
 800c68a:	f000 f8b7 	bl	800c7fc <_sbrk_r>
 800c68e:	1c43      	adds	r3, r0, #1
 800c690:	d00a      	beq.n	800c6a8 <sbrk_aligned+0x34>
 800c692:	1cc4      	adds	r4, r0, #3
 800c694:	f024 0403 	bic.w	r4, r4, #3
 800c698:	42a0      	cmp	r0, r4
 800c69a:	d007      	beq.n	800c6ac <sbrk_aligned+0x38>
 800c69c:	1a21      	subs	r1, r4, r0
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f000 f8ac 	bl	800c7fc <_sbrk_r>
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	d101      	bne.n	800c6ac <sbrk_aligned+0x38>
 800c6a8:	f04f 34ff 	mov.w	r4, #4294967295
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	bd70      	pop	{r4, r5, r6, pc}
 800c6b0:	20016cf4 	.word	0x20016cf4

0800c6b4 <_malloc_r>:
 800c6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6b8:	1ccd      	adds	r5, r1, #3
 800c6ba:	f025 0503 	bic.w	r5, r5, #3
 800c6be:	3508      	adds	r5, #8
 800c6c0:	2d0c      	cmp	r5, #12
 800c6c2:	bf38      	it	cc
 800c6c4:	250c      	movcc	r5, #12
 800c6c6:	2d00      	cmp	r5, #0
 800c6c8:	4607      	mov	r7, r0
 800c6ca:	db01      	blt.n	800c6d0 <_malloc_r+0x1c>
 800c6cc:	42a9      	cmp	r1, r5
 800c6ce:	d905      	bls.n	800c6dc <_malloc_r+0x28>
 800c6d0:	230c      	movs	r3, #12
 800c6d2:	603b      	str	r3, [r7, #0]
 800c6d4:	2600      	movs	r6, #0
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6dc:	4e2e      	ldr	r6, [pc, #184]	; (800c798 <_malloc_r+0xe4>)
 800c6de:	f000 f89d 	bl	800c81c <__malloc_lock>
 800c6e2:	6833      	ldr	r3, [r6, #0]
 800c6e4:	461c      	mov	r4, r3
 800c6e6:	bb34      	cbnz	r4, 800c736 <_malloc_r+0x82>
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	4638      	mov	r0, r7
 800c6ec:	f7ff ffc2 	bl	800c674 <sbrk_aligned>
 800c6f0:	1c43      	adds	r3, r0, #1
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	d14d      	bne.n	800c792 <_malloc_r+0xde>
 800c6f6:	6834      	ldr	r4, [r6, #0]
 800c6f8:	4626      	mov	r6, r4
 800c6fa:	2e00      	cmp	r6, #0
 800c6fc:	d140      	bne.n	800c780 <_malloc_r+0xcc>
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	4631      	mov	r1, r6
 800c702:	4638      	mov	r0, r7
 800c704:	eb04 0803 	add.w	r8, r4, r3
 800c708:	f000 f878 	bl	800c7fc <_sbrk_r>
 800c70c:	4580      	cmp	r8, r0
 800c70e:	d13a      	bne.n	800c786 <_malloc_r+0xd2>
 800c710:	6821      	ldr	r1, [r4, #0]
 800c712:	3503      	adds	r5, #3
 800c714:	1a6d      	subs	r5, r5, r1
 800c716:	f025 0503 	bic.w	r5, r5, #3
 800c71a:	3508      	adds	r5, #8
 800c71c:	2d0c      	cmp	r5, #12
 800c71e:	bf38      	it	cc
 800c720:	250c      	movcc	r5, #12
 800c722:	4629      	mov	r1, r5
 800c724:	4638      	mov	r0, r7
 800c726:	f7ff ffa5 	bl	800c674 <sbrk_aligned>
 800c72a:	3001      	adds	r0, #1
 800c72c:	d02b      	beq.n	800c786 <_malloc_r+0xd2>
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	442b      	add	r3, r5
 800c732:	6023      	str	r3, [r4, #0]
 800c734:	e00e      	b.n	800c754 <_malloc_r+0xa0>
 800c736:	6822      	ldr	r2, [r4, #0]
 800c738:	1b52      	subs	r2, r2, r5
 800c73a:	d41e      	bmi.n	800c77a <_malloc_r+0xc6>
 800c73c:	2a0b      	cmp	r2, #11
 800c73e:	d916      	bls.n	800c76e <_malloc_r+0xba>
 800c740:	1961      	adds	r1, r4, r5
 800c742:	42a3      	cmp	r3, r4
 800c744:	6025      	str	r5, [r4, #0]
 800c746:	bf18      	it	ne
 800c748:	6059      	strne	r1, [r3, #4]
 800c74a:	6863      	ldr	r3, [r4, #4]
 800c74c:	bf08      	it	eq
 800c74e:	6031      	streq	r1, [r6, #0]
 800c750:	5162      	str	r2, [r4, r5]
 800c752:	604b      	str	r3, [r1, #4]
 800c754:	4638      	mov	r0, r7
 800c756:	f104 060b 	add.w	r6, r4, #11
 800c75a:	f000 f865 	bl	800c828 <__malloc_unlock>
 800c75e:	f026 0607 	bic.w	r6, r6, #7
 800c762:	1d23      	adds	r3, r4, #4
 800c764:	1af2      	subs	r2, r6, r3
 800c766:	d0b6      	beq.n	800c6d6 <_malloc_r+0x22>
 800c768:	1b9b      	subs	r3, r3, r6
 800c76a:	50a3      	str	r3, [r4, r2]
 800c76c:	e7b3      	b.n	800c6d6 <_malloc_r+0x22>
 800c76e:	6862      	ldr	r2, [r4, #4]
 800c770:	42a3      	cmp	r3, r4
 800c772:	bf0c      	ite	eq
 800c774:	6032      	streq	r2, [r6, #0]
 800c776:	605a      	strne	r2, [r3, #4]
 800c778:	e7ec      	b.n	800c754 <_malloc_r+0xa0>
 800c77a:	4623      	mov	r3, r4
 800c77c:	6864      	ldr	r4, [r4, #4]
 800c77e:	e7b2      	b.n	800c6e6 <_malloc_r+0x32>
 800c780:	4634      	mov	r4, r6
 800c782:	6876      	ldr	r6, [r6, #4]
 800c784:	e7b9      	b.n	800c6fa <_malloc_r+0x46>
 800c786:	230c      	movs	r3, #12
 800c788:	603b      	str	r3, [r7, #0]
 800c78a:	4638      	mov	r0, r7
 800c78c:	f000 f84c 	bl	800c828 <__malloc_unlock>
 800c790:	e7a1      	b.n	800c6d6 <_malloc_r+0x22>
 800c792:	6025      	str	r5, [r4, #0]
 800c794:	e7de      	b.n	800c754 <_malloc_r+0xa0>
 800c796:	bf00      	nop
 800c798:	20016cf0 	.word	0x20016cf0

0800c79c <_realloc_r>:
 800c79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a0:	4680      	mov	r8, r0
 800c7a2:	4614      	mov	r4, r2
 800c7a4:	460e      	mov	r6, r1
 800c7a6:	b921      	cbnz	r1, 800c7b2 <_realloc_r+0x16>
 800c7a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	f7ff bf81 	b.w	800c6b4 <_malloc_r>
 800c7b2:	b92a      	cbnz	r2, 800c7c0 <_realloc_r+0x24>
 800c7b4:	f7ff ff12 	bl	800c5dc <_free_r>
 800c7b8:	4625      	mov	r5, r4
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c0:	f000 f838 	bl	800c834 <_malloc_usable_size_r>
 800c7c4:	4284      	cmp	r4, r0
 800c7c6:	4607      	mov	r7, r0
 800c7c8:	d802      	bhi.n	800c7d0 <_realloc_r+0x34>
 800c7ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7ce:	d812      	bhi.n	800c7f6 <_realloc_r+0x5a>
 800c7d0:	4621      	mov	r1, r4
 800c7d2:	4640      	mov	r0, r8
 800c7d4:	f7ff ff6e 	bl	800c6b4 <_malloc_r>
 800c7d8:	4605      	mov	r5, r0
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	d0ed      	beq.n	800c7ba <_realloc_r+0x1e>
 800c7de:	42bc      	cmp	r4, r7
 800c7e0:	4622      	mov	r2, r4
 800c7e2:	4631      	mov	r1, r6
 800c7e4:	bf28      	it	cs
 800c7e6:	463a      	movcs	r2, r7
 800c7e8:	f7ff fbb8 	bl	800bf5c <memcpy>
 800c7ec:	4631      	mov	r1, r6
 800c7ee:	4640      	mov	r0, r8
 800c7f0:	f7ff fef4 	bl	800c5dc <_free_r>
 800c7f4:	e7e1      	b.n	800c7ba <_realloc_r+0x1e>
 800c7f6:	4635      	mov	r5, r6
 800c7f8:	e7df      	b.n	800c7ba <_realloc_r+0x1e>
	...

0800c7fc <_sbrk_r>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	4d06      	ldr	r5, [pc, #24]	; (800c818 <_sbrk_r+0x1c>)
 800c800:	2300      	movs	r3, #0
 800c802:	4604      	mov	r4, r0
 800c804:	4608      	mov	r0, r1
 800c806:	602b      	str	r3, [r5, #0]
 800c808:	f7ff fac6 	bl	800bd98 <_sbrk>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	d102      	bne.n	800c816 <_sbrk_r+0x1a>
 800c810:	682b      	ldr	r3, [r5, #0]
 800c812:	b103      	cbz	r3, 800c816 <_sbrk_r+0x1a>
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	20016cf8 	.word	0x20016cf8

0800c81c <__malloc_lock>:
 800c81c:	4801      	ldr	r0, [pc, #4]	; (800c824 <__malloc_lock+0x8>)
 800c81e:	f000 b811 	b.w	800c844 <__retarget_lock_acquire_recursive>
 800c822:	bf00      	nop
 800c824:	20016cfc 	.word	0x20016cfc

0800c828 <__malloc_unlock>:
 800c828:	4801      	ldr	r0, [pc, #4]	; (800c830 <__malloc_unlock+0x8>)
 800c82a:	f000 b80c 	b.w	800c846 <__retarget_lock_release_recursive>
 800c82e:	bf00      	nop
 800c830:	20016cfc 	.word	0x20016cfc

0800c834 <_malloc_usable_size_r>:
 800c834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c838:	1f18      	subs	r0, r3, #4
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	bfbc      	itt	lt
 800c83e:	580b      	ldrlt	r3, [r1, r0]
 800c840:	18c0      	addlt	r0, r0, r3
 800c842:	4770      	bx	lr

0800c844 <__retarget_lock_acquire_recursive>:
 800c844:	4770      	bx	lr

0800c846 <__retarget_lock_release_recursive>:
 800c846:	4770      	bx	lr

0800c848 <_init>:
 800c848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c84a:	bf00      	nop
 800c84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c84e:	bc08      	pop	{r3}
 800c850:	469e      	mov	lr, r3
 800c852:	4770      	bx	lr

0800c854 <_fini>:
 800c854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c856:	bf00      	nop
 800c858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c85a:	bc08      	pop	{r3}
 800c85c:	469e      	mov	lr, r3
 800c85e:	4770      	bx	lr
