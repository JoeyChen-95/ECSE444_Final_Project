
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c098  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  0800c258  0800c258  0001c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc98  0800cc98  00040590  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc98  0800cc98  0001cc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cca0  0800cca0  00040590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cca0  0800cca0  0001cca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cca4  0800cca4  0001cca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00020590  20000000  0800cca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  20020590  0802d238  00040590  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20021a2c  0802d238  00041a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040590  2**0
                  CONTENTS, READONLY
 12 .debug_info   000295b0  00000000  00000000  000405c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f10  00000000  00000000  00069b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee8  00000000  00000000  0006ea80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce0  00000000  00000000  00070968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030557  00000000  00000000  00072648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025ac4  00000000  00000000  000a2b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012334a  00000000  00000000  000c8663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001eb9ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000861c  00000000  00000000  001eba74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000006c3  00000000  00000000  001f4090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20020590 	.word	0x20020590
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c240 	.word	0x0800c240

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20020594 	.word	0x20020594
 80001fc:	0800c240 	.word	0x0800c240

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f000 f925 	bl	8000e0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc0:	2005      	movs	r0, #5
 8000bc2:	f00a fc61 	bl	800b488 <HAL_InitTick>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	e001      	b.n	8000bd6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd2:	f00a f9e7 	bl	800afa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000004 	.word	0x20000004
 8000c04:	200205ac 	.word	0x200205ac

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200205ac 	.word	0x200205ac

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff ffee 	bl	8000c08 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c46:	bf00      	nop
 8000c48:	f7ff ffde 	bl	8000c08 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000004 	.word	0x20000004

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db12      	blt.n	8000d40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	490a      	ldr	r1, [pc, #40]	; (8000d4c <__NVIC_DisableIRQ+0x44>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	3320      	adds	r3, #32
 8000d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d34:	f3bf 8f4f 	dsb	sy
}
 8000d38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d3a:	f3bf 8f6f 	isb	sy
}
 8000d3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff28 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e32:	f7ff ff3d 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000e36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	6978      	ldr	r0, [r7, #20]
 8000e3e:	f7ff ffb1 	bl	8000da4 <NVIC_EncodePriority>
 8000e42:	4602      	mov	r2, r0
 8000e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff80 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff30 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff40 	bl	8000d08 <__NVIC_DisableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e014      	b.n	8000ecc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	791b      	ldrb	r3, [r3, #4]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d105      	bne.n	8000eb8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f00a f89e 	bl	800aff4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2202      	movs	r2, #2
 8000ebc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	795b      	ldrb	r3, [r3, #5]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d101      	bne.n	8000ef2 <HAL_DAC_Start_DMA+0x1e>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e0ab      	b.n	800104a <HAL_DAC_Start_DMA+0x176>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2202      	movs	r2, #2
 8000efc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d12f      	bne.n	8000f64 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	4a52      	ldr	r2, [pc, #328]	; (8001054 <HAL_DAC_Start_DMA+0x180>)
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	4a51      	ldr	r2, [pc, #324]	; (8001058 <HAL_DAC_Start_DMA+0x184>)
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4a50      	ldr	r2, [pc, #320]	; (800105c <HAL_DAC_Start_DMA+0x188>)
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d013      	beq.n	8000f5a <HAL_DAC_Start_DMA+0x86>
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d845      	bhi.n	8000fc4 <HAL_DAC_Start_DMA+0xf0>
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_DAC_Start_DMA+0x72>
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d005      	beq.n	8000f50 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000f44:	e03e      	b.n	8000fc4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	613b      	str	r3, [r7, #16]
        break;
 8000f4e:	e03c      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	330c      	adds	r3, #12
 8000f56:	613b      	str	r3, [r7, #16]
        break;
 8000f58:	e037      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3310      	adds	r3, #16
 8000f60:	613b      	str	r3, [r7, #16]
        break;
 8000f62:	e032      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a3d      	ldr	r2, [pc, #244]	; (8001060 <HAL_DAC_Start_DMA+0x18c>)
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	4a3c      	ldr	r2, [pc, #240]	; (8001064 <HAL_DAC_Start_DMA+0x190>)
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	4a3b      	ldr	r2, [pc, #236]	; (8001068 <HAL_DAC_Start_DMA+0x194>)
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f8a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d013      	beq.n	8000fba <HAL_DAC_Start_DMA+0xe6>
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d817      	bhi.n	8000fc8 <HAL_DAC_Start_DMA+0xf4>
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_DAC_Start_DMA+0xd2>
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d005      	beq.n	8000fb0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000fa4:	e010      	b.n	8000fc8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3314      	adds	r3, #20
 8000fac:	613b      	str	r3, [r7, #16]
        break;
 8000fae:	e00c      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3318      	adds	r3, #24
 8000fb6:	613b      	str	r3, [r7, #16]
        break;
 8000fb8:	e007      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	331c      	adds	r3, #28
 8000fc0:	613b      	str	r3, [r7, #16]
        break;
 8000fc2:	e002      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        break;
 8000fc4:	bf00      	nop
 8000fc6:	e000      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        break;
 8000fc8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d111      	bne.n	8000ff4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fde:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6898      	ldr	r0, [r3, #8]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	f000 fb6f 	bl	80016cc <HAL_DMA_Start_IT>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	e010      	b.n	8001016 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001002:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	68d8      	ldr	r0, [r3, #12]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	f000 fb5d 	bl	80016cc <HAL_DMA_Start_IT>
 8001012:	4603      	mov	r3, r0
 8001014:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10c      	bne.n	800103c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	2201      	movs	r2, #1
 8001030:	409a      	lsls	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e005      	b.n	8001048 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	f043 0204 	orr.w	r2, r3, #4
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001048:	7dfb      	ldrb	r3, [r7, #23]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	08001455 	.word	0x08001455
 8001058:	08001477 	.word	0x08001477
 800105c:	08001493 	.word	0x08001493
 8001060:	08001511 	.word	0x08001511
 8001064:	08001533 	.word	0x08001533
 8001068:	0800154f 	.word	0x0800154f

0800106c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6819      	ldr	r1, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	400a      	ands	r2, r1
 8001092:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6819      	ldr	r1, [r3, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	2201      	movs	r2, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10d      	bne.n	80010d2 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fb81 	bl	80017c2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e00c      	b.n	80010ec <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fb73 	bl	80017c2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80010ea:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800110c:	d120      	bne.n	8001150 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800111c:	d118      	bne.n	8001150 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2204      	movs	r2, #4
 8001122:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001138:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001148:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f837 	bl	80011be <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800115a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800115e:	d120      	bne.n	80011a2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800116a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800116e:	d118      	bne.n	80011a2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2204      	movs	r2, #4
 8001174:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	f043 0202 	orr.w	r2, r3, #2
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800118a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800119a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f9ad 	bl	80014fc <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	795b      	ldrb	r3, [r3, #5]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_DAC_ConfigChannel+0x1c>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e12a      	b.n	8001446 <HAL_DAC_ConfigChannel+0x272>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2201      	movs	r2, #1
 80011f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2202      	movs	r2, #2
 80011fa:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b04      	cmp	r3, #4
 8001202:	d174      	bne.n	80012ee <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001204:	f7ff fd00 	bl	8000c08 <HAL_GetTick>
 8001208:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d134      	bne.n	800127a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001210:	e011      	b.n	8001236 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001212:	f7ff fcf9 	bl	8000c08 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d90a      	bls.n	8001236 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	f043 0208 	orr.w	r2, r3, #8
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2203      	movs	r2, #3
 8001230:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e107      	b.n	8001446 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1e6      	bne.n	8001212 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff fceb 	bl	8000c20 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	69d2      	ldr	r2, [r2, #28]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
 8001254:	e01e      	b.n	8001294 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001256:	f7ff fcd7 	bl	8000c08 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d90a      	bls.n	800127a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	f043 0208 	orr.w	r2, r3, #8
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2203      	movs	r2, #3
 8001274:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e0e5      	b.n	8001446 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001280:	2b00      	cmp	r3, #0
 8001282:	dbe8      	blt.n	8001256 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff fccb 	bl	8000c20 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	69d2      	ldr	r2, [r2, #28]
 8001292:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	ea02 0103 	and.w	r1, r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	6a1a      	ldr	r2, [r3, #32]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	409a      	lsls	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	430a      	orrs	r2, r1
 80012c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	21ff      	movs	r1, #255	; 0xff
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	ea02 0103 	and.w	r1, r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	409a      	lsls	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d11d      	bne.n	8001332 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fc:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	221f      	movs	r2, #31
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	4013      	ands	r3, r2
 8001310:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	4313      	orrs	r3, r2
 8001328:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001338:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2207      	movs	r2, #7
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	4013      	ands	r3, r2
 800134c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	431a      	orrs	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	4313      	orrs	r3, r2
 8001370:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6819      	ldr	r1, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	400a      	ands	r2, r1
 8001396:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013d6:	d104      	bne.n	80013e2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	e018      	b.n	8001414 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d104      	bne.n	80013f4 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e00f      	b.n	8001414 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80013f4:	f004 f98a 	bl	800570c <HAL_RCC_GetHCLKFreq>
 80013f8:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_DAC_ConfigChannel+0x27c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d904      	bls.n	800140c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	e003      	b.n	8001414 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001412:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6819      	ldr	r1, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	22c0      	movs	r2, #192	; 0xc0
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	400a      	ands	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2201      	movs	r2, #1
 800143c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	04c4b400 	.word	0x04c4b400

08001454 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f008 fd00 	bl	8009e68 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2201      	movs	r2, #1
 800146c:	711a      	strb	r2, [r3, #4]
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f008 fce5 	bl	8009e54 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	f043 0204 	orr.w	r2, r3, #4
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f7ff fe7c 	bl	80011aa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2201      	movs	r2, #1
 80014b6:	711a      	strb	r2, [r3, #4]
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff ffce 	bl	80014c0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2201      	movs	r2, #1
 8001528:	711a      	strb	r2, [r3, #4]
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff ffc7 	bl	80014d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	f043 0204 	orr.w	r2, r3, #4
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff ffbd 	bl	80014e8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	711a      	strb	r2, [r3, #4]
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e08d      	b.n	80016aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_DMA_Init+0x138>)
 8001596:	429a      	cmp	r2, r3
 8001598:	d80f      	bhi.n	80015ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b45      	ldr	r3, [pc, #276]	; (80016b8 <HAL_DMA_Init+0x13c>)
 80015a2:	4413      	add	r3, r2
 80015a4:	4a45      	ldr	r2, [pc, #276]	; (80016bc <HAL_DMA_Init+0x140>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	009a      	lsls	r2, r3, #2
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a42      	ldr	r2, [pc, #264]	; (80016c0 <HAL_DMA_Init+0x144>)
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
 80015b8:	e00e      	b.n	80015d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <HAL_DMA_Init+0x148>)
 80015c2:	4413      	add	r3, r2
 80015c4:	4a3d      	ldr	r2, [pc, #244]	; (80016bc <HAL_DMA_Init+0x140>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	009a      	lsls	r2, r3, #2
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a3c      	ldr	r2, [pc, #240]	; (80016c8 <HAL_DMA_Init+0x14c>)
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fa80 	bl	8001b30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001638:	d102      	bne.n	8001640 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001654:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d010      	beq.n	8001680 <HAL_DMA_Init+0x104>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b04      	cmp	r3, #4
 8001664:	d80c      	bhi.n	8001680 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 faa0 	bl	8001bac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	e008      	b.n	8001692 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40020407 	.word	0x40020407
 80016b8:	bffdfff8 	.word	0xbffdfff8
 80016bc:	cccccccd 	.word	0xcccccccd
 80016c0:	40020000 	.word	0x40020000
 80016c4:	bffdfbf8 	.word	0xbffdfbf8
 80016c8:	40020400 	.word	0x40020400

080016cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_DMA_Start_IT+0x20>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e066      	b.n	80017ba <HAL_DMA_Start_IT+0xee>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d155      	bne.n	80017ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2202      	movs	r2, #2
 8001704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0201 	bic.w	r2, r2, #1
 800171c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f9c4 	bl	8001ab2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	2b00      	cmp	r3, #0
 8001730:	d008      	beq.n	8001744 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 020e 	orr.w	r2, r2, #14
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e00f      	b.n	8001764 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0204 	bic.w	r2, r2, #4
 8001752:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 020a 	orr.w	r2, r2, #10
 8001762:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001780:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001798:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0201 	orr.w	r2, r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e005      	b.n	80017b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017b4:	2302      	movs	r3, #2
 80017b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b085      	sub	sp, #20
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d008      	beq.n	80017ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2204      	movs	r2, #4
 80017de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e040      	b.n	800186e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 020e 	bic.w	r2, r2, #14
 80017fa:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800180a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	f003 021c 	and.w	r2, r3, #28
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f202 	lsl.w	r2, r1, r2
 800182e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001838:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00c      	beq.n	800185c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001850:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800185a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d005      	beq.n	800189e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2204      	movs	r2, #4
 8001896:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e047      	b.n	800192e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 020e 	bic.w	r2, r2, #14
 80018ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0201 	bic.w	r2, r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f003 021c 	and.w	r2, r3, #28
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	2101      	movs	r1, #1
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018ea:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00c      	beq.n	800190e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001902:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800190c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	4798      	blx	r3
    }
  }
  return status;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	f003 031c 	and.w	r3, r3, #28
 8001958:	2204      	movs	r2, #4
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d026      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x7a>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d021      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	2b00      	cmp	r3, #0
 800197a:	d107      	bne.n	800198c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0204 	bic.w	r2, r2, #4
 800198a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	f003 021c 	and.w	r2, r3, #28
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	2104      	movs	r1, #4
 800199a:	fa01 f202 	lsl.w	r2, r1, r2
 800199e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d071      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80019b0:	e06c      	b.n	8001a8c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f003 031c 	and.w	r3, r3, #28
 80019ba:	2202      	movs	r2, #2
 80019bc:	409a      	lsls	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d02e      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xec>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d029      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0320 	and.w	r3, r3, #32
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10b      	bne.n	80019f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 020a 	bic.w	r2, r2, #10
 80019ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f003 021c 	and.w	r2, r3, #28
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	2102      	movs	r1, #2
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d038      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a22:	e033      	b.n	8001a8c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f003 031c 	and.w	r3, r3, #28
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d02a      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x156>
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d025      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 020e 	bic.w	r2, r2, #14
 8001a50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f003 021c 	and.w	r2, r3, #28
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
}
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aa4:	b2db      	uxtb	r3, r3
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ac8:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ada:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f003 021c 	and.w	r2, r3, #28
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b10      	cmp	r3, #16
 8001afe:	d108      	bne.n	8001b12 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b10:	e007      	b.n	8001b22 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	60da      	str	r2, [r3, #12]
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d80a      	bhi.n	8001b5a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b50:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6493      	str	r3, [r2, #72]	; 0x48
 8001b58:	e007      	b.n	8001b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	009a      	lsls	r2, r3, #2
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b64:	4413      	add	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	3b08      	subs	r3, #8
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b80:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	2201      	movs	r2, #1
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40020407 	.word	0x40020407
 8001ba0:	4002081c 	.word	0x4002081c
 8001ba4:	cccccccd 	.word	0xcccccccd
 8001ba8:	40020880 	.word	0x40020880

08001bac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bce:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2201      	movs	r2, #1
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	1000823f 	.word	0x1000823f
 8001bf0:	40020940 	.word	0x40020940

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	e166      	b.n	8001ed2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8158 	beq.w	8001ecc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d005      	beq.n	8001c34 <HAL_GPIO_Init+0x40>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d130      	bne.n	8001c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f003 0201 	and.w	r2, r3, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d017      	beq.n	8001cd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d123      	bne.n	8001d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	6939      	ldr	r1, [r7, #16]
 8001d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0203 	and.w	r2, r3, #3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80b2 	beq.w	8001ecc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d68:	4b61      	ldr	r3, [pc, #388]	; (8001ef0 <HAL_GPIO_Init+0x2fc>)
 8001d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6c:	4a60      	ldr	r2, [pc, #384]	; (8001ef0 <HAL_GPIO_Init+0x2fc>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6613      	str	r3, [r2, #96]	; 0x60
 8001d74:	4b5e      	ldr	r3, [pc, #376]	; (8001ef0 <HAL_GPIO_Init+0x2fc>)
 8001d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d80:	4a5c      	ldr	r2, [pc, #368]	; (8001ef4 <HAL_GPIO_Init+0x300>)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001daa:	d02b      	beq.n	8001e04 <HAL_GPIO_Init+0x210>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a52      	ldr	r2, [pc, #328]	; (8001ef8 <HAL_GPIO_Init+0x304>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d025      	beq.n	8001e00 <HAL_GPIO_Init+0x20c>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a51      	ldr	r2, [pc, #324]	; (8001efc <HAL_GPIO_Init+0x308>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d01f      	beq.n	8001dfc <HAL_GPIO_Init+0x208>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a50      	ldr	r2, [pc, #320]	; (8001f00 <HAL_GPIO_Init+0x30c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d019      	beq.n	8001df8 <HAL_GPIO_Init+0x204>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a4f      	ldr	r2, [pc, #316]	; (8001f04 <HAL_GPIO_Init+0x310>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_GPIO_Init+0x200>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4e      	ldr	r2, [pc, #312]	; (8001f08 <HAL_GPIO_Init+0x314>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00d      	beq.n	8001df0 <HAL_GPIO_Init+0x1fc>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a4d      	ldr	r2, [pc, #308]	; (8001f0c <HAL_GPIO_Init+0x318>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d007      	beq.n	8001dec <HAL_GPIO_Init+0x1f8>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <HAL_GPIO_Init+0x31c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d101      	bne.n	8001de8 <HAL_GPIO_Init+0x1f4>
 8001de4:	2307      	movs	r3, #7
 8001de6:	e00e      	b.n	8001e06 <HAL_GPIO_Init+0x212>
 8001de8:	2308      	movs	r3, #8
 8001dea:	e00c      	b.n	8001e06 <HAL_GPIO_Init+0x212>
 8001dec:	2306      	movs	r3, #6
 8001dee:	e00a      	b.n	8001e06 <HAL_GPIO_Init+0x212>
 8001df0:	2305      	movs	r3, #5
 8001df2:	e008      	b.n	8001e06 <HAL_GPIO_Init+0x212>
 8001df4:	2304      	movs	r3, #4
 8001df6:	e006      	b.n	8001e06 <HAL_GPIO_Init+0x212>
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e004      	b.n	8001e06 <HAL_GPIO_Init+0x212>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e002      	b.n	8001e06 <HAL_GPIO_Init+0x212>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_GPIO_Init+0x212>
 8001e04:	2300      	movs	r3, #0
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	f002 0203 	and.w	r2, r2, #3
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	4093      	lsls	r3, r2
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e16:	4937      	ldr	r1, [pc, #220]	; (8001ef4 <HAL_GPIO_Init+0x300>)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e24:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e48:	4a32      	ldr	r2, [pc, #200]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e72:	4a28      	ldr	r2, [pc, #160]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ec6:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f47f ae91 	bne.w	8001c04 <HAL_GPIO_Init+0x10>
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	48000400 	.word	0x48000400
 8001efc:	48000800 	.word	0x48000800
 8001f00:	48000c00 	.word	0x48000c00
 8001f04:	48001000 	.word	0x48001000
 8001f08:	48001400 	.word	0x48001400
 8001f0c:	48001800 	.word	0x48001800
 8001f10:	48001c00 	.word	0x48001c00
 8001f14:	40010400 	.word	0x40010400

08001f18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f26:	e0c9      	b.n	80020bc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80bc 	beq.w	80020b6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001f3e:	4a66      	ldr	r2, [pc, #408]	; (80020d8 <HAL_GPIO_DeInit+0x1c0>)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f66:	d02b      	beq.n	8001fc0 <HAL_GPIO_DeInit+0xa8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a5c      	ldr	r2, [pc, #368]	; (80020dc <HAL_GPIO_DeInit+0x1c4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d025      	beq.n	8001fbc <HAL_GPIO_DeInit+0xa4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a5b      	ldr	r2, [pc, #364]	; (80020e0 <HAL_GPIO_DeInit+0x1c8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d01f      	beq.n	8001fb8 <HAL_GPIO_DeInit+0xa0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a5a      	ldr	r2, [pc, #360]	; (80020e4 <HAL_GPIO_DeInit+0x1cc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d019      	beq.n	8001fb4 <HAL_GPIO_DeInit+0x9c>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a59      	ldr	r2, [pc, #356]	; (80020e8 <HAL_GPIO_DeInit+0x1d0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <HAL_GPIO_DeInit+0x98>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a58      	ldr	r2, [pc, #352]	; (80020ec <HAL_GPIO_DeInit+0x1d4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00d      	beq.n	8001fac <HAL_GPIO_DeInit+0x94>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a57      	ldr	r2, [pc, #348]	; (80020f0 <HAL_GPIO_DeInit+0x1d8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d007      	beq.n	8001fa8 <HAL_GPIO_DeInit+0x90>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a56      	ldr	r2, [pc, #344]	; (80020f4 <HAL_GPIO_DeInit+0x1dc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_GPIO_DeInit+0x8c>
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	e00e      	b.n	8001fc2 <HAL_GPIO_DeInit+0xaa>
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	e00c      	b.n	8001fc2 <HAL_GPIO_DeInit+0xaa>
 8001fa8:	2306      	movs	r3, #6
 8001faa:	e00a      	b.n	8001fc2 <HAL_GPIO_DeInit+0xaa>
 8001fac:	2305      	movs	r3, #5
 8001fae:	e008      	b.n	8001fc2 <HAL_GPIO_DeInit+0xaa>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e006      	b.n	8001fc2 <HAL_GPIO_DeInit+0xaa>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e004      	b.n	8001fc2 <HAL_GPIO_DeInit+0xaa>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <HAL_GPIO_DeInit+0xaa>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_GPIO_DeInit+0xaa>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	4093      	lsls	r3, r2
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d132      	bne.n	8002038 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001fd2:	4b49      	ldr	r3, [pc, #292]	; (80020f8 <HAL_GPIO_DeInit+0x1e0>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4947      	ldr	r1, [pc, #284]	; (80020f8 <HAL_GPIO_DeInit+0x1e0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001fe0:	4b45      	ldr	r3, [pc, #276]	; (80020f8 <HAL_GPIO_DeInit+0x1e0>)
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	4943      	ldr	r1, [pc, #268]	; (80020f8 <HAL_GPIO_DeInit+0x1e0>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001fee:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <HAL_GPIO_DeInit+0x1e0>)
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4940      	ldr	r1, [pc, #256]	; (80020f8 <HAL_GPIO_DeInit+0x1e0>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001ffc:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <HAL_GPIO_DeInit+0x1e0>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	493c      	ldr	r1, [pc, #240]	; (80020f8 <HAL_GPIO_DeInit+0x1e0>)
 8002006:	4013      	ands	r3, r2
 8002008:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	220f      	movs	r2, #15
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800201a:	4a2f      	ldr	r2, [pc, #188]	; (80020d8 <HAL_GPIO_DeInit+0x1c0>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43da      	mvns	r2, r3
 800202a:	482b      	ldr	r0, [pc, #172]	; (80020d8 <HAL_GPIO_DeInit+0x1c0>)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	400a      	ands	r2, r1
 8002032:	3302      	adds	r3, #2
 8002034:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2103      	movs	r1, #3
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	08da      	lsrs	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3208      	adds	r2, #8
 8002054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	08d2      	lsrs	r2, r2, #3
 800206c:	4019      	ands	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2103      	movs	r1, #3
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2101      	movs	r1, #1
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	401a      	ands	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2103      	movs	r1, #3
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f47f af2f 	bne.w	8001f28 <HAL_GPIO_DeInit+0x10>
  }
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	40010000 	.word	0x40010000
 80020dc:	48000400 	.word	0x48000400
 80020e0:	48000800 	.word	0x48000800
 80020e4:	48000c00 	.word	0x48000c00
 80020e8:	48001000 	.word	0x48001000
 80020ec:	48001400 	.word	0x48001400
 80020f0:	48001800 	.word	0x48001800
 80020f4:	48001c00 	.word	0x48001c00
 80020f8:	40010400 	.word	0x40010400

080020fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
 8002108:	4613      	mov	r3, r2
 800210a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800210c:	787b      	ldrb	r3, [r7, #1]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002118:	e002      	b.n	8002120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	041a      	lsls	r2, r3, #16
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	43d9      	mvns	r1, r3
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	400b      	ands	r3, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	4618      	mov	r0, r3
 8002180:	f007 f964 	bl	800944c <HAL_GPIO_EXTI_Callback>
  }
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e081      	b.n	80022a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f008 ffbc 	bl	800b134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	; 0x24
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d107      	bne.n	800220a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	e006      	b.n	8002218 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002216:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d104      	bne.n	800222a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002228:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800223c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800224c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69d9      	ldr	r1, [r3, #28]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e021      	b.n	8002304 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	; 0x24
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f008 ff99 	bl	800b210 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	4608      	mov	r0, r1
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4603      	mov	r3, r0
 800231c:	817b      	strh	r3, [r7, #10]
 800231e:	460b      	mov	r3, r1
 8002320:	813b      	strh	r3, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	f040 80f9 	bne.w	8002526 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_I2C_Mem_Write+0x34>
 800233a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0ed      	b.n	8002528 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_I2C_Mem_Write+0x4e>
 8002356:	2302      	movs	r3, #2
 8002358:	e0e6      	b.n	8002528 <HAL_I2C_Mem_Write+0x21c>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002362:	f7fe fc51 	bl	8000c08 <HAL_GetTick>
 8002366:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2319      	movs	r3, #25
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 ffd8 	bl	800332a <I2C_WaitOnFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0d1      	b.n	8002528 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2221      	movs	r2, #33	; 0x21
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2240      	movs	r2, #64	; 0x40
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ac:	88f8      	ldrh	r0, [r7, #6]
 80023ae:	893a      	ldrh	r2, [r7, #8]
 80023b0:	8979      	ldrh	r1, [r7, #10]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	4603      	mov	r3, r0
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 fb91 	bl	8002ae4 <I2C_RequestMemoryWrite>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0a9      	b.n	8002528 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2bff      	cmp	r3, #255	; 0xff
 80023dc:	d90e      	bls.n	80023fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	22ff      	movs	r2, #255	; 0xff
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	2300      	movs	r3, #0
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f001 f941 	bl	800367c <I2C_TransferConfig>
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	b2da      	uxtb	r2, r3
 800240c:	8979      	ldrh	r1, [r7, #10]
 800240e:	2300      	movs	r3, #0
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f001 f930 	bl	800367c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 ffc2 	bl	80033aa <I2C_WaitOnTXISFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e07b      	b.n	8002528 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	781a      	ldrb	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d034      	beq.n	80024d4 <HAL_I2C_Mem_Write+0x1c8>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	d130      	bne.n	80024d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	2200      	movs	r2, #0
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 ff54 	bl	800332a <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e04d      	b.n	8002528 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	2bff      	cmp	r3, #255	; 0xff
 8002494:	d90e      	bls.n	80024b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	22ff      	movs	r2, #255	; 0xff
 800249a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	8979      	ldrh	r1, [r7, #10]
 80024a4:	2300      	movs	r3, #0
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f001 f8e5 	bl	800367c <I2C_TransferConfig>
 80024b2:	e00f      	b.n	80024d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	8979      	ldrh	r1, [r7, #10]
 80024c6:	2300      	movs	r3, #0
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f001 f8d4 	bl	800367c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d19e      	bne.n	800241c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 ffa1 	bl	800342a <I2C_WaitOnSTOPFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e01a      	b.n	8002528 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2220      	movs	r2, #32
 80024f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_I2C_Mem_Write+0x224>)
 8002506:	400b      	ands	r3, r1
 8002508:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002526:	2302      	movs	r3, #2
  }
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	fe00e800 	.word	0xfe00e800

08002534 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	461a      	mov	r2, r3
 8002542:	4603      	mov	r3, r0
 8002544:	817b      	strh	r3, [r7, #10]
 8002546:	460b      	mov	r3, r1
 8002548:	813b      	strh	r3, [r7, #8]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b20      	cmp	r3, #32
 8002558:	f040 80fd 	bne.w	8002756 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_I2C_Mem_Read+0x34>
 8002562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800256e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0f1      	b.n	8002758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_I2C_Mem_Read+0x4e>
 800257e:	2302      	movs	r3, #2
 8002580:	e0ea      	b.n	8002758 <HAL_I2C_Mem_Read+0x224>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800258a:	f7fe fb3d 	bl	8000c08 <HAL_GetTick>
 800258e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2319      	movs	r3, #25
 8002596:	2201      	movs	r2, #1
 8002598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fec4 	bl	800332a <I2C_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0d5      	b.n	8002758 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2222      	movs	r2, #34	; 0x22
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2240      	movs	r2, #64	; 0x40
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a3a      	ldr	r2, [r7, #32]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025d4:	88f8      	ldrh	r0, [r7, #6]
 80025d6:	893a      	ldrh	r2, [r7, #8]
 80025d8:	8979      	ldrh	r1, [r7, #10]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4603      	mov	r3, r0
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fad1 	bl	8002b8c <I2C_RequestMemoryRead>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0ad      	b.n	8002758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	2bff      	cmp	r3, #255	; 0xff
 8002604:	d90e      	bls.n	8002624 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	22ff      	movs	r2, #255	; 0xff
 800260a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	b2da      	uxtb	r2, r3
 8002612:	8979      	ldrh	r1, [r7, #10]
 8002614:	4b52      	ldr	r3, [pc, #328]	; (8002760 <HAL_I2C_Mem_Read+0x22c>)
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f001 f82d 	bl	800367c <I2C_TransferConfig>
 8002622:	e00f      	b.n	8002644 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	b2da      	uxtb	r2, r3
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <HAL_I2C_Mem_Read+0x22c>)
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f001 f81c 	bl	800367c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	2200      	movs	r2, #0
 800264c:	2104      	movs	r1, #4
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fe6b 	bl	800332a <I2C_WaitOnFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e07c      	b.n	8002758 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d034      	beq.n	8002704 <HAL_I2C_Mem_Read+0x1d0>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d130      	bne.n	8002704 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	2200      	movs	r2, #0
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fe3c 	bl	800332a <I2C_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e04d      	b.n	8002758 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2bff      	cmp	r3, #255	; 0xff
 80026c4:	d90e      	bls.n	80026e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	22ff      	movs	r2, #255	; 0xff
 80026ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	8979      	ldrh	r1, [r7, #10]
 80026d4:	2300      	movs	r3, #0
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 ffcd 	bl	800367c <I2C_TransferConfig>
 80026e2:	e00f      	b.n	8002704 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	8979      	ldrh	r1, [r7, #10]
 80026f6:	2300      	movs	r3, #0
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 ffbc 	bl	800367c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d19a      	bne.n	8002644 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fe89 	bl	800342a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e01a      	b.n	8002758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2220      	movs	r2, #32
 8002728:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_I2C_Mem_Read+0x230>)
 8002736:	400b      	ands	r3, r1
 8002738:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	80002400 	.word	0x80002400
 8002764:	fe00e800 	.word	0xfe00e800

08002768 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	68f9      	ldr	r1, [r7, #12]
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
  }
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d010      	beq.n	80027e2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	09db      	lsrs	r3, r3, #7
 80027c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	f043 0201 	orr.w	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	0a9b      	lsrs	r3, r3, #10
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d010      	beq.n	8002810 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	09db      	lsrs	r3, r3, #7
 80027f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f043 0208 	orr.w	r2, r3, #8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	0a5b      	lsrs	r3, r3, #9
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d010      	beq.n	800283e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	09db      	lsrs	r3, r3, #7
 8002820:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	f043 0202 	orr.w	r2, r3, #2
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800283c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 030b 	and.w	r3, r3, #11
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800284e:	68f9      	ldr	r1, [r7, #12]
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fc31 	bl	80030b8 <I2C_ITError>
  }
}
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	460b      	mov	r3, r1
 8002890:	70fb      	strb	r3, [r7, #3]
 8002892:	4613      	mov	r3, r2
 8002894:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <I2C_Slave_ISR_IT+0x24>
 80028fe:	2302      	movs	r3, #2
 8002900:	e0ec      	b.n	8002adc <I2C_Slave_ISR_IT+0x1fe>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002922:	6939      	ldr	r1, [r7, #16]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fa67 	bl	8002df8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d04d      	beq.n	80029d2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800293e:	2b00      	cmp	r3, #0
 8002940:	d047      	beq.n	80029d2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d128      	bne.n	800299e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b28      	cmp	r3, #40	; 0x28
 8002956:	d108      	bne.n	800296a <I2C_Slave_ISR_IT+0x8c>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800295e:	d104      	bne.n	800296a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002960:	6939      	ldr	r1, [r7, #16]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fb52 	bl	800300c <I2C_ITListenCplt>
 8002968:	e032      	b.n	80029d0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b29      	cmp	r3, #41	; 0x29
 8002974:	d10e      	bne.n	8002994 <I2C_Slave_ISR_IT+0xb6>
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800297c:	d00a      	beq.n	8002994 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2210      	movs	r2, #16
 8002984:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fc8d 	bl	80032a6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f9d5 	bl	8002d3c <I2C_ITSlaveSeqCplt>
 8002992:	e01d      	b.n	80029d0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2210      	movs	r2, #16
 800299a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800299c:	e096      	b.n	8002acc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2210      	movs	r2, #16
 80029a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f043 0204 	orr.w	r2, r3, #4
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <I2C_Slave_ISR_IT+0xe4>
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029be:	f040 8085 	bne.w	8002acc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	4619      	mov	r1, r3
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fb75 	bl	80030b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80029ce:	e07d      	b.n	8002acc <I2C_Slave_ISR_IT+0x1ee>
 80029d0:	e07c      	b.n	8002acc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d030      	beq.n	8002a40 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d02a      	beq.n	8002a40 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d018      	beq.n	8002a26 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d14f      	bne.n	8002ad0 <I2C_Slave_ISR_IT+0x1f2>
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a36:	d04b      	beq.n	8002ad0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f97f 	bl	8002d3c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002a3e:	e047      	b.n	8002ad0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	08db      	lsrs	r3, r3, #3
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	08db      	lsrs	r3, r3, #3
 8002a50:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002a58:	6939      	ldr	r1, [r7, #16]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f8ea 	bl	8002c34 <I2C_ITAddrCplt>
 8002a60:	e037      	b.n	8002ad2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	085b      	lsrs	r3, r3, #1
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d031      	beq.n	8002ad2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d02b      	beq.n	8002ad2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d018      	beq.n	8002ab6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	851a      	strh	r2, [r3, #40]	; 0x28
 8002ab4:	e00d      	b.n	8002ad2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abc:	d002      	beq.n	8002ac4 <I2C_Slave_ISR_IT+0x1e6>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d106      	bne.n	8002ad2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f939 	bl	8002d3c <I2C_ITSlaveSeqCplt>
 8002aca:	e002      	b.n	8002ad2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002acc:	bf00      	nop
 8002ace:	e000      	b.n	8002ad2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002ad0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	4608      	mov	r0, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	461a      	mov	r2, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	817b      	strh	r3, [r7, #10]
 8002af6:	460b      	mov	r3, r1
 8002af8:	813b      	strh	r3, [r7, #8]
 8002afa:	4613      	mov	r3, r2
 8002afc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	8979      	ldrh	r1, [r7, #10]
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <I2C_RequestMemoryWrite+0xa4>)
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fdb5 	bl	800367c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	69b9      	ldr	r1, [r7, #24]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fc47 	bl	80033aa <I2C_WaitOnTXISFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e02c      	b.n	8002b80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b2c:	893b      	ldrh	r3, [r7, #8]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
 8002b36:	e015      	b.n	8002b64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b38:	893b      	ldrh	r3, [r7, #8]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	69b9      	ldr	r1, [r7, #24]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fc2d 	bl	80033aa <I2C_WaitOnTXISFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e012      	b.n	8002b80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5a:	893b      	ldrh	r3, [r7, #8]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2180      	movs	r1, #128	; 0x80
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fbdb 	bl	800332a <I2C_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	80002000 	.word	0x80002000

08002b8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	4608      	mov	r0, r1
 8002b96:	4611      	mov	r1, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	817b      	strh	r3, [r7, #10]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	813b      	strh	r3, [r7, #8]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	8979      	ldrh	r1, [r7, #10]
 8002bac:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <I2C_RequestMemoryRead+0xa4>)
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fd62 	bl	800367c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	69b9      	ldr	r1, [r7, #24]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fbf4 	bl	80033aa <I2C_WaitOnTXISFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e02c      	b.n	8002c26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
 8002bdc:	e015      	b.n	8002c0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bde:	893b      	ldrh	r3, [r7, #8]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fbda 	bl	80033aa <I2C_WaitOnTXISFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e012      	b.n	8002c26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c00:	893b      	ldrh	r3, [r7, #8]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2140      	movs	r1, #64	; 0x40
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fb88 	bl	800332a <I2C_WaitOnFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	80002000 	.word	0x80002000

08002c34 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c4a:	2b28      	cmp	r3, #40	; 0x28
 8002c4c:	d16a      	bne.n	8002d24 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c6c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c88:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d138      	bne.n	8002d04 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002c92:	897b      	ldrh	r3, [r7, #10]
 8002c94:	09db      	lsrs	r3, r3, #7
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	89bb      	ldrh	r3, [r7, #12]
 8002c9a:	4053      	eors	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f003 0306 	and.w	r3, r3, #6
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d11c      	bne.n	8002ce0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002ca6:	897b      	ldrh	r3, [r7, #10]
 8002ca8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d13b      	bne.n	8002d34 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cd2:	89ba      	ldrh	r2, [r7, #12]
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fdd4 	bl	8002886 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002cde:	e029      	b.n	8002d34 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002ce0:	893b      	ldrh	r3, [r7, #8]
 8002ce2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fcf9 	bl	80036e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cf6:	89ba      	ldrh	r2, [r7, #12]
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff fdc2 	bl	8002886 <HAL_I2C_AddrCallback>
}
 8002d02:	e017      	b.n	8002d34 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fce9 	bl	80036e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d16:	89ba      	ldrh	r2, [r7, #12]
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fdb2 	bl	8002886 <HAL_I2C_AddrCallback>
}
 8002d22:	e007      	b.n	8002d34 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	0b9b      	lsrs	r3, r3, #14
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	e00d      	b.n	8002d8e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	0bdb      	lsrs	r3, r3, #15
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d8c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b29      	cmp	r3, #41	; 0x29
 8002d98:	d112      	bne.n	8002dc0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2228      	movs	r2, #40	; 0x28
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2221      	movs	r2, #33	; 0x21
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002da8:	2101      	movs	r1, #1
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fc98 	bl	80036e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff fd50 	bl	800285e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dbe:	e017      	b.n	8002df0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8002dca:	d111      	bne.n	8002df0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2228      	movs	r2, #40	; 0x28
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2222      	movs	r2, #34	; 0x22
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002dda:	2102      	movs	r1, #2
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fc7f 	bl	80036e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff fd41 	bl	8002872 <HAL_I2C_SlaveRxCpltCallback>
}
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e14:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b21      	cmp	r3, #33	; 0x21
 8002e22:	d002      	beq.n	8002e2a <I2C_ITSlaveCplt+0x32>
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b29      	cmp	r3, #41	; 0x29
 8002e28:	d108      	bne.n	8002e3c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002e2a:	f248 0101 	movw	r1, #32769	; 0x8001
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fc56 	bl	80036e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2221      	movs	r2, #33	; 0x21
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
 8002e3a:	e00d      	b.n	8002e58 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b22      	cmp	r3, #34	; 0x22
 8002e40:	d002      	beq.n	8002e48 <I2C_ITSlaveCplt+0x50>
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	2b2a      	cmp	r3, #42	; 0x2a
 8002e46:	d107      	bne.n	8002e58 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002e48:	f248 0102 	movw	r1, #32770	; 0x8002
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fc47 	bl	80036e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2222      	movs	r2, #34	; 0x22
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e66:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b64      	ldr	r3, [pc, #400]	; (8003004 <I2C_ITSlaveCplt+0x20c>)
 8002e74:	400b      	ands	r3, r1
 8002e76:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fa14 	bl	80032a6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	0b9b      	lsrs	r3, r3, #14
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d013      	beq.n	8002eb2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e98:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d020      	beq.n	8002ee4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eb0:	e018      	b.n	8002ee4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	0bdb      	lsrs	r3, r3, #15
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d012      	beq.n	8002ee4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ecc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d020      	beq.n	8002f32 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f023 0304 	bic.w	r3, r3, #4
 8002ef6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00c      	beq.n	8002f32 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	f043 0204 	orr.w	r2, r3, #4
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d010      	beq.n	8002f80 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f8a7 	bl	80030b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b28      	cmp	r3, #40	; 0x28
 8002f74:	d141      	bne.n	8002ffa <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f76:	6979      	ldr	r1, [r7, #20]
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f847 	bl	800300c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f7e:	e03c      	b.n	8002ffa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f88:	d014      	beq.n	8002fb4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fed6 	bl	8002d3c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <I2C_ITSlaveCplt+0x210>)
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff fc78 	bl	80028a2 <HAL_I2C_ListenCpltCallback>
}
 8002fb2:	e022      	b.n	8002ffa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b22      	cmp	r3, #34	; 0x22
 8002fbe:	d10e      	bne.n	8002fde <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fc4b 	bl	8002872 <HAL_I2C_SlaveRxCpltCallback>
}
 8002fdc:	e00d      	b.n	8002ffa <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff fc32 	bl	800285e <HAL_I2C_SlaveTxCpltCallback>
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	fe00e800 	.word	0xfe00e800
 8003008:	ffff0000 	.word	0xffff0000

0800300c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <I2C_ITListenCplt+0xa8>)
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d022      	beq.n	800308a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	d012      	beq.n	800308a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f043 0204 	orr.w	r2, r3, #4
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800308a:	f248 0103 	movw	r1, #32771	; 0x8003
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fb26 	bl	80036e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2210      	movs	r2, #16
 800309a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff fbfc 	bl	80028a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	ffff0000 	.word	0xffff0000

080030b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a5d      	ldr	r2, [pc, #372]	; (800324c <I2C_ITError+0x194>)
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b28      	cmp	r3, #40	; 0x28
 80030ee:	d005      	beq.n	80030fc <I2C_ITError+0x44>
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b29      	cmp	r3, #41	; 0x29
 80030f4:	d002      	beq.n	80030fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	2b2a      	cmp	r3, #42	; 0x2a
 80030fa:	d10b      	bne.n	8003114 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030fc:	2103      	movs	r1, #3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 faee 	bl	80036e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2228      	movs	r2, #40	; 0x28
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a50      	ldr	r2, [pc, #320]	; (8003250 <I2C_ITError+0x198>)
 8003110:	635a      	str	r2, [r3, #52]	; 0x34
 8003112:	e011      	b.n	8003138 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003114:	f248 0103 	movw	r1, #32771	; 0x8003
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fae1 	bl	80036e0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b60      	cmp	r3, #96	; 0x60
 8003128:	d003      	beq.n	8003132 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	2b00      	cmp	r3, #0
 8003144:	d039      	beq.n	80031ba <I2C_ITError+0x102>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b11      	cmp	r3, #17
 800314a:	d002      	beq.n	8003152 <I2C_ITError+0x9a>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b21      	cmp	r3, #33	; 0x21
 8003150:	d133      	bne.n	80031ba <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003160:	d107      	bne.n	8003172 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003170:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fc8d 	bl	8001a96 <HAL_DMA_GetState>
 800317c:	4603      	mov	r3, r0
 800317e:	2b01      	cmp	r3, #1
 8003180:	d017      	beq.n	80031b2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	4a33      	ldr	r2, [pc, #204]	; (8003254 <I2C_ITError+0x19c>)
 8003188:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fb6f 	bl	800187a <HAL_DMA_Abort_IT>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d04d      	beq.n	800323e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031ac:	4610      	mov	r0, r2
 80031ae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031b0:	e045      	b.n	800323e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f850 	bl	8003258 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031b8:	e041      	b.n	800323e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d039      	beq.n	8003236 <I2C_ITError+0x17e>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b12      	cmp	r3, #18
 80031c6:	d002      	beq.n	80031ce <I2C_ITError+0x116>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b22      	cmp	r3, #34	; 0x22
 80031cc:	d133      	bne.n	8003236 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031dc:	d107      	bne.n	80031ee <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fc4f 	bl	8001a96 <HAL_DMA_GetState>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d017      	beq.n	800322e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <I2C_ITError+0x19c>)
 8003204:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fb31 	bl	800187a <HAL_DMA_Abort_IT>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d011      	beq.n	8003242 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003228:	4610      	mov	r0, r2
 800322a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800322c:	e009      	b.n	8003242 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f812 	bl	8003258 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003234:	e005      	b.n	8003242 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f80e 	bl	8003258 <I2C_TreatErrorCallback>
  }
}
 800323c:	e002      	b.n	8003244 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800323e:	bf00      	nop
 8003240:	e000      	b.n	8003244 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003242:	bf00      	nop
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	ffff0000 	.word	0xffff0000
 8003250:	080028df 	.word	0x080028df
 8003254:	080032ef 	.word	0x080032ef

08003258 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b60      	cmp	r3, #96	; 0x60
 800326a:	d10e      	bne.n	800328a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fb21 	bl	80028ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003288:	e009      	b.n	800329e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff fb0c 	bl	80028b6 <HAL_I2C_ErrorCallback>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d103      	bne.n	80032c4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2200      	movs	r2, #0
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d007      	beq.n	80032e2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	619a      	str	r2, [r3, #24]
  }
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	2200      	movs	r2, #0
 800330a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003318:	2200      	movs	r2, #0
 800331a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7ff ff9b 	bl	8003258 <I2C_TreatErrorCallback>
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800333a:	e022      	b.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003342:	d01e      	beq.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003344:	f7fd fc60 	bl	8000c08 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d302      	bcc.n	800335a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d113      	bne.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e00f      	b.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4013      	ands	r3, r2
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	429a      	cmp	r2, r3
 8003390:	bf0c      	ite	eq
 8003392:	2301      	moveq	r3, #1
 8003394:	2300      	movne	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	429a      	cmp	r2, r3
 800339e:	d0cd      	beq.n	800333c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033b6:	e02c      	b.n	8003412 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f871 	bl	80034a4 <I2C_IsErrorOccurred>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e02a      	b.n	8003422 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d01e      	beq.n	8003412 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7fd fc18 	bl	8000c08 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d113      	bne.n	8003412 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e007      	b.n	8003422 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d1cb      	bne.n	80033b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003436:	e028      	b.n	800348a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f831 	bl	80034a4 <I2C_IsErrorOccurred>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e026      	b.n	800349a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344c:	f7fd fbdc 	bl	8000c08 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	429a      	cmp	r2, r3
 800345a:	d302      	bcc.n	8003462 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d113      	bne.n	800348a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e007      	b.n	800349a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b20      	cmp	r3, #32
 8003496:	d1cf      	bne.n	8003438 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d075      	beq.n	80035bc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2210      	movs	r2, #16
 80034d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034d8:	e056      	b.n	8003588 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d052      	beq.n	8003588 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7fd fb91 	bl	8000c08 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_IsErrorOccurred+0x54>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d147      	bne.n	8003588 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003502:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800350a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351a:	d12e      	bne.n	800357a <I2C_IsErrorOccurred+0xd6>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003522:	d02a      	beq.n	800357a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	2b20      	cmp	r3, #32
 8003528:	d027      	beq.n	800357a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003538:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800353a:	f7fd fb65 	bl	8000c08 <HAL_GetTick>
 800353e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003540:	e01b      	b.n	800357a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003542:	f7fd fb61 	bl	8000c08 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b19      	cmp	r3, #25
 800354e:	d914      	bls.n	800357a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b20      	cmp	r3, #32
 8003586:	d1dc      	bne.n	8003542 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b20      	cmp	r3, #32
 8003594:	d003      	beq.n	800359e <I2C_IsErrorOccurred+0xfa>
 8003596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800359a:	2b00      	cmp	r3, #0
 800359c:	d09d      	beq.n	80034da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800359e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2220      	movs	r2, #32
 80035ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f043 0308 	orr.w	r3, r3, #8
 80035f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003622:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800362a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01c      	beq.n	800366c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f7ff fe37 	bl	80032a6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6859      	ldr	r1, [r3, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <I2C_IsErrorOccurred+0x1d4>)
 8003644:	400b      	ands	r3, r1
 8003646:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	431a      	orrs	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800366c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003670:	4618      	mov	r0, r3
 8003672:	3728      	adds	r7, #40	; 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	fe00e800 	.word	0xfe00e800

0800367c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	817b      	strh	r3, [r7, #10]
 800368a:	4613      	mov	r3, r2
 800368c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003694:	7a7b      	ldrb	r3, [r7, #9]
 8003696:	041b      	lsls	r3, r3, #16
 8003698:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800369c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	0d5b      	lsrs	r3, r3, #21
 80036b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <I2C_TransferConfig+0x60>)
 80036bc:	430b      	orrs	r3, r1
 80036be:	43db      	mvns	r3, r3
 80036c0:	ea02 0103 	and.w	r1, r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	03ff63ff 	.word	0x03ff63ff

080036e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00f      	beq.n	800371a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003700:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800370e:	2b28      	cmp	r3, #40	; 0x28
 8003710:	d003      	beq.n	800371a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003718:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00f      	beq.n	8003744 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800372a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003738:	2b28      	cmp	r3, #40	; 0x28
 800373a:	d003      	beq.n	8003744 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003742:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003744:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003748:	2b00      	cmp	r3, #0
 800374a:	da03      	bge.n	8003754 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003752:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003754:	887b      	ldrh	r3, [r7, #2]
 8003756:	2b10      	cmp	r3, #16
 8003758:	d103      	bne.n	8003762 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003760:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003762:	887b      	ldrh	r3, [r7, #2]
 8003764:	2b20      	cmp	r3, #32
 8003766:	d103      	bne.n	8003770 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f043 0320 	orr.w	r3, r3, #32
 800376e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003770:	887b      	ldrh	r3, [r7, #2]
 8003772:	2b40      	cmp	r3, #64	; 0x40
 8003774:	d103      	bne.n	800377e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800377c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	43da      	mvns	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	400a      	ands	r2, r1
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d138      	bne.n	8003824 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037bc:	2302      	movs	r3, #2
 80037be:	e032      	b.n	8003826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6819      	ldr	r1, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	e000      	b.n	8003826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b20      	cmp	r3, #32
 8003846:	d139      	bne.n	80038bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003852:	2302      	movs	r3, #2
 8003854:	e033      	b.n	80038be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2224      	movs	r2, #36	; 0x24
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003884:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
  }
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80038d8:	f7fd f996 	bl	8000c08 <HAL_GetTick>
 80038dc:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	e092      	b.n	8003a10 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 808b 	bne.w	8003a10 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f007 fcb2 	bl	800b264 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003900:	f241 3188 	movw	r1, #5000	; 0x1388
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fad0 	bl	8003eaa <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	4b42      	ldr	r3, [pc, #264]	; (8003a1c <HAL_OSPI_Init+0x150>)
 8003912:	4013      	ands	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68d1      	ldr	r1, [r2, #12]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6912      	ldr	r2, [r2, #16]
 800391c:	3a01      	subs	r2, #1
 800391e:	0412      	lsls	r2, r2, #16
 8003920:	4311      	orrs	r1, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6952      	ldr	r2, [r2, #20]
 8003926:	3a01      	subs	r2, #1
 8003928:	0212      	lsls	r2, r2, #8
 800392a:	4311      	orrs	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003930:	4311      	orrs	r1, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	69d2      	ldr	r2, [r2, #28]
 8003936:	4311      	orrs	r1, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	430b      	orrs	r3, r1
 800393e:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0412      	lsls	r2, r2, #16
 800394a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	021a      	lsls	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	2120      	movs	r1, #32
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fddc 	bl	8004530 <OSPI_WaitFlagStateUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d146      	bne.n	8003a10 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	1e5a      	subs	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039b8:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d107      	bne.n	80039f8 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0202 	orr.w	r2, r2, #2
 80039f6:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a00:	d103      	bne.n	8003a0a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	645a      	str	r2, [r3, #68]	; 0x44
 8003a08:	e002      	b.n	8003a10 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	f8e0f8f4 	.word	0xf8e0f8f4

08003a20 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e015      	b.n	8003a64 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0202 	bic.w	r2, r2, #2
 8003a56:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f007 fc6f 	bl	800b33c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b08a      	sub	sp, #40	; 0x28
 8003a72:	af02      	add	r7, sp, #8
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003a7a:	f7fd f8c5 	bl	8000c08 <HAL_GetTick>
 8003a7e:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d104      	bne.n	8003a9c <HAL_OSPI_Command+0x2e>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a9a:	d10d      	bne.n	8003ab8 <HAL_OSPI_Command+0x4a>
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2b14      	cmp	r3, #20
 8003aa0:	d103      	bne.n	8003aaa <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d006      	beq.n	8003ab8 <HAL_OSPI_Command+0x4a>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b24      	cmp	r3, #36	; 0x24
 8003aae:	d153      	bne.n	8003b58 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d14f      	bne.n	8003b58 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fd34 	bl	8004530 <OSPI_WaitFlagStateUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003acc:	7ffb      	ldrb	r3, [r7, #31]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d148      	bne.n	8003b64 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fd60 	bl	80045a0 <OSPI_ConfigCmd>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003ae4:	7ffb      	ldrb	r3, [r7, #31]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d13c      	bne.n	8003b64 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10e      	bne.n	8003b10 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2201      	movs	r2, #1
 8003afa:	2102      	movs	r1, #2
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fd17 	bl	8004530 <OSPI_WaitFlagStateUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003b0e:	e029      	b.n	8003b64 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003b1e:	e021      	b.n	8003b64 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d10b      	bne.n	8003b40 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	2b24      	cmp	r3, #36	; 0x24
 8003b2e:	d103      	bne.n	8003b38 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2204      	movs	r2, #4
 8003b34:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003b36:	e015      	b.n	8003b64 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2214      	movs	r2, #20
 8003b3c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003b3e:	e011      	b.n	8003b64 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b44:	2b14      	cmp	r3, #20
 8003b46:	d103      	bne.n	8003b50 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003b4e:	e009      	b.n	8003b64 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2224      	movs	r2, #36	; 0x24
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003b56:	e005      	b.n	8003b64 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2210      	movs	r2, #16
 8003b60:	649a      	str	r2, [r3, #72]	; 0x48
 8003b62:	e000      	b.n	8003b66 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8003b64:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003b66:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b7c:	f7fd f844 	bl	8000c08 <HAL_GetTick>
 8003b80:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3350      	adds	r3, #80	; 0x50
 8003b88:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2208      	movs	r2, #8
 8003b98:	649a      	str	r2, [r3, #72]	; 0x48
 8003b9a:	e057      	b.n	8003c4c <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d14e      	bne.n	8003c42 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bcc:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	2104      	movs	r1, #4
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fca9 	bl	8004530 <OSPI_WaitFlagStateUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003be2:	7ffb      	ldrb	r3, [r7, #31]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d113      	bne.n	8003c10 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	1e5a      	subs	r2, r3, #1
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1df      	bne.n	8003bce <HAL_OSPI_Transmit+0x5e>
 8003c0e:	e000      	b.n	8003c12 <HAL_OSPI_Transmit+0xa2>
          break;
 8003c10:	bf00      	nop

      if (status == HAL_OK)
 8003c12:	7ffb      	ldrb	r3, [r7, #31]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d119      	bne.n	8003c4c <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	2102      	movs	r1, #2
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fc84 	bl	8004530 <OSPI_WaitFlagStateUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003c2c:	7ffb      	ldrb	r3, [r7, #31]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10c      	bne.n	8003c4c <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2202      	movs	r2, #2
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	645a      	str	r2, [r3, #68]	; 0x44
 8003c40:	e004      	b.n	8003c4c <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3720      	adds	r7, #32
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b08c      	sub	sp, #48	; 0x30
 8003c5a:	af02      	add	r7, sp, #8
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c62:	f7fc ffd1 	bl	8000c08 <HAL_GetTick>
 8003c66:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3350      	adds	r3, #80	; 0x50
 8003c6e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c76:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003c80:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2208      	movs	r2, #8
 8003c92:	649a      	str	r2, [r3, #72]	; 0x48
 8003c94:	e07c      	b.n	8003d90 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d172      	bne.n	8003d84 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cca:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd4:	d104      	bne.n	8003ce0 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	649a      	str	r2, [r3, #72]	; 0x48
 8003cde:	e011      	b.n	8003d04 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	649a      	str	r2, [r3, #72]	; 0x48
 8003cf8:	e004      	b.n	8003d04 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	2106      	movs	r1, #6
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fc0e 	bl	8004530 <OSPI_WaitFlagStateUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8003d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d114      	bne.n	8003d4c <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	7812      	ldrb	r2, [r2, #0]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	1e5a      	subs	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1dc      	bne.n	8003d04 <HAL_OSPI_Receive+0xae>
 8003d4a:	e000      	b.n	8003d4e <HAL_OSPI_Receive+0xf8>
          break;
 8003d4c:	bf00      	nop

      if (status == HAL_OK)
 8003d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d11c      	bne.n	8003d90 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	2102      	movs	r1, #2
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fbe5 	bl	8004530 <OSPI_WaitFlagStateUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8003d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10d      	bne.n	8003d90 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
 8003d82:	e005      	b.n	8003d90 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2210      	movs	r2, #16
 8003d8e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3728      	adds	r7, #40	; 0x28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003da8:	f7fc ff2e 	bl	8000c08 <HAL_GetTick>
 8003dac:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db4:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003dbe:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d164      	bne.n	8003e92 <HAL_OSPI_AutoPolling+0xf6>
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd0:	d15f      	bne.n	8003e92 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2120      	movs	r1, #32
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fba7 	bl	8004530 <OSPI_WaitFlagStateUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003de6:	7ffb      	ldrb	r3, [r7, #31]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d158      	bne.n	8003e9e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	6852      	ldr	r2, [r2, #4]
 8003e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	6912      	ldr	r2, [r2, #16]
 8003e0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6899      	ldr	r1, [r3, #8]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	430b      	orrs	r3, r1
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003e2e:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e38:	d104      	bne.n	8003e44 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	649a      	str	r2, [r3, #72]	; 0x48
 8003e42:	e011      	b.n	8003e68 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	649a      	str	r2, [r3, #72]	; 0x48
 8003e5c:	e004      	b.n	8003e68 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	2108      	movs	r1, #8
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fb5c 	bl	8004530 <OSPI_WaitFlagStateUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003e7c:	7ffb      	ldrb	r3, [r7, #31]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2208      	movs	r2, #8
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003e90:	e005      	b.n	8003e9e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	649a      	str	r2, [r3, #72]	; 0x48
 8003e9c:	e000      	b.n	8003ea0 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8003e9e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003ea0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b092      	sub	sp, #72	; 0x48
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <HAL_OSPIM_Config+0x40>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d105      	bne.n	8003ef6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003ef4:	e004      	b.n	8003f00 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f00:	2300      	movs	r3, #0
 8003f02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f06:	e01f      	b.n	8003f48 <HAL_OSPIM_Config+0x80>
 8003f08:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003f0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f10:	3301      	adds	r3, #1
 8003f12:	b2d8      	uxtb	r0, r3
 8003f14:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003f18:	f107 0114 	add.w	r1, r7, #20
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	4619      	mov	r1, r3
 8003f28:	f000 fc9c 	bl	8004864 <OSPIM_GetConfig>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f42:	3301      	adds	r3, #1
 8003f44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d9dd      	bls.n	8003f0c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003f50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 82de 	bne.w	8004516 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003f5a:	4bc6      	ldr	r3, [pc, #792]	; (8004274 <HAL_OSPIM_Config+0x3ac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003f66:	4bc3      	ldr	r3, [pc, #780]	; (8004274 <HAL_OSPIM_Config+0x3ac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4ac2      	ldr	r2, [pc, #776]	; (8004274 <HAL_OSPIM_Config+0x3ac>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003f72:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003f7e:	4bbe      	ldr	r3, [pc, #760]	; (8004278 <HAL_OSPIM_Config+0x3b0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003f8a:	4bbb      	ldr	r3, [pc, #748]	; (8004278 <HAL_OSPIM_Config+0x3b0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4aba      	ldr	r2, [pc, #744]	; (8004278 <HAL_OSPIM_Config+0x3b0>)
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003f96:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f9a:	f043 0302 	orr.w	r3, r3, #2
 8003f9e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003fa2:	49b6      	ldr	r1, [pc, #728]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 8003fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	3348      	adds	r3, #72	; 0x48
 8003fb0:	443b      	add	r3, r7
 8003fb2:	3b2c      	subs	r3, #44	; 0x2c
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	6859      	ldr	r1, [r3, #4]
 8003fbe:	48af      	ldr	r0, [pc, #700]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 8003fc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	3348      	adds	r3, #72	; 0x48
 8003fcc:	443b      	add	r3, r7
 8003fce:	3b2c      	subs	r3, #44	; 0x2c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4403      	add	r3, r0
 8003fdc:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003fde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	3348      	adds	r3, #72	; 0x48
 8003fea:	443b      	add	r3, r7
 8003fec:	3b34      	subs	r3, #52	; 0x34
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80a1 	beq.w	8004138 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003ff6:	49a1      	ldr	r1, [pc, #644]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 8003ff8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	3348      	adds	r3, #72	; 0x48
 8004004:	443b      	add	r3, r7
 8004006:	3b34      	subs	r3, #52	; 0x34
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3b01      	subs	r3, #1
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	6859      	ldr	r1, [r3, #4]
 8004012:	489a      	ldr	r0, [pc, #616]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 8004014:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	3348      	adds	r3, #72	; 0x48
 8004020:	443b      	add	r3, r7
 8004022:	3b34      	subs	r3, #52	; 0x34
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3b01      	subs	r3, #1
 8004028:	f021 0201 	bic.w	r2, r1, #1
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4403      	add	r3, r0
 8004030:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004032:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	3348      	adds	r3, #72	; 0x48
 800403e:	443b      	add	r3, r7
 8004040:	3b30      	subs	r3, #48	; 0x30
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01d      	beq.n	8004084 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004048:	498c      	ldr	r1, [pc, #560]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 800404a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	3348      	adds	r3, #72	; 0x48
 8004056:	443b      	add	r3, r7
 8004058:	3b30      	subs	r3, #48	; 0x30
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3b01      	subs	r3, #1
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	4885      	ldr	r0, [pc, #532]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 8004066:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	3348      	adds	r3, #72	; 0x48
 8004072:	443b      	add	r3, r7
 8004074:	3b30      	subs	r3, #48	; 0x30
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3b01      	subs	r3, #1
 800407a:	f021 0210 	bic.w	r2, r1, #16
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4403      	add	r3, r0
 8004082:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	3348      	adds	r3, #72	; 0x48
 8004090:	443b      	add	r3, r7
 8004092:	3b28      	subs	r3, #40	; 0x28
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d021      	beq.n	80040de <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800409a:	4978      	ldr	r1, [pc, #480]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 800409c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	3348      	adds	r3, #72	; 0x48
 80040a8:	443b      	add	r3, r7
 80040aa:	3b28      	subs	r3, #40	; 0x28
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	6859      	ldr	r1, [r3, #4]
 80040ba:	4870      	ldr	r0, [pc, #448]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 80040bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	3348      	adds	r3, #72	; 0x48
 80040c8:	443b      	add	r3, r7
 80040ca:	3b28      	subs	r3, #40	; 0x28
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4403      	add	r3, r0
 80040dc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80040de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	3348      	adds	r3, #72	; 0x48
 80040ea:	443b      	add	r3, r7
 80040ec:	3b24      	subs	r3, #36	; 0x24
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d021      	beq.n	8004138 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80040f4:	4961      	ldr	r1, [pc, #388]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 80040f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	3348      	adds	r3, #72	; 0x48
 8004102:	443b      	add	r3, r7
 8004104:	3b24      	subs	r3, #36	; 0x24
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3b01      	subs	r3, #1
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	4859      	ldr	r0, [pc, #356]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 8004116:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	3348      	adds	r3, #72	; 0x48
 8004122:	443b      	add	r3, r7
 8004124:	3b24      	subs	r3, #36	; 0x24
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3b01      	subs	r3, #1
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4403      	add	r3, r0
 8004136:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	3348      	adds	r3, #72	; 0x48
 800414a:	443b      	add	r3, r7
 800414c:	3b34      	subs	r3, #52	; 0x34
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4299      	cmp	r1, r3
 8004152:	d038      	beq.n	80041c6 <HAL_OSPIM_Config+0x2fe>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6859      	ldr	r1, [r3, #4]
 8004158:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	3348      	adds	r3, #72	; 0x48
 8004166:	443b      	add	r3, r7
 8004168:	3b30      	subs	r3, #48	; 0x30
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4299      	cmp	r1, r3
 800416e:	d02a      	beq.n	80041c6 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6899      	ldr	r1, [r3, #8]
 8004174:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	3348      	adds	r3, #72	; 0x48
 8004182:	443b      	add	r3, r7
 8004184:	3b2c      	subs	r3, #44	; 0x2c
 8004186:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004188:	4299      	cmp	r1, r3
 800418a:	d01c      	beq.n	80041c6 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	68d9      	ldr	r1, [r3, #12]
 8004190:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	3348      	adds	r3, #72	; 0x48
 800419e:	443b      	add	r3, r7
 80041a0:	3b28      	subs	r3, #40	; 0x28
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4299      	cmp	r1, r3
 80041a6:	d00e      	beq.n	80041c6 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6919      	ldr	r1, [r3, #16]
 80041ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	3348      	adds	r3, #72	; 0x48
 80041ba:	443b      	add	r3, r7
 80041bc:	3b24      	subs	r3, #36	; 0x24
 80041be:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80041c0:	4299      	cmp	r1, r3
 80041c2:	f040 80d3 	bne.w	800436c <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80041c6:	492d      	ldr	r1, [pc, #180]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 80041c8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	3348      	adds	r3, #72	; 0x48
 80041d6:	443b      	add	r3, r7
 80041d8:	3b34      	subs	r3, #52	; 0x34
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3b01      	subs	r3, #1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	4825      	ldr	r0, [pc, #148]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 80041e6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	3348      	adds	r3, #72	; 0x48
 80041f4:	443b      	add	r3, r7
 80041f6:	3b34      	subs	r3, #52	; 0x34
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	f021 0201 	bic.w	r2, r1, #1
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4403      	add	r3, r0
 8004204:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004206:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	3348      	adds	r3, #72	; 0x48
 8004214:	443b      	add	r3, r7
 8004216:	3b30      	subs	r3, #48	; 0x30
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01f      	beq.n	800425e <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800421e:	4917      	ldr	r1, [pc, #92]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 8004220:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	3348      	adds	r3, #72	; 0x48
 800422e:	443b      	add	r3, r7
 8004230:	3b30      	subs	r3, #48	; 0x30
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3b01      	subs	r3, #1
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	6859      	ldr	r1, [r3, #4]
 800423c:	480f      	ldr	r0, [pc, #60]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 800423e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	3348      	adds	r3, #72	; 0x48
 800424c:	443b      	add	r3, r7
 800424e:	3b30      	subs	r3, #48	; 0x30
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3b01      	subs	r3, #1
 8004254:	f021 0210 	bic.w	r2, r1, #16
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4403      	add	r3, r0
 800425c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800425e:	4907      	ldr	r1, [pc, #28]	; (800427c <HAL_OSPIM_Config+0x3b4>)
 8004260:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	3348      	adds	r3, #72	; 0x48
 800426e:	443b      	add	r3, r7
 8004270:	3b2c      	subs	r3, #44	; 0x2c
 8004272:	e005      	b.n	8004280 <HAL_OSPIM_Config+0x3b8>
 8004274:	a0001000 	.word	0xa0001000
 8004278:	a0001400 	.word	0xa0001400
 800427c:	50061c00 	.word	0x50061c00
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3b01      	subs	r3, #1
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	6859      	ldr	r1, [r3, #4]
 800428a:	48a6      	ldr	r0, [pc, #664]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 800428c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	3348      	adds	r3, #72	; 0x48
 800429a:	443b      	add	r3, r7
 800429c:	3b2c      	subs	r3, #44	; 0x2c
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4403      	add	r3, r0
 80042aa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80042ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	3348      	adds	r3, #72	; 0x48
 80042ba:	443b      	add	r3, r7
 80042bc:	3b28      	subs	r3, #40	; 0x28
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d023      	beq.n	800430c <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80042c4:	4997      	ldr	r1, [pc, #604]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 80042c6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	3348      	adds	r3, #72	; 0x48
 80042d4:	443b      	add	r3, r7
 80042d6:	3b28      	subs	r3, #40	; 0x28
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3b01      	subs	r3, #1
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	6859      	ldr	r1, [r3, #4]
 80042e6:	488f      	ldr	r0, [pc, #572]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 80042e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	3348      	adds	r3, #72	; 0x48
 80042f6:	443b      	add	r3, r7
 80042f8:	3b28      	subs	r3, #40	; 0x28
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4403      	add	r3, r0
 800430a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800430c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	3348      	adds	r3, #72	; 0x48
 800431a:	443b      	add	r3, r7
 800431c:	3b24      	subs	r3, #36	; 0x24
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d023      	beq.n	800436c <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004324:	497f      	ldr	r1, [pc, #508]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 8004326:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	3348      	adds	r3, #72	; 0x48
 8004334:	443b      	add	r3, r7
 8004336:	3b24      	subs	r3, #36	; 0x24
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3b01      	subs	r3, #1
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	6859      	ldr	r1, [r3, #4]
 8004346:	4877      	ldr	r0, [pc, #476]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 8004348:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	3348      	adds	r3, #72	; 0x48
 8004356:	443b      	add	r3, r7
 8004358:	3b24      	subs	r3, #36	; 0x24
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3b01      	subs	r3, #1
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4403      	add	r3, r0
 800436a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800436c:	4a6d      	ldr	r2, [pc, #436]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	3b01      	subs	r3, #1
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800437e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004380:	025b      	lsls	r3, r3, #9
 8004382:	431a      	orrs	r2, r3
 8004384:	4967      	ldr	r1, [pc, #412]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	3b01      	subs	r3, #1
 800438c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004396:	4a63      	ldr	r2, [pc, #396]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3b01      	subs	r3, #1
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f023 0203 	bic.w	r2, r3, #3
 80043a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	431a      	orrs	r2, r3
 80043ae:	495d      	ldr	r1, [pc, #372]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d014      	beq.n	80043f2 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80043c8:	4a56      	ldr	r2, [pc, #344]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043dc:	015b      	lsls	r3, r3, #5
 80043de:	431a      	orrs	r2, r3
 80043e0:	4950      	ldr	r1, [pc, #320]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	f042 0210 	orr.w	r2, r2, #16
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d019      	beq.n	8004432 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80043fe:	4a49      	ldr	r2, [pc, #292]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	3b01      	subs	r3, #1
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004416:	049b      	lsls	r3, r3, #18
 8004418:	431a      	orrs	r2, r3
 800441a:	4942      	ldr	r1, [pc, #264]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	3b01      	subs	r3, #1
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	e01c      	b.n	800446c <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d018      	beq.n	800446c <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800443a:	4a3a      	ldr	r2, [pc, #232]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	3b01      	subs	r3, #1
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004452:	069b      	lsls	r3, r3, #26
 8004454:	431a      	orrs	r2, r3
 8004456:	4933      	ldr	r1, [pc, #204]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	3b01      	subs	r3, #1
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d019      	beq.n	80044ac <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004478:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	3b01      	subs	r3, #1
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800448e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004490:	049b      	lsls	r3, r3, #18
 8004492:	431a      	orrs	r2, r3
 8004494:	4923      	ldr	r1, [pc, #140]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	3b01      	subs	r3, #1
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	e01c      	b.n	80044e6 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d018      	beq.n	80044e6 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80044b4:	4a1b      	ldr	r2, [pc, #108]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044cc:	069b      	lsls	r3, r3, #26
 80044ce:	431a      	orrs	r2, r3
 80044d0:	4914      	ldr	r1, [pc, #80]	; (8004524 <HAL_OSPIM_Config+0x65c>)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80044e6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d005      	beq.n	80044fe <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <HAL_OSPIM_Config+0x660>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a0c      	ldr	r2, [pc, #48]	; (8004528 <HAL_OSPIM_Config+0x660>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80044fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_OSPIM_Config+0x664>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a07      	ldr	r2, [pc, #28]	; (800452c <HAL_OSPIM_Config+0x664>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004516:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800451a:	4618      	mov	r0, r3
 800451c:	3748      	adds	r7, #72	; 0x48
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	50061c00 	.word	0x50061c00
 8004528:	a0001000 	.word	0xa0001000
 800452c:	a0001400 	.word	0xa0001400

08004530 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	4613      	mov	r3, r2
 800453e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004540:	e01a      	b.n	8004578 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d016      	beq.n	8004578 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454a:	f7fc fb5d 	bl	8000c08 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	429a      	cmp	r2, r3
 8004558:	d302      	bcc.n	8004560 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004566:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456c:	f043 0201 	orr.w	r2, r3, #1
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e00e      	b.n	8004596 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6a1a      	ldr	r2, [r3, #32]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	bf14      	ite	ne
 8004586:	2301      	movne	r3, #1
 8004588:	2300      	moveq	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	429a      	cmp	r2, r3
 8004592:	d1d6      	bne.n	8004542 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045bc:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d114      	bne.n	800460e <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80045ec:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80045f6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004600:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e013      	b.n	8004636 <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004616:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004620:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800462a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004634:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463e:	431a      	orrs	r2, r3
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d012      	beq.n	8004672 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	4319      	orrs	r1, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	430b      	orrs	r3, r1
 800466c:	431a      	orrs	r2, r3
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 021f 	bic.w	r2, r3, #31
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	431a      	orrs	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3a01      	subs	r2, #1
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8099 	beq.w	80047dc <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d055      	beq.n	800475e <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01e      	beq.n	80046f8 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b68      	ldr	r3, [pc, #416]	; (8004860 <OSPI_ConfigCmd+0x2c0>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	68d1      	ldr	r1, [r2, #12]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	6952      	ldr	r2, [r2, #20]
 80046ca:	4311      	orrs	r1, r2
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	6912      	ldr	r2, [r2, #16]
 80046d0:	4311      	orrs	r1, r2
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	69d2      	ldr	r2, [r2, #28]
 80046d6:	4311      	orrs	r1, r2
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046dc:	4311      	orrs	r1, r2
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	6a12      	ldr	r2, [r2, #32]
 80046e2:	4311      	orrs	r1, r2
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e8:	4311      	orrs	r1, r2
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046ee:	430a      	orrs	r2, r1
 80046f0:	431a      	orrs	r2, r3
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e028      	b.n	800474a <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	68d1      	ldr	r1, [r2, #12]
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	6952      	ldr	r2, [r2, #20]
 800470c:	4311      	orrs	r1, r2
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	6912      	ldr	r2, [r2, #16]
 8004712:	4311      	orrs	r1, r2
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	69d2      	ldr	r2, [r2, #28]
 8004718:	4311      	orrs	r1, r2
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800471e:	4311      	orrs	r1, r2
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	6a12      	ldr	r2, [r2, #32]
 8004724:	430a      	orrs	r2, r1
 8004726:	431a      	orrs	r2, r3
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004734:	d109      	bne.n	800474a <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800473a:	2b08      	cmp	r3, #8
 800473c:	d105      	bne.n	800474a <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	6992      	ldr	r2, [r2, #24]
 800475a:	649a      	str	r2, [r3, #72]	; 0x48
 800475c:	e078      	b.n	8004850 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	2b00      	cmp	r3, #0
 8004764:	d017      	beq.n	8004796 <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800476e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	68d1      	ldr	r1, [r2, #12]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	6952      	ldr	r2, [r2, #20]
 800477a:	4311      	orrs	r1, r2
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	6912      	ldr	r2, [r2, #16]
 8004780:	4311      	orrs	r1, r2
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004786:	4311      	orrs	r1, r2
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800478c:	430a      	orrs	r2, r1
 800478e:	431a      	orrs	r2, r3
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	e01d      	b.n	80047d2 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68d9      	ldr	r1, [r3, #12]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4319      	orrs	r1, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	431a      	orrs	r2, r3
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047bc:	d109      	bne.n	80047d2 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d105      	bne.n	80047d2 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e039      	b.n	8004850 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d030      	beq.n	8004846 <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d017      	beq.n	800481c <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80047f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	69d1      	ldr	r1, [r2, #28]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004800:	4311      	orrs	r1, r2
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	6a12      	ldr	r2, [r2, #32]
 8004806:	4311      	orrs	r1, r2
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800480c:	4311      	orrs	r1, r2
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004812:	430a      	orrs	r2, r1
 8004814:	431a      	orrs	r2, r3
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e00e      	b.n	800483a <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	69d9      	ldr	r1, [r3, #28]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	4319      	orrs	r1, r3
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	430b      	orrs	r3, r1
 8004834:	431a      	orrs	r2, r3
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	6992      	ldr	r2, [r2, #24]
 8004842:	649a      	str	r2, [r3, #72]	; 0x48
 8004844:	e004      	b.n	8004850 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2208      	movs	r2, #8
 800484e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8004850:	7ffb      	ldrb	r3, [r7, #31]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3724      	adds	r7, #36	; 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	f0ffc0c0 	.word	0xf0ffc0c0

08004864 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	6039      	str	r1, [r7, #0]
 800486e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <OSPIM_GetConfig+0x26>
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d802      	bhi.n	800488a <OSPIM_GetConfig+0x26>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
 800488e:	e08e      	b.n	80049ae <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2200      	movs	r2, #0
 800489a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2200      	movs	r2, #0
 80048a0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2200      	movs	r2, #0
 80048a6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2200      	movs	r2, #0
 80048ac:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d101      	bne.n	80048b8 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80048b4:	4b41      	ldr	r3, [pc, #260]	; (80049bc <OSPIM_GetConfig+0x158>)
 80048b6:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e074      	b.n	80049a8 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80048be:	4a40      	ldr	r2, [pc, #256]	; (80049c0 <OSPIM_GetConfig+0x15c>)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4053      	eors	r3, r2
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4053      	eors	r3, r2
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d103      	bne.n	800490a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	4053      	eors	r3, r2
 800491a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d018      	beq.n	8004966 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4053      	eors	r3, r2
 800493a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d111      	bne.n	8004966 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d106      	bne.n	800495a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3301      	adds	r3, #1
 8004950:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	60da      	str	r2, [r3, #12]
 8004958:	e005      	b.n	8004966 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3301      	adds	r3, #1
 800495e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d018      	beq.n	80049a2 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4053      	eors	r3, r2
 8004976:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d111      	bne.n	80049a2 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	611a      	str	r2, [r3, #16]
 8004994:	e005      	b.n	80049a2 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3301      	adds	r3, #1
 800499a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3301      	adds	r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d987      	bls.n	80048be <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	04040222 	.word	0x04040222
 80049c0:	50061c00 	.word	0x50061c00

080049c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049c8:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <HAL_PWREx_GetVoltageRange+0x3c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d4:	d102      	bne.n	80049dc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80049d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049da:	e00b      	b.n	80049f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80049dc:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <HAL_PWREx_GetVoltageRange+0x3c>)
 80049de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ea:	d102      	bne.n	80049f2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80049ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049f0:	e000      	b.n	80049f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80049f2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40007000 	.word	0x40007000

08004a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d141      	bne.n	8004a96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a12:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1e:	d131      	bne.n	8004a84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a20:	4b47      	ldr	r3, [pc, #284]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a26:	4a46      	ldr	r2, [pc, #280]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a30:	4b43      	ldr	r3, [pc, #268]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a38:	4a41      	ldr	r2, [pc, #260]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004a40:	4b40      	ldr	r3, [pc, #256]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2232      	movs	r2, #50	; 0x32
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	4a3f      	ldr	r2, [pc, #252]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	0c9b      	lsrs	r3, r3, #18
 8004a52:	3301      	adds	r3, #1
 8004a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a56:	e002      	b.n	8004a5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a5e:	4b38      	ldr	r3, [pc, #224]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6a:	d102      	bne.n	8004a72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f2      	bne.n	8004a58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a72:	4b33      	ldr	r3, [pc, #204]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7e:	d158      	bne.n	8004b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e057      	b.n	8004b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a84:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a8a:	4a2d      	ldr	r2, [pc, #180]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a94:	e04d      	b.n	8004b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9c:	d141      	bne.n	8004b22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a9e:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aaa:	d131      	bne.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aac:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab2:	4a23      	ldr	r2, [pc, #140]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004abc:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ac4:	4a1e      	ldr	r2, [pc, #120]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2232      	movs	r2, #50	; 0x32
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	0c9b      	lsrs	r3, r3, #18
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ae2:	e002      	b.n	8004aea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aea:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af6:	d102      	bne.n	8004afe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f2      	bne.n	8004ae4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004afe:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0a:	d112      	bne.n	8004b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e011      	b.n	8004b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b16:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b20:	e007      	b.n	8004b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b2a:	4a05      	ldr	r2, [pc, #20]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b30:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40007000 	.word	0x40007000
 8004b44:	20020528 	.word	0x20020528
 8004b48:	431bde83 	.word	0x431bde83

08004b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f000 bc08 	b.w	8005370 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b60:	4b96      	ldr	r3, [pc, #600]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b6a:	4b94      	ldr	r3, [pc, #592]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80e4 	beq.w	8004d4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_RCC_OscConfig+0x4c>
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b0c      	cmp	r3, #12
 8004b8c:	f040 808b 	bne.w	8004ca6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	f040 8087 	bne.w	8004ca6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b98:	4b88      	ldr	r3, [pc, #544]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x64>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e3df      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1a      	ldr	r2, [r3, #32]
 8004bb4:	4b81      	ldr	r3, [pc, #516]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <HAL_RCC_OscConfig+0x7e>
 8004bc0:	4b7e      	ldr	r3, [pc, #504]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc8:	e005      	b.n	8004bd6 <HAL_RCC_OscConfig+0x8a>
 8004bca:	4b7c      	ldr	r3, [pc, #496]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d223      	bcs.n	8004c22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fdfe 	bl	80057e0 <RCC_SetFlashLatencyFromMSIRange>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e3c0      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bee:	4b73      	ldr	r3, [pc, #460]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a72      	ldr	r2, [pc, #456]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004bf4:	f043 0308 	orr.w	r3, r3, #8
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b70      	ldr	r3, [pc, #448]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	496d      	ldr	r1, [pc, #436]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c0c:	4b6b      	ldr	r3, [pc, #428]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	4968      	ldr	r1, [pc, #416]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	604b      	str	r3, [r1, #4]
 8004c20:	e025      	b.n	8004c6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c22:	4b66      	ldr	r3, [pc, #408]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a65      	ldr	r2, [pc, #404]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004c28:	f043 0308 	orr.w	r3, r3, #8
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4b63      	ldr	r3, [pc, #396]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	4960      	ldr	r1, [pc, #384]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c40:	4b5e      	ldr	r3, [pc, #376]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	495b      	ldr	r1, [pc, #364]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fdbe 	bl	80057e0 <RCC_SetFlashLatencyFromMSIRange>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e380      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c6e:	f000 fcc1 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 8004c72:	4602      	mov	r2, r0
 8004c74:	4b51      	ldr	r3, [pc, #324]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	4950      	ldr	r1, [pc, #320]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004c80:	5ccb      	ldrb	r3, [r1, r3]
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8a:	4a4e      	ldr	r2, [pc, #312]	; (8004dc4 <HAL_RCC_OscConfig+0x278>)
 8004c8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c8e:	4b4e      	ldr	r3, [pc, #312]	; (8004dc8 <HAL_RCC_OscConfig+0x27c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f006 fbf8 	bl	800b488 <HAL_InitTick>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d052      	beq.n	8004d48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	e364      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d032      	beq.n	8004d14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cae:	4b43      	ldr	r3, [pc, #268]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a42      	ldr	r2, [pc, #264]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cba:	f7fb ffa5 	bl	8000c08 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cc2:	f7fb ffa1 	bl	8000c08 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e34d      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cd4:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ce0:	4b36      	ldr	r3, [pc, #216]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a35      	ldr	r2, [pc, #212]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004ce6:	f043 0308 	orr.w	r3, r3, #8
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	4930      	ldr	r1, [pc, #192]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cfe:	4b2f      	ldr	r3, [pc, #188]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	492b      	ldr	r1, [pc, #172]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
 8004d12:	e01a      	b.n	8004d4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d14:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d20:	f7fb ff72 	bl	8000c08 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d28:	f7fb ff6e 	bl	8000c08 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e31a      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x1dc>
 8004d46:	e000      	b.n	8004d4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d073      	beq.n	8004e3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d005      	beq.n	8004d68 <HAL_RCC_OscConfig+0x21c>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	d10e      	bne.n	8004d80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d10b      	bne.n	8004d80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d063      	beq.n	8004e3c <HAL_RCC_OscConfig+0x2f0>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d15f      	bne.n	8004e3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e2f7      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d106      	bne.n	8004d98 <HAL_RCC_OscConfig+0x24c>
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a0b      	ldr	r2, [pc, #44]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e025      	b.n	8004de4 <HAL_RCC_OscConfig+0x298>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da0:	d114      	bne.n	8004dcc <HAL_RCC_OscConfig+0x280>
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a05      	ldr	r2, [pc, #20]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a02      	ldr	r2, [pc, #8]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e013      	b.n	8004de4 <HAL_RCC_OscConfig+0x298>
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	0800c418 	.word	0x0800c418
 8004dc4:	20020528 	.word	0x20020528
 8004dc8:	20000000 	.word	0x20000000
 8004dcc:	4ba0      	ldr	r3, [pc, #640]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a9f      	ldr	r2, [pc, #636]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	4b9d      	ldr	r3, [pc, #628]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a9c      	ldr	r2, [pc, #624]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d013      	beq.n	8004e14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fb ff0c 	bl	8000c08 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df4:	f7fb ff08 	bl	8000c08 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	; 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e2b4      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e06:	4b92      	ldr	r3, [pc, #584]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x2a8>
 8004e12:	e014      	b.n	8004e3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fb fef8 	bl	8000c08 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fb fef4 	bl	8000c08 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e2a0      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e2e:	4b88      	ldr	r3, [pc, #544]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x2d0>
 8004e3a:	e000      	b.n	8004e3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d060      	beq.n	8004f0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d005      	beq.n	8004e5c <HAL_RCC_OscConfig+0x310>
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b0c      	cmp	r3, #12
 8004e54:	d119      	bne.n	8004e8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d116      	bne.n	8004e8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e5c:	4b7c      	ldr	r3, [pc, #496]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_RCC_OscConfig+0x328>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e27d      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e74:	4b76      	ldr	r3, [pc, #472]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	061b      	lsls	r3, r3, #24
 8004e82:	4973      	ldr	r1, [pc, #460]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e88:	e040      	b.n	8004f0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d023      	beq.n	8004eda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e92:	4b6f      	ldr	r3, [pc, #444]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a6e      	ldr	r2, [pc, #440]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9e:	f7fb feb3 	bl	8000c08 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea6:	f7fb feaf 	bl	8000c08 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e25b      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb8:	4b65      	ldr	r3, [pc, #404]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec4:	4b62      	ldr	r3, [pc, #392]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	061b      	lsls	r3, r3, #24
 8004ed2:	495f      	ldr	r1, [pc, #380]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]
 8004ed8:	e018      	b.n	8004f0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eda:	4b5d      	ldr	r3, [pc, #372]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a5c      	ldr	r2, [pc, #368]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee6:	f7fb fe8f 	bl	8000c08 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eee:	f7fb fe8b 	bl	8000c08 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e237      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f00:	4b53      	ldr	r3, [pc, #332]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f0      	bne.n	8004eee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d03c      	beq.n	8004f92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01c      	beq.n	8004f5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f20:	4b4b      	ldr	r3, [pc, #300]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f26:	4a4a      	ldr	r2, [pc, #296]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fb fe6a 	bl	8000c08 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f38:	f7fb fe66 	bl	8000c08 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e212      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f4a:	4b41      	ldr	r3, [pc, #260]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0ef      	beq.n	8004f38 <HAL_RCC_OscConfig+0x3ec>
 8004f58:	e01b      	b.n	8004f92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f5a:	4b3d      	ldr	r3, [pc, #244]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f60:	4a3b      	ldr	r2, [pc, #236]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6a:	f7fb fe4d 	bl	8000c08 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f72:	f7fb fe49 	bl	8000c08 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e1f5      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f84:	4b32      	ldr	r3, [pc, #200]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1ef      	bne.n	8004f72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80a6 	beq.w	80050ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fa4:	4b2a      	ldr	r3, [pc, #168]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10d      	bne.n	8004fcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb0:	4b27      	ldr	r3, [pc, #156]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb4:	4a26      	ldr	r2, [pc, #152]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fba:	6593      	str	r3, [r2, #88]	; 0x58
 8004fbc:	4b24      	ldr	r3, [pc, #144]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8004fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fcc:	4b21      	ldr	r3, [pc, #132]	; (8005054 <HAL_RCC_OscConfig+0x508>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d118      	bne.n	800500a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fd8:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <HAL_RCC_OscConfig+0x508>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <HAL_RCC_OscConfig+0x508>)
 8004fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe4:	f7fb fe10 	bl	8000c08 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fec:	f7fb fe0c 	bl	8000c08 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e1b8      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <HAL_RCC_OscConfig+0x508>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d108      	bne.n	8005024 <HAL_RCC_OscConfig+0x4d8>
 8005012:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	4a0d      	ldr	r2, [pc, #52]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005022:	e029      	b.n	8005078 <HAL_RCC_OscConfig+0x52c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b05      	cmp	r3, #5
 800502a:	d115      	bne.n	8005058 <HAL_RCC_OscConfig+0x50c>
 800502c:	4b08      	ldr	r3, [pc, #32]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	4a07      	ldr	r2, [pc, #28]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8005034:	f043 0304 	orr.w	r3, r3, #4
 8005038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	4a03      	ldr	r2, [pc, #12]	; (8005050 <HAL_RCC_OscConfig+0x504>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800504c:	e014      	b.n	8005078 <HAL_RCC_OscConfig+0x52c>
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
 8005054:	40007000 	.word	0x40007000
 8005058:	4b9d      	ldr	r3, [pc, #628]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	4a9c      	ldr	r2, [pc, #624]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005068:	4b99      	ldr	r3, [pc, #612]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	4a98      	ldr	r2, [pc, #608]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d016      	beq.n	80050ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fb fdc2 	bl	8000c08 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005086:	e00a      	b.n	800509e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005088:	f7fb fdbe 	bl	8000c08 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	f241 3288 	movw	r2, #5000	; 0x1388
 8005096:	4293      	cmp	r3, r2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e168      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509e:	4b8c      	ldr	r3, [pc, #560]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0ed      	beq.n	8005088 <HAL_RCC_OscConfig+0x53c>
 80050ac:	e015      	b.n	80050da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ae:	f7fb fdab 	bl	8000c08 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b4:	e00a      	b.n	80050cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b6:	f7fb fda7 	bl	8000c08 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e151      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050cc:	4b80      	ldr	r3, [pc, #512]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1ed      	bne.n	80050b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050da:	7ffb      	ldrb	r3, [r7, #31]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d105      	bne.n	80050ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e0:	4b7b      	ldr	r3, [pc, #492]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 80050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e4:	4a7a      	ldr	r2, [pc, #488]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 80050e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d03c      	beq.n	8005172 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01c      	beq.n	800513a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005100:	4b73      	ldr	r3, [pc, #460]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 8005102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005106:	4a72      	ldr	r2, [pc, #456]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005110:	f7fb fd7a 	bl	8000c08 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005118:	f7fb fd76 	bl	8000c08 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e122      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800512a:	4b69      	ldr	r3, [pc, #420]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 800512c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ef      	beq.n	8005118 <HAL_RCC_OscConfig+0x5cc>
 8005138:	e01b      	b.n	8005172 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800513a:	4b65      	ldr	r3, [pc, #404]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 800513c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005140:	4a63      	ldr	r2, [pc, #396]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514a:	f7fb fd5d 	bl	8000c08 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005152:	f7fb fd59 	bl	8000c08 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e105      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005164:	4b5a      	ldr	r3, [pc, #360]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 8005166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1ef      	bne.n	8005152 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80f9 	beq.w	800536e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	2b02      	cmp	r3, #2
 8005182:	f040 80cf 	bne.w	8005324 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005186:	4b52      	ldr	r3, [pc, #328]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f003 0203 	and.w	r2, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	429a      	cmp	r2, r3
 8005198:	d12c      	bne.n	80051f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	3b01      	subs	r3, #1
 80051a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d123      	bne.n	80051f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d11b      	bne.n	80051f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d113      	bne.n	80051f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	3b01      	subs	r3, #1
 80051da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d109      	bne.n	80051f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	3b01      	subs	r3, #1
 80051ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d071      	beq.n	80052d8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b0c      	cmp	r3, #12
 80051f8:	d068      	beq.n	80052cc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051fa:	4b35      	ldr	r3, [pc, #212]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d105      	bne.n	8005212 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005206:	4b32      	ldr	r3, [pc, #200]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0ac      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005216:	4b2e      	ldr	r3, [pc, #184]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2d      	ldr	r2, [pc, #180]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 800521c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005220:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005222:	f7fb fcf1 	bl	8000c08 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522a:	f7fb fced 	bl	8000c08 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e099      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800523c:	4b24      	ldr	r3, [pc, #144]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f0      	bne.n	800522a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005248:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	4b21      	ldr	r3, [pc, #132]	; (80052d4 <HAL_RCC_OscConfig+0x788>)
 800524e:	4013      	ands	r3, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005258:	3a01      	subs	r2, #1
 800525a:	0112      	lsls	r2, r2, #4
 800525c:	4311      	orrs	r1, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005262:	0212      	lsls	r2, r2, #8
 8005264:	4311      	orrs	r1, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800526a:	0852      	lsrs	r2, r2, #1
 800526c:	3a01      	subs	r2, #1
 800526e:	0552      	lsls	r2, r2, #21
 8005270:	4311      	orrs	r1, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005276:	0852      	lsrs	r2, r2, #1
 8005278:	3a01      	subs	r2, #1
 800527a:	0652      	lsls	r2, r2, #25
 800527c:	4311      	orrs	r1, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005282:	06d2      	lsls	r2, r2, #27
 8005284:	430a      	orrs	r2, r1
 8005286:	4912      	ldr	r1, [pc, #72]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 8005288:	4313      	orrs	r3, r2
 800528a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800528c:	4b10      	ldr	r3, [pc, #64]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0f      	ldr	r2, [pc, #60]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 8005292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005296:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005298:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4a0c      	ldr	r2, [pc, #48]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 800529e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052a4:	f7fb fcb0 	bl	8000c08 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fb fcac 	bl	8000c08 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e058      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <HAL_RCC_OscConfig+0x784>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052ca:	e050      	b.n	800536e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e04f      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
 80052d0:	40021000 	.word	0x40021000
 80052d4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d8:	4b27      	ldr	r3, [pc, #156]	; (8005378 <HAL_RCC_OscConfig+0x82c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d144      	bne.n	800536e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052e4:	4b24      	ldr	r3, [pc, #144]	; (8005378 <HAL_RCC_OscConfig+0x82c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a23      	ldr	r2, [pc, #140]	; (8005378 <HAL_RCC_OscConfig+0x82c>)
 80052ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052f0:	4b21      	ldr	r3, [pc, #132]	; (8005378 <HAL_RCC_OscConfig+0x82c>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4a20      	ldr	r2, [pc, #128]	; (8005378 <HAL_RCC_OscConfig+0x82c>)
 80052f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052fc:	f7fb fc84 	bl	8000c08 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005304:	f7fb fc80 	bl	8000c08 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e02c      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_RCC_OscConfig+0x82c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCC_OscConfig+0x7b8>
 8005322:	e024      	b.n	800536e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b0c      	cmp	r3, #12
 8005328:	d01f      	beq.n	800536a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800532a:	4b13      	ldr	r3, [pc, #76]	; (8005378 <HAL_RCC_OscConfig+0x82c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a12      	ldr	r2, [pc, #72]	; (8005378 <HAL_RCC_OscConfig+0x82c>)
 8005330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005336:	f7fb fc67 	bl	8000c08 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800533e:	f7fb fc63 	bl	8000c08 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e00f      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <HAL_RCC_OscConfig+0x82c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1f0      	bne.n	800533e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800535c:	4b06      	ldr	r3, [pc, #24]	; (8005378 <HAL_RCC_OscConfig+0x82c>)
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	4905      	ldr	r1, [pc, #20]	; (8005378 <HAL_RCC_OscConfig+0x82c>)
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <HAL_RCC_OscConfig+0x830>)
 8005364:	4013      	ands	r3, r2
 8005366:	60cb      	str	r3, [r1, #12]
 8005368:	e001      	b.n	800536e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3720      	adds	r7, #32
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40021000 	.word	0x40021000
 800537c:	feeefffc 	.word	0xfeeefffc

08005380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e11d      	b.n	80055d4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005398:	4b90      	ldr	r3, [pc, #576]	; (80055dc <HAL_RCC_ClockConfig+0x25c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d910      	bls.n	80053c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a6:	4b8d      	ldr	r3, [pc, #564]	; (80055dc <HAL_RCC_ClockConfig+0x25c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 020f 	bic.w	r2, r3, #15
 80053ae:	498b      	ldr	r1, [pc, #556]	; (80055dc <HAL_RCC_ClockConfig+0x25c>)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b6:	4b89      	ldr	r3, [pc, #548]	; (80055dc <HAL_RCC_ClockConfig+0x25c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d001      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e105      	b.n	80055d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d010      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	4b81      	ldr	r3, [pc, #516]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d908      	bls.n	80053f6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e4:	4b7e      	ldr	r3, [pc, #504]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	497b      	ldr	r1, [pc, #492]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d079      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b03      	cmp	r3, #3
 8005408:	d11e      	bne.n	8005448 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800540a:	4b75      	ldr	r3, [pc, #468]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e0dc      	b.n	80055d4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800541a:	f000 fa3b 	bl	8005894 <RCC_GetSysClockFreqFromPLLSource>
 800541e:	4603      	mov	r3, r0
 8005420:	4a70      	ldr	r2, [pc, #448]	; (80055e4 <HAL_RCC_ClockConfig+0x264>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d946      	bls.n	80054b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005426:	4b6e      	ldr	r3, [pc, #440]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d140      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005432:	4b6b      	ldr	r3, [pc, #428]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800543a:	4a69      	ldr	r2, [pc, #420]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 800543c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005440:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005442:	2380      	movs	r3, #128	; 0x80
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	e035      	b.n	80054b4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d107      	bne.n	8005460 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005450:	4b63      	ldr	r3, [pc, #396]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d115      	bne.n	8005488 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0b9      	b.n	80055d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d107      	bne.n	8005478 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005468:	4b5d      	ldr	r3, [pc, #372]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0ad      	b.n	80055d4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005478:	4b59      	ldr	r3, [pc, #356]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0a5      	b.n	80055d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005488:	f000 f8b4 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 800548c:	4603      	mov	r3, r0
 800548e:	4a55      	ldr	r2, [pc, #340]	; (80055e4 <HAL_RCC_ClockConfig+0x264>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d90f      	bls.n	80054b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005494:	4b52      	ldr	r3, [pc, #328]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d109      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054a0:	4b4f      	ldr	r3, [pc, #316]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a8:	4a4d      	ldr	r2, [pc, #308]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 80054aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054b4:	4b4a      	ldr	r3, [pc, #296]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f023 0203 	bic.w	r2, r3, #3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4947      	ldr	r1, [pc, #284]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c6:	f7fb fb9f 	bl	8000c08 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054cc:	e00a      	b.n	80054e4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ce:	f7fb fb9b 	bl	8000c08 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054dc:	4293      	cmp	r3, r2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e077      	b.n	80055d4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e4:	4b3e      	ldr	r3, [pc, #248]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 020c 	and.w	r2, r3, #12
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d1eb      	bne.n	80054ce <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b80      	cmp	r3, #128	; 0x80
 80054fa:	d105      	bne.n	8005508 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054fc:	4b38      	ldr	r3, [pc, #224]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	4a37      	ldr	r2, [pc, #220]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 8005502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005506:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d010      	beq.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005520:	429a      	cmp	r2, r3
 8005522:	d208      	bcs.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005524:	4b2e      	ldr	r3, [pc, #184]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	492b      	ldr	r1, [pc, #172]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 8005532:	4313      	orrs	r3, r2
 8005534:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005536:	4b29      	ldr	r3, [pc, #164]	; (80055dc <HAL_RCC_ClockConfig+0x25c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d210      	bcs.n	8005566 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005544:	4b25      	ldr	r3, [pc, #148]	; (80055dc <HAL_RCC_ClockConfig+0x25c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f023 020f 	bic.w	r2, r3, #15
 800554c:	4923      	ldr	r1, [pc, #140]	; (80055dc <HAL_RCC_ClockConfig+0x25c>)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	4313      	orrs	r3, r2
 8005552:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005554:	4b21      	ldr	r3, [pc, #132]	; (80055dc <HAL_RCC_ClockConfig+0x25c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d001      	beq.n	8005566 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e036      	b.n	80055d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005572:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	4918      	ldr	r1, [pc, #96]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 8005580:	4313      	orrs	r3, r2
 8005582:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005590:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4910      	ldr	r1, [pc, #64]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055a4:	f000 f826 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <HAL_RCC_ClockConfig+0x260>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	091b      	lsrs	r3, r3, #4
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	490c      	ldr	r1, [pc, #48]	; (80055e8 <HAL_RCC_ClockConfig+0x268>)
 80055b6:	5ccb      	ldrb	r3, [r1, r3]
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
 80055c0:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <HAL_RCC_ClockConfig+0x26c>)
 80055c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_RCC_ClockConfig+0x270>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f005 ff5d 	bl	800b488 <HAL_InitTick>
 80055ce:	4603      	mov	r3, r0
 80055d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40022000 	.word	0x40022000
 80055e0:	40021000 	.word	0x40021000
 80055e4:	04c4b400 	.word	0x04c4b400
 80055e8:	0800c418 	.word	0x0800c418
 80055ec:	20020528 	.word	0x20020528
 80055f0:	20000000 	.word	0x20000000

080055f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b089      	sub	sp, #36	; 0x24
 80055f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005602:	4b3e      	ldr	r3, [pc, #248]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800560c:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0x34>
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b0c      	cmp	r3, #12
 8005620:	d121      	bne.n	8005666 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d11e      	bne.n	8005666 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005628:	4b34      	ldr	r3, [pc, #208]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d107      	bne.n	8005644 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005634:	4b31      	ldr	r3, [pc, #196]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	e005      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005644:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005650:	4a2b      	ldr	r2, [pc, #172]	; (8005700 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005658:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005664:	e00a      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d102      	bne.n	8005672 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800566c:	4b25      	ldr	r3, [pc, #148]	; (8005704 <HAL_RCC_GetSysClockFreq+0x110>)
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e004      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b08      	cmp	r3, #8
 8005676:	d101      	bne.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005678:	4b23      	ldr	r3, [pc, #140]	; (8005708 <HAL_RCC_GetSysClockFreq+0x114>)
 800567a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b0c      	cmp	r3, #12
 8005680:	d134      	bne.n	80056ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005682:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d003      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0xa6>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d003      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0xac>
 8005698:	e005      	b.n	80056a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800569a:	4b1a      	ldr	r3, [pc, #104]	; (8005704 <HAL_RCC_GetSysClockFreq+0x110>)
 800569c:	617b      	str	r3, [r7, #20]
      break;
 800569e:	e005      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80056a0:	4b19      	ldr	r3, [pc, #100]	; (8005708 <HAL_RCC_GetSysClockFreq+0x114>)
 80056a2:	617b      	str	r3, [r7, #20]
      break;
 80056a4:	e002      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	617b      	str	r3, [r7, #20]
      break;
 80056aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056ac:	4b13      	ldr	r3, [pc, #76]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	3301      	adds	r3, #1
 80056b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056ba:	4b10      	ldr	r3, [pc, #64]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	0a1b      	lsrs	r3, r3, #8
 80056c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	fb03 f202 	mul.w	r2, r3, r2
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056d2:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	0e5b      	lsrs	r3, r3, #25
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	3301      	adds	r3, #1
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80056ec:	69bb      	ldr	r3, [r7, #24]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3724      	adds	r7, #36	; 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
 8005700:	0800c430 	.word	0x0800c430
 8005704:	00f42400 	.word	0x00f42400
 8005708:	007a1200 	.word	0x007a1200

0800570c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005710:	4b03      	ldr	r3, [pc, #12]	; (8005720 <HAL_RCC_GetHCLKFreq+0x14>)
 8005712:	681b      	ldr	r3, [r3, #0]
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20020528 	.word	0x20020528

08005724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005728:	f7ff fff0 	bl	800570c <HAL_RCC_GetHCLKFreq>
 800572c:	4602      	mov	r2, r0
 800572e:	4b06      	ldr	r3, [pc, #24]	; (8005748 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	0a1b      	lsrs	r3, r3, #8
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	4904      	ldr	r1, [pc, #16]	; (800574c <HAL_RCC_GetPCLK1Freq+0x28>)
 800573a:	5ccb      	ldrb	r3, [r1, r3]
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40021000 	.word	0x40021000
 800574c:	0800c428 	.word	0x0800c428

08005750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005754:	f7ff ffda 	bl	800570c <HAL_RCC_GetHCLKFreq>
 8005758:	4602      	mov	r2, r0
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_RCC_GetPCLK2Freq+0x24>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	0adb      	lsrs	r3, r3, #11
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	4904      	ldr	r1, [pc, #16]	; (8005778 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005766:	5ccb      	ldrb	r3, [r1, r3]
 8005768:	f003 031f 	and.w	r3, r3, #31
 800576c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005770:	4618      	mov	r0, r3
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40021000 	.word	0x40021000
 8005778:	0800c428 	.word	0x0800c428

0800577c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	220f      	movs	r2, #15
 800578a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800578c:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <HAL_RCC_GetClockConfig+0x5c>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 0203 	and.w	r2, r3, #3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <HAL_RCC_GetClockConfig+0x5c>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <HAL_RCC_GetClockConfig+0x5c>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80057b0:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <HAL_RCC_GetClockConfig+0x5c>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	08db      	lsrs	r3, r3, #3
 80057b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80057be:	4b07      	ldr	r3, [pc, #28]	; (80057dc <HAL_RCC_GetClockConfig+0x60>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 020f 	and.w	r2, r3, #15
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	601a      	str	r2, [r3, #0]
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40021000 	.word	0x40021000
 80057dc:	40022000 	.word	0x40022000

080057e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80057e8:	2300      	movs	r3, #0
 80057ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80057ec:	4b27      	ldr	r3, [pc, #156]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80057f8:	f7ff f8e4 	bl	80049c4 <HAL_PWREx_GetVoltageRange>
 80057fc:	6178      	str	r0, [r7, #20]
 80057fe:	e014      	b.n	800582a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005800:	4b22      	ldr	r3, [pc, #136]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005804:	4a21      	ldr	r2, [pc, #132]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580a:	6593      	str	r3, [r2, #88]	; 0x58
 800580c:	4b1f      	ldr	r3, [pc, #124]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800580e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005818:	f7ff f8d4 	bl	80049c4 <HAL_PWREx_GetVoltageRange>
 800581c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800581e:	4b1b      	ldr	r3, [pc, #108]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005822:	4a1a      	ldr	r2, [pc, #104]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005828:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005830:	d10b      	bne.n	800584a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d913      	bls.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2ba0      	cmp	r3, #160	; 0xa0
 800583c:	d902      	bls.n	8005844 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800583e:	2302      	movs	r3, #2
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	e00d      	b.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005844:	2301      	movs	r3, #1
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	e00a      	b.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b7f      	cmp	r3, #127	; 0x7f
 800584e:	d902      	bls.n	8005856 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005850:	2302      	movs	r3, #2
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	e004      	b.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b70      	cmp	r3, #112	; 0x70
 800585a:	d101      	bne.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800585c:	2301      	movs	r3, #1
 800585e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f023 020f 	bic.w	r2, r3, #15
 8005868:	4909      	ldr	r1, [pc, #36]	; (8005890 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	429a      	cmp	r2, r3
 800587c:	d001      	beq.n	8005882 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40021000 	.word	0x40021000
 8005890:	40022000 	.word	0x40022000

08005894 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800589a:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d00b      	beq.n	80058c2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d825      	bhi.n	80058fc <RCC_GetSysClockFreqFromPLLSource+0x68>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d008      	beq.n	80058c8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d11f      	bne.n	80058fc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80058bc:	4b25      	ldr	r3, [pc, #148]	; (8005954 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80058be:	613b      	str	r3, [r7, #16]
    break;
 80058c0:	e01f      	b.n	8005902 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80058c2:	4b25      	ldr	r3, [pc, #148]	; (8005958 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80058c4:	613b      	str	r3, [r7, #16]
    break;
 80058c6:	e01c      	b.n	8005902 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058c8:	4b21      	ldr	r3, [pc, #132]	; (8005950 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d107      	bne.n	80058e4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058d4:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	f003 030f 	and.w	r3, r3, #15
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	e005      	b.n	80058f0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058e4:	4b1a      	ldr	r3, [pc, #104]	; (8005950 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80058f0:	4a1a      	ldr	r2, [pc, #104]	; (800595c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f8:	613b      	str	r3, [r7, #16]
    break;
 80058fa:	e002      	b.n	8005902 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	613b      	str	r3, [r7, #16]
    break;
 8005900:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005902:	4b13      	ldr	r3, [pc, #76]	; (8005950 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	091b      	lsrs	r3, r3, #4
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	3301      	adds	r3, #1
 800590e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005910:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	0a1b      	lsrs	r3, r3, #8
 8005916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	fb03 f202 	mul.w	r2, r3, r2
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	fbb2 f3f3 	udiv	r3, r2, r3
 8005926:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005928:	4b09      	ldr	r3, [pc, #36]	; (8005950 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	0e5b      	lsrs	r3, r3, #25
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	3301      	adds	r3, #1
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005940:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005942:	683b      	ldr	r3, [r7, #0]
}
 8005944:	4618      	mov	r0, r3
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	40021000 	.word	0x40021000
 8005954:	00f42400 	.word	0x00f42400
 8005958:	007a1200 	.word	0x007a1200
 800595c:	0800c430 	.word	0x0800c430

08005960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005968:	2300      	movs	r3, #0
 800596a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800596c:	2300      	movs	r3, #0
 800596e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005978:	2b00      	cmp	r3, #0
 800597a:	d040      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005980:	2b80      	cmp	r3, #128	; 0x80
 8005982:	d02a      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d825      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005988:	2b60      	cmp	r3, #96	; 0x60
 800598a:	d026      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800598c:	2b60      	cmp	r3, #96	; 0x60
 800598e:	d821      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d006      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d81d      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d009      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800599c:	2b20      	cmp	r3, #32
 800599e:	d010      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80059a0:	e018      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059a2:	4b89      	ldr	r3, [pc, #548]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	4a88      	ldr	r2, [pc, #544]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059ae:	e015      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	2100      	movs	r1, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fb02 	bl	8005fc0 <RCCEx_PLLSAI1_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059c0:	e00c      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3320      	adds	r3, #32
 80059c6:	2100      	movs	r1, #0
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fbed 	bl	80061a8 <RCCEx_PLLSAI2_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059d2:	e003      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	74fb      	strb	r3, [r7, #19]
      break;
 80059d8:	e000      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80059da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059dc:	7cfb      	ldrb	r3, [r7, #19]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10b      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059e2:	4b79      	ldr	r3, [pc, #484]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059e8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f0:	4975      	ldr	r1, [pc, #468]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80059f8:	e001      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fa:	7cfb      	ldrb	r3, [r7, #19]
 80059fc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d047      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a12:	d030      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a18:	d82a      	bhi.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a1e:	d02a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a24:	d824      	bhi.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2a:	d008      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a30:	d81e      	bhi.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a3a:	d010      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a3c:	e018      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a3e:	4b62      	ldr	r3, [pc, #392]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	4a61      	ldr	r2, [pc, #388]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a48:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a4a:	e015      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	2100      	movs	r1, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fab4 	bl	8005fc0 <RCCEx_PLLSAI1_Config>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a5c:	e00c      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3320      	adds	r3, #32
 8005a62:	2100      	movs	r1, #0
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 fb9f 	bl	80061a8 <RCCEx_PLLSAI2_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a6e:	e003      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	74fb      	strb	r3, [r7, #19]
      break;
 8005a74:	e000      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a78:	7cfb      	ldrb	r3, [r7, #19]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10b      	bne.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a7e:	4b52      	ldr	r3, [pc, #328]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	494e      	ldr	r1, [pc, #312]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005a94:	e001      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a96:	7cfb      	ldrb	r3, [r7, #19]
 8005a98:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 809f 	beq.w	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005aac:	4b46      	ldr	r3, [pc, #280]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00d      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac2:	4b41      	ldr	r3, [pc, #260]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac6:	4a40      	ldr	r2, [pc, #256]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005acc:	6593      	str	r3, [r2, #88]	; 0x58
 8005ace:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad6:	60bb      	str	r3, [r7, #8]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ada:	2301      	movs	r3, #1
 8005adc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ade:	4b3b      	ldr	r3, [pc, #236]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a3a      	ldr	r2, [pc, #232]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005aea:	f7fb f88d 	bl	8000c08 <HAL_GetTick>
 8005aee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005af0:	e009      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af2:	f7fb f889 	bl	8000c08 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d902      	bls.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	74fb      	strb	r3, [r7, #19]
        break;
 8005b04:	e005      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b06:	4b31      	ldr	r3, [pc, #196]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0ef      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005b12:	7cfb      	ldrb	r3, [r7, #19]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d15b      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01f      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d019      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b36:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b48:	4a1f      	ldr	r2, [pc, #124]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b52:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b58:	4a1b      	ldr	r2, [pc, #108]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b62:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d016      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b74:	f7fb f848 	bl	8000c08 <HAL_GetTick>
 8005b78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b7a:	e00b      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7c:	f7fb f844 	bl	8000c08 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d902      	bls.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	74fb      	strb	r3, [r7, #19]
            break;
 8005b92:	e006      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b94:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0ec      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005ba2:	7cfb      	ldrb	r3, [r7, #19]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10c      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ba8:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb8:	4903      	ldr	r1, [pc, #12]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005bc0:	e008      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bc2:	7cfb      	ldrb	r3, [r7, #19]
 8005bc4:	74bb      	strb	r3, [r7, #18]
 8005bc6:	e005      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd0:	7cfb      	ldrb	r3, [r7, #19]
 8005bd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bd4:	7c7b      	ldrb	r3, [r7, #17]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d105      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bda:	4ba0      	ldr	r3, [pc, #640]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	4a9f      	ldr	r2, [pc, #636]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bf2:	4b9a      	ldr	r3, [pc, #616]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf8:	f023 0203 	bic.w	r2, r3, #3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c00:	4996      	ldr	r1, [pc, #600]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00a      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c14:	4b91      	ldr	r3, [pc, #580]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1a:	f023 020c 	bic.w	r2, r3, #12
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	498e      	ldr	r1, [pc, #568]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c36:	4b89      	ldr	r3, [pc, #548]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	4985      	ldr	r1, [pc, #532]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00a      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c58:	4b80      	ldr	r3, [pc, #512]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c66:	497d      	ldr	r1, [pc, #500]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0310 	and.w	r3, r3, #16
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c7a:	4b78      	ldr	r3, [pc, #480]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c88:	4974      	ldr	r1, [pc, #464]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c9c:	4b6f      	ldr	r3, [pc, #444]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005caa:	496c      	ldr	r1, [pc, #432]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cbe:	4b67      	ldr	r3, [pc, #412]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ccc:	4963      	ldr	r1, [pc, #396]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ce0:	4b5e      	ldr	r3, [pc, #376]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cee:	495b      	ldr	r1, [pc, #364]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d02:	4b56      	ldr	r3, [pc, #344]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d10:	4952      	ldr	r1, [pc, #328]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d24:	4b4d      	ldr	r3, [pc, #308]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d32:	494a      	ldr	r1, [pc, #296]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d46:	4b45      	ldr	r3, [pc, #276]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d54:	4941      	ldr	r1, [pc, #260]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d68:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d6e:	f023 0203 	bic.w	r2, r3, #3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d76:	4939      	ldr	r1, [pc, #228]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d028      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d8a:	4b34      	ldr	r3, [pc, #208]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d98:	4930      	ldr	r1, [pc, #192]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005da8:	d106      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005daa:	4b2c      	ldr	r3, [pc, #176]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	4a2b      	ldr	r2, [pc, #172]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005db0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005db4:	60d3      	str	r3, [r2, #12]
 8005db6:	e011      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dc0:	d10c      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 f8f9 	bl	8005fc0 <RCCEx_PLLSAI1_Config>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005dd2:	7cfb      	ldrb	r3, [r7, #19]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005dd8:	7cfb      	ldrb	r3, [r7, #19]
 8005dda:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d04d      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005df0:	d108      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005df2:	4b1a      	ldr	r3, [pc, #104]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005df8:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dfe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005e02:	e012      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005e04:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e0a:	4a14      	ldr	r2, [pc, #80]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e10:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005e14:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e22:	490e      	ldr	r1, [pc, #56]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e32:	d106      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e34:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4a08      	ldr	r2, [pc, #32]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e3e:	60d3      	str	r3, [r2, #12]
 8005e40:	e020      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e4a:	d109      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e4c:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a02      	ldr	r2, [pc, #8]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e56:	60d3      	str	r3, [r2, #12]
 8005e58:	e014      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e68:	d10c      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	2101      	movs	r1, #1
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 f8a5 	bl	8005fc0 <RCCEx_PLLSAI1_Config>
 8005e76:	4603      	mov	r3, r0
 8005e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e7a:	7cfb      	ldrb	r3, [r7, #19]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005e80:	7cfb      	ldrb	r3, [r7, #19]
 8005e82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d028      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e90:	4b4a      	ldr	r3, [pc, #296]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e9e:	4947      	ldr	r1, [pc, #284]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eae:	d106      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eb0:	4b42      	ldr	r3, [pc, #264]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a41      	ldr	r2, [pc, #260]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eba:	60d3      	str	r3, [r2, #12]
 8005ebc:	e011      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ec6:	d10c      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f876 	bl	8005fc0 <RCCEx_PLLSAI1_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ed8:	7cfb      	ldrb	r3, [r7, #19]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005ede:	7cfb      	ldrb	r3, [r7, #19]
 8005ee0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01e      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005eee:	4b33      	ldr	r3, [pc, #204]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005efe:	492f      	ldr	r1, [pc, #188]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f10:	d10c      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3304      	adds	r3, #4
 8005f16:	2102      	movs	r1, #2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 f851 	bl	8005fc0 <RCCEx_PLLSAI1_Config>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f22:	7cfb      	ldrb	r3, [r7, #19]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005f28:	7cfb      	ldrb	r3, [r7, #19]
 8005f2a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f38:	4b20      	ldr	r3, [pc, #128]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f3e:	f023 0204 	bic.w	r2, r3, #4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f48:	491c      	ldr	r1, [pc, #112]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f5c:	4b17      	ldr	r3, [pc, #92]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f62:	f023 0218 	bic.w	r2, r3, #24
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6c:	4913      	ldr	r1, [pc, #76]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d017      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f90:	490a      	ldr	r1, [pc, #40]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fa2:	d105      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fa4:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4a04      	ldr	r2, [pc, #16]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005fb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	40021000 	.word	0x40021000

08005fc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fce:	4b72      	ldr	r3, [pc, #456]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00e      	beq.n	8005ff8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005fda:	4b6f      	ldr	r3, [pc, #444]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0203 	and.w	r2, r3, #3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d103      	bne.n	8005ff2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
       ||
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d142      	bne.n	8006078 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	73fb      	strb	r3, [r7, #15]
 8005ff6:	e03f      	b.n	8006078 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d018      	beq.n	8006032 <RCCEx_PLLSAI1_Config+0x72>
 8006000:	2b03      	cmp	r3, #3
 8006002:	d825      	bhi.n	8006050 <RCCEx_PLLSAI1_Config+0x90>
 8006004:	2b01      	cmp	r3, #1
 8006006:	d002      	beq.n	800600e <RCCEx_PLLSAI1_Config+0x4e>
 8006008:	2b02      	cmp	r3, #2
 800600a:	d009      	beq.n	8006020 <RCCEx_PLLSAI1_Config+0x60>
 800600c:	e020      	b.n	8006050 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800600e:	4b62      	ldr	r3, [pc, #392]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d11d      	bne.n	8006056 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800601e:	e01a      	b.n	8006056 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006020:	4b5d      	ldr	r3, [pc, #372]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006028:	2b00      	cmp	r3, #0
 800602a:	d116      	bne.n	800605a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006030:	e013      	b.n	800605a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006032:	4b59      	ldr	r3, [pc, #356]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10f      	bne.n	800605e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800603e:	4b56      	ldr	r3, [pc, #344]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800604e:	e006      	b.n	800605e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
      break;
 8006054:	e004      	b.n	8006060 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006056:	bf00      	nop
 8006058:	e002      	b.n	8006060 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800605a:	bf00      	nop
 800605c:	e000      	b.n	8006060 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800605e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d108      	bne.n	8006078 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006066:	4b4c      	ldr	r3, [pc, #304]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f023 0203 	bic.w	r2, r3, #3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4949      	ldr	r1, [pc, #292]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006074:	4313      	orrs	r3, r2
 8006076:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f040 8086 	bne.w	800618c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006080:	4b45      	ldr	r3, [pc, #276]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a44      	ldr	r2, [pc, #272]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006086:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800608a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800608c:	f7fa fdbc 	bl	8000c08 <HAL_GetTick>
 8006090:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006092:	e009      	b.n	80060a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006094:	f7fa fdb8 	bl	8000c08 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d902      	bls.n	80060a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	73fb      	strb	r3, [r7, #15]
        break;
 80060a6:	e005      	b.n	80060b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060a8:	4b3b      	ldr	r3, [pc, #236]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1ef      	bne.n	8006094 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d168      	bne.n	800618c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d113      	bne.n	80060e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060c0:	4b35      	ldr	r3, [pc, #212]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	4b35      	ldr	r3, [pc, #212]	; (800619c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060c6:	4013      	ands	r3, r2
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6892      	ldr	r2, [r2, #8]
 80060cc:	0211      	lsls	r1, r2, #8
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	68d2      	ldr	r2, [r2, #12]
 80060d2:	06d2      	lsls	r2, r2, #27
 80060d4:	4311      	orrs	r1, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6852      	ldr	r2, [r2, #4]
 80060da:	3a01      	subs	r2, #1
 80060dc:	0112      	lsls	r2, r2, #4
 80060de:	430a      	orrs	r2, r1
 80060e0:	492d      	ldr	r1, [pc, #180]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	610b      	str	r3, [r1, #16]
 80060e6:	e02d      	b.n	8006144 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d115      	bne.n	800611a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060ee:	4b2a      	ldr	r3, [pc, #168]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	4b2b      	ldr	r3, [pc, #172]	; (80061a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6892      	ldr	r2, [r2, #8]
 80060fa:	0211      	lsls	r1, r2, #8
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6912      	ldr	r2, [r2, #16]
 8006100:	0852      	lsrs	r2, r2, #1
 8006102:	3a01      	subs	r2, #1
 8006104:	0552      	lsls	r2, r2, #21
 8006106:	4311      	orrs	r1, r2
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6852      	ldr	r2, [r2, #4]
 800610c:	3a01      	subs	r2, #1
 800610e:	0112      	lsls	r2, r2, #4
 8006110:	430a      	orrs	r2, r1
 8006112:	4921      	ldr	r1, [pc, #132]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006114:	4313      	orrs	r3, r2
 8006116:	610b      	str	r3, [r1, #16]
 8006118:	e014      	b.n	8006144 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800611a:	4b1f      	ldr	r3, [pc, #124]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006120:	4013      	ands	r3, r2
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6892      	ldr	r2, [r2, #8]
 8006126:	0211      	lsls	r1, r2, #8
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6952      	ldr	r2, [r2, #20]
 800612c:	0852      	lsrs	r2, r2, #1
 800612e:	3a01      	subs	r2, #1
 8006130:	0652      	lsls	r2, r2, #25
 8006132:	4311      	orrs	r1, r2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6852      	ldr	r2, [r2, #4]
 8006138:	3a01      	subs	r2, #1
 800613a:	0112      	lsls	r2, r2, #4
 800613c:	430a      	orrs	r2, r1
 800613e:	4916      	ldr	r1, [pc, #88]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006140:	4313      	orrs	r3, r2
 8006142:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006144:	4b14      	ldr	r3, [pc, #80]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a13      	ldr	r2, [pc, #76]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 800614a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800614e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006150:	f7fa fd5a 	bl	8000c08 <HAL_GetTick>
 8006154:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006156:	e009      	b.n	800616c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006158:	f7fa fd56 	bl	8000c08 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d902      	bls.n	800616c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	73fb      	strb	r3, [r7, #15]
          break;
 800616a:	e005      	b.n	8006178 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0ef      	beq.n	8006158 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	4904      	ldr	r1, [pc, #16]	; (8006198 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006188:	4313      	orrs	r3, r2
 800618a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40021000 	.word	0x40021000
 800619c:	07ff800f 	.word	0x07ff800f
 80061a0:	ff9f800f 	.word	0xff9f800f
 80061a4:	f9ff800f 	.word	0xf9ff800f

080061a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061b6:	4b72      	ldr	r3, [pc, #456]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00e      	beq.n	80061e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80061c2:	4b6f      	ldr	r3, [pc, #444]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0203 	and.w	r2, r3, #3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d103      	bne.n	80061da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
       ||
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d142      	bne.n	8006260 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
 80061de:	e03f      	b.n	8006260 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d018      	beq.n	800621a <RCCEx_PLLSAI2_Config+0x72>
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d825      	bhi.n	8006238 <RCCEx_PLLSAI2_Config+0x90>
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d002      	beq.n	80061f6 <RCCEx_PLLSAI2_Config+0x4e>
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d009      	beq.n	8006208 <RCCEx_PLLSAI2_Config+0x60>
 80061f4:	e020      	b.n	8006238 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061f6:	4b62      	ldr	r3, [pc, #392]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d11d      	bne.n	800623e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006206:	e01a      	b.n	800623e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006208:	4b5d      	ldr	r3, [pc, #372]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006210:	2b00      	cmp	r3, #0
 8006212:	d116      	bne.n	8006242 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006218:	e013      	b.n	8006242 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800621a:	4b59      	ldr	r3, [pc, #356]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10f      	bne.n	8006246 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006226:	4b56      	ldr	r3, [pc, #344]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006236:	e006      	b.n	8006246 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
      break;
 800623c:	e004      	b.n	8006248 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800623e:	bf00      	nop
 8006240:	e002      	b.n	8006248 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006242:	bf00      	nop
 8006244:	e000      	b.n	8006248 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006246:	bf00      	nop
    }

    if(status == HAL_OK)
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d108      	bne.n	8006260 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800624e:	4b4c      	ldr	r3, [pc, #304]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f023 0203 	bic.w	r2, r3, #3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4949      	ldr	r1, [pc, #292]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 800625c:	4313      	orrs	r3, r2
 800625e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	2b00      	cmp	r3, #0
 8006264:	f040 8086 	bne.w	8006374 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006268:	4b45      	ldr	r3, [pc, #276]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a44      	ldr	r2, [pc, #272]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 800626e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006274:	f7fa fcc8 	bl	8000c08 <HAL_GetTick>
 8006278:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800627a:	e009      	b.n	8006290 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800627c:	f7fa fcc4 	bl	8000c08 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d902      	bls.n	8006290 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	73fb      	strb	r3, [r7, #15]
        break;
 800628e:	e005      	b.n	800629c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006290:	4b3b      	ldr	r3, [pc, #236]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1ef      	bne.n	800627c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d168      	bne.n	8006374 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d113      	bne.n	80062d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062a8:	4b35      	ldr	r3, [pc, #212]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062aa:	695a      	ldr	r2, [r3, #20]
 80062ac:	4b35      	ldr	r3, [pc, #212]	; (8006384 <RCCEx_PLLSAI2_Config+0x1dc>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6892      	ldr	r2, [r2, #8]
 80062b4:	0211      	lsls	r1, r2, #8
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	68d2      	ldr	r2, [r2, #12]
 80062ba:	06d2      	lsls	r2, r2, #27
 80062bc:	4311      	orrs	r1, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6852      	ldr	r2, [r2, #4]
 80062c2:	3a01      	subs	r2, #1
 80062c4:	0112      	lsls	r2, r2, #4
 80062c6:	430a      	orrs	r2, r1
 80062c8:	492d      	ldr	r1, [pc, #180]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	614b      	str	r3, [r1, #20]
 80062ce:	e02d      	b.n	800632c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d115      	bne.n	8006302 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062d6:	4b2a      	ldr	r3, [pc, #168]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062d8:	695a      	ldr	r2, [r3, #20]
 80062da:	4b2b      	ldr	r3, [pc, #172]	; (8006388 <RCCEx_PLLSAI2_Config+0x1e0>)
 80062dc:	4013      	ands	r3, r2
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6892      	ldr	r2, [r2, #8]
 80062e2:	0211      	lsls	r1, r2, #8
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6912      	ldr	r2, [r2, #16]
 80062e8:	0852      	lsrs	r2, r2, #1
 80062ea:	3a01      	subs	r2, #1
 80062ec:	0552      	lsls	r2, r2, #21
 80062ee:	4311      	orrs	r1, r2
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6852      	ldr	r2, [r2, #4]
 80062f4:	3a01      	subs	r2, #1
 80062f6:	0112      	lsls	r2, r2, #4
 80062f8:	430a      	orrs	r2, r1
 80062fa:	4921      	ldr	r1, [pc, #132]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	614b      	str	r3, [r1, #20]
 8006300:	e014      	b.n	800632c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006302:	4b1f      	ldr	r3, [pc, #124]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006304:	695a      	ldr	r2, [r3, #20]
 8006306:	4b21      	ldr	r3, [pc, #132]	; (800638c <RCCEx_PLLSAI2_Config+0x1e4>)
 8006308:	4013      	ands	r3, r2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6892      	ldr	r2, [r2, #8]
 800630e:	0211      	lsls	r1, r2, #8
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6952      	ldr	r2, [r2, #20]
 8006314:	0852      	lsrs	r2, r2, #1
 8006316:	3a01      	subs	r2, #1
 8006318:	0652      	lsls	r2, r2, #25
 800631a:	4311      	orrs	r1, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6852      	ldr	r2, [r2, #4]
 8006320:	3a01      	subs	r2, #1
 8006322:	0112      	lsls	r2, r2, #4
 8006324:	430a      	orrs	r2, r1
 8006326:	4916      	ldr	r1, [pc, #88]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006328:	4313      	orrs	r3, r2
 800632a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800632c:	4b14      	ldr	r3, [pc, #80]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a13      	ldr	r2, [pc, #76]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006336:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006338:	f7fa fc66 	bl	8000c08 <HAL_GetTick>
 800633c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800633e:	e009      	b.n	8006354 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006340:	f7fa fc62 	bl	8000c08 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d902      	bls.n	8006354 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	73fb      	strb	r3, [r7, #15]
          break;
 8006352:	e005      	b.n	8006360 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006354:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0ef      	beq.n	8006340 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006366:	4b06      	ldr	r3, [pc, #24]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006368:	695a      	ldr	r2, [r3, #20]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	4904      	ldr	r1, [pc, #16]	; (8006380 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006370:	4313      	orrs	r3, r2
 8006372:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40021000 	.word	0x40021000
 8006384:	07ff800f 	.word	0x07ff800f
 8006388:	ff9f800f 	.word	0xff9f800f
 800638c:	f9ff800f 	.word	0xf9ff800f

08006390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e049      	b.n	8006436 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f004 ffe4 	bl	800b384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4619      	mov	r1, r3
 80063ce:	4610      	mov	r0, r2
 80063d0:	f000 fab6 	bl	8006940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b01      	cmp	r3, #1
 8006452:	d001      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e04f      	b.n	80064f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a23      	ldr	r2, [pc, #140]	; (8006504 <HAL_TIM_Base_Start_IT+0xc4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01d      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0x76>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006482:	d018      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0x76>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1f      	ldr	r2, [pc, #124]	; (8006508 <HAL_TIM_Base_Start_IT+0xc8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0x76>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1e      	ldr	r2, [pc, #120]	; (800650c <HAL_TIM_Base_Start_IT+0xcc>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0x76>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a1c      	ldr	r2, [pc, #112]	; (8006510 <HAL_TIM_Base_Start_IT+0xd0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0x76>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1b      	ldr	r2, [pc, #108]	; (8006514 <HAL_TIM_Base_Start_IT+0xd4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0x76>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a19      	ldr	r2, [pc, #100]	; (8006518 <HAL_TIM_Base_Start_IT+0xd8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d115      	bne.n	80064e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	4b17      	ldr	r3, [pc, #92]	; (800651c <HAL_TIM_Base_Start_IT+0xdc>)
 80064be:	4013      	ands	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b06      	cmp	r3, #6
 80064c6:	d015      	beq.n	80064f4 <HAL_TIM_Base_Start_IT+0xb4>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ce:	d011      	beq.n	80064f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e0:	e008      	b.n	80064f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f042 0201 	orr.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	e000      	b.n	80064f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	40012c00 	.word	0x40012c00
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40000c00 	.word	0x40000c00
 8006514:	40013400 	.word	0x40013400
 8006518:	40014000 	.word	0x40014000
 800651c:	00010007 	.word	0x00010007

08006520 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b02      	cmp	r3, #2
 8006534:	d122      	bne.n	800657c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b02      	cmp	r3, #2
 8006542:	d11b      	bne.n	800657c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0202 	mvn.w	r2, #2
 800654c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f9ce 	bl	8006904 <HAL_TIM_IC_CaptureCallback>
 8006568:	e005      	b.n	8006576 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9c0 	bl	80068f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f9d1 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b04      	cmp	r3, #4
 8006588:	d122      	bne.n	80065d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b04      	cmp	r3, #4
 8006596:	d11b      	bne.n	80065d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0204 	mvn.w	r2, #4
 80065a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f9a4 	bl	8006904 <HAL_TIM_IC_CaptureCallback>
 80065bc:	e005      	b.n	80065ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f996 	bl	80068f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f9a7 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d122      	bne.n	8006624 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d11b      	bne.n	8006624 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0208 	mvn.w	r2, #8
 80065f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2204      	movs	r2, #4
 80065fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f97a 	bl	8006904 <HAL_TIM_IC_CaptureCallback>
 8006610:	e005      	b.n	800661e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f96c 	bl	80068f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f97d 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f003 0310 	and.w	r3, r3, #16
 800662e:	2b10      	cmp	r3, #16
 8006630:	d122      	bne.n	8006678 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b10      	cmp	r3, #16
 800663e:	d11b      	bne.n	8006678 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0210 	mvn.w	r2, #16
 8006648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2208      	movs	r2, #8
 800664e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f950 	bl	8006904 <HAL_TIM_IC_CaptureCallback>
 8006664:	e005      	b.n	8006672 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f942 	bl	80068f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f953 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b01      	cmp	r3, #1
 8006684:	d10e      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b01      	cmp	r3, #1
 8006692:	d107      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0201 	mvn.w	r2, #1
 800669c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f003 fe2a 	bl	800a2f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ae:	2b80      	cmp	r3, #128	; 0x80
 80066b0:	d10e      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066bc:	2b80      	cmp	r3, #128	; 0x80
 80066be:	d107      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fafe 	bl	8006ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066de:	d10e      	bne.n	80066fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ea:	2b80      	cmp	r3, #128	; 0x80
 80066ec:	d107      	bne.n	80066fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 faf1 	bl	8006ce0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d10e      	bne.n	800672a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006716:	2b40      	cmp	r3, #64	; 0x40
 8006718:	d107      	bne.n	800672a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f901 	bl	800692c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b20      	cmp	r3, #32
 8006736:	d10e      	bne.n	8006756 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b20      	cmp	r3, #32
 8006744:	d107      	bne.n	8006756 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f06f 0220 	mvn.w	r2, #32
 800674e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fab1 	bl	8006cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_TIM_ConfigClockSource+0x1c>
 8006776:	2302      	movs	r3, #2
 8006778:	e0b6      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x18a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2202      	movs	r2, #2
 8006786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006798:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800679c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067a4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b6:	d03e      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0xd8>
 80067b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067bc:	f200 8087 	bhi.w	80068ce <HAL_TIM_ConfigClockSource+0x170>
 80067c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c4:	f000 8086 	beq.w	80068d4 <HAL_TIM_ConfigClockSource+0x176>
 80067c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067cc:	d87f      	bhi.n	80068ce <HAL_TIM_ConfigClockSource+0x170>
 80067ce:	2b70      	cmp	r3, #112	; 0x70
 80067d0:	d01a      	beq.n	8006808 <HAL_TIM_ConfigClockSource+0xaa>
 80067d2:	2b70      	cmp	r3, #112	; 0x70
 80067d4:	d87b      	bhi.n	80068ce <HAL_TIM_ConfigClockSource+0x170>
 80067d6:	2b60      	cmp	r3, #96	; 0x60
 80067d8:	d050      	beq.n	800687c <HAL_TIM_ConfigClockSource+0x11e>
 80067da:	2b60      	cmp	r3, #96	; 0x60
 80067dc:	d877      	bhi.n	80068ce <HAL_TIM_ConfigClockSource+0x170>
 80067de:	2b50      	cmp	r3, #80	; 0x50
 80067e0:	d03c      	beq.n	800685c <HAL_TIM_ConfigClockSource+0xfe>
 80067e2:	2b50      	cmp	r3, #80	; 0x50
 80067e4:	d873      	bhi.n	80068ce <HAL_TIM_ConfigClockSource+0x170>
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d058      	beq.n	800689c <HAL_TIM_ConfigClockSource+0x13e>
 80067ea:	2b40      	cmp	r3, #64	; 0x40
 80067ec:	d86f      	bhi.n	80068ce <HAL_TIM_ConfigClockSource+0x170>
 80067ee:	2b30      	cmp	r3, #48	; 0x30
 80067f0:	d064      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x15e>
 80067f2:	2b30      	cmp	r3, #48	; 0x30
 80067f4:	d86b      	bhi.n	80068ce <HAL_TIM_ConfigClockSource+0x170>
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	d060      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x15e>
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	d867      	bhi.n	80068ce <HAL_TIM_ConfigClockSource+0x170>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d05c      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x15e>
 8006802:	2b10      	cmp	r3, #16
 8006804:	d05a      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x15e>
 8006806:	e062      	b.n	80068ce <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	6899      	ldr	r1, [r3, #8]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f000 f9a6 	bl	8006b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800682a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	609a      	str	r2, [r3, #8]
      break;
 8006834:	e04f      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6899      	ldr	r1, [r3, #8]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f000 f98f 	bl	8006b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006858:	609a      	str	r2, [r3, #8]
      break;
 800685a:	e03c      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	6859      	ldr	r1, [r3, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	461a      	mov	r2, r3
 800686a:	f000 f903 	bl	8006a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2150      	movs	r1, #80	; 0x50
 8006874:	4618      	mov	r0, r3
 8006876:	f000 f95c 	bl	8006b32 <TIM_ITRx_SetConfig>
      break;
 800687a:	e02c      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	6859      	ldr	r1, [r3, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	461a      	mov	r2, r3
 800688a:	f000 f922 	bl	8006ad2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2160      	movs	r1, #96	; 0x60
 8006894:	4618      	mov	r0, r3
 8006896:	f000 f94c 	bl	8006b32 <TIM_ITRx_SetConfig>
      break;
 800689a:	e01c      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	6859      	ldr	r1, [r3, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	461a      	mov	r2, r3
 80068aa:	f000 f8e3 	bl	8006a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2140      	movs	r1, #64	; 0x40
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 f93c 	bl	8006b32 <TIM_ITRx_SetConfig>
      break;
 80068ba:	e00c      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f000 f933 	bl	8006b32 <TIM_ITRx_SetConfig>
      break;
 80068cc:	e003      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	73fb      	strb	r3, [r7, #15]
      break;
 80068d2:	e000      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80068d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a40      	ldr	r2, [pc, #256]	; (8006a54 <TIM_Base_SetConfig+0x114>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d013      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695e:	d00f      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a3d      	ldr	r2, [pc, #244]	; (8006a58 <TIM_Base_SetConfig+0x118>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00b      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a3c      	ldr	r2, [pc, #240]	; (8006a5c <TIM_Base_SetConfig+0x11c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d007      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a3b      	ldr	r2, [pc, #236]	; (8006a60 <TIM_Base_SetConfig+0x120>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d003      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a3a      	ldr	r2, [pc, #232]	; (8006a64 <TIM_Base_SetConfig+0x124>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d108      	bne.n	8006992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a2f      	ldr	r2, [pc, #188]	; (8006a54 <TIM_Base_SetConfig+0x114>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d01f      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a0:	d01b      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a2c      	ldr	r2, [pc, #176]	; (8006a58 <TIM_Base_SetConfig+0x118>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d017      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a2b      	ldr	r2, [pc, #172]	; (8006a5c <TIM_Base_SetConfig+0x11c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d013      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2a      	ldr	r2, [pc, #168]	; (8006a60 <TIM_Base_SetConfig+0x120>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00f      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a29      	ldr	r2, [pc, #164]	; (8006a64 <TIM_Base_SetConfig+0x124>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00b      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a28      	ldr	r2, [pc, #160]	; (8006a68 <TIM_Base_SetConfig+0x128>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d007      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a27      	ldr	r2, [pc, #156]	; (8006a6c <TIM_Base_SetConfig+0x12c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a26      	ldr	r2, [pc, #152]	; (8006a70 <TIM_Base_SetConfig+0x130>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d108      	bne.n	80069ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a10      	ldr	r2, [pc, #64]	; (8006a54 <TIM_Base_SetConfig+0x114>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00f      	beq.n	8006a38 <TIM_Base_SetConfig+0xf8>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a12      	ldr	r2, [pc, #72]	; (8006a64 <TIM_Base_SetConfig+0x124>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00b      	beq.n	8006a38 <TIM_Base_SetConfig+0xf8>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a11      	ldr	r2, [pc, #68]	; (8006a68 <TIM_Base_SetConfig+0x128>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d007      	beq.n	8006a38 <TIM_Base_SetConfig+0xf8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a10      	ldr	r2, [pc, #64]	; (8006a6c <TIM_Base_SetConfig+0x12c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_Base_SetConfig+0xf8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <TIM_Base_SetConfig+0x130>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d103      	bne.n	8006a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	615a      	str	r2, [r3, #20]
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40012c00 	.word	0x40012c00
 8006a58:	40000400 	.word	0x40000400
 8006a5c:	40000800 	.word	0x40000800
 8006a60:	40000c00 	.word	0x40000c00
 8006a64:	40013400 	.word	0x40013400
 8006a68:	40014000 	.word	0x40014000
 8006a6c:	40014400 	.word	0x40014400
 8006a70:	40014800 	.word	0x40014800

08006a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f023 0201 	bic.w	r2, r3, #1
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f023 030a 	bic.w	r3, r3, #10
 8006ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	621a      	str	r2, [r3, #32]
}
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b087      	sub	sp, #28
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f023 0210 	bic.w	r2, r3, #16
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	031b      	lsls	r3, r3, #12
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b085      	sub	sp, #20
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f043 0307 	orr.w	r3, r3, #7
 8006b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	609a      	str	r2, [r3, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	021a      	lsls	r2, r3, #8
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	609a      	str	r2, [r3, #8]
}
 8006b9c:	bf00      	nop
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e068      	b.n	8006c92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a2e      	ldr	r2, [pc, #184]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a2d      	ldr	r2, [pc, #180]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d108      	bne.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a1e      	ldr	r2, [pc, #120]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d01d      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c32:	d018      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1b      	ldr	r2, [pc, #108]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d013      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1a      	ldr	r2, [pc, #104]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00e      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a18      	ldr	r2, [pc, #96]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d009      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d004      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a14      	ldr	r2, [pc, #80]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d10c      	bne.n	8006c80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40013400 	.word	0x40013400
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40000c00 	.word	0x40000c00
 8006cb4:	40014000 	.word	0x40014000

08006cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e042      	b.n	8006d8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d106      	bne.n	8006d1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f004 fb57 	bl	800b3cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2224      	movs	r2, #36	; 0x24
 8006d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0201 	bic.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f8c4 	bl	8006ec4 <UART_SetConfig>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e022      	b.n	8006d8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fbb4 	bl	80074bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0201 	orr.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fc3b 	bl	8007600 <UART_CheckIdleState>
 8006d8a:	4603      	mov	r3, r0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	; 0x28
 8006d98:	af02      	add	r7, sp, #8
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	4613      	mov	r3, r2
 8006da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	f040 8084 	bne.w	8006eb8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_UART_Transmit+0x28>
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e07c      	b.n	8006eba <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_UART_Transmit+0x3a>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e075      	b.n	8006eba <HAL_UART_Transmit+0x126>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2221      	movs	r2, #33	; 0x21
 8006de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006de6:	f7f9 ff0f 	bl	8000c08 <HAL_GetTick>
 8006dea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	88fa      	ldrh	r2, [r7, #6]
 8006df0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	88fa      	ldrh	r2, [r7, #6]
 8006df8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e04:	d108      	bne.n	8006e18 <HAL_UART_Transmit+0x84>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d104      	bne.n	8006e18 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	e003      	b.n	8006e20 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006e28:	e02d      	b.n	8006e86 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2200      	movs	r2, #0
 8006e32:	2180      	movs	r1, #128	; 0x80
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fc2e 	bl	8007696 <UART_WaitOnFlagUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e03a      	b.n	8006eba <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	881a      	ldrh	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e56:	b292      	uxth	r2, r2
 8006e58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	3302      	adds	r3, #2
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e008      	b.n	8006e74 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	b292      	uxth	r2, r2
 8006e6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	3301      	adds	r3, #1
 8006e72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1cb      	bne.n	8006e2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2140      	movs	r1, #64	; 0x40
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fbfa 	bl	8007696 <UART_WaitOnFlagUntilTimeout>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e006      	b.n	8006eba <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e000      	b.n	8006eba <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006eb8:	2302      	movs	r3, #2
  }
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3720      	adds	r7, #32
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec8:	b08c      	sub	sp, #48	; 0x30
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	431a      	orrs	r2, r3
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4baa      	ldr	r3, [pc, #680]	; (800719c <UART_SetConfig+0x2d8>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	6812      	ldr	r2, [r2, #0]
 8006efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006efc:	430b      	orrs	r3, r1
 8006efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a9f      	ldr	r2, [pc, #636]	; (80071a0 <UART_SetConfig+0x2dc>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d004      	beq.n	8006f30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006f3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	6812      	ldr	r2, [r2, #0]
 8006f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f44:	430b      	orrs	r3, r1
 8006f46:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4e:	f023 010f 	bic.w	r1, r3, #15
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a90      	ldr	r2, [pc, #576]	; (80071a4 <UART_SetConfig+0x2e0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d125      	bne.n	8006fb4 <UART_SetConfig+0xf0>
 8006f68:	4b8f      	ldr	r3, [pc, #572]	; (80071a8 <UART_SetConfig+0x2e4>)
 8006f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d81a      	bhi.n	8006fac <UART_SetConfig+0xe8>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <UART_SetConfig+0xb8>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006f8d 	.word	0x08006f8d
 8006f80:	08006f9d 	.word	0x08006f9d
 8006f84:	08006f95 	.word	0x08006f95
 8006f88:	08006fa5 	.word	0x08006fa5
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f92:	e116      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8006f94:	2302      	movs	r3, #2
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f9a:	e112      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8006f9c:	2304      	movs	r3, #4
 8006f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fa2:	e10e      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8006fa4:	2308      	movs	r3, #8
 8006fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006faa:	e10a      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8006fac:	2310      	movs	r3, #16
 8006fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb2:	e106      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a7c      	ldr	r2, [pc, #496]	; (80071ac <UART_SetConfig+0x2e8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d138      	bne.n	8007030 <UART_SetConfig+0x16c>
 8006fbe:	4b7a      	ldr	r3, [pc, #488]	; (80071a8 <UART_SetConfig+0x2e4>)
 8006fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc4:	f003 030c 	and.w	r3, r3, #12
 8006fc8:	2b0c      	cmp	r3, #12
 8006fca:	d82d      	bhi.n	8007028 <UART_SetConfig+0x164>
 8006fcc:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <UART_SetConfig+0x110>)
 8006fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd2:	bf00      	nop
 8006fd4:	08007009 	.word	0x08007009
 8006fd8:	08007029 	.word	0x08007029
 8006fdc:	08007029 	.word	0x08007029
 8006fe0:	08007029 	.word	0x08007029
 8006fe4:	08007019 	.word	0x08007019
 8006fe8:	08007029 	.word	0x08007029
 8006fec:	08007029 	.word	0x08007029
 8006ff0:	08007029 	.word	0x08007029
 8006ff4:	08007011 	.word	0x08007011
 8006ff8:	08007029 	.word	0x08007029
 8006ffc:	08007029 	.word	0x08007029
 8007000:	08007029 	.word	0x08007029
 8007004:	08007021 	.word	0x08007021
 8007008:	2300      	movs	r3, #0
 800700a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700e:	e0d8      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007010:	2302      	movs	r3, #2
 8007012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007016:	e0d4      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007018:	2304      	movs	r3, #4
 800701a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800701e:	e0d0      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007020:	2308      	movs	r3, #8
 8007022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007026:	e0cc      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007028:	2310      	movs	r3, #16
 800702a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800702e:	e0c8      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a5e      	ldr	r2, [pc, #376]	; (80071b0 <UART_SetConfig+0x2ec>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d125      	bne.n	8007086 <UART_SetConfig+0x1c2>
 800703a:	4b5b      	ldr	r3, [pc, #364]	; (80071a8 <UART_SetConfig+0x2e4>)
 800703c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007040:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007044:	2b30      	cmp	r3, #48	; 0x30
 8007046:	d016      	beq.n	8007076 <UART_SetConfig+0x1b2>
 8007048:	2b30      	cmp	r3, #48	; 0x30
 800704a:	d818      	bhi.n	800707e <UART_SetConfig+0x1ba>
 800704c:	2b20      	cmp	r3, #32
 800704e:	d00a      	beq.n	8007066 <UART_SetConfig+0x1a2>
 8007050:	2b20      	cmp	r3, #32
 8007052:	d814      	bhi.n	800707e <UART_SetConfig+0x1ba>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <UART_SetConfig+0x19a>
 8007058:	2b10      	cmp	r3, #16
 800705a:	d008      	beq.n	800706e <UART_SetConfig+0x1aa>
 800705c:	e00f      	b.n	800707e <UART_SetConfig+0x1ba>
 800705e:	2300      	movs	r3, #0
 8007060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007064:	e0ad      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007066:	2302      	movs	r3, #2
 8007068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800706c:	e0a9      	b.n	80071c2 <UART_SetConfig+0x2fe>
 800706e:	2304      	movs	r3, #4
 8007070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007074:	e0a5      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007076:	2308      	movs	r3, #8
 8007078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800707c:	e0a1      	b.n	80071c2 <UART_SetConfig+0x2fe>
 800707e:	2310      	movs	r3, #16
 8007080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007084:	e09d      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a4a      	ldr	r2, [pc, #296]	; (80071b4 <UART_SetConfig+0x2f0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d125      	bne.n	80070dc <UART_SetConfig+0x218>
 8007090:	4b45      	ldr	r3, [pc, #276]	; (80071a8 <UART_SetConfig+0x2e4>)
 8007092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007096:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800709a:	2bc0      	cmp	r3, #192	; 0xc0
 800709c:	d016      	beq.n	80070cc <UART_SetConfig+0x208>
 800709e:	2bc0      	cmp	r3, #192	; 0xc0
 80070a0:	d818      	bhi.n	80070d4 <UART_SetConfig+0x210>
 80070a2:	2b80      	cmp	r3, #128	; 0x80
 80070a4:	d00a      	beq.n	80070bc <UART_SetConfig+0x1f8>
 80070a6:	2b80      	cmp	r3, #128	; 0x80
 80070a8:	d814      	bhi.n	80070d4 <UART_SetConfig+0x210>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <UART_SetConfig+0x1f0>
 80070ae:	2b40      	cmp	r3, #64	; 0x40
 80070b0:	d008      	beq.n	80070c4 <UART_SetConfig+0x200>
 80070b2:	e00f      	b.n	80070d4 <UART_SetConfig+0x210>
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ba:	e082      	b.n	80071c2 <UART_SetConfig+0x2fe>
 80070bc:	2302      	movs	r3, #2
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070c2:	e07e      	b.n	80071c2 <UART_SetConfig+0x2fe>
 80070c4:	2304      	movs	r3, #4
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ca:	e07a      	b.n	80071c2 <UART_SetConfig+0x2fe>
 80070cc:	2308      	movs	r3, #8
 80070ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070d2:	e076      	b.n	80071c2 <UART_SetConfig+0x2fe>
 80070d4:	2310      	movs	r3, #16
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070da:	e072      	b.n	80071c2 <UART_SetConfig+0x2fe>
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a35      	ldr	r2, [pc, #212]	; (80071b8 <UART_SetConfig+0x2f4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d12a      	bne.n	800713c <UART_SetConfig+0x278>
 80070e6:	4b30      	ldr	r3, [pc, #192]	; (80071a8 <UART_SetConfig+0x2e4>)
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070f4:	d01a      	beq.n	800712c <UART_SetConfig+0x268>
 80070f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070fa:	d81b      	bhi.n	8007134 <UART_SetConfig+0x270>
 80070fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007100:	d00c      	beq.n	800711c <UART_SetConfig+0x258>
 8007102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007106:	d815      	bhi.n	8007134 <UART_SetConfig+0x270>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <UART_SetConfig+0x250>
 800710c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007110:	d008      	beq.n	8007124 <UART_SetConfig+0x260>
 8007112:	e00f      	b.n	8007134 <UART_SetConfig+0x270>
 8007114:	2300      	movs	r3, #0
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711a:	e052      	b.n	80071c2 <UART_SetConfig+0x2fe>
 800711c:	2302      	movs	r3, #2
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007122:	e04e      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007124:	2304      	movs	r3, #4
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800712a:	e04a      	b.n	80071c2 <UART_SetConfig+0x2fe>
 800712c:	2308      	movs	r3, #8
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007132:	e046      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007134:	2310      	movs	r3, #16
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800713a:	e042      	b.n	80071c2 <UART_SetConfig+0x2fe>
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a17      	ldr	r2, [pc, #92]	; (80071a0 <UART_SetConfig+0x2dc>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d13a      	bne.n	80071bc <UART_SetConfig+0x2f8>
 8007146:	4b18      	ldr	r3, [pc, #96]	; (80071a8 <UART_SetConfig+0x2e4>)
 8007148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007150:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007154:	d01a      	beq.n	800718c <UART_SetConfig+0x2c8>
 8007156:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800715a:	d81b      	bhi.n	8007194 <UART_SetConfig+0x2d0>
 800715c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007160:	d00c      	beq.n	800717c <UART_SetConfig+0x2b8>
 8007162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007166:	d815      	bhi.n	8007194 <UART_SetConfig+0x2d0>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <UART_SetConfig+0x2b0>
 800716c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007170:	d008      	beq.n	8007184 <UART_SetConfig+0x2c0>
 8007172:	e00f      	b.n	8007194 <UART_SetConfig+0x2d0>
 8007174:	2300      	movs	r3, #0
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717a:	e022      	b.n	80071c2 <UART_SetConfig+0x2fe>
 800717c:	2302      	movs	r3, #2
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007182:	e01e      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007184:	2304      	movs	r3, #4
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800718a:	e01a      	b.n	80071c2 <UART_SetConfig+0x2fe>
 800718c:	2308      	movs	r3, #8
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007192:	e016      	b.n	80071c2 <UART_SetConfig+0x2fe>
 8007194:	2310      	movs	r3, #16
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800719a:	e012      	b.n	80071c2 <UART_SetConfig+0x2fe>
 800719c:	cfff69f3 	.word	0xcfff69f3
 80071a0:	40008000 	.word	0x40008000
 80071a4:	40013800 	.word	0x40013800
 80071a8:	40021000 	.word	0x40021000
 80071ac:	40004400 	.word	0x40004400
 80071b0:	40004800 	.word	0x40004800
 80071b4:	40004c00 	.word	0x40004c00
 80071b8:	40005000 	.word	0x40005000
 80071bc:	2310      	movs	r3, #16
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4aae      	ldr	r2, [pc, #696]	; (8007480 <UART_SetConfig+0x5bc>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	f040 8097 	bne.w	80072fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d823      	bhi.n	800721e <UART_SetConfig+0x35a>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <UART_SetConfig+0x318>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	08007201 	.word	0x08007201
 80071e0:	0800721f 	.word	0x0800721f
 80071e4:	08007209 	.word	0x08007209
 80071e8:	0800721f 	.word	0x0800721f
 80071ec:	0800720f 	.word	0x0800720f
 80071f0:	0800721f 	.word	0x0800721f
 80071f4:	0800721f 	.word	0x0800721f
 80071f8:	0800721f 	.word	0x0800721f
 80071fc:	08007217 	.word	0x08007217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007200:	f7fe fa90 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 8007204:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007206:	e010      	b.n	800722a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007208:	4b9e      	ldr	r3, [pc, #632]	; (8007484 <UART_SetConfig+0x5c0>)
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800720c:	e00d      	b.n	800722a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800720e:	f7fe f9f1 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 8007212:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007214:	e009      	b.n	800722a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800721c:	e005      	b.n	800722a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007228:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8130 	beq.w	8007492 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	4a94      	ldr	r2, [pc, #592]	; (8007488 <UART_SetConfig+0x5c4>)
 8007238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800723c:	461a      	mov	r2, r3
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	fbb3 f3f2 	udiv	r3, r3, r2
 8007244:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	4613      	mov	r3, r2
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	4413      	add	r3, r2
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	429a      	cmp	r2, r3
 8007254:	d305      	bcc.n	8007262 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	429a      	cmp	r2, r3
 8007260:	d903      	bls.n	800726a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007268:	e113      	b.n	8007492 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	2200      	movs	r2, #0
 800726e:	60bb      	str	r3, [r7, #8]
 8007270:	60fa      	str	r2, [r7, #12]
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	4a84      	ldr	r2, [pc, #528]	; (8007488 <UART_SetConfig+0x5c4>)
 8007278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800727c:	b29b      	uxth	r3, r3
 800727e:	2200      	movs	r2, #0
 8007280:	603b      	str	r3, [r7, #0]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007288:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800728c:	f7f9 fb0e 	bl	80008ac <__aeabi_uldivmod>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4610      	mov	r0, r2
 8007296:	4619      	mov	r1, r3
 8007298:	f04f 0200 	mov.w	r2, #0
 800729c:	f04f 0300 	mov.w	r3, #0
 80072a0:	020b      	lsls	r3, r1, #8
 80072a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072a6:	0202      	lsls	r2, r0, #8
 80072a8:	6979      	ldr	r1, [r7, #20]
 80072aa:	6849      	ldr	r1, [r1, #4]
 80072ac:	0849      	lsrs	r1, r1, #1
 80072ae:	2000      	movs	r0, #0
 80072b0:	460c      	mov	r4, r1
 80072b2:	4605      	mov	r5, r0
 80072b4:	eb12 0804 	adds.w	r8, r2, r4
 80072b8:	eb43 0905 	adc.w	r9, r3, r5
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	469a      	mov	sl, r3
 80072c4:	4693      	mov	fp, r2
 80072c6:	4652      	mov	r2, sl
 80072c8:	465b      	mov	r3, fp
 80072ca:	4640      	mov	r0, r8
 80072cc:	4649      	mov	r1, r9
 80072ce:	f7f9 faed 	bl	80008ac <__aeabi_uldivmod>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4613      	mov	r3, r2
 80072d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e0:	d308      	bcc.n	80072f4 <UART_SetConfig+0x430>
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072e8:	d204      	bcs.n	80072f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6a3a      	ldr	r2, [r7, #32]
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	e0ce      	b.n	8007492 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072fa:	e0ca      	b.n	8007492 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007304:	d166      	bne.n	80073d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800730a:	2b08      	cmp	r3, #8
 800730c:	d827      	bhi.n	800735e <UART_SetConfig+0x49a>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0x450>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007339 	.word	0x08007339
 8007318:	08007341 	.word	0x08007341
 800731c:	08007349 	.word	0x08007349
 8007320:	0800735f 	.word	0x0800735f
 8007324:	0800734f 	.word	0x0800734f
 8007328:	0800735f 	.word	0x0800735f
 800732c:	0800735f 	.word	0x0800735f
 8007330:	0800735f 	.word	0x0800735f
 8007334:	08007357 	.word	0x08007357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007338:	f7fe f9f4 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 800733c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800733e:	e014      	b.n	800736a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007340:	f7fe fa06 	bl	8005750 <HAL_RCC_GetPCLK2Freq>
 8007344:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007346:	e010      	b.n	800736a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007348:	4b4e      	ldr	r3, [pc, #312]	; (8007484 <UART_SetConfig+0x5c0>)
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800734c:	e00d      	b.n	800736a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800734e:	f7fe f951 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 8007352:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007354:	e009      	b.n	800736a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800735c:	e005      	b.n	800736a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007368:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8090 	beq.w	8007492 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	4a44      	ldr	r2, [pc, #272]	; (8007488 <UART_SetConfig+0x5c4>)
 8007378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800737c:	461a      	mov	r2, r3
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	fbb3 f3f2 	udiv	r3, r3, r2
 8007384:	005a      	lsls	r2, r3, #1
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	441a      	add	r2, r3
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	fbb2 f3f3 	udiv	r3, r2, r3
 8007396:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	2b0f      	cmp	r3, #15
 800739c:	d916      	bls.n	80073cc <UART_SetConfig+0x508>
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a4:	d212      	bcs.n	80073cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	f023 030f 	bic.w	r3, r3, #15
 80073ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	8bfb      	ldrh	r3, [r7, #30]
 80073be:	4313      	orrs	r3, r2
 80073c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	8bfa      	ldrh	r2, [r7, #30]
 80073c8:	60da      	str	r2, [r3, #12]
 80073ca:	e062      	b.n	8007492 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073d2:	e05e      	b.n	8007492 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d828      	bhi.n	800742e <UART_SetConfig+0x56a>
 80073dc:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <UART_SetConfig+0x520>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	08007409 	.word	0x08007409
 80073e8:	08007411 	.word	0x08007411
 80073ec:	08007419 	.word	0x08007419
 80073f0:	0800742f 	.word	0x0800742f
 80073f4:	0800741f 	.word	0x0800741f
 80073f8:	0800742f 	.word	0x0800742f
 80073fc:	0800742f 	.word	0x0800742f
 8007400:	0800742f 	.word	0x0800742f
 8007404:	08007427 	.word	0x08007427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007408:	f7fe f98c 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 800740c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800740e:	e014      	b.n	800743a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007410:	f7fe f99e 	bl	8005750 <HAL_RCC_GetPCLK2Freq>
 8007414:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007416:	e010      	b.n	800743a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007418:	4b1a      	ldr	r3, [pc, #104]	; (8007484 <UART_SetConfig+0x5c0>)
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800741c:	e00d      	b.n	800743a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800741e:	f7fe f8e9 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 8007422:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007424:	e009      	b.n	800743a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800742c:	e005      	b.n	800743a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007438:	bf00      	nop
    }

    if (pclk != 0U)
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d028      	beq.n	8007492 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	4a10      	ldr	r2, [pc, #64]	; (8007488 <UART_SetConfig+0x5c4>)
 8007446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800744a:	461a      	mov	r2, r3
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	441a      	add	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007462:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	2b0f      	cmp	r3, #15
 8007468:	d910      	bls.n	800748c <UART_SetConfig+0x5c8>
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007470:	d20c      	bcs.n	800748c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	b29a      	uxth	r2, r3
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60da      	str	r2, [r3, #12]
 800747c:	e009      	b.n	8007492 <UART_SetConfig+0x5ce>
 800747e:	bf00      	nop
 8007480:	40008000 	.word	0x40008000
 8007484:	00f42400 	.word	0x00f42400
 8007488:	0800c3f0 	.word	0x0800c3f0
      }
      else
      {
        ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2201      	movs	r2, #1
 8007496:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2201      	movs	r2, #1
 800749e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2200      	movs	r2, #0
 80074a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2200      	movs	r2, #0
 80074ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80074ae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3730      	adds	r7, #48	; 0x30
 80074b6:	46bd      	mov	sp, r7
 80074b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080074bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	f003 0310 	and.w	r3, r3, #16
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007572:	f003 0320 	and.w	r3, r3, #32
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d01a      	beq.n	80075d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ba:	d10a      	bne.n	80075d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	605a      	str	r2, [r3, #4]
  }
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af02      	add	r7, sp, #8
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007610:	f7f9 fafa 	bl	8000c08 <HAL_GetTick>
 8007614:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0308 	and.w	r3, r3, #8
 8007620:	2b08      	cmp	r3, #8
 8007622:	d10e      	bne.n	8007642 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007624:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f82f 	bl	8007696 <UART_WaitOnFlagUntilTimeout>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e025      	b.n	800768e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b04      	cmp	r3, #4
 800764e:	d10e      	bne.n	800766e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f819 	bl	8007696 <UART_WaitOnFlagUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e00f      	b.n	800768e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b09c      	sub	sp, #112	; 0x70
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	4613      	mov	r3, r2
 80076a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a6:	e0a9      	b.n	80077fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	f000 80a5 	beq.w	80077fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076b2:	f7f9 faa9 	bl	8000c08 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076be:	429a      	cmp	r2, r3
 80076c0:	d302      	bcc.n	80076c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80076c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d140      	bne.n	800774a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076dc:	667b      	str	r3, [r7, #100]	; 0x64
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80076f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e6      	bne.n	80076c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	663b      	str	r3, [r7, #96]	; 0x60
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800771a:	64ba      	str	r2, [r7, #72]	; 0x48
 800771c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e5      	bne.n	80076fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2220      	movs	r2, #32
 8007732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2220      	movs	r2, #32
 800773a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e069      	b.n	800781e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d051      	beq.n	80077fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007766:	d149      	bne.n	80077fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007770:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007786:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	461a      	mov	r2, r3
 800778e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
 8007792:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e6      	bne.n	8007772 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3308      	adds	r3, #8
 80077aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	613b      	str	r3, [r7, #16]
   return(result);
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f023 0301 	bic.w	r3, r3, #1
 80077ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3308      	adds	r3, #8
 80077c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077c4:	623a      	str	r2, [r7, #32]
 80077c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	69f9      	ldr	r1, [r7, #28]
 80077ca:	6a3a      	ldr	r2, [r7, #32]
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e5      	bne.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2220      	movs	r2, #32
 80077dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e010      	b.n	800781e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69da      	ldr	r2, [r3, #28]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	4013      	ands	r3, r2
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	429a      	cmp	r2, r3
 800780a:	bf0c      	ite	eq
 800780c:	2301      	moveq	r3, #1
 800780e:	2300      	movne	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	429a      	cmp	r2, r3
 8007818:	f43f af46 	beq.w	80076a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3770      	adds	r7, #112	; 0x70
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007826:	b480      	push	{r7}
 8007828:	b085      	sub	sp, #20
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007834:	2b01      	cmp	r3, #1
 8007836:	d101      	bne.n	800783c <HAL_UARTEx_DisableFifoMode+0x16>
 8007838:	2302      	movs	r3, #2
 800783a:	e027      	b.n	800788c <HAL_UARTEx_DisableFifoMode+0x66>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2224      	movs	r2, #36	; 0x24
 8007848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0201 	bic.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800786a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e02d      	b.n	800790c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2224      	movs	r2, #36	; 0x24
 80078bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0201 	bic.w	r2, r2, #1
 80078d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f84f 	bl	8007990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007928:	2302      	movs	r3, #2
 800792a:	e02d      	b.n	8007988 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2224      	movs	r2, #36	; 0x24
 8007938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0201 	bic.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f811 	bl	8007990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800799c:	2b00      	cmp	r3, #0
 800799e:	d108      	bne.n	80079b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079b0:	e031      	b.n	8007a16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079b2:	2308      	movs	r3, #8
 80079b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079b6:	2308      	movs	r3, #8
 80079b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	0e5b      	lsrs	r3, r3, #25
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	0f5b      	lsrs	r3, r3, #29
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	7b3a      	ldrb	r2, [r7, #12]
 80079de:	4911      	ldr	r1, [pc, #68]	; (8007a24 <UARTEx_SetNbDataToProcess+0x94>)
 80079e0:	5c8a      	ldrb	r2, [r1, r2]
 80079e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079e6:	7b3a      	ldrb	r2, [r7, #12]
 80079e8:	490f      	ldr	r1, [pc, #60]	; (8007a28 <UARTEx_SetNbDataToProcess+0x98>)
 80079ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
 80079fa:	7b7a      	ldrb	r2, [r7, #13]
 80079fc:	4909      	ldr	r1, [pc, #36]	; (8007a24 <UARTEx_SetNbDataToProcess+0x94>)
 80079fe:	5c8a      	ldrb	r2, [r1, r2]
 8007a00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a04:	7b7a      	ldrb	r2, [r7, #13]
 8007a06:	4908      	ldr	r1, [pc, #32]	; (8007a28 <UARTEx_SetNbDataToProcess+0x98>)
 8007a08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	0800c408 	.word	0x0800c408
 8007a28:	0800c410 	.word	0x0800c410

08007a2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a3e:	2b84      	cmp	r3, #132	; 0x84
 8007a40:	d005      	beq.n	8007a4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	4413      	add	r3, r2
 8007a4a:	3303      	adds	r3, #3
 8007a4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007a60:	f000 fade 	bl	8008020 <vTaskStartScheduler>
  
  return osOK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a6c:	b089      	sub	sp, #36	; 0x24
 8007a6e:	af04      	add	r7, sp, #16
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d020      	beq.n	8007abe <osThreadCreate+0x54>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01c      	beq.n	8007abe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685c      	ldr	r4, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681d      	ldr	r5, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691e      	ldr	r6, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff ffc8 	bl	8007a2c <makeFreeRtosPriority>
 8007a9c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007aa6:	9202      	str	r2, [sp, #8]
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	9100      	str	r1, [sp, #0]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	4632      	mov	r2, r6
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 f8ed 	bl	8007c92 <xTaskCreateStatic>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	e01c      	b.n	8007af8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685c      	ldr	r4, [r3, #4]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007aca:	b29e      	uxth	r6, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff ffaa 	bl	8007a2c <makeFreeRtosPriority>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	f107 030c 	add.w	r3, r7, #12
 8007ade:	9301      	str	r3, [sp, #4]
 8007ae0:	9200      	str	r2, [sp, #0]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 f92f 	bl	8007d4c <xTaskCreate>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d001      	beq.n	8007af8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e000      	b.n	8007afa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007af8:	68fb      	ldr	r3, [r7, #12]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b02 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <osDelay+0x16>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	e000      	b.n	8007b1a <osDelay+0x18>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fa4c 	bl	8007fb8 <vTaskDelay>
  
  return osOK;
 8007b20:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f103 0208 	add.w	r2, r3, #8
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b42:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f103 0208 	add.w	r2, r3, #8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f103 0208 	add.w	r2, r3, #8
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	601a      	str	r2, [r3, #0]
}
 8007bc0:	bf00      	nop
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be2:	d103      	bne.n	8007bec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	e00c      	b.n	8007c06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3308      	adds	r3, #8
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	e002      	b.n	8007bfa <vListInsert+0x2e>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d2f6      	bcs.n	8007bf4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	601a      	str	r2, [r3, #0]
}
 8007c32:	bf00      	nop
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6892      	ldr	r2, [r2, #8]
 8007c54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6852      	ldr	r2, [r2, #4]
 8007c5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d103      	bne.n	8007c72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	1e5a      	subs	r2, r3, #1
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b08e      	sub	sp, #56	; 0x38
 8007c96:	af04      	add	r7, sp, #16
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10a      	bne.n	8007cd8 <xTaskCreateStatic+0x46>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	61fb      	str	r3, [r7, #28]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cd8:	2354      	movs	r3, #84	; 0x54
 8007cda:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	2b54      	cmp	r3, #84	; 0x54
 8007ce0:	d00a      	beq.n	8007cf8 <xTaskCreateStatic+0x66>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	61bb      	str	r3, [r7, #24]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01e      	beq.n	8007d3e <xTaskCreateStatic+0xac>
 8007d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01b      	beq.n	8007d3e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d0e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9303      	str	r3, [sp, #12]
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	9302      	str	r3, [sp, #8]
 8007d20:	f107 0314 	add.w	r3, r7, #20
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 f850 	bl	8007dd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d38:	f000 f8d4 	bl	8007ee4 <prvAddNewTaskToReadyList>
 8007d3c:	e001      	b.n	8007d42 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d42:	697b      	ldr	r3, [r7, #20]
	}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3728      	adds	r7, #40	; 0x28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08c      	sub	sp, #48	; 0x30
 8007d50:	af04      	add	r7, sp, #16
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fec9 	bl	8008af8 <pvPortMalloc>
 8007d66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00e      	beq.n	8007d8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d6e:	2054      	movs	r0, #84	; 0x54
 8007d70:	f000 fec2 	bl	8008af8 <pvPortMalloc>
 8007d74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	631a      	str	r2, [r3, #48]	; 0x30
 8007d82:	e005      	b.n	8007d90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d84:	6978      	ldr	r0, [r7, #20]
 8007d86:	f000 ff83 	bl	8008c90 <vPortFree>
 8007d8a:	e001      	b.n	8007d90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d017      	beq.n	8007dc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d9e:	88fa      	ldrh	r2, [r7, #6]
 8007da0:	2300      	movs	r3, #0
 8007da2:	9303      	str	r3, [sp, #12]
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	9302      	str	r3, [sp, #8]
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	9301      	str	r3, [sp, #4]
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 f80e 	bl	8007dd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dba:	69f8      	ldr	r0, [r7, #28]
 8007dbc:	f000 f892 	bl	8007ee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	61bb      	str	r3, [r7, #24]
 8007dc4:	e002      	b.n	8007dcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007dcc:	69bb      	ldr	r3, [r7, #24]
	}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3720      	adds	r7, #32
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b088      	sub	sp, #32
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	607a      	str	r2, [r7, #4]
 8007de2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007dee:	3b01      	subs	r3, #1
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	f023 0307 	bic.w	r3, r3, #7
 8007dfc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00a      	beq.n	8007e1e <prvInitialiseNewTask+0x48>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	617b      	str	r3, [r7, #20]
}
 8007e1a:	bf00      	nop
 8007e1c:	e7fe      	b.n	8007e1c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01f      	beq.n	8007e64 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e24:	2300      	movs	r3, #0
 8007e26:	61fb      	str	r3, [r7, #28]
 8007e28:	e012      	b.n	8007e50 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	4413      	add	r3, r2
 8007e30:	7819      	ldrb	r1, [r3, #0]
 8007e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	4413      	add	r3, r2
 8007e38:	3334      	adds	r3, #52	; 0x34
 8007e3a:	460a      	mov	r2, r1
 8007e3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d006      	beq.n	8007e58 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	61fb      	str	r3, [r7, #28]
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	2b0f      	cmp	r3, #15
 8007e54:	d9e9      	bls.n	8007e2a <prvInitialiseNewTask+0x54>
 8007e56:	e000      	b.n	8007e5a <prvInitialiseNewTask+0x84>
			{
				break;
 8007e58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e62:	e003      	b.n	8007e6c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	2b06      	cmp	r3, #6
 8007e70:	d901      	bls.n	8007e76 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e72:	2306      	movs	r3, #6
 8007e74:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e80:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	2200      	movs	r2, #0
 8007e86:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff fe6c 	bl	8007b6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	3318      	adds	r3, #24
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fe67 	bl	8007b6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ea0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea4:	f1c3 0207 	rsb	r2, r3, #7
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	68f9      	ldr	r1, [r7, #12]
 8007ec4:	69b8      	ldr	r0, [r7, #24]
 8007ec6:	f000 fc05 	bl	80086d4 <pxPortInitialiseStack>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007edc:	bf00      	nop
 8007ede:	3720      	adds	r7, #32
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007eec:	f000 fd22 	bl	8008934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ef0:	4b2a      	ldr	r3, [pc, #168]	; (8007f9c <prvAddNewTaskToReadyList+0xb8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	4a29      	ldr	r2, [pc, #164]	; (8007f9c <prvAddNewTaskToReadyList+0xb8>)
 8007ef8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007efa:	4b29      	ldr	r3, [pc, #164]	; (8007fa0 <prvAddNewTaskToReadyList+0xbc>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f02:	4a27      	ldr	r2, [pc, #156]	; (8007fa0 <prvAddNewTaskToReadyList+0xbc>)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f08:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <prvAddNewTaskToReadyList+0xb8>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d110      	bne.n	8007f32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f10:	f000 fabc 	bl	800848c <prvInitialiseTaskLists>
 8007f14:	e00d      	b.n	8007f32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f16:	4b23      	ldr	r3, [pc, #140]	; (8007fa4 <prvAddNewTaskToReadyList+0xc0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f1e:	4b20      	ldr	r3, [pc, #128]	; (8007fa0 <prvAddNewTaskToReadyList+0xbc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d802      	bhi.n	8007f32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f2c:	4a1c      	ldr	r2, [pc, #112]	; (8007fa0 <prvAddNewTaskToReadyList+0xbc>)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f32:	4b1d      	ldr	r3, [pc, #116]	; (8007fa8 <prvAddNewTaskToReadyList+0xc4>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3301      	adds	r3, #1
 8007f38:	4a1b      	ldr	r2, [pc, #108]	; (8007fa8 <prvAddNewTaskToReadyList+0xc4>)
 8007f3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	2201      	movs	r2, #1
 8007f42:	409a      	lsls	r2, r3
 8007f44:	4b19      	ldr	r3, [pc, #100]	; (8007fac <prvAddNewTaskToReadyList+0xc8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	4a18      	ldr	r2, [pc, #96]	; (8007fac <prvAddNewTaskToReadyList+0xc8>)
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4a15      	ldr	r2, [pc, #84]	; (8007fb0 <prvAddNewTaskToReadyList+0xcc>)
 8007f5c:	441a      	add	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3304      	adds	r3, #4
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f7ff fe0d 	bl	8007b84 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f6a:	f000 fd13 	bl	8008994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f6e:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <prvAddNewTaskToReadyList+0xc0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00e      	beq.n	8007f94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f76:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <prvAddNewTaskToReadyList+0xbc>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d207      	bcs.n	8007f94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f84:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <prvAddNewTaskToReadyList+0xd0>)
 8007f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f94:	bf00      	nop
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	200206b0 	.word	0x200206b0
 8007fa0:	200205b0 	.word	0x200205b0
 8007fa4:	200206bc 	.word	0x200206bc
 8007fa8:	200206cc 	.word	0x200206cc
 8007fac:	200206b8 	.word	0x200206b8
 8007fb0:	200205b4 	.word	0x200205b4
 8007fb4:	e000ed04 	.word	0xe000ed04

08007fb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d017      	beq.n	8007ffa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fca:	4b13      	ldr	r3, [pc, #76]	; (8008018 <vTaskDelay+0x60>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00a      	beq.n	8007fe8 <vTaskDelay+0x30>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60bb      	str	r3, [r7, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fe8:	f000 f87a 	bl	80080e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fec:	2100      	movs	r1, #0
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fb0a 	bl	8008608 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ff4:	f000 f882 	bl	80080fc <xTaskResumeAll>
 8007ff8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008000:	4b06      	ldr	r3, [pc, #24]	; (800801c <vTaskDelay+0x64>)
 8008002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008010:	bf00      	nop
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	200206d8 	.word	0x200206d8
 800801c:	e000ed04 	.word	0xe000ed04

08008020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08a      	sub	sp, #40	; 0x28
 8008024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008026:	2300      	movs	r3, #0
 8008028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800802e:	463a      	mov	r2, r7
 8008030:	1d39      	adds	r1, r7, #4
 8008032:	f107 0308 	add.w	r3, r7, #8
 8008036:	4618      	mov	r0, r3
 8008038:	f000 ff48 	bl	8008ecc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	9202      	str	r2, [sp, #8]
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	2300      	movs	r3, #0
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	2300      	movs	r3, #0
 800804c:	460a      	mov	r2, r1
 800804e:	491e      	ldr	r1, [pc, #120]	; (80080c8 <vTaskStartScheduler+0xa8>)
 8008050:	481e      	ldr	r0, [pc, #120]	; (80080cc <vTaskStartScheduler+0xac>)
 8008052:	f7ff fe1e 	bl	8007c92 <xTaskCreateStatic>
 8008056:	4603      	mov	r3, r0
 8008058:	4a1d      	ldr	r2, [pc, #116]	; (80080d0 <vTaskStartScheduler+0xb0>)
 800805a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800805c:	4b1c      	ldr	r3, [pc, #112]	; (80080d0 <vTaskStartScheduler+0xb0>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008064:	2301      	movs	r3, #1
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	e001      	b.n	800806e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800806a:	2300      	movs	r3, #0
 800806c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d116      	bne.n	80080a2 <vTaskStartScheduler+0x82>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	613b      	str	r3, [r7, #16]
}
 8008086:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008088:	4b12      	ldr	r3, [pc, #72]	; (80080d4 <vTaskStartScheduler+0xb4>)
 800808a:	f04f 32ff 	mov.w	r2, #4294967295
 800808e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008090:	4b11      	ldr	r3, [pc, #68]	; (80080d8 <vTaskStartScheduler+0xb8>)
 8008092:	2201      	movs	r2, #1
 8008094:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008096:	4b11      	ldr	r3, [pc, #68]	; (80080dc <vTaskStartScheduler+0xbc>)
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800809c:	f000 fba8 	bl	80087f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080a0:	e00e      	b.n	80080c0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d10a      	bne.n	80080c0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	60fb      	str	r3, [r7, #12]
}
 80080bc:	bf00      	nop
 80080be:	e7fe      	b.n	80080be <vTaskStartScheduler+0x9e>
}
 80080c0:	bf00      	nop
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	0800c258 	.word	0x0800c258
 80080cc:	0800845d 	.word	0x0800845d
 80080d0:	200206d4 	.word	0x200206d4
 80080d4:	200206d0 	.word	0x200206d0
 80080d8:	200206bc 	.word	0x200206bc
 80080dc:	200206b4 	.word	0x200206b4

080080e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080e0:	b480      	push	{r7}
 80080e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <vTaskSuspendAll+0x18>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3301      	adds	r3, #1
 80080ea:	4a03      	ldr	r2, [pc, #12]	; (80080f8 <vTaskSuspendAll+0x18>)
 80080ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080ee:	bf00      	nop
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	200206d8 	.word	0x200206d8

080080fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008106:	2300      	movs	r3, #0
 8008108:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800810a:	4b41      	ldr	r3, [pc, #260]	; (8008210 <xTaskResumeAll+0x114>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <xTaskResumeAll+0x2c>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	603b      	str	r3, [r7, #0]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008128:	f000 fc04 	bl	8008934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800812c:	4b38      	ldr	r3, [pc, #224]	; (8008210 <xTaskResumeAll+0x114>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3b01      	subs	r3, #1
 8008132:	4a37      	ldr	r2, [pc, #220]	; (8008210 <xTaskResumeAll+0x114>)
 8008134:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008136:	4b36      	ldr	r3, [pc, #216]	; (8008210 <xTaskResumeAll+0x114>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d161      	bne.n	8008202 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800813e:	4b35      	ldr	r3, [pc, #212]	; (8008214 <xTaskResumeAll+0x118>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d05d      	beq.n	8008202 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008146:	e02e      	b.n	80081a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008148:	4b33      	ldr	r3, [pc, #204]	; (8008218 <xTaskResumeAll+0x11c>)
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3318      	adds	r3, #24
 8008154:	4618      	mov	r0, r3
 8008156:	f7ff fd72 	bl	8007c3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3304      	adds	r3, #4
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff fd6d 	bl	8007c3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	2201      	movs	r2, #1
 800816a:	409a      	lsls	r2, r3
 800816c:	4b2b      	ldr	r3, [pc, #172]	; (800821c <xTaskResumeAll+0x120>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4313      	orrs	r3, r2
 8008172:	4a2a      	ldr	r2, [pc, #168]	; (800821c <xTaskResumeAll+0x120>)
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817a:	4613      	mov	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4a27      	ldr	r2, [pc, #156]	; (8008220 <xTaskResumeAll+0x124>)
 8008184:	441a      	add	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3304      	adds	r3, #4
 800818a:	4619      	mov	r1, r3
 800818c:	4610      	mov	r0, r2
 800818e:	f7ff fcf9 	bl	8007b84 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008196:	4b23      	ldr	r3, [pc, #140]	; (8008224 <xTaskResumeAll+0x128>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	429a      	cmp	r2, r3
 800819e:	d302      	bcc.n	80081a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80081a0:	4b21      	ldr	r3, [pc, #132]	; (8008228 <xTaskResumeAll+0x12c>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081a6:	4b1c      	ldr	r3, [pc, #112]	; (8008218 <xTaskResumeAll+0x11c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1cc      	bne.n	8008148 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081b4:	f000 fa08 	bl	80085c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081b8:	4b1c      	ldr	r3, [pc, #112]	; (800822c <xTaskResumeAll+0x130>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d010      	beq.n	80081e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081c4:	f000 f836 	bl	8008234 <xTaskIncrementTick>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80081ce:	4b16      	ldr	r3, [pc, #88]	; (8008228 <xTaskResumeAll+0x12c>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1f1      	bne.n	80081c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80081e0:	4b12      	ldr	r3, [pc, #72]	; (800822c <xTaskResumeAll+0x130>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081e6:	4b10      	ldr	r3, [pc, #64]	; (8008228 <xTaskResumeAll+0x12c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081ee:	2301      	movs	r3, #1
 80081f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081f2:	4b0f      	ldr	r3, [pc, #60]	; (8008230 <xTaskResumeAll+0x134>)
 80081f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008202:	f000 fbc7 	bl	8008994 <vPortExitCritical>

	return xAlreadyYielded;
 8008206:	68bb      	ldr	r3, [r7, #8]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	200206d8 	.word	0x200206d8
 8008214:	200206b0 	.word	0x200206b0
 8008218:	20020670 	.word	0x20020670
 800821c:	200206b8 	.word	0x200206b8
 8008220:	200205b4 	.word	0x200205b4
 8008224:	200205b0 	.word	0x200205b0
 8008228:	200206c4 	.word	0x200206c4
 800822c:	200206c0 	.word	0x200206c0
 8008230:	e000ed04 	.word	0xe000ed04

08008234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800823a:	2300      	movs	r3, #0
 800823c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800823e:	4b4e      	ldr	r3, [pc, #312]	; (8008378 <xTaskIncrementTick+0x144>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	f040 808e 	bne.w	8008364 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008248:	4b4c      	ldr	r3, [pc, #304]	; (800837c <xTaskIncrementTick+0x148>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3301      	adds	r3, #1
 800824e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008250:	4a4a      	ldr	r2, [pc, #296]	; (800837c <xTaskIncrementTick+0x148>)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d120      	bne.n	800829e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800825c:	4b48      	ldr	r3, [pc, #288]	; (8008380 <xTaskIncrementTick+0x14c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <xTaskIncrementTick+0x48>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	603b      	str	r3, [r7, #0]
}
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <xTaskIncrementTick+0x46>
 800827c:	4b40      	ldr	r3, [pc, #256]	; (8008380 <xTaskIncrementTick+0x14c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	4b40      	ldr	r3, [pc, #256]	; (8008384 <xTaskIncrementTick+0x150>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a3e      	ldr	r2, [pc, #248]	; (8008380 <xTaskIncrementTick+0x14c>)
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	4a3e      	ldr	r2, [pc, #248]	; (8008384 <xTaskIncrementTick+0x150>)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	4b3d      	ldr	r3, [pc, #244]	; (8008388 <xTaskIncrementTick+0x154>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3301      	adds	r3, #1
 8008296:	4a3c      	ldr	r2, [pc, #240]	; (8008388 <xTaskIncrementTick+0x154>)
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	f000 f995 	bl	80085c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800829e:	4b3b      	ldr	r3, [pc, #236]	; (800838c <xTaskIncrementTick+0x158>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d348      	bcc.n	800833a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a8:	4b35      	ldr	r3, [pc, #212]	; (8008380 <xTaskIncrementTick+0x14c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d104      	bne.n	80082bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b2:	4b36      	ldr	r3, [pc, #216]	; (800838c <xTaskIncrementTick+0x158>)
 80082b4:	f04f 32ff 	mov.w	r2, #4294967295
 80082b8:	601a      	str	r2, [r3, #0]
					break;
 80082ba:	e03e      	b.n	800833a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082bc:	4b30      	ldr	r3, [pc, #192]	; (8008380 <xTaskIncrementTick+0x14c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d203      	bcs.n	80082dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082d4:	4a2d      	ldr	r2, [pc, #180]	; (800838c <xTaskIncrementTick+0x158>)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082da:	e02e      	b.n	800833a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	3304      	adds	r3, #4
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff fcac 	bl	8007c3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	3318      	adds	r3, #24
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff fca3 	bl	8007c3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	2201      	movs	r2, #1
 80082fe:	409a      	lsls	r2, r3
 8008300:	4b23      	ldr	r3, [pc, #140]	; (8008390 <xTaskIncrementTick+0x15c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4313      	orrs	r3, r2
 8008306:	4a22      	ldr	r2, [pc, #136]	; (8008390 <xTaskIncrementTick+0x15c>)
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4a1f      	ldr	r2, [pc, #124]	; (8008394 <xTaskIncrementTick+0x160>)
 8008318:	441a      	add	r2, r3
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	3304      	adds	r3, #4
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	f7ff fc2f 	bl	8007b84 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832a:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <xTaskIncrementTick+0x164>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	429a      	cmp	r2, r3
 8008332:	d3b9      	bcc.n	80082a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008338:	e7b6      	b.n	80082a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800833a:	4b17      	ldr	r3, [pc, #92]	; (8008398 <xTaskIncrementTick+0x164>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008340:	4914      	ldr	r1, [pc, #80]	; (8008394 <xTaskIncrementTick+0x160>)
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d901      	bls.n	8008356 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008352:	2301      	movs	r3, #1
 8008354:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008356:	4b11      	ldr	r3, [pc, #68]	; (800839c <xTaskIncrementTick+0x168>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800835e:	2301      	movs	r3, #1
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	e004      	b.n	800836e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008364:	4b0e      	ldr	r3, [pc, #56]	; (80083a0 <xTaskIncrementTick+0x16c>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3301      	adds	r3, #1
 800836a:	4a0d      	ldr	r2, [pc, #52]	; (80083a0 <xTaskIncrementTick+0x16c>)
 800836c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800836e:	697b      	ldr	r3, [r7, #20]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	200206d8 	.word	0x200206d8
 800837c:	200206b4 	.word	0x200206b4
 8008380:	20020668 	.word	0x20020668
 8008384:	2002066c 	.word	0x2002066c
 8008388:	200206c8 	.word	0x200206c8
 800838c:	200206d0 	.word	0x200206d0
 8008390:	200206b8 	.word	0x200206b8
 8008394:	200205b4 	.word	0x200205b4
 8008398:	200205b0 	.word	0x200205b0
 800839c:	200206c4 	.word	0x200206c4
 80083a0:	200206c0 	.word	0x200206c0

080083a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083aa:	4b27      	ldr	r3, [pc, #156]	; (8008448 <vTaskSwitchContext+0xa4>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083b2:	4b26      	ldr	r3, [pc, #152]	; (800844c <vTaskSwitchContext+0xa8>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083b8:	e03f      	b.n	800843a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80083ba:	4b24      	ldr	r3, [pc, #144]	; (800844c <vTaskSwitchContext+0xa8>)
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c0:	4b23      	ldr	r3, [pc, #140]	; (8008450 <vTaskSwitchContext+0xac>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	fab3 f383 	clz	r3, r3
 80083cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80083ce:	7afb      	ldrb	r3, [r7, #11]
 80083d0:	f1c3 031f 	rsb	r3, r3, #31
 80083d4:	617b      	str	r3, [r7, #20]
 80083d6:	491f      	ldr	r1, [pc, #124]	; (8008454 <vTaskSwitchContext+0xb0>)
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10a      	bne.n	8008400 <vTaskSwitchContext+0x5c>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	607b      	str	r3, [r7, #4]
}
 80083fc:	bf00      	nop
 80083fe:	e7fe      	b.n	80083fe <vTaskSwitchContext+0x5a>
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4a12      	ldr	r2, [pc, #72]	; (8008454 <vTaskSwitchContext+0xb0>)
 800840c:	4413      	add	r3, r2
 800840e:	613b      	str	r3, [r7, #16]
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	605a      	str	r2, [r3, #4]
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	3308      	adds	r3, #8
 8008422:	429a      	cmp	r2, r3
 8008424:	d104      	bne.n	8008430 <vTaskSwitchContext+0x8c>
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	605a      	str	r2, [r3, #4]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	4a08      	ldr	r2, [pc, #32]	; (8008458 <vTaskSwitchContext+0xb4>)
 8008438:	6013      	str	r3, [r2, #0]
}
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	200206d8 	.word	0x200206d8
 800844c:	200206c4 	.word	0x200206c4
 8008450:	200206b8 	.word	0x200206b8
 8008454:	200205b4 	.word	0x200205b4
 8008458:	200205b0 	.word	0x200205b0

0800845c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008464:	f000 f852 	bl	800850c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008468:	4b06      	ldr	r3, [pc, #24]	; (8008484 <prvIdleTask+0x28>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d9f9      	bls.n	8008464 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <prvIdleTask+0x2c>)
 8008472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008480:	e7f0      	b.n	8008464 <prvIdleTask+0x8>
 8008482:	bf00      	nop
 8008484:	200205b4 	.word	0x200205b4
 8008488:	e000ed04 	.word	0xe000ed04

0800848c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008492:	2300      	movs	r3, #0
 8008494:	607b      	str	r3, [r7, #4]
 8008496:	e00c      	b.n	80084b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	4613      	mov	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4a12      	ldr	r2, [pc, #72]	; (80084ec <prvInitialiseTaskLists+0x60>)
 80084a4:	4413      	add	r3, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff fb3f 	bl	8007b2a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3301      	adds	r3, #1
 80084b0:	607b      	str	r3, [r7, #4]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b06      	cmp	r3, #6
 80084b6:	d9ef      	bls.n	8008498 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084b8:	480d      	ldr	r0, [pc, #52]	; (80084f0 <prvInitialiseTaskLists+0x64>)
 80084ba:	f7ff fb36 	bl	8007b2a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084be:	480d      	ldr	r0, [pc, #52]	; (80084f4 <prvInitialiseTaskLists+0x68>)
 80084c0:	f7ff fb33 	bl	8007b2a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084c4:	480c      	ldr	r0, [pc, #48]	; (80084f8 <prvInitialiseTaskLists+0x6c>)
 80084c6:	f7ff fb30 	bl	8007b2a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084ca:	480c      	ldr	r0, [pc, #48]	; (80084fc <prvInitialiseTaskLists+0x70>)
 80084cc:	f7ff fb2d 	bl	8007b2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084d0:	480b      	ldr	r0, [pc, #44]	; (8008500 <prvInitialiseTaskLists+0x74>)
 80084d2:	f7ff fb2a 	bl	8007b2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084d6:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <prvInitialiseTaskLists+0x78>)
 80084d8:	4a05      	ldr	r2, [pc, #20]	; (80084f0 <prvInitialiseTaskLists+0x64>)
 80084da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <prvInitialiseTaskLists+0x7c>)
 80084de:	4a05      	ldr	r2, [pc, #20]	; (80084f4 <prvInitialiseTaskLists+0x68>)
 80084e0:	601a      	str	r2, [r3, #0]
}
 80084e2:	bf00      	nop
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	200205b4 	.word	0x200205b4
 80084f0:	20020640 	.word	0x20020640
 80084f4:	20020654 	.word	0x20020654
 80084f8:	20020670 	.word	0x20020670
 80084fc:	20020684 	.word	0x20020684
 8008500:	2002069c 	.word	0x2002069c
 8008504:	20020668 	.word	0x20020668
 8008508:	2002066c 	.word	0x2002066c

0800850c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008512:	e019      	b.n	8008548 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008514:	f000 fa0e 	bl	8008934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008518:	4b10      	ldr	r3, [pc, #64]	; (800855c <prvCheckTasksWaitingTermination+0x50>)
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3304      	adds	r3, #4
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff fb8a 	bl	8007c3e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800852a:	4b0d      	ldr	r3, [pc, #52]	; (8008560 <prvCheckTasksWaitingTermination+0x54>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3b01      	subs	r3, #1
 8008530:	4a0b      	ldr	r2, [pc, #44]	; (8008560 <prvCheckTasksWaitingTermination+0x54>)
 8008532:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008534:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <prvCheckTasksWaitingTermination+0x58>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3b01      	subs	r3, #1
 800853a:	4a0a      	ldr	r2, [pc, #40]	; (8008564 <prvCheckTasksWaitingTermination+0x58>)
 800853c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800853e:	f000 fa29 	bl	8008994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f810 	bl	8008568 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008548:	4b06      	ldr	r3, [pc, #24]	; (8008564 <prvCheckTasksWaitingTermination+0x58>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e1      	bne.n	8008514 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20020684 	.word	0x20020684
 8008560:	200206b0 	.word	0x200206b0
 8008564:	20020698 	.word	0x20020698

08008568 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008576:	2b00      	cmp	r3, #0
 8008578:	d108      	bne.n	800858c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fb86 	bl	8008c90 <vPortFree>
				vPortFree( pxTCB );
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fb83 	bl	8008c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800858a:	e018      	b.n	80085be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008592:	2b01      	cmp	r3, #1
 8008594:	d103      	bne.n	800859e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fb7a 	bl	8008c90 <vPortFree>
	}
 800859c:	e00f      	b.n	80085be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d00a      	beq.n	80085be <prvDeleteTCB+0x56>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	60fb      	str	r3, [r7, #12]
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <prvDeleteTCB+0x54>
	}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085ce:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <prvResetNextTaskUnblockTime+0x38>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d104      	bne.n	80085e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085d8:	4b0a      	ldr	r3, [pc, #40]	; (8008604 <prvResetNextTaskUnblockTime+0x3c>)
 80085da:	f04f 32ff 	mov.w	r2, #4294967295
 80085de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085e0:	e008      	b.n	80085f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <prvResetNextTaskUnblockTime+0x38>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	4a04      	ldr	r2, [pc, #16]	; (8008604 <prvResetNextTaskUnblockTime+0x3c>)
 80085f2:	6013      	str	r3, [r2, #0]
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	20020668 	.word	0x20020668
 8008604:	200206d0 	.word	0x200206d0

08008608 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008612:	4b29      	ldr	r3, [pc, #164]	; (80086b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008618:	4b28      	ldr	r3, [pc, #160]	; (80086bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3304      	adds	r3, #4
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff fb0d 	bl	8007c3e <uxListRemove>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10b      	bne.n	8008642 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800862a:	4b24      	ldr	r3, [pc, #144]	; (80086bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	2201      	movs	r2, #1
 8008632:	fa02 f303 	lsl.w	r3, r2, r3
 8008636:	43da      	mvns	r2, r3
 8008638:	4b21      	ldr	r3, [pc, #132]	; (80086c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4013      	ands	r3, r2
 800863e:	4a20      	ldr	r2, [pc, #128]	; (80086c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008640:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d10a      	bne.n	8008660 <prvAddCurrentTaskToDelayedList+0x58>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d007      	beq.n	8008660 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008650:	4b1a      	ldr	r3, [pc, #104]	; (80086bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3304      	adds	r3, #4
 8008656:	4619      	mov	r1, r3
 8008658:	481a      	ldr	r0, [pc, #104]	; (80086c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800865a:	f7ff fa93 	bl	8007b84 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800865e:	e026      	b.n	80086ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4413      	add	r3, r2
 8008666:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008668:	4b14      	ldr	r3, [pc, #80]	; (80086bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	429a      	cmp	r2, r3
 8008676:	d209      	bcs.n	800868c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008678:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3304      	adds	r3, #4
 8008682:	4619      	mov	r1, r3
 8008684:	4610      	mov	r0, r2
 8008686:	f7ff faa1 	bl	8007bcc <vListInsert>
}
 800868a:	e010      	b.n	80086ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800868c:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3304      	adds	r3, #4
 8008696:	4619      	mov	r1, r3
 8008698:	4610      	mov	r0, r2
 800869a:	f7ff fa97 	bl	8007bcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800869e:	4b0c      	ldr	r3, [pc, #48]	; (80086d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d202      	bcs.n	80086ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80086a8:	4a09      	ldr	r2, [pc, #36]	; (80086d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	6013      	str	r3, [r2, #0]
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	200206b4 	.word	0x200206b4
 80086bc:	200205b0 	.word	0x200205b0
 80086c0:	200206b8 	.word	0x200206b8
 80086c4:	2002069c 	.word	0x2002069c
 80086c8:	2002066c 	.word	0x2002066c
 80086cc:	20020668 	.word	0x20020668
 80086d0:	200206d0 	.word	0x200206d0

080086d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3b04      	subs	r3, #4
 80086e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3b04      	subs	r3, #4
 80086f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f023 0201 	bic.w	r2, r3, #1
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3b04      	subs	r3, #4
 8008702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008704:	4a0c      	ldr	r2, [pc, #48]	; (8008738 <pxPortInitialiseStack+0x64>)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3b14      	subs	r3, #20
 800870e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3b04      	subs	r3, #4
 800871a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f06f 0202 	mvn.w	r2, #2
 8008722:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3b20      	subs	r3, #32
 8008728:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800872a:	68fb      	ldr	r3, [r7, #12]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	0800873d 	.word	0x0800873d

0800873c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008746:	4b12      	ldr	r3, [pc, #72]	; (8008790 <prvTaskExitError+0x54>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874e:	d00a      	beq.n	8008766 <prvTaskExitError+0x2a>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	60fb      	str	r3, [r7, #12]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <prvTaskExitError+0x28>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	60bb      	str	r3, [r7, #8]
}
 8008778:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800877a:	bf00      	nop
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0fc      	beq.n	800877c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008782:	bf00      	nop
 8008784:	bf00      	nop
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	20000008 	.word	0x20000008
	...

080087a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <pxCurrentTCBConst2>)
 80087a2:	6819      	ldr	r1, [r3, #0]
 80087a4:	6808      	ldr	r0, [r1, #0]
 80087a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087aa:	f380 8809 	msr	PSP, r0
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f04f 0000 	mov.w	r0, #0
 80087b6:	f380 8811 	msr	BASEPRI, r0
 80087ba:	4770      	bx	lr
 80087bc:	f3af 8000 	nop.w

080087c0 <pxCurrentTCBConst2>:
 80087c0:	200205b0 	.word	0x200205b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087c4:	bf00      	nop
 80087c6:	bf00      	nop

080087c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087c8:	4808      	ldr	r0, [pc, #32]	; (80087ec <prvPortStartFirstTask+0x24>)
 80087ca:	6800      	ldr	r0, [r0, #0]
 80087cc:	6800      	ldr	r0, [r0, #0]
 80087ce:	f380 8808 	msr	MSP, r0
 80087d2:	f04f 0000 	mov.w	r0, #0
 80087d6:	f380 8814 	msr	CONTROL, r0
 80087da:	b662      	cpsie	i
 80087dc:	b661      	cpsie	f
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	df00      	svc	0
 80087e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087ea:	bf00      	nop
 80087ec:	e000ed08 	.word	0xe000ed08

080087f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087f6:	4b46      	ldr	r3, [pc, #280]	; (8008910 <xPortStartScheduler+0x120>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a46      	ldr	r2, [pc, #280]	; (8008914 <xPortStartScheduler+0x124>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d10a      	bne.n	8008816 <xPortStartScheduler+0x26>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	613b      	str	r3, [r7, #16]
}
 8008812:	bf00      	nop
 8008814:	e7fe      	b.n	8008814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008816:	4b3e      	ldr	r3, [pc, #248]	; (8008910 <xPortStartScheduler+0x120>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a3f      	ldr	r2, [pc, #252]	; (8008918 <xPortStartScheduler+0x128>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d10a      	bne.n	8008836 <xPortStartScheduler+0x46>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	60fb      	str	r3, [r7, #12]
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008836:	4b39      	ldr	r3, [pc, #228]	; (800891c <xPortStartScheduler+0x12c>)
 8008838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	22ff      	movs	r2, #255	; 0xff
 8008846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008858:	b2da      	uxtb	r2, r3
 800885a:	4b31      	ldr	r3, [pc, #196]	; (8008920 <xPortStartScheduler+0x130>)
 800885c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800885e:	4b31      	ldr	r3, [pc, #196]	; (8008924 <xPortStartScheduler+0x134>)
 8008860:	2207      	movs	r2, #7
 8008862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008864:	e009      	b.n	800887a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008866:	4b2f      	ldr	r3, [pc, #188]	; (8008924 <xPortStartScheduler+0x134>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3b01      	subs	r3, #1
 800886c:	4a2d      	ldr	r2, [pc, #180]	; (8008924 <xPortStartScheduler+0x134>)
 800886e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	b2db      	uxtb	r3, r3
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	b2db      	uxtb	r3, r3
 8008878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800887a:	78fb      	ldrb	r3, [r7, #3]
 800887c:	b2db      	uxtb	r3, r3
 800887e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008882:	2b80      	cmp	r3, #128	; 0x80
 8008884:	d0ef      	beq.n	8008866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008886:	4b27      	ldr	r3, [pc, #156]	; (8008924 <xPortStartScheduler+0x134>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f1c3 0307 	rsb	r3, r3, #7
 800888e:	2b04      	cmp	r3, #4
 8008890:	d00a      	beq.n	80088a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	60bb      	str	r3, [r7, #8]
}
 80088a4:	bf00      	nop
 80088a6:	e7fe      	b.n	80088a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088a8:	4b1e      	ldr	r3, [pc, #120]	; (8008924 <xPortStartScheduler+0x134>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	021b      	lsls	r3, r3, #8
 80088ae:	4a1d      	ldr	r2, [pc, #116]	; (8008924 <xPortStartScheduler+0x134>)
 80088b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088b2:	4b1c      	ldr	r3, [pc, #112]	; (8008924 <xPortStartScheduler+0x134>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088ba:	4a1a      	ldr	r2, [pc, #104]	; (8008924 <xPortStartScheduler+0x134>)
 80088bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088c6:	4b18      	ldr	r3, [pc, #96]	; (8008928 <xPortStartScheduler+0x138>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a17      	ldr	r2, [pc, #92]	; (8008928 <xPortStartScheduler+0x138>)
 80088cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088d2:	4b15      	ldr	r3, [pc, #84]	; (8008928 <xPortStartScheduler+0x138>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a14      	ldr	r2, [pc, #80]	; (8008928 <xPortStartScheduler+0x138>)
 80088d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80088dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088de:	f000 f8dd 	bl	8008a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088e2:	4b12      	ldr	r3, [pc, #72]	; (800892c <xPortStartScheduler+0x13c>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80088e8:	f000 f8fc 	bl	8008ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088ec:	4b10      	ldr	r3, [pc, #64]	; (8008930 <xPortStartScheduler+0x140>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a0f      	ldr	r2, [pc, #60]	; (8008930 <xPortStartScheduler+0x140>)
 80088f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80088f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088f8:	f7ff ff66 	bl	80087c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088fc:	f7ff fd52 	bl	80083a4 <vTaskSwitchContext>
	prvTaskExitError();
 8008900:	f7ff ff1c 	bl	800873c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	e000ed00 	.word	0xe000ed00
 8008914:	410fc271 	.word	0x410fc271
 8008918:	410fc270 	.word	0x410fc270
 800891c:	e000e400 	.word	0xe000e400
 8008920:	200206dc 	.word	0x200206dc
 8008924:	200206e0 	.word	0x200206e0
 8008928:	e000ed20 	.word	0xe000ed20
 800892c:	20000008 	.word	0x20000008
 8008930:	e000ef34 	.word	0xe000ef34

08008934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
	__asm volatile
 800893a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	607b      	str	r3, [r7, #4]
}
 800894c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800894e:	4b0f      	ldr	r3, [pc, #60]	; (800898c <vPortEnterCritical+0x58>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3301      	adds	r3, #1
 8008954:	4a0d      	ldr	r2, [pc, #52]	; (800898c <vPortEnterCritical+0x58>)
 8008956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008958:	4b0c      	ldr	r3, [pc, #48]	; (800898c <vPortEnterCritical+0x58>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d10f      	bne.n	8008980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008960:	4b0b      	ldr	r3, [pc, #44]	; (8008990 <vPortEnterCritical+0x5c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00a      	beq.n	8008980 <vPortEnterCritical+0x4c>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	603b      	str	r3, [r7, #0]
}
 800897c:	bf00      	nop
 800897e:	e7fe      	b.n	800897e <vPortEnterCritical+0x4a>
	}
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	20000008 	.word	0x20000008
 8008990:	e000ed04 	.word	0xe000ed04

08008994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800899a:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <vPortExitCritical+0x50>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10a      	bne.n	80089b8 <vPortExitCritical+0x24>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	607b      	str	r3, [r7, #4]
}
 80089b4:	bf00      	nop
 80089b6:	e7fe      	b.n	80089b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089b8:	4b0a      	ldr	r3, [pc, #40]	; (80089e4 <vPortExitCritical+0x50>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3b01      	subs	r3, #1
 80089be:	4a09      	ldr	r2, [pc, #36]	; (80089e4 <vPortExitCritical+0x50>)
 80089c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089c2:	4b08      	ldr	r3, [pc, #32]	; (80089e4 <vPortExitCritical+0x50>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d105      	bne.n	80089d6 <vPortExitCritical+0x42>
 80089ca:	2300      	movs	r3, #0
 80089cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80089d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	20000008 	.word	0x20000008
	...

080089f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089f0:	f3ef 8009 	mrs	r0, PSP
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <pxCurrentTCBConst>)
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	f01e 0f10 	tst.w	lr, #16
 8008a00:	bf08      	it	eq
 8008a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0a:	6010      	str	r0, [r2, #0]
 8008a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a14:	f380 8811 	msr	BASEPRI, r0
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f7ff fcc0 	bl	80083a4 <vTaskSwitchContext>
 8008a24:	f04f 0000 	mov.w	r0, #0
 8008a28:	f380 8811 	msr	BASEPRI, r0
 8008a2c:	bc09      	pop	{r0, r3}
 8008a2e:	6819      	ldr	r1, [r3, #0]
 8008a30:	6808      	ldr	r0, [r1, #0]
 8008a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a36:	f01e 0f10 	tst.w	lr, #16
 8008a3a:	bf08      	it	eq
 8008a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a40:	f380 8809 	msr	PSP, r0
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	f3af 8000 	nop.w

08008a50 <pxCurrentTCBConst>:
 8008a50:	200205b0 	.word	0x200205b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop

08008a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	607b      	str	r3, [r7, #4]
}
 8008a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a72:	f7ff fbdf 	bl	8008234 <xTaskIncrementTick>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <SysTick_Handler+0x40>)
 8008a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	2300      	movs	r3, #0
 8008a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	f383 8811 	msr	BASEPRI, r3
}
 8008a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	e000ed04 	.word	0xe000ed04

08008a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <vPortSetupTimerInterrupt+0x34>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <vPortSetupTimerInterrupt+0x38>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <vPortSetupTimerInterrupt+0x3c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a0a      	ldr	r2, [pc, #40]	; (8008adc <vPortSetupTimerInterrupt+0x40>)
 8008ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab6:	099b      	lsrs	r3, r3, #6
 8008ab8:	4a09      	ldr	r2, [pc, #36]	; (8008ae0 <vPortSetupTimerInterrupt+0x44>)
 8008aba:	3b01      	subs	r3, #1
 8008abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008abe:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <vPortSetupTimerInterrupt+0x34>)
 8008ac0:	2207      	movs	r2, #7
 8008ac2:	601a      	str	r2, [r3, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	e000e010 	.word	0xe000e010
 8008ad4:	e000e018 	.word	0xe000e018
 8008ad8:	20020528 	.word	0x20020528
 8008adc:	10624dd3 	.word	0x10624dd3
 8008ae0:	e000e014 	.word	0xe000e014

08008ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008af4 <vPortEnableVFP+0x10>
 8008ae8:	6801      	ldr	r1, [r0, #0]
 8008aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008aee:	6001      	str	r1, [r0, #0]
 8008af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008af2:	bf00      	nop
 8008af4:	e000ed88 	.word	0xe000ed88

08008af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08a      	sub	sp, #40	; 0x28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b04:	f7ff faec 	bl	80080e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b08:	4b5b      	ldr	r3, [pc, #364]	; (8008c78 <pvPortMalloc+0x180>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b10:	f000 f920 	bl	8008d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b14:	4b59      	ldr	r3, [pc, #356]	; (8008c7c <pvPortMalloc+0x184>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f040 8093 	bne.w	8008c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d01d      	beq.n	8008b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b28:	2208      	movs	r2, #8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f003 0307 	and.w	r3, r3, #7
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d014      	beq.n	8008b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f023 0307 	bic.w	r3, r3, #7
 8008b40:	3308      	adds	r3, #8
 8008b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <pvPortMalloc+0x6c>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	617b      	str	r3, [r7, #20]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d06e      	beq.n	8008c48 <pvPortMalloc+0x150>
 8008b6a:	4b45      	ldr	r3, [pc, #276]	; (8008c80 <pvPortMalloc+0x188>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d869      	bhi.n	8008c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b74:	4b43      	ldr	r3, [pc, #268]	; (8008c84 <pvPortMalloc+0x18c>)
 8008b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b78:	4b42      	ldr	r3, [pc, #264]	; (8008c84 <pvPortMalloc+0x18c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b7e:	e004      	b.n	8008b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d903      	bls.n	8008b9c <pvPortMalloc+0xa4>
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1f1      	bne.n	8008b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b9c:	4b36      	ldr	r3, [pc, #216]	; (8008c78 <pvPortMalloc+0x180>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d050      	beq.n	8008c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2208      	movs	r2, #8
 8008bac:	4413      	add	r3, r2
 8008bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	1ad2      	subs	r2, r2, r3
 8008bc0:	2308      	movs	r3, #8
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d91f      	bls.n	8008c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4413      	add	r3, r2
 8008bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00a      	beq.n	8008bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	613b      	str	r3, [r7, #16]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	1ad2      	subs	r2, r2, r3
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c02:	69b8      	ldr	r0, [r7, #24]
 8008c04:	f000 f908 	bl	8008e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c08:	4b1d      	ldr	r3, [pc, #116]	; (8008c80 <pvPortMalloc+0x188>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	4a1b      	ldr	r2, [pc, #108]	; (8008c80 <pvPortMalloc+0x188>)
 8008c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c16:	4b1a      	ldr	r3, [pc, #104]	; (8008c80 <pvPortMalloc+0x188>)
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	4b1b      	ldr	r3, [pc, #108]	; (8008c88 <pvPortMalloc+0x190>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d203      	bcs.n	8008c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c22:	4b17      	ldr	r3, [pc, #92]	; (8008c80 <pvPortMalloc+0x188>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a18      	ldr	r2, [pc, #96]	; (8008c88 <pvPortMalloc+0x190>)
 8008c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <pvPortMalloc+0x184>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	431a      	orrs	r2, r3
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c3e:	4b13      	ldr	r3, [pc, #76]	; (8008c8c <pvPortMalloc+0x194>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3301      	adds	r3, #1
 8008c44:	4a11      	ldr	r2, [pc, #68]	; (8008c8c <pvPortMalloc+0x194>)
 8008c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c48:	f7ff fa58 	bl	80080fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	f003 0307 	and.w	r3, r3, #7
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00a      	beq.n	8008c6c <pvPortMalloc+0x174>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60fb      	str	r3, [r7, #12]
}
 8008c68:	bf00      	nop
 8008c6a:	e7fe      	b.n	8008c6a <pvPortMalloc+0x172>
	return pvReturn;
 8008c6c:	69fb      	ldr	r3, [r7, #28]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3728      	adds	r7, #40	; 0x28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	200212a4 	.word	0x200212a4
 8008c7c:	200212b8 	.word	0x200212b8
 8008c80:	200212a8 	.word	0x200212a8
 8008c84:	2002129c 	.word	0x2002129c
 8008c88:	200212ac 	.word	0x200212ac
 8008c8c:	200212b0 	.word	0x200212b0

08008c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d04d      	beq.n	8008d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ca2:	2308      	movs	r3, #8
 8008ca4:	425b      	negs	r3, r3
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	4413      	add	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	4b24      	ldr	r3, [pc, #144]	; (8008d48 <vPortFree+0xb8>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4013      	ands	r3, r2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10a      	bne.n	8008cd4 <vPortFree+0x44>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	60fb      	str	r3, [r7, #12]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00a      	beq.n	8008cf2 <vPortFree+0x62>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	60bb      	str	r3, [r7, #8]
}
 8008cee:	bf00      	nop
 8008cf0:	e7fe      	b.n	8008cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	4b14      	ldr	r3, [pc, #80]	; (8008d48 <vPortFree+0xb8>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01e      	beq.n	8008d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d11a      	bne.n	8008d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <vPortFree+0xb8>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	43db      	mvns	r3, r3
 8008d12:	401a      	ands	r2, r3
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d18:	f7ff f9e2 	bl	80080e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <vPortFree+0xbc>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4413      	add	r3, r2
 8008d26:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <vPortFree+0xbc>)
 8008d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d2a:	6938      	ldr	r0, [r7, #16]
 8008d2c:	f000 f874 	bl	8008e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d30:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <vPortFree+0xc0>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3301      	adds	r3, #1
 8008d36:	4a06      	ldr	r2, [pc, #24]	; (8008d50 <vPortFree+0xc0>)
 8008d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d3a:	f7ff f9df 	bl	80080fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d3e:	bf00      	nop
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	200212b8 	.word	0x200212b8
 8008d4c:	200212a8 	.word	0x200212a8
 8008d50:	200212b4 	.word	0x200212b4

08008d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d60:	4b27      	ldr	r3, [pc, #156]	; (8008e00 <prvHeapInit+0xac>)
 8008d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00c      	beq.n	8008d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3307      	adds	r3, #7
 8008d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 0307 	bic.w	r3, r3, #7
 8008d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	4a1f      	ldr	r2, [pc, #124]	; (8008e00 <prvHeapInit+0xac>)
 8008d84:	4413      	add	r3, r2
 8008d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d8c:	4a1d      	ldr	r2, [pc, #116]	; (8008e04 <prvHeapInit+0xb0>)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d92:	4b1c      	ldr	r3, [pc, #112]	; (8008e04 <prvHeapInit+0xb0>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008da0:	2208      	movs	r2, #8
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	1a9b      	subs	r3, r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0307 	bic.w	r3, r3, #7
 8008dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <prvHeapInit+0xb4>)
 8008db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008db6:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <prvHeapInit+0xb4>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dbe:	4b12      	ldr	r3, [pc, #72]	; (8008e08 <prvHeapInit+0xb4>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	1ad2      	subs	r2, r2, r3
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <prvHeapInit+0xb4>)
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	4a0a      	ldr	r2, [pc, #40]	; (8008e0c <prvHeapInit+0xb8>)
 8008de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <prvHeapInit+0xbc>)
 8008dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dec:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <prvHeapInit+0xc0>)
 8008dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008df2:	601a      	str	r2, [r3, #0]
}
 8008df4:	bf00      	nop
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	200206e4 	.word	0x200206e4
 8008e04:	2002129c 	.word	0x2002129c
 8008e08:	200212a4 	.word	0x200212a4
 8008e0c:	200212ac 	.word	0x200212ac
 8008e10:	200212a8 	.word	0x200212a8
 8008e14:	200212b8 	.word	0x200212b8

08008e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e20:	4b28      	ldr	r3, [pc, #160]	; (8008ec4 <prvInsertBlockIntoFreeList+0xac>)
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	e002      	b.n	8008e2c <prvInsertBlockIntoFreeList+0x14>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d8f7      	bhi.n	8008e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	4413      	add	r3, r2
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d108      	bne.n	8008e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	441a      	add	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	441a      	add	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d118      	bne.n	8008ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	4b15      	ldr	r3, [pc, #84]	; (8008ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d00d      	beq.n	8008e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	441a      	add	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	e008      	b.n	8008ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e96:	4b0c      	ldr	r3, [pc, #48]	; (8008ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	601a      	str	r2, [r3, #0]
 8008e9e:	e003      	b.n	8008ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d002      	beq.n	8008eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eb6:	bf00      	nop
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	2002129c 	.word	0x2002129c
 8008ec8:	200212a4 	.word	0x200212a4

08008ecc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4a07      	ldr	r2, [pc, #28]	; (8008ef8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008edc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	4a06      	ldr	r2, [pc, #24]	; (8008efc <vApplicationGetIdleTaskMemory+0x30>)
 8008ee2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2280      	movs	r2, #128	; 0x80
 8008ee8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8008eea:	bf00      	nop
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	200212bc 	.word	0x200212bc
 8008efc:	20021310 	.word	0x20021310

08008f00 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8008f0e:	2111      	movs	r1, #17
 8008f10:	20d4      	movs	r0, #212	; 0xd4
 8008f12:	f001 fb1d 	bl	800a550 <SENSOR_IO_Read>
 8008f16:	4603      	mov	r3, r0
 8008f18:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8008f1a:	88fb      	ldrh	r3, [r7, #6]
 8008f1c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8008f1e:	7bbb      	ldrb	r3, [r7, #14]
 8008f20:	f003 0303 	and.w	r3, r3, #3
 8008f24:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8008f26:	7bba      	ldrb	r2, [r7, #14]
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8008f2e:	7bbb      	ldrb	r3, [r7, #14]
 8008f30:	461a      	mov	r2, r3
 8008f32:	2111      	movs	r1, #17
 8008f34:	20d4      	movs	r0, #212	; 0xd4
 8008f36:	f001 faf1 	bl	800a51c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8008f3a:	2112      	movs	r1, #18
 8008f3c:	20d4      	movs	r0, #212	; 0xd4
 8008f3e:	f001 fb07 	bl	800a550 <SENSOR_IO_Read>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	0a1b      	lsrs	r3, r3, #8
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8008f54:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8008f56:	7bba      	ldrb	r2, [r7, #14]
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	461a      	mov	r2, r3
 8008f62:	2112      	movs	r1, #18
 8008f64:	20d4      	movs	r0, #212	; 0xd4
 8008f66:	f001 fad9 	bl	800a51c <SENSOR_IO_Write>
}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8008f7c:	2111      	movs	r1, #17
 8008f7e:	20d4      	movs	r0, #212	; 0xd4
 8008f80:	f001 fae6 	bl	800a550 <SENSOR_IO_Read>
 8008f84:	4603      	mov	r3, r0
 8008f86:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8008f88:	79fb      	ldrb	r3, [r7, #7]
 8008f8a:	f003 030f 	and.w	r3, r3, #15
 8008f8e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8008f90:	79fb      	ldrb	r3, [r7, #7]
 8008f92:	461a      	mov	r2, r3
 8008f94:	2111      	movs	r1, #17
 8008f96:	20d4      	movs	r0, #212	; 0xd4
 8008f98:	f001 fac0 	bl	800a51c <SENSOR_IO_Write>
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8008fa8:	f001 faae 	bl	800a508 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8008fac:	210f      	movs	r1, #15
 8008fae:	20d4      	movs	r0, #212	; 0xd4
 8008fb0:	f001 face 	bl	800a550 <SENSOR_IO_Read>
 8008fb4:	4603      	mov	r3, r0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8008fc8:	2116      	movs	r1, #22
 8008fca:	20d4      	movs	r0, #212	; 0xd4
 8008fcc:	f001 fac0 	bl	800a550 <SENSOR_IO_Read>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fda:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8008fdc:	88fb      	ldrh	r3, [r7, #6]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d003      	beq.n	8008fea <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008fe8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
 8008fec:	461a      	mov	r2, r3
 8008fee:	2116      	movs	r1, #22
 8008ff0:	20d4      	movs	r0, #212	; 0xd4
 8008ff2:	f001 fa93 	bl	800a51c <SENSOR_IO_Write>
}
 8008ff6:	bf00      	nop
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8009008:	2300      	movs	r3, #0
 800900a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009010:	f04f 0300 	mov.w	r3, #0
 8009014:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8009016:	2111      	movs	r1, #17
 8009018:	20d4      	movs	r0, #212	; 0xd4
 800901a:	f001 fa99 	bl	800a550 <SENSOR_IO_Read>
 800901e:	4603      	mov	r3, r0
 8009020:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8009022:	f107 0208 	add.w	r2, r7, #8
 8009026:	2306      	movs	r3, #6
 8009028:	2122      	movs	r1, #34	; 0x22
 800902a:	20d4      	movs	r0, #212	; 0xd4
 800902c:	f001 faae 	bl	800a58c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009030:	2300      	movs	r3, #0
 8009032:	77fb      	strb	r3, [r7, #31]
 8009034:	e01c      	b.n	8009070 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8009036:	7ffb      	ldrb	r3, [r7, #31]
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	3301      	adds	r3, #1
 800903c:	3320      	adds	r3, #32
 800903e:	443b      	add	r3, r7
 8009040:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009044:	b29b      	uxth	r3, r3
 8009046:	021b      	lsls	r3, r3, #8
 8009048:	b29a      	uxth	r2, r3
 800904a:	7ffb      	ldrb	r3, [r7, #31]
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	3320      	adds	r3, #32
 8009050:	443b      	add	r3, r7
 8009052:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009056:	b29b      	uxth	r3, r3
 8009058:	4413      	add	r3, r2
 800905a:	b29a      	uxth	r2, r3
 800905c:	7ffb      	ldrb	r3, [r7, #31]
 800905e:	b212      	sxth	r2, r2
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	3320      	adds	r3, #32
 8009064:	443b      	add	r3, r7
 8009066:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800906a:	7ffb      	ldrb	r3, [r7, #31]
 800906c:	3301      	adds	r3, #1
 800906e:	77fb      	strb	r3, [r7, #31]
 8009070:	7ffb      	ldrb	r3, [r7, #31]
 8009072:	2b02      	cmp	r3, #2
 8009074:	d9df      	bls.n	8009036 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	f003 030c 	and.w	r3, r3, #12
 800907c:	2b0c      	cmp	r3, #12
 800907e:	d829      	bhi.n	80090d4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8009080:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8009082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009086:	bf00      	nop
 8009088:	080090bd 	.word	0x080090bd
 800908c:	080090d5 	.word	0x080090d5
 8009090:	080090d5 	.word	0x080090d5
 8009094:	080090d5 	.word	0x080090d5
 8009098:	080090c3 	.word	0x080090c3
 800909c:	080090d5 	.word	0x080090d5
 80090a0:	080090d5 	.word	0x080090d5
 80090a4:	080090d5 	.word	0x080090d5
 80090a8:	080090c9 	.word	0x080090c9
 80090ac:	080090d5 	.word	0x080090d5
 80090b0:	080090d5 	.word	0x080090d5
 80090b4:	080090d5 	.word	0x080090d5
 80090b8:	080090cf 	.word	0x080090cf
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80090bc:	4b16      	ldr	r3, [pc, #88]	; (8009118 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80090be:	61bb      	str	r3, [r7, #24]
    break;
 80090c0:	e008      	b.n	80090d4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80090c2:	4b16      	ldr	r3, [pc, #88]	; (800911c <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80090c4:	61bb      	str	r3, [r7, #24]
    break;
 80090c6:	e005      	b.n	80090d4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80090c8:	4b15      	ldr	r3, [pc, #84]	; (8009120 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80090ca:	61bb      	str	r3, [r7, #24]
    break;
 80090cc:	e002      	b.n	80090d4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80090ce:	4b15      	ldr	r3, [pc, #84]	; (8009124 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80090d0:	61bb      	str	r3, [r7, #24]
    break;    
 80090d2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80090d4:	2300      	movs	r3, #0
 80090d6:	77fb      	strb	r3, [r7, #31]
 80090d8:	e016      	b.n	8009108 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80090da:	7ffb      	ldrb	r3, [r7, #31]
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	3320      	adds	r3, #32
 80090e0:	443b      	add	r3, r7
 80090e2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090ee:	7ffb      	ldrb	r3, [r7, #31]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	4413      	add	r3, r2
 80090f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80090fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090fe:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8009102:	7ffb      	ldrb	r3, [r7, #31]
 8009104:	3301      	adds	r3, #1
 8009106:	77fb      	strb	r3, [r7, #31]
 8009108:	7ffb      	ldrb	r3, [r7, #31]
 800910a:	2b02      	cmp	r3, #2
 800910c:	d9e5      	bls.n	80090da <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 800910e:	bf00      	nop
 8009110:	bf00      	nop
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	410c0000 	.word	0x410c0000
 800911c:	418c0000 	.word	0x418c0000
 8009120:	420c0000 	.word	0x420c0000
 8009124:	428c0000 	.word	0x428c0000

08009128 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8009132:	88fb      	ldrh	r3, [r7, #6]
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2120      	movs	r1, #32
 8009138:	4618      	mov	r0, r3
 800913a:	f001 fa09 	bl	800a550 <SENSOR_IO_Read>
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	f023 0304 	bic.w	r3, r3, #4
 8009148:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	f043 0304 	orr.w	r3, r3, #4
 8009150:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	f023 0303 	bic.w	r3, r3, #3
 8009158:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800915a:	7bfb      	ldrb	r3, [r7, #15]
 800915c:	f043 0301 	orr.w	r3, r3, #1
 8009160:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009168:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800916a:	88fb      	ldrh	r3, [r7, #6]
 800916c:	b2db      	uxtb	r3, r3
 800916e:	7bfa      	ldrb	r2, [r7, #15]
 8009170:	2120      	movs	r1, #32
 8009172:	4618      	mov	r0, r3
 8009174:	f001 f9d2 	bl	800a51c <SENSOR_IO_Write>
}
 8009178:	bf00      	nop
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800918a:	2300      	movs	r3, #0
 800918c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800918e:	f001 f9bb 	bl	800a508 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8009192:	88fb      	ldrh	r3, [r7, #6]
 8009194:	b2db      	uxtb	r3, r3
 8009196:	210f      	movs	r1, #15
 8009198:	4618      	mov	r0, r3
 800919a:	f001 f9d9 	bl	800a550 <SENSOR_IO_Read>
 800919e:	4603      	mov	r3, r0
 80091a0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b088      	sub	sp, #32
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	b2d8      	uxtb	r0, r3
 80091ba:	f107 020c 	add.w	r2, r7, #12
 80091be:	2302      	movs	r3, #2
 80091c0:	21b0      	movs	r1, #176	; 0xb0
 80091c2:	f001 f9e3 	bl	800a58c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80091c6:	7b3b      	ldrb	r3, [r7, #12]
 80091c8:	085b      	lsrs	r3, r3, #1
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80091ce:	7b7b      	ldrb	r3, [r7, #13]
 80091d0:	085b      	lsrs	r3, r3, #1
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80091d6:	88fb      	ldrh	r3, [r7, #6]
 80091d8:	b2d8      	uxtb	r0, r3
 80091da:	f107 020c 	add.w	r2, r7, #12
 80091de:	2302      	movs	r3, #2
 80091e0:	21b6      	movs	r1, #182	; 0xb6
 80091e2:	f001 f9d3 	bl	800a58c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80091e6:	7b7b      	ldrb	r3, [r7, #13]
 80091e8:	021b      	lsls	r3, r3, #8
 80091ea:	b21a      	sxth	r2, r3
 80091ec:	7b3b      	ldrb	r3, [r7, #12]
 80091ee:	b21b      	sxth	r3, r3
 80091f0:	4313      	orrs	r3, r2
 80091f2:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80091f4:	88fb      	ldrh	r3, [r7, #6]
 80091f6:	b2d8      	uxtb	r0, r3
 80091f8:	f107 020c 	add.w	r2, r7, #12
 80091fc:	2302      	movs	r3, #2
 80091fe:	21ba      	movs	r1, #186	; 0xba
 8009200:	f001 f9c4 	bl	800a58c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009204:	7b7b      	ldrb	r3, [r7, #13]
 8009206:	021b      	lsls	r3, r3, #8
 8009208:	b21a      	sxth	r2, r3
 800920a:	7b3b      	ldrb	r3, [r7, #12]
 800920c:	b21b      	sxth	r3, r3
 800920e:	4313      	orrs	r3, r2
 8009210:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8009212:	88fb      	ldrh	r3, [r7, #6]
 8009214:	b2d8      	uxtb	r0, r3
 8009216:	f107 020c 	add.w	r2, r7, #12
 800921a:	2302      	movs	r3, #2
 800921c:	21a8      	movs	r1, #168	; 0xa8
 800921e:	f001 f9b5 	bl	800a58c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009222:	7b7b      	ldrb	r3, [r7, #13]
 8009224:	021b      	lsls	r3, r3, #8
 8009226:	b21a      	sxth	r2, r3
 8009228:	7b3b      	ldrb	r3, [r7, #12]
 800922a:	b21b      	sxth	r3, r3
 800922c:	4313      	orrs	r3, r2
 800922e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8009230:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009234:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009242:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009246:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	ee07 3a90 	vmov	s15, r3
 8009250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009254:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009258:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800925c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800926a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800926e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009272:	ee07 3a90 	vmov	s15, r3
 8009276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800927a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800927e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8009282:	edd7 7a04 	vldr	s15, [r7, #16]
 8009286:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800928a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800928e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8009292:	edd7 7a04 	vldr	s15, [r7, #16]
 8009296:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80092dc <HTS221_H_ReadHumidity+0x130>
 800929a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800929e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a2:	dd01      	ble.n	80092a8 <HTS221_H_ReadHumidity+0xfc>
 80092a4:	4b0e      	ldr	r3, [pc, #56]	; (80092e0 <HTS221_H_ReadHumidity+0x134>)
 80092a6:	e00a      	b.n	80092be <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80092a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80092ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b4:	d502      	bpl.n	80092bc <HTS221_H_ReadHumidity+0x110>
 80092b6:	f04f 0300 	mov.w	r3, #0
 80092ba:	e000      	b.n	80092be <HTS221_H_ReadHumidity+0x112>
 80092bc:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80092be:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80092c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80092c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80092c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092cc:	eef0 7a66 	vmov.f32	s15, s13
}
 80092d0:	eeb0 0a67 	vmov.f32	s0, s15
 80092d4:	3720      	adds	r7, #32
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	447a0000 	.word	0x447a0000
 80092e0:	447a0000 	.word	0x447a0000

080092e4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	6039      	str	r1, [r7, #0]
 80092ee:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80092f0:	88fb      	ldrh	r3, [r7, #6]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2120      	movs	r1, #32
 80092f6:	4618      	mov	r0, r3
 80092f8:	f001 f92a 	bl	800a550 <SENSOR_IO_Read>
 80092fc:	4603      	mov	r3, r0
 80092fe:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	f023 0304 	bic.w	r3, r3, #4
 8009306:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8009308:	7bfb      	ldrb	r3, [r7, #15]
 800930a:	f043 0304 	orr.w	r3, r3, #4
 800930e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	f023 0303 	bic.w	r3, r3, #3
 8009316:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	f043 0301 	orr.w	r3, r3, #1
 800931e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009326:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8009328:	88fb      	ldrh	r3, [r7, #6]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	7bfa      	ldrb	r2, [r7, #15]
 800932e:	2120      	movs	r1, #32
 8009330:	4618      	mov	r0, r3
 8009332:	f001 f8f3 	bl	800a51c <SENSOR_IO_Write>
}
 8009336:	bf00      	nop
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b088      	sub	sp, #32
 8009342:	af00      	add	r7, sp, #0
 8009344:	4603      	mov	r3, r0
 8009346:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8009348:	88fb      	ldrh	r3, [r7, #6]
 800934a:	b2d8      	uxtb	r0, r3
 800934c:	f107 0208 	add.w	r2, r7, #8
 8009350:	2302      	movs	r3, #2
 8009352:	21b2      	movs	r1, #178	; 0xb2
 8009354:	f001 f91a 	bl	800a58c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8009358:	88fb      	ldrh	r3, [r7, #6]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2135      	movs	r1, #53	; 0x35
 800935e:	4618      	mov	r0, r3
 8009360:	f001 f8f6 	bl	800a550 <SENSOR_IO_Read>
 8009364:	4603      	mov	r3, r0
 8009366:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8009368:	7ffb      	ldrb	r3, [r7, #31]
 800936a:	021b      	lsls	r3, r3, #8
 800936c:	b21b      	sxth	r3, r3
 800936e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009372:	b21a      	sxth	r2, r3
 8009374:	7a3b      	ldrb	r3, [r7, #8]
 8009376:	b21b      	sxth	r3, r3
 8009378:	4313      	orrs	r3, r2
 800937a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800937c:	7ffb      	ldrb	r3, [r7, #31]
 800937e:	019b      	lsls	r3, r3, #6
 8009380:	b21b      	sxth	r3, r3
 8009382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009386:	b21a      	sxth	r2, r3
 8009388:	7a7b      	ldrb	r3, [r7, #9]
 800938a:	b21b      	sxth	r3, r3
 800938c:	4313      	orrs	r3, r2
 800938e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8009390:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009394:	10db      	asrs	r3, r3, #3
 8009396:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8009398:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800939c:	10db      	asrs	r3, r3, #3
 800939e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80093a0:	88fb      	ldrh	r3, [r7, #6]
 80093a2:	b2d8      	uxtb	r0, r3
 80093a4:	f107 0208 	add.w	r2, r7, #8
 80093a8:	2304      	movs	r3, #4
 80093aa:	21bc      	movs	r1, #188	; 0xbc
 80093ac:	f001 f8ee 	bl	800a58c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80093b0:	7a7b      	ldrb	r3, [r7, #9]
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	b21a      	sxth	r2, r3
 80093b6:	7a3b      	ldrb	r3, [r7, #8]
 80093b8:	b21b      	sxth	r3, r3
 80093ba:	4313      	orrs	r3, r2
 80093bc:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80093be:	7afb      	ldrb	r3, [r7, #11]
 80093c0:	021b      	lsls	r3, r3, #8
 80093c2:	b21a      	sxth	r2, r3
 80093c4:	7abb      	ldrb	r3, [r7, #10]
 80093c6:	b21b      	sxth	r3, r3
 80093c8:	4313      	orrs	r3, r2
 80093ca:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80093cc:	88fb      	ldrh	r3, [r7, #6]
 80093ce:	b2d8      	uxtb	r0, r3
 80093d0:	f107 0208 	add.w	r2, r7, #8
 80093d4:	2302      	movs	r3, #2
 80093d6:	21aa      	movs	r1, #170	; 0xaa
 80093d8:	f001 f8d8 	bl	800a58c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80093dc:	7a7b      	ldrb	r3, [r7, #9]
 80093de:	021b      	lsls	r3, r3, #8
 80093e0:	b21a      	sxth	r2, r3
 80093e2:	7a3b      	ldrb	r3, [r7, #8]
 80093e4:	b21b      	sxth	r3, r3
 80093e6:	4313      	orrs	r3, r2
 80093e8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80093ea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80093ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	ee07 3a90 	vmov	s15, r3
 80093f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009400:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800940e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009412:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009416:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	ee07 3a90 	vmov	s15, r3
 8009420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009428:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800942c:	ee07 3a90 	vmov	s15, r3
 8009430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009438:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	ee07 3a90 	vmov	s15, r3
}
 8009442:	eeb0 0a67 	vmov.f32	s0, s15
 8009446:	3720      	adds	r7, #32
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

uint32_t play[wave_size]={1};//33075

//each time the blue button is pressed, modify the counter to change the detected sensor.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	4603      	mov	r3, r0
 8009454:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_13) {
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800945c:	d112      	bne.n	8009484 <HAL_GPIO_EXTI_Callback+0x38>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800945e:	2120      	movs	r1, #32
 8009460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009464:	f7f8 fe62 	bl	800212c <HAL_GPIO_TogglePin>
		mode=(mode+1)%3;
 8009468:	4b08      	ldr	r3, [pc, #32]	; (800948c <HAL_GPIO_EXTI_Callback+0x40>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	1c59      	adds	r1, r3, #1
 800946e:	4b08      	ldr	r3, [pc, #32]	; (8009490 <HAL_GPIO_EXTI_Callback+0x44>)
 8009470:	fb83 3201 	smull	r3, r2, r3, r1
 8009474:	17cb      	asrs	r3, r1, #31
 8009476:	1ad2      	subs	r2, r2, r3
 8009478:	4613      	mov	r3, r2
 800947a:	005b      	lsls	r3, r3, #1
 800947c:	4413      	add	r3, r2
 800947e:	1aca      	subs	r2, r1, r3
 8009480:	4b02      	ldr	r3, [pc, #8]	; (800948c <HAL_GPIO_EXTI_Callback+0x40>)
 8009482:	601a      	str	r2, [r3, #0]
	}
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	20021918 	.word	0x20021918
 8009490:	55555556 	.word	0x55555556
 8009494:	00000000 	.word	0x00000000

08009498 <init_sound_wave>:
 * Initialize the warning sound wave.
 * Level1: with frequency: xxx
 * Level2: with frequency: xxx
 * Level3: with frequency: xxx
 */
void init_sound_wave(){
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
	//Tone 1
	//G6 1567.98 Hz
	//sample n = 44.1k/1567.98 = 28
	for(int i = 0; i < 28; i++){
 800949e:	2300      	movs	r3, #0
 80094a0:	60fb      	str	r3, [r7, #12]
 80094a2:	e038      	b.n	8009516 <init_sound_wave+0x7e>
		G6[i] =  0.33*(1 + arm_sin_f32(2*PI*i/28))*256;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	ee07 3a90 	vmov	s15, r3
 80094aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094ae:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8009630 <init_sound_wave+0x198>
 80094b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094b6:	eef3 6a0c 	vmov.f32	s13, #60	; 0x41e00000  28.0
 80094ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80094be:	eeb0 0a47 	vmov.f32	s0, s14
 80094c2:	f002 f9b5 	bl	800b830 <arm_sin_f32>
 80094c6:	eef0 7a40 	vmov.f32	s15, s0
 80094ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094d2:	ee17 0a90 	vmov	r0, s15
 80094d6:	f7f7 f971 	bl	80007bc <__aeabi_f2d>
 80094da:	a353      	add	r3, pc, #332	; (adr r3, 8009628 <init_sound_wave+0x190>)
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	f7f6 fede 	bl	80002a0 <__aeabi_dmul>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4610      	mov	r0, r2
 80094ea:	4619      	mov	r1, r3
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	4b50      	ldr	r3, [pc, #320]	; (8009634 <init_sound_wave+0x19c>)
 80094f2:	f7f6 fed5 	bl	80002a0 <__aeabi_dmul>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4610      	mov	r0, r2
 80094fc:	4619      	mov	r1, r3
 80094fe:	f7f7 f9b5 	bl	800086c <__aeabi_d2uiz>
 8009502:	4603      	mov	r3, r0
 8009504:	b2d9      	uxtb	r1, r3
 8009506:	4a4c      	ldr	r2, [pc, #304]	; (8009638 <init_sound_wave+0x1a0>)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4413      	add	r3, r2
 800950c:	460a      	mov	r2, r1
 800950e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 28; i++){
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	3301      	adds	r3, #1
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b1b      	cmp	r3, #27
 800951a:	ddc3      	ble.n	80094a4 <init_sound_wave+0xc>
	}

	//Tone 2
	//E7 2637.02 Hz
	//sample n = 44.1k/1318.5 = 16
	for(int i = 0; i < 16; i++){
 800951c:	2300      	movs	r3, #0
 800951e:	60bb      	str	r3, [r7, #8]
 8009520:	e038      	b.n	8009594 <init_sound_wave+0xfc>
		E7[i] =  0.33*(1 + arm_sin_f32(2*PI*i/16))*256;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	ee07 3a90 	vmov	s15, r3
 8009528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800952c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8009630 <init_sound_wave+0x198>
 8009530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009534:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8009538:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800953c:	eeb0 0a47 	vmov.f32	s0, s14
 8009540:	f002 f976 	bl	800b830 <arm_sin_f32>
 8009544:	eef0 7a40 	vmov.f32	s15, s0
 8009548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800954c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009550:	ee17 0a90 	vmov	r0, s15
 8009554:	f7f7 f932 	bl	80007bc <__aeabi_f2d>
 8009558:	a333      	add	r3, pc, #204	; (adr r3, 8009628 <init_sound_wave+0x190>)
 800955a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955e:	f7f6 fe9f 	bl	80002a0 <__aeabi_dmul>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4610      	mov	r0, r2
 8009568:	4619      	mov	r1, r3
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	4b31      	ldr	r3, [pc, #196]	; (8009634 <init_sound_wave+0x19c>)
 8009570:	f7f6 fe96 	bl	80002a0 <__aeabi_dmul>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4610      	mov	r0, r2
 800957a:	4619      	mov	r1, r3
 800957c:	f7f7 f976 	bl	800086c <__aeabi_d2uiz>
 8009580:	4603      	mov	r3, r0
 8009582:	b2d9      	uxtb	r1, r3
 8009584:	4a2d      	ldr	r2, [pc, #180]	; (800963c <init_sound_wave+0x1a4>)
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	4413      	add	r3, r2
 800958a:	460a      	mov	r2, r1
 800958c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 16; i++){
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	3301      	adds	r3, #1
 8009592:	60bb      	str	r3, [r7, #8]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2b0f      	cmp	r3, #15
 8009598:	ddc3      	ble.n	8009522 <init_sound_wave+0x8a>
	}

	//Tone 3
	//A6 3520.0 Hz
	//sample n = 44.1k/3520 = 12
	for(int i = 0; i < 12; i++){
 800959a:	2300      	movs	r3, #0
 800959c:	607b      	str	r3, [r7, #4]
 800959e:	e038      	b.n	8009612 <init_sound_wave+0x17a>
		A6[i] =  0.33*(1 + arm_sin_f32(2*PI*i/12))*256;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095aa:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009630 <init_sound_wave+0x198>
 80095ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095b2:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80095b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80095ba:	eeb0 0a47 	vmov.f32	s0, s14
 80095be:	f002 f937 	bl	800b830 <arm_sin_f32>
 80095c2:	eef0 7a40 	vmov.f32	s15, s0
 80095c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095ce:	ee17 0a90 	vmov	r0, s15
 80095d2:	f7f7 f8f3 	bl	80007bc <__aeabi_f2d>
 80095d6:	a314      	add	r3, pc, #80	; (adr r3, 8009628 <init_sound_wave+0x190>)
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f7f6 fe60 	bl	80002a0 <__aeabi_dmul>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4610      	mov	r0, r2
 80095e6:	4619      	mov	r1, r3
 80095e8:	f04f 0200 	mov.w	r2, #0
 80095ec:	4b11      	ldr	r3, [pc, #68]	; (8009634 <init_sound_wave+0x19c>)
 80095ee:	f7f6 fe57 	bl	80002a0 <__aeabi_dmul>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4610      	mov	r0, r2
 80095f8:	4619      	mov	r1, r3
 80095fa:	f7f7 f937 	bl	800086c <__aeabi_d2uiz>
 80095fe:	4603      	mov	r3, r0
 8009600:	b2d9      	uxtb	r1, r3
 8009602:	4a0f      	ldr	r2, [pc, #60]	; (8009640 <init_sound_wave+0x1a8>)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4413      	add	r3, r2
 8009608:	460a      	mov	r2, r1
 800960a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 12; i++){
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3301      	adds	r3, #1
 8009610:	607b      	str	r3, [r7, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b0b      	cmp	r3, #11
 8009616:	ddc3      	ble.n	80095a0 <init_sound_wave+0x108>
	}
}
 8009618:	bf00      	nop
 800961a:	bf00      	nop
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	f3af 8000 	nop.w
 8009628:	51eb851f 	.word	0x51eb851f
 800962c:	3fd51eb8 	.word	0x3fd51eb8
 8009630:	40c90fdb 	.word	0x40c90fdb
 8009634:	40700000 	.word	0x40700000
 8009638:	200218d4 	.word	0x200218d4
 800963c:	200218f0 	.word	0x200218f0
 8009640:	20021900 	.word	0x20021900

08009644 <write_sound_wave_into_mem>:

/**
 * Write the sound waves into the flash.
 */
void write_sound_wave_into_mem(){
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
	uint32_t tone_addr = 0x000000;
 800964a:	2300      	movs	r3, #0
 800964c:	60fb      	str	r3, [r7, #12]

	//Write in tone1 C6, start at 0
	for(int i = 0; i < 1181; i++){
 800964e:	2300      	movs	r3, #0
 8009650:	60bb      	str	r3, [r7, #8]
 8009652:	e00f      	b.n	8009674 <write_sound_wave_into_mem+0x30>
	  if(BSP_QSPI_Write((uint8_t *)G6, tone_addr, 28) != QSPI_OK){
 8009654:	221c      	movs	r2, #28
 8009656:	68f9      	ldr	r1, [r7, #12]
 8009658:	4826      	ldr	r0, [pc, #152]	; (80096f4 <write_sound_wave_into_mem+0xb0>)
 800965a:	f001 f8ff 	bl	800a85c <BSP_QSPI_Write>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <write_sound_wave_into_mem+0x24>
		  Error_Handler();
 8009664:	f000 fe5a 	bl	800a31c <Error_Handler>
	  }
	  tone_addr += 28;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	331c      	adds	r3, #28
 800966c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 1181; i++){
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	3301      	adds	r3, #1
 8009672:	60bb      	str	r3, [r7, #8]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f240 429c 	movw	r2, #1180	; 0x49c
 800967a:	4293      	cmp	r3, r2
 800967c:	ddea      	ble.n	8009654 <write_sound_wave_into_mem+0x10>
	}
	tone_addr = 0x008133;//33075
 800967e:	f248 1333 	movw	r3, #33075	; 0x8133
 8009682:	60fb      	str	r3, [r7, #12]


  //Write in tone2 E6, start at 33075
  for(int i = 0; i < 2067; i++){
 8009684:	2300      	movs	r3, #0
 8009686:	607b      	str	r3, [r7, #4]
 8009688:	e00f      	b.n	80096aa <write_sound_wave_into_mem+0x66>
	  if(BSP_QSPI_Write((uint8_t *)E7, tone_addr, 16) != QSPI_OK){
 800968a:	2210      	movs	r2, #16
 800968c:	68f9      	ldr	r1, [r7, #12]
 800968e:	481a      	ldr	r0, [pc, #104]	; (80096f8 <write_sound_wave_into_mem+0xb4>)
 8009690:	f001 f8e4 	bl	800a85c <BSP_QSPI_Write>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <write_sound_wave_into_mem+0x5a>
		  Error_Handler();
 800969a:	f000 fe3f 	bl	800a31c <Error_Handler>
	  }
	  tone_addr += 16;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3310      	adds	r3, #16
 80096a2:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < 2067; i++){
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3301      	adds	r3, #1
 80096a8:	607b      	str	r3, [r7, #4]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f640 0212 	movw	r2, #2066	; 0x812
 80096b0:	4293      	cmp	r3, r2
 80096b2:	ddea      	ble.n	800968a <write_sound_wave_into_mem+0x46>
  }
  tone_addr = 0x010266;//66150
 80096b4:	4b11      	ldr	r3, [pc, #68]	; (80096fc <write_sound_wave_into_mem+0xb8>)
 80096b6:	60fb      	str	r3, [r7, #12]

  //Write in tone3 G6, start at 66150
  for(int i = 0; i < 2756; i++){
 80096b8:	2300      	movs	r3, #0
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	e00f      	b.n	80096de <write_sound_wave_into_mem+0x9a>
	  if(BSP_QSPI_Write((uint8_t *)A6, tone_addr, 12) != QSPI_OK){
 80096be:	220c      	movs	r2, #12
 80096c0:	68f9      	ldr	r1, [r7, #12]
 80096c2:	480f      	ldr	r0, [pc, #60]	; (8009700 <write_sound_wave_into_mem+0xbc>)
 80096c4:	f001 f8ca 	bl	800a85c <BSP_QSPI_Write>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <write_sound_wave_into_mem+0x8e>
		  Error_Handler();
 80096ce:	f000 fe25 	bl	800a31c <Error_Handler>
	  }
	  tone_addr += 12;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	330c      	adds	r3, #12
 80096d6:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < 2756; i++){
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	3301      	adds	r3, #1
 80096dc:	603b      	str	r3, [r7, #0]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	f640 22c3 	movw	r2, #2755	; 0xac3
 80096e4:	4293      	cmp	r3, r2
 80096e6:	ddea      	ble.n	80096be <write_sound_wave_into_mem+0x7a>
  }
}
 80096e8:	bf00      	nop
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	200218d4 	.word	0x200218d4
 80096f8:	200218f0 	.word	0x200218f0
 80096fc:	00010266 	.word	0x00010266
 8009700:	20021900 	.word	0x20021900

08009704 <init_gyro_record>:

/**
 * Initialize the gyro sensor data array.
 */
void init_gyro_record(){
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
	BSP_GYRO_GetXYZ(gyro);
 800970a:	4813      	ldr	r0, [pc, #76]	; (8009758 <init_gyro_record+0x54>)
 800970c:	f000 ff9e 	bl	800a64c <BSP_GYRO_GetXYZ>
	for(int i=0;i<data_array_size;i++){
 8009710:	2300      	movs	r3, #0
 8009712:	607b      	str	r3, [r7, #4]
 8009714:	e017      	b.n	8009746 <init_gyro_record+0x42>
		gyro_x[i]=gyro[0];
 8009716:	4b10      	ldr	r3, [pc, #64]	; (8009758 <init_gyro_record+0x54>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	4910      	ldr	r1, [pc, #64]	; (800975c <init_gyro_record+0x58>)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	601a      	str	r2, [r3, #0]
		gyro_y[i]=gyro[1];
 8009724:	4b0c      	ldr	r3, [pc, #48]	; (8009758 <init_gyro_record+0x54>)
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	490d      	ldr	r1, [pc, #52]	; (8009760 <init_gyro_record+0x5c>)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	440b      	add	r3, r1
 8009730:	601a      	str	r2, [r3, #0]
		gyro_z[i]=gyro[2];
 8009732:	4b09      	ldr	r3, [pc, #36]	; (8009758 <init_gyro_record+0x54>)
 8009734:	689a      	ldr	r2, [r3, #8]
 8009736:	490b      	ldr	r1, [pc, #44]	; (8009764 <init_gyro_record+0x60>)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	440b      	add	r3, r1
 800973e:	601a      	str	r2, [r3, #0]
	for(int i=0;i<data_array_size;i++){
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3301      	adds	r3, #1
 8009744:	607b      	str	r3, [r7, #4]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b13      	cmp	r3, #19
 800974a:	dde4      	ble.n	8009716 <init_gyro_record+0x12>
	}
}
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	200217d8 	.word	0x200217d8
 800975c:	200217e4 	.word	0x200217e4
 8009760:	20021834 	.word	0x20021834
 8009764:	20021884 	.word	0x20021884

08009768 <push_data_into_gyro_record>:

/**
 * Update the gyro record.
 */
void push_data_into_gyro_record(){
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
	for(int i=0;i<data_array_size-1;i++){
 800976e:	2300      	movs	r3, #0
 8009770:	607b      	str	r3, [r7, #4]
 8009772:	e023      	b.n	80097bc <push_data_into_gyro_record+0x54>
		gyro_x[i]=gyro_x[i+1];
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3301      	adds	r3, #1
 8009778:	4a1b      	ldr	r2, [pc, #108]	; (80097e8 <push_data_into_gyro_record+0x80>)
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	4919      	ldr	r1, [pc, #100]	; (80097e8 <push_data_into_gyro_record+0x80>)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	440b      	add	r3, r1
 8009788:	601a      	str	r2, [r3, #0]
		gyro_y[i]=gyro_y[i+1];
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3301      	adds	r3, #1
 800978e:	4a17      	ldr	r2, [pc, #92]	; (80097ec <push_data_into_gyro_record+0x84>)
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4915      	ldr	r1, [pc, #84]	; (80097ec <push_data_into_gyro_record+0x84>)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	601a      	str	r2, [r3, #0]
		gyro_z[i]=gyro_z[i+1];
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3301      	adds	r3, #1
 80097a4:	4a12      	ldr	r2, [pc, #72]	; (80097f0 <push_data_into_gyro_record+0x88>)
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	4910      	ldr	r1, [pc, #64]	; (80097f0 <push_data_into_gyro_record+0x88>)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	440b      	add	r3, r1
 80097b4:	601a      	str	r2, [r3, #0]
	for(int i=0;i<data_array_size-1;i++){
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3301      	adds	r3, #1
 80097ba:	607b      	str	r3, [r7, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b12      	cmp	r3, #18
 80097c0:	ddd8      	ble.n	8009774 <push_data_into_gyro_record+0xc>
	}
	gyro_x[data_array_size-1]=gyro[0];
 80097c2:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <push_data_into_gyro_record+0x8c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a08      	ldr	r2, [pc, #32]	; (80097e8 <push_data_into_gyro_record+0x80>)
 80097c8:	64d3      	str	r3, [r2, #76]	; 0x4c
	gyro_y[data_array_size-1]=gyro[1];
 80097ca:	4b0a      	ldr	r3, [pc, #40]	; (80097f4 <push_data_into_gyro_record+0x8c>)
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	4a07      	ldr	r2, [pc, #28]	; (80097ec <push_data_into_gyro_record+0x84>)
 80097d0:	64d3      	str	r3, [r2, #76]	; 0x4c
	gyro_z[data_array_size-1]=gyro[2];
 80097d2:	4b08      	ldr	r3, [pc, #32]	; (80097f4 <push_data_into_gyro_record+0x8c>)
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	4a06      	ldr	r2, [pc, #24]	; (80097f0 <push_data_into_gyro_record+0x88>)
 80097d8:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80097da:	bf00      	nop
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	200217e4 	.word	0x200217e4
 80097ec:	20021834 	.word	0x20021834
 80097f0:	20021884 	.word	0x20021884
 80097f4:	200217d8 	.word	0x200217d8

080097f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80097f8:	b5b0      	push	{r4, r5, r7, lr}
 80097fa:	b09c      	sub	sp, #112	; 0x70
 80097fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80097fe:	f7f7 f9d7 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009802:	f000 f899 	bl	8009938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009806:	f000 fa8b 	bl	8009d20 <MX_GPIO_Init>
  MX_DMA_Init();
 800980a:	f000 fa57 	bl	8009cbc <MX_DMA_Init>
  MX_I2C2_Init();
 800980e:	f000 f925 	bl	8009a5c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009812:	f000 fa07 	bl	8009c24 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 8009816:	f000 f961 	bl	8009adc <MX_OCTOSPI1_Init>
  MX_TIM2_Init();
 800981a:	f000 f9b5 	bl	8009b88 <MX_TIM2_Init>
  MX_DAC1_Init();
 800981e:	f000 f8dd 	bl	80099dc <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  //component init
  BSP_QSPI_Init();
 8009822:	f000 ff4b 	bl	800a6bc <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8009826:	483b      	ldr	r0, [pc, #236]	; (8009914 <main+0x11c>)
 8009828:	f7fc fe0a 	bl	8006440 <HAL_TIM_Base_Start_IT>
  BSP_HSENSOR_Init();
 800982c:	f000 ff26 	bl	800a67c <BSP_HSENSOR_Init>
  BSP_GYRO_Init();
 8009830:	f000 feca 	bl	800a5c8 <BSP_GYRO_Init>
  BSP_TSENSOR_Init();
 8009834:	f001 fb8c 	bl	800af50 <BSP_TSENSOR_Init>
  //private function init
  init_sound_wave();
 8009838:	f7ff fe2e 	bl	8009498 <init_sound_wave>
  init_gyro_record();
 800983c:	f7ff ff62 	bl	8009704 <init_gyro_record>
  

  //Erase 3 blocks prior to write in
  if(BSP_QSPI_Erase_Block(0) != QSPI_OK){
 8009840:	2000      	movs	r0, #0
 8009842:	f001 f891 	bl	800a968 <BSP_QSPI_Erase_Block>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <main+0x58>
	  Error_Handler();
 800984c:	f000 fd66 	bl	800a31c <Error_Handler>
  }
  if(BSP_QSPI_Erase_Block(65536) != QSPI_OK){
 8009850:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009854:	f001 f888 	bl	800a968 <BSP_QSPI_Erase_Block>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <main+0x6a>
	  Error_Handler();
 800985e:	f000 fd5d 	bl	800a31c <Error_Handler>
  }
  if(BSP_QSPI_Erase_Block(131072) != QSPI_OK){
 8009862:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009866:	f001 f87f 	bl	800a968 <BSP_QSPI_Erase_Block>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <main+0x7c>
	  Error_Handler();
 8009870:	f000 fd54 	bl	800a31c <Error_Handler>
  }

  //After erased the blocks, we can write in the samples of tones
  write_sound_wave_into_mem();
 8009874:	f7ff fee6 	bl	8009644 <write_sound_wave_into_mem>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of handle_quake */
  osThreadDef(handle_quake, earthquakeHandler, osPriorityHigh, 0, 128);
 8009878:	4b27      	ldr	r3, [pc, #156]	; (8009918 <main+0x120>)
 800987a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800987e:	461d      	mov	r5, r3
 8009880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009884:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009888:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  handle_quakeHandle = osThreadCreate(osThread(handle_quake), NULL);
 800988c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009890:	2100      	movs	r1, #0
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe f8e9 	bl	8007a6a <osThreadCreate>
 8009898:	4603      	mov	r3, r0
 800989a:	4a20      	ldr	r2, [pc, #128]	; (800991c <main+0x124>)
 800989c:	6013      	str	r3, [r2, #0]

  /* definition and creation of handle_temp */
  osThreadDef(handle_temp, temperatureHandler, osPriorityAboveNormal, 0, 128);
 800989e:	4b20      	ldr	r3, [pc, #128]	; (8009920 <main+0x128>)
 80098a0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80098a4:	461d      	mov	r5, r3
 80098a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80098ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  handle_tempHandle = osThreadCreate(osThread(handle_temp), NULL);
 80098b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80098b6:	2100      	movs	r1, #0
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fe f8d6 	bl	8007a6a <osThreadCreate>
 80098be:	4603      	mov	r3, r0
 80098c0:	4a18      	ldr	r2, [pc, #96]	; (8009924 <main+0x12c>)
 80098c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of handle_speaker */
  osThreadDef(handle_speaker, speakerHandler, osPriorityNormal, 0, 128);
 80098c4:	4b18      	ldr	r3, [pc, #96]	; (8009928 <main+0x130>)
 80098c6:	f107 041c 	add.w	r4, r7, #28
 80098ca:	461d      	mov	r5, r3
 80098cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80098d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  handle_speakerHandle = osThreadCreate(osThread(handle_speaker), NULL);
 80098d8:	f107 031c 	add.w	r3, r7, #28
 80098dc:	2100      	movs	r1, #0
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe f8c3 	bl	8007a6a <osThreadCreate>
 80098e4:	4603      	mov	r3, r0
 80098e6:	4a11      	ldr	r2, [pc, #68]	; (800992c <main+0x134>)
 80098e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of send_terminal */
  osThreadDef(send_terminal, sendTerminal, osPriorityNormal, 0, 128);
 80098ea:	4b11      	ldr	r3, [pc, #68]	; (8009930 <main+0x138>)
 80098ec:	463c      	mov	r4, r7
 80098ee:	461d      	mov	r5, r3
 80098f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80098f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  send_terminalHandle = osThreadCreate(osThread(send_terminal), NULL);
 80098fc:	463b      	mov	r3, r7
 80098fe:	2100      	movs	r1, #0
 8009900:	4618      	mov	r0, r3
 8009902:	f7fe f8b2 	bl	8007a6a <osThreadCreate>
 8009906:	4603      	mov	r3, r0
 8009908:	4a0a      	ldr	r2, [pc, #40]	; (8009934 <main+0x13c>)
 800990a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800990c:	f7fe f8a6 	bl	8007a5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009910:	e7fe      	b.n	8009910 <main+0x118>
 8009912:	bf00      	nop
 8009914:	20021688 	.word	0x20021688
 8009918:	0800c29c 	.word	0x0800c29c
 800991c:	20021764 	.word	0x20021764
 8009920:	0800c2b8 	.word	0x0800c2b8
 8009924:	20021768 	.word	0x20021768
 8009928:	0800c2d4 	.word	0x0800c2d4
 800992c:	2002176c 	.word	0x2002176c
 8009930:	0800c2f0 	.word	0x0800c2f0
 8009934:	20021770 	.word	0x20021770

08009938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b096      	sub	sp, #88	; 0x58
 800993c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800993e:	f107 0314 	add.w	r3, r7, #20
 8009942:	2244      	movs	r2, #68	; 0x44
 8009944:	2100      	movs	r1, #0
 8009946:	4618      	mov	r0, r3
 8009948:	f001 fff0 	bl	800b92c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800994c:	463b      	mov	r3, r7
 800994e:	2200      	movs	r2, #0
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	605a      	str	r2, [r3, #4]
 8009954:	609a      	str	r2, [r3, #8]
 8009956:	60da      	str	r2, [r3, #12]
 8009958:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800995a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800995e:	f7fb f851 	bl	8004a04 <HAL_PWREx_ControlVoltageScaling>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8009968:	f000 fcd8 	bl	800a31c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800996c:	2310      	movs	r3, #16
 800996e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009970:	2301      	movs	r3, #1
 8009972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8009978:	2360      	movs	r3, #96	; 0x60
 800997a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800997c:	2302      	movs	r3, #2
 800997e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8009980:	2301      	movs	r3, #1
 8009982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009984:	2301      	movs	r3, #1
 8009986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8009988:	2328      	movs	r3, #40	; 0x28
 800998a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800998c:	2302      	movs	r3, #2
 800998e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009990:	2302      	movs	r3, #2
 8009992:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009994:	2302      	movs	r3, #2
 8009996:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009998:	f107 0314 	add.w	r3, r7, #20
 800999c:	4618      	mov	r0, r3
 800999e:	f7fb f8d5 	bl	8004b4c <HAL_RCC_OscConfig>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80099a8:	f000 fcb8 	bl	800a31c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80099ac:	230f      	movs	r3, #15
 80099ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80099b0:	2303      	movs	r3, #3
 80099b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80099b4:	2300      	movs	r3, #0
 80099b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80099bc:	2300      	movs	r3, #0
 80099be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80099c0:	463b      	mov	r3, r7
 80099c2:	2103      	movs	r1, #3
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fb fcdb 	bl	8005380 <HAL_RCC_ClockConfig>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80099d0:	f000 fca4 	bl	800a31c <Error_Handler>
  }
}
 80099d4:	bf00      	nop
 80099d6:	3758      	adds	r7, #88	; 0x58
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b08a      	sub	sp, #40	; 0x28
 80099e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80099e2:	463b      	mov	r3, r7
 80099e4:	2228      	movs	r2, #40	; 0x28
 80099e6:	2100      	movs	r1, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	f001 ff9f 	bl	800b92c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80099ee:	4b19      	ldr	r3, [pc, #100]	; (8009a54 <MX_DAC1_Init+0x78>)
 80099f0:	4a19      	ldr	r2, [pc, #100]	; (8009a58 <MX_DAC1_Init+0x7c>)
 80099f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80099f4:	4817      	ldr	r0, [pc, #92]	; (8009a54 <MX_DAC1_Init+0x78>)
 80099f6:	f7f7 fa4b 	bl	8000e90 <HAL_DAC_Init>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8009a00:	f000 fc8c 	bl	800a31c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8009a08:	230a      	movs	r3, #10
 8009a0a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a10:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8009a16:	2300      	movs	r3, #0
 8009a18:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8009a1e:	463b      	mov	r3, r7
 8009a20:	2200      	movs	r2, #0
 8009a22:	4619      	mov	r1, r3
 8009a24:	480b      	ldr	r0, [pc, #44]	; (8009a54 <MX_DAC1_Init+0x78>)
 8009a26:	f7f7 fbd5 	bl	80011d4 <HAL_DAC_ConfigChannel>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8009a30:	f000 fc74 	bl	800a31c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8009a34:	463b      	mov	r3, r7
 8009a36:	2210      	movs	r2, #16
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4806      	ldr	r0, [pc, #24]	; (8009a54 <MX_DAC1_Init+0x78>)
 8009a3c:	f7f7 fbca 	bl	80011d4 <HAL_DAC_ConfigChannel>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8009a46:	f000 fc69 	bl	800a31c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8009a4a:	bf00      	nop
 8009a4c:	3728      	adds	r7, #40	; 0x28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	20021510 	.word	0x20021510
 8009a58:	40007400 	.word	0x40007400

08009a5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009a60:	4b1b      	ldr	r3, [pc, #108]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009a62:	4a1c      	ldr	r2, [pc, #112]	; (8009ad4 <MX_I2C2_Init+0x78>)
 8009a64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8009a66:	4b1a      	ldr	r3, [pc, #104]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009a68:	4a1b      	ldr	r2, [pc, #108]	; (8009ad8 <MX_I2C2_Init+0x7c>)
 8009a6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8009a6c:	4b18      	ldr	r3, [pc, #96]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009a72:	4b17      	ldr	r3, [pc, #92]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009a74:	2201      	movs	r2, #1
 8009a76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009a78:	4b15      	ldr	r3, [pc, #84]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8009a7e:	4b14      	ldr	r3, [pc, #80]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009a84:	4b12      	ldr	r3, [pc, #72]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009a8a:	4b11      	ldr	r3, [pc, #68]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009a90:	4b0f      	ldr	r3, [pc, #60]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009a96:	480e      	ldr	r0, [pc, #56]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009a98:	f7f8 fb7a 	bl	8002190 <HAL_I2C_Init>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8009aa2:	f000 fc3b 	bl	800a31c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	4809      	ldr	r0, [pc, #36]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009aaa:	f7f9 fe77 	bl	800379c <HAL_I2CEx_ConfigAnalogFilter>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8009ab4:	f000 fc32 	bl	800a31c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009ab8:	2100      	movs	r1, #0
 8009aba:	4805      	ldr	r0, [pc, #20]	; (8009ad0 <MX_I2C2_Init+0x74>)
 8009abc:	f7f9 feb9 	bl	8003832 <HAL_I2CEx_ConfigDigitalFilter>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8009ac6:	f000 fc29 	bl	800a31c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009aca:	bf00      	nop
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	200215e4 	.word	0x200215e4
 8009ad4:	40005800 	.word	0x40005800
 8009ad8:	10909cec 	.word	0x10909cec

08009adc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8009ae2:	1d3b      	adds	r3, r7, #4
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	605a      	str	r2, [r3, #4]
 8009aea:	609a      	str	r2, [r3, #8]
 8009aec:	60da      	str	r2, [r3, #12]
 8009aee:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8009af0:	4b23      	ldr	r3, [pc, #140]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009af2:	4a24      	ldr	r2, [pc, #144]	; (8009b84 <MX_OCTOSPI1_Init+0xa8>)
 8009af4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8009af6:	4b22      	ldr	r3, [pc, #136]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009af8:	2201      	movs	r2, #1
 8009afa:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8009afc:	4b20      	ldr	r3, [pc, #128]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8009b02:	4b1f      	ldr	r3, [pc, #124]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b08:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8009b0a:	4b1d      	ldr	r3, [pc, #116]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8009b10:	4b1b      	ldr	r3, [pc, #108]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b12:	2201      	movs	r2, #1
 8009b14:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8009b16:	4b1a      	ldr	r3, [pc, #104]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8009b1c:	4b18      	ldr	r3, [pc, #96]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8009b22:	4b17      	ldr	r3, [pc, #92]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b24:	2201      	movs	r2, #1
 8009b26:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8009b28:	4b15      	ldr	r3, [pc, #84]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8009b2e:	4b14      	ldr	r3, [pc, #80]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8009b34:	4b12      	ldr	r3, [pc, #72]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8009b3a:	4b11      	ldr	r3, [pc, #68]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b3c:	2208      	movs	r2, #8
 8009b3e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8009b40:	480f      	ldr	r0, [pc, #60]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b42:	f7f9 fec3 	bl	80038cc <HAL_OSPI_Init>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8009b4c:	f000 fbe6 	bl	800a31c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8009b50:	2301      	movs	r3, #1
 8009b52:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8009b54:	2301      	movs	r3, #1
 8009b56:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8009b58:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8009b5c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b5e:	1d3b      	adds	r3, r7, #4
 8009b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b64:	4619      	mov	r1, r3
 8009b66:	4806      	ldr	r0, [pc, #24]	; (8009b80 <MX_OCTOSPI1_Init+0xa4>)
 8009b68:	f7fa f9ae 	bl	8003ec8 <HAL_OSPIM_Config>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8009b72:	f000 fbd3 	bl	800a31c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8009b76:	bf00      	nop
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	20021638 	.word	0x20021638
 8009b84:	a0001000 	.word	0xa0001000

08009b88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009b8e:	f107 0310 	add.w	r3, r7, #16
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	605a      	str	r2, [r3, #4]
 8009b98:	609a      	str	r2, [r3, #8]
 8009b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b9c:	1d3b      	adds	r3, r7, #4
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	605a      	str	r2, [r3, #4]
 8009ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009ba6:	4b1e      	ldr	r3, [pc, #120]	; (8009c20 <MX_TIM2_Init+0x98>)
 8009ba8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009bac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8009bae:	4b1c      	ldr	r3, [pc, #112]	; (8009c20 <MX_TIM2_Init+0x98>)
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bb4:	4b1a      	ldr	r3, [pc, #104]	; (8009c20 <MX_TIM2_Init+0x98>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8009bba:	4b19      	ldr	r3, [pc, #100]	; (8009c20 <MX_TIM2_Init+0x98>)
 8009bbc:	f240 7216 	movw	r2, #1814	; 0x716
 8009bc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bc2:	4b17      	ldr	r3, [pc, #92]	; (8009c20 <MX_TIM2_Init+0x98>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bc8:	4b15      	ldr	r3, [pc, #84]	; (8009c20 <MX_TIM2_Init+0x98>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009bce:	4814      	ldr	r0, [pc, #80]	; (8009c20 <MX_TIM2_Init+0x98>)
 8009bd0:	f7fc fbde 	bl	8006390 <HAL_TIM_Base_Init>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8009bda:	f000 fb9f 	bl	800a31c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009be2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009be4:	f107 0310 	add.w	r3, r7, #16
 8009be8:	4619      	mov	r1, r3
 8009bea:	480d      	ldr	r0, [pc, #52]	; (8009c20 <MX_TIM2_Init+0x98>)
 8009bec:	f7fc fdb7 	bl	800675e <HAL_TIM_ConfigClockSource>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8009bf6:	f000 fb91 	bl	800a31c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009bfa:	2320      	movs	r3, #32
 8009bfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009c02:	1d3b      	adds	r3, r7, #4
 8009c04:	4619      	mov	r1, r3
 8009c06:	4806      	ldr	r0, [pc, #24]	; (8009c20 <MX_TIM2_Init+0x98>)
 8009c08:	f7fc ffce 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8009c12:	f000 fb83 	bl	800a31c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009c16:	bf00      	nop
 8009c18:	3720      	adds	r7, #32
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	20021688 	.word	0x20021688

08009c24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009c28:	4b22      	ldr	r3, [pc, #136]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c2a:	4a23      	ldr	r2, [pc, #140]	; (8009cb8 <MX_USART1_UART_Init+0x94>)
 8009c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009c2e:	4b21      	ldr	r3, [pc, #132]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009c36:	4b1f      	ldr	r3, [pc, #124]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009c3c:	4b1d      	ldr	r3, [pc, #116]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009c42:	4b1c      	ldr	r3, [pc, #112]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009c48:	4b1a      	ldr	r3, [pc, #104]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c4a:	220c      	movs	r2, #12
 8009c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009c4e:	4b19      	ldr	r3, [pc, #100]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009c54:	4b17      	ldr	r3, [pc, #92]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009c5a:	4b16      	ldr	r3, [pc, #88]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009c60:	4b14      	ldr	r3, [pc, #80]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009c66:	4b13      	ldr	r3, [pc, #76]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009c6c:	4811      	ldr	r0, [pc, #68]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c6e:	f7fd f841 	bl	8006cf4 <HAL_UART_Init>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8009c78:	f000 fb50 	bl	800a31c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	480d      	ldr	r0, [pc, #52]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c80:	f7fd fe0a 	bl	8007898 <HAL_UARTEx_SetTxFifoThreshold>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8009c8a:	f000 fb47 	bl	800a31c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009c8e:	2100      	movs	r1, #0
 8009c90:	4808      	ldr	r0, [pc, #32]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009c92:	f7fd fe3f 	bl	8007914 <HAL_UARTEx_SetRxFifoThreshold>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d001      	beq.n	8009ca0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8009c9c:	f000 fb3e 	bl	800a31c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8009ca0:	4804      	ldr	r0, [pc, #16]	; (8009cb4 <MX_USART1_UART_Init+0x90>)
 8009ca2:	f7fd fdc0 	bl	8007826 <HAL_UARTEx_DisableFifoMode>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009cac:	f000 fb36 	bl	800a31c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009cb0:	bf00      	nop
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	200216d4 	.word	0x200216d4
 8009cb8:	40013800 	.word	0x40013800

08009cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009cc2:	4b16      	ldr	r3, [pc, #88]	; (8009d1c <MX_DMA_Init+0x60>)
 8009cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cc6:	4a15      	ldr	r2, [pc, #84]	; (8009d1c <MX_DMA_Init+0x60>)
 8009cc8:	f043 0304 	orr.w	r3, r3, #4
 8009ccc:	6493      	str	r3, [r2, #72]	; 0x48
 8009cce:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <MX_DMA_Init+0x60>)
 8009cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cd2:	f003 0304 	and.w	r3, r3, #4
 8009cd6:	607b      	str	r3, [r7, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009cda:	4b10      	ldr	r3, [pc, #64]	; (8009d1c <MX_DMA_Init+0x60>)
 8009cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cde:	4a0f      	ldr	r2, [pc, #60]	; (8009d1c <MX_DMA_Init+0x60>)
 8009ce0:	f043 0301 	orr.w	r3, r3, #1
 8009ce4:	6493      	str	r3, [r2, #72]	; 0x48
 8009ce6:	4b0d      	ldr	r3, [pc, #52]	; (8009d1c <MX_DMA_Init+0x60>)
 8009ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	603b      	str	r3, [r7, #0]
 8009cf0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2105      	movs	r1, #5
 8009cf6:	200b      	movs	r0, #11
 8009cf8:	f7f7 f892 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009cfc:	200b      	movs	r0, #11
 8009cfe:	f7f7 f8ab 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8009d02:	2200      	movs	r2, #0
 8009d04:	2105      	movs	r1, #5
 8009d06:	200c      	movs	r0, #12
 8009d08:	f7f7 f88a 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8009d0c:	200c      	movs	r0, #12
 8009d0e:	f7f7 f8a3 	bl	8000e58 <HAL_NVIC_EnableIRQ>

}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	40021000 	.word	0x40021000

08009d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08a      	sub	sp, #40	; 0x28
 8009d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d26:	f107 0314 	add.w	r3, r7, #20
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	605a      	str	r2, [r3, #4]
 8009d30:	609a      	str	r2, [r3, #8]
 8009d32:	60da      	str	r2, [r3, #12]
 8009d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009d36:	4b43      	ldr	r3, [pc, #268]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3a:	4a42      	ldr	r2, [pc, #264]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d3c:	f043 0310 	orr.w	r3, r3, #16
 8009d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d42:	4b40      	ldr	r3, [pc, #256]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d46:	f003 0310 	and.w	r3, r3, #16
 8009d4a:	613b      	str	r3, [r7, #16]
 8009d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d4e:	4b3d      	ldr	r3, [pc, #244]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d52:	4a3c      	ldr	r2, [pc, #240]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d54:	f043 0304 	orr.w	r3, r3, #4
 8009d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d5a:	4b3a      	ldr	r3, [pc, #232]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d5e:	f003 0304 	and.w	r3, r3, #4
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d66:	4b37      	ldr	r3, [pc, #220]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d6a:	4a36      	ldr	r2, [pc, #216]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d6c:	f043 0301 	orr.w	r3, r3, #1
 8009d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d72:	4b34      	ldr	r3, [pc, #208]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	60bb      	str	r3, [r7, #8]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d7e:	4b31      	ldr	r3, [pc, #196]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d82:	4a30      	ldr	r2, [pc, #192]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d84:	f043 0302 	orr.w	r3, r3, #2
 8009d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d8a:	4b2e      	ldr	r3, [pc, #184]	; (8009e44 <MX_GPIO_Init+0x124>)
 8009d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d8e:	f003 0302 	and.w	r3, r3, #2
 8009d92:	607b      	str	r3, [r7, #4]
 8009d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8009d96:	2200      	movs	r2, #0
 8009d98:	2108      	movs	r1, #8
 8009d9a:	482b      	ldr	r0, [pc, #172]	; (8009e48 <MX_GPIO_Init+0x128>)
 8009d9c:	f7f8 f9ae 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8009da0:	2200      	movs	r2, #0
 8009da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009da6:	4829      	ldr	r0, [pc, #164]	; (8009e4c <MX_GPIO_Init+0x12c>)
 8009da8:	f7f8 f9a8 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8009dac:	2200      	movs	r2, #0
 8009dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009db2:	4827      	ldr	r0, [pc, #156]	; (8009e50 <MX_GPIO_Init+0x130>)
 8009db4:	f7f8 f9a2 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8009db8:	2308      	movs	r3, #8
 8009dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8009dc8:	f107 0314 	add.w	r3, r7, #20
 8009dcc:	4619      	mov	r1, r3
 8009dce:	481e      	ldr	r0, [pc, #120]	; (8009e48 <MX_GPIO_Init+0x128>)
 8009dd0:	f7f7 ff10 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_button_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin;
 8009dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009dda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(blue_button_GPIO_Port, &GPIO_InitStruct);
 8009de4:	f107 0314 	add.w	r3, r7, #20
 8009de8:	4619      	mov	r1, r3
 8009dea:	4819      	ldr	r0, [pc, #100]	; (8009e50 <MX_GPIO_Init+0x130>)
 8009dec:	f7f7 ff02 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8009df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009df6:	2301      	movs	r3, #1
 8009df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8009e02:	f107 0314 	add.w	r3, r7, #20
 8009e06:	4619      	mov	r1, r3
 8009e08:	4810      	ldr	r0, [pc, #64]	; (8009e4c <MX_GPIO_Init+0x12c>)
 8009e0a:	f7f7 fef3 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8009e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e14:	2301      	movs	r3, #1
 8009e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8009e20:	f107 0314 	add.w	r3, r7, #20
 8009e24:	4619      	mov	r1, r3
 8009e26:	480a      	ldr	r0, [pc, #40]	; (8009e50 <MX_GPIO_Init+0x130>)
 8009e28:	f7f7 fee4 	bl	8001bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2105      	movs	r1, #5
 8009e30:	2028      	movs	r0, #40	; 0x28
 8009e32:	f7f6 fff5 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009e36:	2028      	movs	r0, #40	; 0x28
 8009e38:	f7f7 f80e 	bl	8000e58 <HAL_NVIC_EnableIRQ>

}
 8009e3c:	bf00      	nop
 8009e3e:	3728      	adds	r7, #40	; 0x28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	40021000 	.word	0x40021000
 8009e48:	48001000 	.word	0x48001000
 8009e4c:	48000400 	.word	0x48000400
 8009e50:	48000800 	.word	0x48000800

08009e54 <HAL_DAC_ConvHalfCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
void HAL_DAC_ConvHalfCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(RED_LED_GPIO_Port,RED_LED_Pin);
//	HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);

//	sound_counter = (sound_counter+1) %3;

}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
//	    case 2  :
//	    	if(BSP_QSPI_Read((uint8_t *)play, 0x010266, size) != QSPI_OK) Error_Handler();
//	    	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, size, DAC_ALIGN_8B_R);
//	       break;
//	}
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <earthquakeHandler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_earthquakeHandler */
void earthquakeHandler(void const * argument)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	for(;;)
	{
		osDelay(100);
 8009e84:	2064      	movs	r0, #100	; 0x64
 8009e86:	f7fd fe3c 	bl	8007b02 <osDelay>
		BSP_GYRO_GetXYZ(gyro);
 8009e8a:	4836      	ldr	r0, [pc, #216]	; (8009f64 <earthquakeHandler+0xe8>)
 8009e8c:	f000 fbde 	bl	800a64c <BSP_GYRO_GetXYZ>
		push_data_into_gyro_record();
 8009e90:	f7ff fc6a 	bl	8009768 <push_data_into_gyro_record>

		float std_x=0;
 8009e94:	f04f 0300 	mov.w	r3, #0
 8009e98:	613b      	str	r3, [r7, #16]
		float std_y=0;
 8009e9a:	f04f 0300 	mov.w	r3, #0
 8009e9e:	60fb      	str	r3, [r7, #12]
		float std_z=0;
 8009ea0:	f04f 0300 	mov.w	r3, #0
 8009ea4:	60bb      	str	r3, [r7, #8]
		arm_std_f32(&gyro_x,10,&std_x);
 8009ea6:	f107 0310 	add.w	r3, r7, #16
 8009eaa:	461a      	mov	r2, r3
 8009eac:	210a      	movs	r1, #10
 8009eae:	482e      	ldr	r0, [pc, #184]	; (8009f68 <earthquakeHandler+0xec>)
 8009eb0:	f001 fc34 	bl	800b71c <arm_std_f32>
		arm_std_f32(&gyro_y,10,&std_y);
 8009eb4:	f107 030c 	add.w	r3, r7, #12
 8009eb8:	461a      	mov	r2, r3
 8009eba:	210a      	movs	r1, #10
 8009ebc:	482b      	ldr	r0, [pc, #172]	; (8009f6c <earthquakeHandler+0xf0>)
 8009ebe:	f001 fc2d 	bl	800b71c <arm_std_f32>
		arm_std_f32(&gyro_z,10,&std_z);
 8009ec2:	f107 0308 	add.w	r3, r7, #8
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	210a      	movs	r1, #10
 8009eca:	4829      	ldr	r0, [pc, #164]	; (8009f70 <earthquakeHandler+0xf4>)
 8009ecc:	f001 fc26 	bl	800b71c <arm_std_f32>
		float shake = std_x + std_y + std_z;
 8009ed0:	ed97 7a04 	vldr	s14, [r7, #16]
 8009ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009edc:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ee4:	edc7 7a05 	vstr	s15, [r7, #20]
		if(shake < 30000){
 8009ee8:	edd7 7a05 	vldr	s15, [r7, #20]
 8009eec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009f74 <earthquakeHandler+0xf8>
 8009ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef8:	d503      	bpl.n	8009f02 <earthquakeHandler+0x86>
			quake_warningLevel=0;
 8009efa:	4b1f      	ldr	r3, [pc, #124]	; (8009f78 <earthquakeHandler+0xfc>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	e7c0      	b.n	8009e84 <earthquakeHandler+0x8>
		}else if(shake > 30000 && shake < 45000){
 8009f02:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f06:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8009f74 <earthquakeHandler+0xf8>
 8009f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f12:	dd0c      	ble.n	8009f2e <earthquakeHandler+0xb2>
 8009f14:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f18:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009f7c <earthquakeHandler+0x100>
 8009f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f24:	d503      	bpl.n	8009f2e <earthquakeHandler+0xb2>
			quake_warningLevel=1;
 8009f26:	4b14      	ldr	r3, [pc, #80]	; (8009f78 <earthquakeHandler+0xfc>)
 8009f28:	2201      	movs	r2, #1
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	e018      	b.n	8009f60 <earthquakeHandler+0xe4>
		}else if(shake > 45000 && shake < 100000){
 8009f2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f32:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009f7c <earthquakeHandler+0x100>
 8009f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3e:	dd0c      	ble.n	8009f5a <earthquakeHandler+0xde>
 8009f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f44:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009f80 <earthquakeHandler+0x104>
 8009f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f50:	d503      	bpl.n	8009f5a <earthquakeHandler+0xde>
			quake_warningLevel=2;
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <earthquakeHandler+0xfc>)
 8009f54:	2202      	movs	r2, #2
 8009f56:	601a      	str	r2, [r3, #0]
 8009f58:	e002      	b.n	8009f60 <earthquakeHandler+0xe4>
		}else{
			quake_warningLevel=3;
 8009f5a:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <earthquakeHandler+0xfc>)
 8009f5c:	2203      	movs	r2, #3
 8009f5e:	601a      	str	r2, [r3, #0]
	{
 8009f60:	e790      	b.n	8009e84 <earthquakeHandler+0x8>
 8009f62:	bf00      	nop
 8009f64:	200217d8 	.word	0x200217d8
 8009f68:	200217e4 	.word	0x200217e4
 8009f6c:	20021834 	.word	0x20021834
 8009f70:	20021884 	.word	0x20021884
 8009f74:	46ea6000 	.word	0x46ea6000
 8009f78:	20021914 	.word	0x20021914
 8009f7c:	472fc800 	.word	0x472fc800
 8009f80:	47c35000 	.word	0x47c35000

08009f84 <temperatureHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temperatureHandler */
void temperatureHandler(void const * argument)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temperatureHandler */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 8009f8c:	2064      	movs	r0, #100	; 0x64
 8009f8e:	f7fd fdb8 	bl	8007b02 <osDelay>
	  temp=BSP_TSENSOR_ReadTemp();
 8009f92:	f000 fff9 	bl	800af88 <BSP_TSENSOR_ReadTemp>
 8009f96:	eef0 7a40 	vmov.f32	s15, s0
 8009f9a:	4b22      	ldr	r3, [pc, #136]	; (800a024 <temperatureHandler+0xa0>)
 8009f9c:	edc3 7a00 	vstr	s15, [r3]

	  if(temp<35){
 8009fa0:	4b20      	ldr	r3, [pc, #128]	; (800a024 <temperatureHandler+0xa0>)
 8009fa2:	edd3 7a00 	vldr	s15, [r3]
 8009fa6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a028 <temperatureHandler+0xa4>
 8009faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb2:	d503      	bpl.n	8009fbc <temperatureHandler+0x38>
		  temp_warningLevel=0;
 8009fb4:	4b1d      	ldr	r3, [pc, #116]	; (800a02c <temperatureHandler+0xa8>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	e7e7      	b.n	8009f8c <temperatureHandler+0x8>
	  }else if(temp>=35&&temp<37){
 8009fbc:	4b19      	ldr	r3, [pc, #100]	; (800a024 <temperatureHandler+0xa0>)
 8009fbe:	edd3 7a00 	vldr	s15, [r3]
 8009fc2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a028 <temperatureHandler+0xa4>
 8009fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fce:	db0d      	blt.n	8009fec <temperatureHandler+0x68>
 8009fd0:	4b14      	ldr	r3, [pc, #80]	; (800a024 <temperatureHandler+0xa0>)
 8009fd2:	edd3 7a00 	vldr	s15, [r3]
 8009fd6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800a030 <temperatureHandler+0xac>
 8009fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe2:	d503      	bpl.n	8009fec <temperatureHandler+0x68>
		  temp_warningLevel=1;
 8009fe4:	4b11      	ldr	r3, [pc, #68]	; (800a02c <temperatureHandler+0xa8>)
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	e01a      	b.n	800a022 <temperatureHandler+0x9e>
	  }else if(temp>=37&&temp<42){
 8009fec:	4b0d      	ldr	r3, [pc, #52]	; (800a024 <temperatureHandler+0xa0>)
 8009fee:	edd3 7a00 	vldr	s15, [r3]
 8009ff2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a030 <temperatureHandler+0xac>
 8009ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ffe:	db0d      	blt.n	800a01c <temperatureHandler+0x98>
 800a000:	4b08      	ldr	r3, [pc, #32]	; (800a024 <temperatureHandler+0xa0>)
 800a002:	edd3 7a00 	vldr	s15, [r3]
 800a006:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800a034 <temperatureHandler+0xb0>
 800a00a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a012:	d503      	bpl.n	800a01c <temperatureHandler+0x98>
		  temp_warningLevel=2;
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <temperatureHandler+0xa8>)
 800a016:	2202      	movs	r2, #2
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	e002      	b.n	800a022 <temperatureHandler+0x9e>
	  }else{
		  temp_warningLevel=3;
 800a01c:	4b03      	ldr	r3, [pc, #12]	; (800a02c <temperatureHandler+0xa8>)
 800a01e:	2203      	movs	r2, #3
 800a020:	601a      	str	r2, [r3, #0]
	  osDelay(100);
 800a022:	e7b3      	b.n	8009f8c <temperatureHandler+0x8>
 800a024:	2002190c 	.word	0x2002190c
 800a028:	420c0000 	.word	0x420c0000
 800a02c:	20021910 	.word	0x20021910
 800a030:	42140000 	.word	0x42140000
 800a034:	42280000 	.word	0x42280000

0800a038 <speakerHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_speakerHandler */
void speakerHandler(void const * argument)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af02      	add	r7, sp, #8
 800a03e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN speakerHandler */
  /* Infinite loop */
  for(;;)
  {
	osDelay(100);
 800a040:	2064      	movs	r0, #100	; 0x64
 800a042:	f7fd fd5e 	bl	8007b02 <osDelay>
	int warningLevel = (temp_warningLevel > quake_warningLevel) ? temp_warningLevel : quake_warningLevel;
 800a046:	4b34      	ldr	r3, [pc, #208]	; (800a118 <speakerHandler+0xe0>)
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	4b34      	ldr	r3, [pc, #208]	; (800a11c <speakerHandler+0xe4>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4293      	cmp	r3, r2
 800a050:	bfb8      	it	lt
 800a052:	4613      	movlt	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]

	if(warningLevel != 0){
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d052      	beq.n	800a102 <speakerHandler+0xca>
		switch(warningLevel){
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d034      	beq.n	800a0cc <speakerHandler+0x94>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b03      	cmp	r3, #3
 800a066:	dc46      	bgt.n	800a0f6 <speakerHandler+0xbe>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d003      	beq.n	800a076 <speakerHandler+0x3e>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d015      	beq.n	800a0a0 <speakerHandler+0x68>
 800a074:	e03f      	b.n	800a0f6 <speakerHandler+0xbe>
			case 1  :
				if(BSP_QSPI_Read((uint8_t *)play, 0x000000, wave_size) != QSPI_OK) Error_Handler();
 800a076:	f248 1233 	movw	r2, #33075	; 0x8133
 800a07a:	2100      	movs	r1, #0
 800a07c:	4828      	ldr	r0, [pc, #160]	; (800a120 <speakerHandler+0xe8>)
 800a07e:	f000 fb9b 	bl	800a7b8 <BSP_QSPI_Read>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <speakerHandler+0x54>
 800a088:	f000 f948 	bl	800a31c <Error_Handler>
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, wave_size, DAC_ALIGN_8B_R);
 800a08c:	2308      	movs	r3, #8
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	f248 1333 	movw	r3, #33075	; 0x8133
 800a094:	4a22      	ldr	r2, [pc, #136]	; (800a120 <speakerHandler+0xe8>)
 800a096:	2100      	movs	r1, #0
 800a098:	4822      	ldr	r0, [pc, #136]	; (800a124 <speakerHandler+0xec>)
 800a09a:	f7f6 ff1b 	bl	8000ed4 <HAL_DAC_Start_DMA>
			   break;
 800a09e:	e02a      	b.n	800a0f6 <speakerHandler+0xbe>
			case 2  :
				if(BSP_QSPI_Read((uint8_t *)play, 0x008133, wave_size) != QSPI_OK) Error_Handler();
 800a0a0:	f248 1233 	movw	r2, #33075	; 0x8133
 800a0a4:	f248 1133 	movw	r1, #33075	; 0x8133
 800a0a8:	481d      	ldr	r0, [pc, #116]	; (800a120 <speakerHandler+0xe8>)
 800a0aa:	f000 fb85 	bl	800a7b8 <BSP_QSPI_Read>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <speakerHandler+0x80>
 800a0b4:	f000 f932 	bl	800a31c <Error_Handler>
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, wave_size, DAC_ALIGN_8B_R);
 800a0b8:	2308      	movs	r3, #8
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	f248 1333 	movw	r3, #33075	; 0x8133
 800a0c0:	4a17      	ldr	r2, [pc, #92]	; (800a120 <speakerHandler+0xe8>)
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	4817      	ldr	r0, [pc, #92]	; (800a124 <speakerHandler+0xec>)
 800a0c6:	f7f6 ff05 	bl	8000ed4 <HAL_DAC_Start_DMA>
			   break;
 800a0ca:	e014      	b.n	800a0f6 <speakerHandler+0xbe>
			case 3  :
				if(BSP_QSPI_Read((uint8_t *)play, 0x010266, wave_size) != QSPI_OK) Error_Handler();
 800a0cc:	f248 1233 	movw	r2, #33075	; 0x8133
 800a0d0:	4915      	ldr	r1, [pc, #84]	; (800a128 <speakerHandler+0xf0>)
 800a0d2:	4813      	ldr	r0, [pc, #76]	; (800a120 <speakerHandler+0xe8>)
 800a0d4:	f000 fb70 	bl	800a7b8 <BSP_QSPI_Read>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <speakerHandler+0xaa>
 800a0de:	f000 f91d 	bl	800a31c <Error_Handler>
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, wave_size, DAC_ALIGN_8B_R);
 800a0e2:	2308      	movs	r3, #8
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	f248 1333 	movw	r3, #33075	; 0x8133
 800a0ea:	4a0d      	ldr	r2, [pc, #52]	; (800a120 <speakerHandler+0xe8>)
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	480d      	ldr	r0, [pc, #52]	; (800a124 <speakerHandler+0xec>)
 800a0f0:	f7f6 fef0 	bl	8000ed4 <HAL_DAC_Start_DMA>
			   break;
 800a0f4:	bf00      	nop
		}
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	2108      	movs	r1, #8
 800a0fa:	480c      	ldr	r0, [pc, #48]	; (800a12c <speakerHandler+0xf4>)
 800a0fc:	f7f7 fffe 	bl	80020fc <HAL_GPIO_WritePin>
 800a100:	e79e      	b.n	800a040 <speakerHandler+0x8>
	}else{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800a102:	2200      	movs	r2, #0
 800a104:	2108      	movs	r1, #8
 800a106:	4809      	ldr	r0, [pc, #36]	; (800a12c <speakerHandler+0xf4>)
 800a108:	f7f7 fff8 	bl	80020fc <HAL_GPIO_WritePin>
		HAL_DAC_Stop_DMA (&hdac1, DAC_CHANNEL_1);
 800a10c:	2100      	movs	r1, #0
 800a10e:	4805      	ldr	r0, [pc, #20]	; (800a124 <speakerHandler+0xec>)
 800a110:	f7f6 ffac 	bl	800106c <HAL_DAC_Stop_DMA>
  {
 800a114:	e794      	b.n	800a040 <speakerHandler+0x8>
 800a116:	bf00      	nop
 800a118:	20021914 	.word	0x20021914
 800a11c:	20021910 	.word	0x20021910
 800a120:	2000005c 	.word	0x2000005c
 800a124:	20021510 	.word	0x20021510
 800a128:	00010266 	.word	0x00010266
 800a12c:	48001000 	.word	0x48001000

0800a130 <sendTerminal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendTerminal */
void sendTerminal(void const * argument)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b088      	sub	sp, #32
 800a134:	af02      	add	r7, sp, #8
 800a136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTerminal */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 800a138:	2064      	movs	r0, #100	; 0x64
 800a13a:	f7fd fce2 	bl	8007b02 <osDelay>

	  	for (int i = 0; i < 100; i++){
 800a13e:	2300      	movs	r3, #0
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	e007      	b.n	800a154 <sendTerminal+0x24>
	  		buffer[i] = '\0';
 800a144:	4a5c      	ldr	r2, [pc, #368]	; (800a2b8 <sendTerminal+0x188>)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	4413      	add	r3, r2
 800a14a:	2200      	movs	r2, #0
 800a14c:	701a      	strb	r2, [r3, #0]
	  	for (int i = 0; i < 100; i++){
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	3301      	adds	r3, #1
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	2b63      	cmp	r3, #99	; 0x63
 800a158:	ddf4      	ble.n	800a144 <sendTerminal+0x14>
	  	}

	  	if(mode==1){
 800a15a:	4b58      	ldr	r3, [pc, #352]	; (800a2bc <sendTerminal+0x18c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d161      	bne.n	800a226 <sendTerminal+0xf6>
	  		if(temp<38){
 800a162:	4b57      	ldr	r3, [pc, #348]	; (800a2c0 <sendTerminal+0x190>)
 800a164:	edd3 7a00 	vldr	s15, [r3]
 800a168:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800a2c4 <sendTerminal+0x194>
 800a16c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a174:	d50b      	bpl.n	800a18e <sendTerminal+0x5e>
	  			sprintf(buffer, "OK, temperature is %d \r\n", (int) temp);
 800a176:	4b52      	ldr	r3, [pc, #328]	; (800a2c0 <sendTerminal+0x190>)
 800a178:	edd3 7a00 	vldr	s15, [r3]
 800a17c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a180:	ee17 2a90 	vmov	r2, s15
 800a184:	4950      	ldr	r1, [pc, #320]	; (800a2c8 <sendTerminal+0x198>)
 800a186:	484c      	ldr	r0, [pc, #304]	; (800a2b8 <sendTerminal+0x188>)
 800a188:	f001 fbd8 	bl	800b93c <siprintf>
 800a18c:	e089      	b.n	800a2a2 <sendTerminal+0x172>
	  		}else if(temp>=38&&temp<40){
 800a18e:	4b4c      	ldr	r3, [pc, #304]	; (800a2c0 <sendTerminal+0x190>)
 800a190:	edd3 7a00 	vldr	s15, [r3]
 800a194:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800a2c4 <sendTerminal+0x194>
 800a198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a0:	db15      	blt.n	800a1ce <sendTerminal+0x9e>
 800a1a2:	4b47      	ldr	r3, [pc, #284]	; (800a2c0 <sendTerminal+0x190>)
 800a1a4:	edd3 7a00 	vldr	s15, [r3]
 800a1a8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a2cc <sendTerminal+0x19c>
 800a1ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b4:	d50b      	bpl.n	800a1ce <sendTerminal+0x9e>
	  			sprintf(buffer, "Warning, temperature is %d !!\r\n", (int) temp);
 800a1b6:	4b42      	ldr	r3, [pc, #264]	; (800a2c0 <sendTerminal+0x190>)
 800a1b8:	edd3 7a00 	vldr	s15, [r3]
 800a1bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1c0:	ee17 2a90 	vmov	r2, s15
 800a1c4:	4942      	ldr	r1, [pc, #264]	; (800a2d0 <sendTerminal+0x1a0>)
 800a1c6:	483c      	ldr	r0, [pc, #240]	; (800a2b8 <sendTerminal+0x188>)
 800a1c8:	f001 fbb8 	bl	800b93c <siprintf>
 800a1cc:	e069      	b.n	800a2a2 <sendTerminal+0x172>
	  		}else if(temp>=40&&temp<45){
 800a1ce:	4b3c      	ldr	r3, [pc, #240]	; (800a2c0 <sendTerminal+0x190>)
 800a1d0:	edd3 7a00 	vldr	s15, [r3]
 800a1d4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800a2cc <sendTerminal+0x19c>
 800a1d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e0:	db15      	blt.n	800a20e <sendTerminal+0xde>
 800a1e2:	4b37      	ldr	r3, [pc, #220]	; (800a2c0 <sendTerminal+0x190>)
 800a1e4:	edd3 7a00 	vldr	s15, [r3]
 800a1e8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800a2d4 <sendTerminal+0x1a4>
 800a1ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f4:	d50b      	bpl.n	800a20e <sendTerminal+0xde>
	  			sprintf(buffer, "Danger, temperature is %d !!!!!!\r\n", (int) temp);
 800a1f6:	4b32      	ldr	r3, [pc, #200]	; (800a2c0 <sendTerminal+0x190>)
 800a1f8:	edd3 7a00 	vldr	s15, [r3]
 800a1fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a200:	ee17 2a90 	vmov	r2, s15
 800a204:	4934      	ldr	r1, [pc, #208]	; (800a2d8 <sendTerminal+0x1a8>)
 800a206:	482c      	ldr	r0, [pc, #176]	; (800a2b8 <sendTerminal+0x188>)
 800a208:	f001 fb98 	bl	800b93c <siprintf>
 800a20c:	e049      	b.n	800a2a2 <sendTerminal+0x172>
	  		}else{
	  			sprintf(buffer, "Extremely danger, temperature is %d !!!!!!!!!!!!!Please leave the house!!!!!!!!!!\r\n", (int) temp);
 800a20e:	4b2c      	ldr	r3, [pc, #176]	; (800a2c0 <sendTerminal+0x190>)
 800a210:	edd3 7a00 	vldr	s15, [r3]
 800a214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a218:	ee17 2a90 	vmov	r2, s15
 800a21c:	492f      	ldr	r1, [pc, #188]	; (800a2dc <sendTerminal+0x1ac>)
 800a21e:	4826      	ldr	r0, [pc, #152]	; (800a2b8 <sendTerminal+0x188>)
 800a220:	f001 fb8c 	bl	800b93c <siprintf>
 800a224:	e03d      	b.n	800a2a2 <sendTerminal+0x172>
	  		}
	  	}else if(mode==2){
 800a226:	4b25      	ldr	r3, [pc, #148]	; (800a2bc <sendTerminal+0x18c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d135      	bne.n	800a29a <sendTerminal+0x16a>
	  		float std_x=0;
 800a22e:	f04f 0300 	mov.w	r3, #0
 800a232:	613b      	str	r3, [r7, #16]
	  		float std_y=0;
 800a234:	f04f 0300 	mov.w	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]
	  		float std_z=0;
 800a23a:	f04f 0300 	mov.w	r3, #0
 800a23e:	60bb      	str	r3, [r7, #8]
	  		arm_std_f32(&gyro_x,10,&std_x);
 800a240:	f107 0310 	add.w	r3, r7, #16
 800a244:	461a      	mov	r2, r3
 800a246:	210a      	movs	r1, #10
 800a248:	4825      	ldr	r0, [pc, #148]	; (800a2e0 <sendTerminal+0x1b0>)
 800a24a:	f001 fa67 	bl	800b71c <arm_std_f32>
	  		arm_std_f32(&gyro_y,10,&std_y);
 800a24e:	f107 030c 	add.w	r3, r7, #12
 800a252:	461a      	mov	r2, r3
 800a254:	210a      	movs	r1, #10
 800a256:	4823      	ldr	r0, [pc, #140]	; (800a2e4 <sendTerminal+0x1b4>)
 800a258:	f001 fa60 	bl	800b71c <arm_std_f32>
	  		arm_std_f32(&gyro_z,10,&std_z);
 800a25c:	f107 0308 	add.w	r3, r7, #8
 800a260:	461a      	mov	r2, r3
 800a262:	210a      	movs	r1, #10
 800a264:	4820      	ldr	r0, [pc, #128]	; (800a2e8 <sendTerminal+0x1b8>)
 800a266:	f001 fa59 	bl	800b71c <arm_std_f32>
	  		sprintf(buffer, "Gyro: %d, %d, %d \r\n", (int) std_x, (int) std_y, (int) std_z);
 800a26a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a26e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a272:	edd7 7a03 	vldr	s15, [r7, #12]
 800a276:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800a27a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a27e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a282:	ee17 3a90 	vmov	r3, s15
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	ee16 3a90 	vmov	r3, s13
 800a28c:	ee17 2a10 	vmov	r2, s14
 800a290:	4916      	ldr	r1, [pc, #88]	; (800a2ec <sendTerminal+0x1bc>)
 800a292:	4809      	ldr	r0, [pc, #36]	; (800a2b8 <sendTerminal+0x188>)
 800a294:	f001 fb52 	bl	800b93c <siprintf>
 800a298:	e003      	b.n	800a2a2 <sendTerminal+0x172>
	  	}else{
	  		sprintf(buffer, "Detection disabled now. \r\n");
 800a29a:	4915      	ldr	r1, [pc, #84]	; (800a2f0 <sendTerminal+0x1c0>)
 800a29c:	4806      	ldr	r0, [pc, #24]	; (800a2b8 <sendTerminal+0x188>)
 800a29e:	f001 fb4d 	bl	800b93c <siprintf>
	  	}

	  	HAL_Delay(100);
 800a2a2:	2064      	movs	r0, #100	; 0x64
 800a2a4:	f7f6 fcbc 	bl	8000c20 <HAL_Delay>
	      HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 10000);
 800a2a8:	f242 7310 	movw	r3, #10000	; 0x2710
 800a2ac:	2264      	movs	r2, #100	; 0x64
 800a2ae:	4902      	ldr	r1, [pc, #8]	; (800a2b8 <sendTerminal+0x188>)
 800a2b0:	4810      	ldr	r0, [pc, #64]	; (800a2f4 <sendTerminal+0x1c4>)
 800a2b2:	f7fc fd6f 	bl	8006d94 <HAL_UART_Transmit>
	  osDelay(100);
 800a2b6:	e73f      	b.n	800a138 <sendTerminal+0x8>
 800a2b8:	20021774 	.word	0x20021774
 800a2bc:	20021918 	.word	0x20021918
 800a2c0:	2002190c 	.word	0x2002190c
 800a2c4:	42180000 	.word	0x42180000
 800a2c8:	0800c30c 	.word	0x0800c30c
 800a2cc:	42200000 	.word	0x42200000
 800a2d0:	0800c328 	.word	0x0800c328
 800a2d4:	42340000 	.word	0x42340000
 800a2d8:	0800c348 	.word	0x0800c348
 800a2dc:	0800c36c 	.word	0x0800c36c
 800a2e0:	200217e4 	.word	0x200217e4
 800a2e4:	20021834 	.word	0x20021834
 800a2e8:	20021884 	.word	0x20021884
 800a2ec:	0800c3c0 	.word	0x0800c3c0
 800a2f0:	0800c3d4 	.word	0x0800c3d4
 800a2f4:	200216d4 	.word	0x200216d4

0800a2f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a04      	ldr	r2, [pc, #16]	; (800a318 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d101      	bne.n	800a30e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a30a:	f7f6 fc69 	bl	8000be0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	40001000 	.word	0x40001000

0800a31c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a320:	b672      	cpsid	i
}
 800a322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a324:	e7fe      	b.n	800a324 <Error_Handler+0x8>
	...

0800a328 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b08a      	sub	sp, #40	; 0x28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800a330:	4b27      	ldr	r3, [pc, #156]	; (800a3d0 <I2Cx_MspInit+0xa8>)
 800a332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a334:	4a26      	ldr	r2, [pc, #152]	; (800a3d0 <I2Cx_MspInit+0xa8>)
 800a336:	f043 0302 	orr.w	r3, r3, #2
 800a33a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a33c:	4b24      	ldr	r3, [pc, #144]	; (800a3d0 <I2Cx_MspInit+0xa8>)
 800a33e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a340:	f003 0302 	and.w	r3, r3, #2
 800a344:	613b      	str	r3, [r7, #16]
 800a346:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800a348:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a34c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800a34e:	2312      	movs	r3, #18
 800a350:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800a352:	2301      	movs	r3, #1
 800a354:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a356:	2303      	movs	r3, #3
 800a358:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800a35a:	2304      	movs	r3, #4
 800a35c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a35e:	f107 0314 	add.w	r3, r7, #20
 800a362:	4619      	mov	r1, r3
 800a364:	481b      	ldr	r0, [pc, #108]	; (800a3d4 <I2Cx_MspInit+0xac>)
 800a366:	f7f7 fc45 	bl	8001bf4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a36a:	f107 0314 	add.w	r3, r7, #20
 800a36e:	4619      	mov	r1, r3
 800a370:	4818      	ldr	r0, [pc, #96]	; (800a3d4 <I2Cx_MspInit+0xac>)
 800a372:	f7f7 fc3f 	bl	8001bf4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800a376:	4b16      	ldr	r3, [pc, #88]	; (800a3d0 <I2Cx_MspInit+0xa8>)
 800a378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a37a:	4a15      	ldr	r2, [pc, #84]	; (800a3d0 <I2Cx_MspInit+0xa8>)
 800a37c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a380:	6593      	str	r3, [r2, #88]	; 0x58
 800a382:	4b13      	ldr	r3, [pc, #76]	; (800a3d0 <I2Cx_MspInit+0xa8>)
 800a384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800a38e:	4b10      	ldr	r3, [pc, #64]	; (800a3d0 <I2Cx_MspInit+0xa8>)
 800a390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a392:	4a0f      	ldr	r2, [pc, #60]	; (800a3d0 <I2Cx_MspInit+0xa8>)
 800a394:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a398:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800a39a:	4b0d      	ldr	r3, [pc, #52]	; (800a3d0 <I2Cx_MspInit+0xa8>)
 800a39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39e:	4a0c      	ldr	r2, [pc, #48]	; (800a3d0 <I2Cx_MspInit+0xa8>)
 800a3a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a3a4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	210f      	movs	r1, #15
 800a3aa:	2021      	movs	r0, #33	; 0x21
 800a3ac:	f7f6 fd38 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800a3b0:	2021      	movs	r0, #33	; 0x21
 800a3b2:	f7f6 fd51 	bl	8000e58 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	210f      	movs	r1, #15
 800a3ba:	2022      	movs	r0, #34	; 0x22
 800a3bc:	f7f6 fd30 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800a3c0:	2022      	movs	r0, #34	; 0x22
 800a3c2:	f7f6 fd49 	bl	8000e58 <HAL_NVIC_EnableIRQ>
}
 800a3c6:	bf00      	nop
 800a3c8:	3728      	adds	r7, #40	; 0x28
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	40021000 	.word	0x40021000
 800a3d4:	48000400 	.word	0x48000400

0800a3d8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a12      	ldr	r2, [pc, #72]	; (800a42c <I2Cx_Init+0x54>)
 800a3e4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a11      	ldr	r2, [pc, #68]	; (800a430 <I2Cx_Init+0x58>)
 800a3ea:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7ff ff89 	bl	800a328 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f7f7 feba 	bl	8002190 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800a41c:	2100      	movs	r1, #0
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7f9 f9bc 	bl	800379c <HAL_I2CEx_ConfigAnalogFilter>
}
 800a424:	bf00      	nop
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	40005800 	.word	0x40005800
 800a430:	00702681 	.word	0x00702681

0800a434 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08a      	sub	sp, #40	; 0x28
 800a438:	af04      	add	r7, sp, #16
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	4608      	mov	r0, r1
 800a43e:	4611      	mov	r1, r2
 800a440:	461a      	mov	r2, r3
 800a442:	4603      	mov	r3, r0
 800a444:	72fb      	strb	r3, [r7, #11]
 800a446:	460b      	mov	r3, r1
 800a448:	813b      	strh	r3, [r7, #8]
 800a44a:	4613      	mov	r3, r2
 800a44c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a452:	7afb      	ldrb	r3, [r7, #11]
 800a454:	b299      	uxth	r1, r3
 800a456:	88f8      	ldrh	r0, [r7, #6]
 800a458:	893a      	ldrh	r2, [r7, #8]
 800a45a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a45e:	9302      	str	r3, [sp, #8]
 800a460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	4603      	mov	r3, r0
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7f8 f862 	bl	8002534 <HAL_I2C_Mem_Read>
 800a470:	4603      	mov	r3, r0
 800a472:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a474:	7dfb      	ldrb	r3, [r7, #23]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d004      	beq.n	800a484 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800a47a:	7afb      	ldrb	r3, [r7, #11]
 800a47c:	4619      	mov	r1, r3
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f832 	bl	800a4e8 <I2Cx_Error>
  }
  return status;
 800a484:	7dfb      	ldrb	r3, [r7, #23]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b08a      	sub	sp, #40	; 0x28
 800a492:	af04      	add	r7, sp, #16
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	4608      	mov	r0, r1
 800a498:	4611      	mov	r1, r2
 800a49a:	461a      	mov	r2, r3
 800a49c:	4603      	mov	r3, r0
 800a49e:	72fb      	strb	r3, [r7, #11]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	813b      	strh	r3, [r7, #8]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a4ac:	7afb      	ldrb	r3, [r7, #11]
 800a4ae:	b299      	uxth	r1, r3
 800a4b0:	88f8      	ldrh	r0, [r7, #6]
 800a4b2:	893a      	ldrh	r2, [r7, #8]
 800a4b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a4b8:	9302      	str	r3, [sp, #8]
 800a4ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7f7 ff21 	bl	800230c <HAL_I2C_Mem_Write>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d004      	beq.n	800a4de <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800a4d4:	7afb      	ldrb	r3, [r7, #11]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 f805 	bl	800a4e8 <I2Cx_Error>
  }
  return status;
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7f7 feda 	bl	80022ae <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7ff ff6c 	bl	800a3d8 <I2Cx_Init>
}
 800a500:	bf00      	nop
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800a50c:	4802      	ldr	r0, [pc, #8]	; (800a518 <SENSOR_IO_Init+0x10>)
 800a50e:	f7ff ff63 	bl	800a3d8 <I2Cx_Init>
}
 800a512:	bf00      	nop
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	2002191c 	.word	0x2002191c

0800a51c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af02      	add	r7, sp, #8
 800a522:	4603      	mov	r3, r0
 800a524:	71fb      	strb	r3, [r7, #7]
 800a526:	460b      	mov	r3, r1
 800a528:	71bb      	strb	r3, [r7, #6]
 800a52a:	4613      	mov	r3, r2
 800a52c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800a52e:	79bb      	ldrb	r3, [r7, #6]
 800a530:	b29a      	uxth	r2, r3
 800a532:	79f9      	ldrb	r1, [r7, #7]
 800a534:	2301      	movs	r3, #1
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	1d7b      	adds	r3, r7, #5
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	2301      	movs	r3, #1
 800a53e:	4803      	ldr	r0, [pc, #12]	; (800a54c <SENSOR_IO_Write+0x30>)
 800a540:	f7ff ffa5 	bl	800a48e <I2Cx_WriteMultiple>
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	2002191c 	.word	0x2002191c

0800a550 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af02      	add	r7, sp, #8
 800a556:	4603      	mov	r3, r0
 800a558:	460a      	mov	r2, r1
 800a55a:	71fb      	strb	r3, [r7, #7]
 800a55c:	4613      	mov	r3, r2
 800a55e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800a564:	79bb      	ldrb	r3, [r7, #6]
 800a566:	b29a      	uxth	r2, r3
 800a568:	79f9      	ldrb	r1, [r7, #7]
 800a56a:	2301      	movs	r3, #1
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	f107 030f 	add.w	r3, r7, #15
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	2301      	movs	r3, #1
 800a576:	4804      	ldr	r0, [pc, #16]	; (800a588 <SENSOR_IO_Read+0x38>)
 800a578:	f7ff ff5c 	bl	800a434 <I2Cx_ReadMultiple>

  return read_value;
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	2002191c 	.word	0x2002191c

0800a58c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af02      	add	r7, sp, #8
 800a592:	603a      	str	r2, [r7, #0]
 800a594:	461a      	mov	r2, r3
 800a596:	4603      	mov	r3, r0
 800a598:	71fb      	strb	r3, [r7, #7]
 800a59a:	460b      	mov	r3, r1
 800a59c:	71bb      	strb	r3, [r7, #6]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a5a2:	79bb      	ldrb	r3, [r7, #6]
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	79f9      	ldrb	r1, [r7, #7]
 800a5a8:	88bb      	ldrh	r3, [r7, #4]
 800a5aa:	9301      	str	r3, [sp, #4]
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	4804      	ldr	r0, [pc, #16]	; (800a5c4 <SENSOR_IO_ReadMultiple+0x38>)
 800a5b4:	f7ff ff3e 	bl	800a434 <I2Cx_ReadMultiple>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	b29b      	uxth	r3, r3
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	2002191c 	.word	0x2002191c

0800a5c8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800a5d6:	4b1b      	ldr	r3, [pc, #108]	; (800a644 <BSP_GYRO_Init+0x7c>)
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	4798      	blx	r3
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b6a      	cmp	r3, #106	; 0x6a
 800a5e0:	d002      	beq.n	800a5e8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	73fb      	strb	r3, [r7, #15]
 800a5e6:	e028      	b.n	800a63a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800a5e8:	4b17      	ldr	r3, [pc, #92]	; (800a648 <BSP_GYRO_Init+0x80>)
 800a5ea:	4a16      	ldr	r2, [pc, #88]	; (800a644 <BSP_GYRO_Init+0x7c>)
 800a5ec:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800a5f2:	2330      	movs	r3, #48	; 0x30
 800a5f4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800a5fe:	2340      	movs	r3, #64	; 0x40
 800a600:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800a606:	230c      	movs	r3, #12
 800a608:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800a60a:	7aba      	ldrb	r2, [r7, #10]
 800a60c:	797b      	ldrb	r3, [r7, #5]
 800a60e:	4313      	orrs	r3, r2
 800a610:	b2db      	uxtb	r3, r3
 800a612:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800a614:	7a3b      	ldrb	r3, [r7, #8]
 800a616:	f043 0304 	orr.w	r3, r3, #4
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	021b      	lsls	r3, r3, #8
 800a61e:	b21a      	sxth	r2, r3
 800a620:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a624:	4313      	orrs	r3, r2
 800a626:	b21b      	sxth	r3, r3
 800a628:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800a62a:	4b07      	ldr	r3, [pc, #28]	; (800a648 <BSP_GYRO_Init+0x80>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	89ba      	ldrh	r2, [r7, #12]
 800a632:	4610      	mov	r0, r2
 800a634:	4798      	blx	r3
    
    ret = GYRO_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	2000000c 	.word	0x2000000c
 800a648:	20021970 	.word	0x20021970

0800a64c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800a654:	4b08      	ldr	r3, [pc, #32]	; (800a678 <BSP_GYRO_GetXYZ+0x2c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d009      	beq.n	800a670 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800a65c:	4b06      	ldr	r3, [pc, #24]	; (800a678 <BSP_GYRO_GetXYZ+0x2c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a662:	2b00      	cmp	r3, #0
 800a664:	d004      	beq.n	800a670 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800a666:	4b04      	ldr	r3, [pc, #16]	; (800a678 <BSP_GYRO_GetXYZ+0x2c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	4798      	blx	r3
    }
  }
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	20021970 	.word	0x20021970

0800a67c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800a682:	4b0c      	ldr	r3, [pc, #48]	; (800a6b4 <BSP_HSENSOR_Init+0x38>)
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	20be      	movs	r0, #190	; 0xbe
 800a688:	4798      	blx	r3
 800a68a:	4603      	mov	r3, r0
 800a68c:	2bbc      	cmp	r3, #188	; 0xbc
 800a68e:	d002      	beq.n	800a696 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	607b      	str	r3, [r7, #4]
 800a694:	e009      	b.n	800a6aa <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800a696:	4b08      	ldr	r3, [pc, #32]	; (800a6b8 <BSP_HSENSOR_Init+0x3c>)
 800a698:	4a06      	ldr	r2, [pc, #24]	; (800a6b4 <BSP_HSENSOR_Init+0x38>)
 800a69a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800a69c:	4b06      	ldr	r3, [pc, #24]	; (800a6b8 <BSP_HSENSOR_Init+0x3c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	20be      	movs	r0, #190	; 0xbe
 800a6a4:	4798      	blx	r3
    ret = HSENSOR_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800a6aa:	687b      	ldr	r3, [r7, #4]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20000040 	.word	0x20000040
 800a6b8:	20021974 	.word	0x20021974

0800a6bc <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 800a6c2:	4b3b      	ldr	r3, [pc, #236]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a6c4:	4a3b      	ldr	r2, [pc, #236]	; (800a7b4 <BSP_QSPI_Init+0xf8>)
 800a6c6:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 800a6c8:	4839      	ldr	r0, [pc, #228]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a6ca:	f7f9 f9a9 	bl	8003a20 <HAL_OSPI_DeInit>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e067      	b.n	800a7a8 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 800a6d8:	f000 f990 	bl	800a9fc <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 800a6dc:	4b34      	ldr	r3, [pc, #208]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a6de:	2204      	movs	r2, #4
 800a6e0:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 800a6e2:	4b33      	ldr	r3, [pc, #204]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800a6e8:	4b31      	ldr	r3, [pc, #196]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a6ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6ee:	60da      	str	r2, [r3, #12]
 800a6f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a6f4:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	fa93 f3a3 	rbit	r3, r3
 800a6fc:	607b      	str	r3, [r7, #4]
  return result;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <BSP_QSPI_Init+0x50>
    return 32U;
 800a708:	2320      	movs	r3, #32
 800a70a:	e003      	b.n	800a714 <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	fab3 f383 	clz	r3, r3
 800a712:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 800a714:	461a      	mov	r2, r3
 800a716:	4b26      	ldr	r3, [pc, #152]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a718:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 800a71a:	4b25      	ldr	r3, [pc, #148]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 800a720:	4b23      	ldr	r3, [pc, #140]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a722:	2200      	movs	r2, #0
 800a724:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800a726:	4b22      	ldr	r3, [pc, #136]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a728:	2200      	movs	r2, #0
 800a72a:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 800a72c:	4b20      	ldr	r3, [pc, #128]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a72e:	2204      	movs	r2, #4
 800a730:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800a732:	4b1f      	ldr	r3, [pc, #124]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a734:	2200      	movs	r2, #0
 800a736:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800a738:	4b1d      	ldr	r3, [pc, #116]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a73e:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 800a740:	4b1b      	ldr	r3, [pc, #108]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a742:	2200      	movs	r2, #0
 800a744:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800a746:	4b1a      	ldr	r3, [pc, #104]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a748:	2200      	movs	r2, #0
 800a74a:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800a74c:	4818      	ldr	r0, [pc, #96]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a74e:	f7f9 f8bd 	bl	80038cc <HAL_OSPI_Init>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e025      	b.n	800a7a8 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 800a75c:	4814      	ldr	r0, [pc, #80]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a75e:	f000 f98d 	bl	800aa7c <QSPI_ResetMemory>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 800a768:	2304      	movs	r3, #4
 800a76a:	e01d      	b.n	800a7a8 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800a76c:	2101      	movs	r1, #1
 800a76e:	4810      	ldr	r0, [pc, #64]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a770:	f000 fa72 	bl	800ac58 <QSPI_QuadMode>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e014      	b.n	800a7a8 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 800a77e:	2101      	movs	r1, #1
 800a780:	480b      	ldr	r0, [pc, #44]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a782:	f000 fb15 	bl	800adb0 <QSPI_HighPerfMode>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e00b      	b.n	800a7a8 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 800a790:	4b07      	ldr	r3, [pc, #28]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a792:	2202      	movs	r2, #2
 800a794:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800a796:	4806      	ldr	r0, [pc, #24]	; (800a7b0 <BSP_QSPI_Init+0xf4>)
 800a798:	f7f9 f898 	bl	80038cc <HAL_OSPI_Init>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e000      	b.n	800a7a8 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	20021978 	.word	0x20021978
 800a7b4:	a0001000 	.word	0xa0001000

0800a7b8 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b098      	sub	sp, #96	; 0x60
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 800a7cc:	23eb      	movs	r3, #235	; 0xeb
 800a7ce:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 800a7e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 800a7e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7ea:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 800a7f0:	23aa      	movs	r3, #170	; 0xaa
 800a7f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 800a7f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 800a7fe:	2300      	movs	r3, #0
 800a800:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 800a802:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800a806:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 800a80c:	2300      	movs	r3, #0
 800a80e:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 800a810:	2304      	movs	r3, #4
 800a812:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 800a814:	2300      	movs	r3, #0
 800a816:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a818:	2300      	movs	r3, #0
 800a81a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a81c:	f107 0310 	add.w	r3, r7, #16
 800a820:	f241 3288 	movw	r2, #5000	; 0x1388
 800a824:	4619      	mov	r1, r3
 800a826:	480c      	ldr	r0, [pc, #48]	; (800a858 <BSP_QSPI_Read+0xa0>)
 800a828:	f7f9 f921 	bl	8003a6e <HAL_OSPI_Command>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d001      	beq.n	800a836 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e00b      	b.n	800a84e <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a836:	f241 3288 	movw	r2, #5000	; 0x1388
 800a83a:	68f9      	ldr	r1, [r7, #12]
 800a83c:	4806      	ldr	r0, [pc, #24]	; (800a858 <BSP_QSPI_Read+0xa0>)
 800a83e:	f7f9 fa0a 	bl	8003c56 <HAL_OSPI_Receive>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e000      	b.n	800a84e <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3760      	adds	r7, #96	; 0x60
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20021978 	.word	0x20021978

0800a85c <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b09c      	sub	sp, #112	; 0x70
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a870:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800a872:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	429a      	cmp	r2, r3
 800a878:	d901      	bls.n	800a87e <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4413      	add	r3, r2
 800a888:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a88a:	2300      	movs	r3, #0
 800a88c:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a88e:	2300      	movs	r3, #0
 800a890:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 800a892:	2338      	movs	r3, #56	; 0x38
 800a894:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800a896:	2301      	movs	r3, #1
 800a898:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800a89a:	2300      	movs	r3, #0
 800a89c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 800a8a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a8a6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800a8a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8ac:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 800a8b6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800a8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800a8cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 800a8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d2:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 800a8d4:	4823      	ldr	r0, [pc, #140]	; (800a964 <BSP_QSPI_Write+0x108>)
 800a8d6:	f000 f918 	bl	800ab0a <QSPI_WriteEnable>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e03b      	b.n	800a95c <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a8e4:	f107 0314 	add.w	r3, r7, #20
 800a8e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	481d      	ldr	r0, [pc, #116]	; (800a964 <BSP_QSPI_Write+0x108>)
 800a8f0:	f7f9 f8bd 	bl	8003a6e <HAL_OSPI_Command>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e02e      	b.n	800a95c <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a8fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a902:	68f9      	ldr	r1, [r7, #12]
 800a904:	4817      	ldr	r0, [pc, #92]	; (800a964 <BSP_QSPI_Write+0x108>)
 800a906:	f7f9 f933 	bl	8003b70 <HAL_OSPI_Transmit>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	e023      	b.n	800a95c <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800a914:	f241 3188 	movw	r1, #5000	; 0x1388
 800a918:	4812      	ldr	r0, [pc, #72]	; (800a964 <BSP_QSPI_Write+0x108>)
 800a91a:	f000 f952 	bl	800abc2 <QSPI_AutoPollingMemReady>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e019      	b.n	800a95c <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800a928:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a92a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a92c:	4413      	add	r3, r2
 800a92e:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a934:	4413      	add	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 800a938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a93a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a93e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a940:	429a      	cmp	r2, r3
 800a942:	d203      	bcs.n	800a94c <BSP_QSPI_Write+0xf0>
 800a944:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	e001      	b.n	800a950 <BSP_QSPI_Write+0xf4>
 800a94c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a950:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 800a952:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a956:	429a      	cmp	r2, r3
 800a958:	d3b8      	bcc.n	800a8cc <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3770      	adds	r7, #112	; 0x70
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20021978 	.word	0x20021978

0800a968 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b096      	sub	sp, #88	; 0x58
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a970:	2300      	movs	r3, #0
 800a972:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a974:	2300      	movs	r3, #0
 800a976:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 800a978:	23d8      	movs	r3, #216	; 0xd8
 800a97a:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800a97c:	2301      	movs	r3, #1
 800a97e:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800a980:	2300      	movs	r3, #0
 800a982:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a984:	2300      	movs	r3, #0
 800a986:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 800a98c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a990:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800a992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a996:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800a998:	2300      	movs	r3, #0
 800a99a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a99c:	2300      	movs	r3, #0
 800a99e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 800a9b0:	4811      	ldr	r0, [pc, #68]	; (800a9f8 <BSP_QSPI_Erase_Block+0x90>)
 800a9b2:	f000 f8aa 	bl	800ab0a <QSPI_WriteEnable>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e017      	b.n	800a9f0 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a9c0:	f107 0308 	add.w	r3, r7, #8
 800a9c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	480b      	ldr	r0, [pc, #44]	; (800a9f8 <BSP_QSPI_Erase_Block+0x90>)
 800a9cc:	f7f9 f84f 	bl	8003a6e <HAL_OSPI_Command>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d001      	beq.n	800a9da <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e00a      	b.n	800a9f0 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 800a9da:	f640 51ac 	movw	r1, #3500	; 0xdac
 800a9de:	4806      	ldr	r0, [pc, #24]	; (800a9f8 <BSP_QSPI_Erase_Block+0x90>)
 800a9e0:	f000 f8ef 	bl	800abc2 <QSPI_AutoPollingMemReady>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e000      	b.n	800a9f0 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3758      	adds	r7, #88	; 0x58
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	20021978 	.word	0x20021978

0800a9fc <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b088      	sub	sp, #32
 800aa00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 800aa02:	4b1c      	ldr	r3, [pc, #112]	; (800aa74 <BSP_QSPI_MspInit+0x78>)
 800aa04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa06:	4a1b      	ldr	r2, [pc, #108]	; (800aa74 <BSP_QSPI_MspInit+0x78>)
 800aa08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa0c:	6513      	str	r3, [r2, #80]	; 0x50
 800aa0e:	4b19      	ldr	r3, [pc, #100]	; (800aa74 <BSP_QSPI_MspInit+0x78>)
 800aa10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa16:	60bb      	str	r3, [r7, #8]
 800aa18:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 800aa1a:	4b16      	ldr	r3, [pc, #88]	; (800aa74 <BSP_QSPI_MspInit+0x78>)
 800aa1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1e:	4a15      	ldr	r2, [pc, #84]	; (800aa74 <BSP_QSPI_MspInit+0x78>)
 800aa20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa24:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800aa26:	4b13      	ldr	r3, [pc, #76]	; (800aa74 <BSP_QSPI_MspInit+0x78>)
 800aa28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2a:	4a12      	ldr	r2, [pc, #72]	; (800aa74 <BSP_QSPI_MspInit+0x78>)
 800aa2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa30:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800aa32:	4b10      	ldr	r3, [pc, #64]	; (800aa74 <BSP_QSPI_MspInit+0x78>)
 800aa34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa36:	4a0f      	ldr	r2, [pc, #60]	; (800aa74 <BSP_QSPI_MspInit+0x78>)
 800aa38:	f043 0310 	orr.w	r3, r3, #16
 800aa3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <BSP_QSPI_MspInit+0x78>)
 800aa40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa42:	f003 0310 	and.w	r3, r3, #16
 800aa46:	607b      	str	r3, [r7, #4]
 800aa48:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 800aa4a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800aa4e:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800aa50:	2302      	movs	r3, #2
 800aa52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800aa54:	2300      	movs	r3, #0
 800aa56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800aa5c:	230a      	movs	r3, #10
 800aa5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800aa60:	f107 030c 	add.w	r3, r7, #12
 800aa64:	4619      	mov	r1, r3
 800aa66:	4804      	ldr	r0, [pc, #16]	; (800aa78 <BSP_QSPI_MspInit+0x7c>)
 800aa68:	f7f7 f8c4 	bl	8001bf4 <HAL_GPIO_Init>
}
 800aa6c:	bf00      	nop
 800aa6e:	3720      	adds	r7, #32
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	40021000 	.word	0x40021000
 800aa78:	48001000 	.word	0x48001000

0800aa7c <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b096      	sub	sp, #88	; 0x58
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800aa84:	2300      	movs	r3, #0
 800aa86:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 800aa8c:	2366      	movs	r3, #102	; 0x66
 800aa8e:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800aa90:	2301      	movs	r3, #1
 800aa92:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800aa94:	2300      	movs	r3, #0
 800aa96:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800aaac:	2300      	movs	r3, #0
 800aaae:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800aab0:	2300      	movs	r3, #0
 800aab2:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aab4:	f107 0308 	add.w	r3, r7, #8
 800aab8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aabc:	4619      	mov	r1, r3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7f8 ffd5 	bl	8003a6e <HAL_OSPI_Command>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e019      	b.n	800ab02 <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 800aace:	2399      	movs	r3, #153	; 0x99
 800aad0:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aad2:	f107 0308 	add.w	r3, r7, #8
 800aad6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7f8 ffc6 	bl	8003a6e <HAL_OSPI_Command>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	e00a      	b.n	800ab02 <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800aaec:	f241 3188 	movw	r1, #5000	; 0x1388
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f866 	bl	800abc2 <QSPI_AutoPollingMemReady>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e000      	b.n	800ab02 <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3758      	adds	r7, #88	; 0x58
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b09c      	sub	sp, #112	; 0x70
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800ab12:	2300      	movs	r3, #0
 800ab14:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800ab16:	2300      	movs	r3, #0
 800ab18:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 800ab1a:	2306      	movs	r3, #6
 800ab1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800ab22:	2300      	movs	r3, #0
 800ab24:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800ab32:	2300      	movs	r3, #0
 800ab34:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab42:	f107 0320 	add.w	r3, r7, #32
 800ab46:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7f8 ff8e 	bl	8003a6e <HAL_OSPI_Command>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e02e      	b.n	800abba <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 800ab60:	2302      	movs	r3, #2
 800ab62:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800ab64:	2300      	movs	r3, #0
 800ab66:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800ab68:	2310      	movs	r3, #16
 800ab6a:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800ab6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ab70:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800ab72:	2305      	movs	r3, #5
 800ab74:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800ab76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab7a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 800ab80:	2300      	movs	r3, #0
 800ab82:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab84:	f107 0320 	add.w	r3, r7, #32
 800ab88:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7f8 ff6d 	bl	8003a6e <HAL_OSPI_Command>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e00d      	b.n	800abba <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab9e:	f107 030c 	add.w	r3, r7, #12
 800aba2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7f9 f8f7 	bl	8003d9c <HAL_OSPI_AutoPolling>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e000      	b.n	800abba <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3770      	adds	r7, #112	; 0x70
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b09c      	sub	sp, #112	; 0x70
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800abcc:	2300      	movs	r3, #0
 800abce:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800abd0:	2300      	movs	r3, #0
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800abd4:	2305      	movs	r3, #5
 800abd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800abd8:	2301      	movs	r3, #1
 800abda:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800abdc:	2300      	movs	r3, #0
 800abde:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800abe0:	2300      	movs	r3, #0
 800abe2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800abe4:	2300      	movs	r3, #0
 800abe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800abe8:	2300      	movs	r3, #0
 800abea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800abec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800abf0:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800abf2:	2301      	movs	r3, #1
 800abf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800abf6:	2300      	movs	r3, #0
 800abf8:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 800abfa:	2300      	movs	r3, #0
 800abfc:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800abfe:	2300      	movs	r3, #0
 800ac00:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ac02:	2300      	movs	r3, #0
 800ac04:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 800ac06:	2300      	movs	r3, #0
 800ac08:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800ac12:	2310      	movs	r3, #16
 800ac14:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800ac16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ac1a:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ac1c:	f107 0320 	add.w	r3, r7, #32
 800ac20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7f8 ff21 	bl	8003a6e <HAL_OSPI_Command>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e00c      	b.n	800ac50 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 800ac36:	f107 030c 	add.w	r3, r7, #12
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7f9 f8ac 	bl	8003d9c <HAL_OSPI_AutoPolling>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e000      	b.n	800ac50 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3770      	adds	r7, #112	; 0x70
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b098      	sub	sp, #96	; 0x60
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	460b      	mov	r3, r1
 800ac62:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800ac64:	2300      	movs	r3, #0
 800ac66:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800ac6c:	2305      	movs	r3, #5
 800ac6e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800ac70:	2301      	movs	r3, #1
 800ac72:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800ac74:	2300      	movs	r3, #0
 800ac76:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ac80:	2300      	movs	r3, #0
 800ac82:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800ac84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac88:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800ac92:	2301      	movs	r3, #1
 800ac94:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ac96:	2300      	movs	r3, #0
 800ac98:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ac9e:	f107 0310 	add.w	r3, r7, #16
 800aca2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7f8 fee0 	bl	8003a6e <HAL_OSPI_Command>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e077      	b.n	800ada8 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800acb8:	f107 030f 	add.w	r3, r7, #15
 800acbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7f8 ffc7 	bl	8003c56 <HAL_OSPI_Receive>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e06a      	b.n	800ada8 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7ff ff19 	bl	800ab0a <QSPI_WriteEnable>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e062      	b.n	800ada8 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800ace2:	78fb      	ldrb	r3, [r7, #3]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d105      	bne.n	800acf4 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
 800acea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	73fb      	strb	r3, [r7, #15]
 800acf2:	e004      	b.n	800acfe <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800acfe:	2301      	movs	r3, #1
 800ad00:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad02:	f107 0310 	add.w	r3, r7, #16
 800ad06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7f8 feae 	bl	8003a6e <HAL_OSPI_Command>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e045      	b.n	800ada8 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad1c:	f107 030f 	add.w	r3, r7, #15
 800ad20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7f8 ff22 	bl	8003b70 <HAL_OSPI_Transmit>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e038      	b.n	800ada8 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800ad36:	f241 3188 	movw	r1, #5000	; 0x1388
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff ff41 	bl	800abc2 <QSPI_AutoPollingMemReady>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e02e      	b.n	800ada8 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 800ad4a:	2305      	movs	r3, #5
 800ad4c:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad4e:	f107 0310 	add.w	r3, r7, #16
 800ad52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad56:	4619      	mov	r1, r3
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7f8 fe88 	bl	8003a6e <HAL_OSPI_Command>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e01f      	b.n	800ada8 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad68:	f107 030f 	add.w	r3, r7, #15
 800ad6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7f8 ff6f 	bl	8003c56 <HAL_OSPI_Receive>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e012      	b.n	800ada8 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
 800ad84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d102      	bne.n	800ad92 <QSPI_QuadMode+0x13a>
 800ad8c:	78fb      	ldrb	r3, [r7, #3]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d007      	beq.n	800ada2 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
 800ad94:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d004      	beq.n	800ada6 <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800ad9c:	78fb      	ldrb	r3, [r7, #3]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d101      	bne.n	800ada6 <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e000      	b.n	800ada8 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3760      	adds	r7, #96	; 0x60
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b098      	sub	sp, #96	; 0x60
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800adbc:	2300      	movs	r3, #0
 800adbe:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800adc0:	2300      	movs	r3, #0
 800adc2:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800adc4:	2305      	movs	r3, #5
 800adc6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800adc8:	2301      	movs	r3, #1
 800adca:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800adcc:	2300      	movs	r3, #0
 800adce:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800add0:	2300      	movs	r3, #0
 800add2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800add4:	2300      	movs	r3, #0
 800add6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800add8:	2300      	movs	r3, #0
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800addc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ade0:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800ade2:	2300      	movs	r3, #0
 800ade4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800adea:	2301      	movs	r3, #1
 800adec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800adee:	2300      	movs	r3, #0
 800adf0:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800adf2:	2300      	movs	r3, #0
 800adf4:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800adf6:	f107 0310 	add.w	r3, r7, #16
 800adfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7f8 fe34 	bl	8003a6e <HAL_OSPI_Command>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e09a      	b.n	800af46 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae10:	f107 030c 	add.w	r3, r7, #12
 800ae14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7f8 ff1b 	bl	8003c56 <HAL_OSPI_Receive>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e08d      	b.n	800af46 <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800ae2a:	2315      	movs	r3, #21
 800ae2c:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800ae2e:	2302      	movs	r3, #2
 800ae30:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae32:	f107 0310 	add.w	r3, r7, #16
 800ae36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7f8 fe16 	bl	8003a6e <HAL_OSPI_Command>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d001      	beq.n	800ae4c <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e07c      	b.n	800af46 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae4c:	f107 030c 	add.w	r3, r7, #12
 800ae50:	3301      	adds	r3, #1
 800ae52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7f8 fefc 	bl	8003c56 <HAL_OSPI_Receive>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	e06e      	b.n	800af46 <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff fe4e 	bl	800ab0a <QSPI_WriteEnable>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e066      	b.n	800af46 <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 800ae78:	78fb      	ldrb	r3, [r7, #3]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d105      	bne.n	800ae8a <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
 800ae80:	f043 0302 	orr.w	r3, r3, #2
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	73bb      	strb	r3, [r7, #14]
 800ae88:	e004      	b.n	800ae94 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	f023 0302 	bic.w	r3, r3, #2
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800ae94:	2301      	movs	r3, #1
 800ae96:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae9c:	f107 0310 	add.w	r3, r7, #16
 800aea0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7f8 fde1 	bl	8003a6e <HAL_OSPI_Command>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e047      	b.n	800af46 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aeb6:	f107 030c 	add.w	r3, r7, #12
 800aeba:	f241 3288 	movw	r2, #5000	; 0x1388
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7f8 fe55 	bl	8003b70 <HAL_OSPI_Transmit>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e03a      	b.n	800af46 <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800aed0:	f241 3188 	movw	r1, #5000	; 0x1388
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff fe74 	bl	800abc2 <QSPI_AutoPollingMemReady>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e030      	b.n	800af46 <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800aee4:	2315      	movs	r3, #21
 800aee6:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800aee8:	2302      	movs	r3, #2
 800aeea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aeec:	f107 0310 	add.w	r3, r7, #16
 800aef0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7f8 fdb9 	bl	8003a6e <HAL_OSPI_Command>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d001      	beq.n	800af06 <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e01f      	b.n	800af46 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800af06:	f107 030c 	add.w	r3, r7, #12
 800af0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7f8 fea0 	bl	8003c56 <HAL_OSPI_Receive>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d001      	beq.n	800af20 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	e012      	b.n	800af46 <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800af20:	7b7b      	ldrb	r3, [r7, #13]
 800af22:	f003 0302 	and.w	r3, r3, #2
 800af26:	2b00      	cmp	r3, #0
 800af28:	d102      	bne.n	800af30 <QSPI_HighPerfMode+0x180>
 800af2a:	78fb      	ldrb	r3, [r7, #3]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d007      	beq.n	800af40 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800af30:	7b7b      	ldrb	r3, [r7, #13]
 800af32:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800af36:	2b00      	cmp	r3, #0
 800af38:	d004      	beq.n	800af44 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800af3a:	78fb      	ldrb	r3, [r7, #3]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3760      	adds	r7, #96	; 0x60
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
	...

0800af50 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800af5a:	4b09      	ldr	r3, [pc, #36]	; (800af80 <BSP_TSENSOR_Init+0x30>)
 800af5c:	4a09      	ldr	r2, [pc, #36]	; (800af84 <BSP_TSENSOR_Init+0x34>)
 800af5e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800af60:	f7ff fad2 	bl	800a508 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800af64:	4b06      	ldr	r3, [pc, #24]	; (800af80 <BSP_TSENSOR_Init+0x30>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2100      	movs	r1, #0
 800af6c:	20be      	movs	r0, #190	; 0xbe
 800af6e:	4798      	blx	r3

  ret = TSENSOR_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800af74:	79fb      	ldrb	r3, [r7, #7]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	200219c8 	.word	0x200219c8
 800af84:	2000004c 	.word	0x2000004c

0800af88 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800af8c:	4b04      	ldr	r3, [pc, #16]	; (800afa0 <BSP_TSENSOR_ReadTemp+0x18>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	20be      	movs	r0, #190	; 0xbe
 800af94:	4798      	blx	r3
 800af96:	eef0 7a40 	vmov.f32	s15, s0
}
 800af9a:	eeb0 0a67 	vmov.f32	s0, s15
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	200219c8 	.word	0x200219c8

0800afa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afaa:	4b11      	ldr	r3, [pc, #68]	; (800aff0 <HAL_MspInit+0x4c>)
 800afac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afae:	4a10      	ldr	r2, [pc, #64]	; (800aff0 <HAL_MspInit+0x4c>)
 800afb0:	f043 0301 	orr.w	r3, r3, #1
 800afb4:	6613      	str	r3, [r2, #96]	; 0x60
 800afb6:	4b0e      	ldr	r3, [pc, #56]	; (800aff0 <HAL_MspInit+0x4c>)
 800afb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	607b      	str	r3, [r7, #4]
 800afc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800afc2:	4b0b      	ldr	r3, [pc, #44]	; (800aff0 <HAL_MspInit+0x4c>)
 800afc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc6:	4a0a      	ldr	r2, [pc, #40]	; (800aff0 <HAL_MspInit+0x4c>)
 800afc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afcc:	6593      	str	r3, [r2, #88]	; 0x58
 800afce:	4b08      	ldr	r3, [pc, #32]	; (800aff0 <HAL_MspInit+0x4c>)
 800afd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800afda:	2200      	movs	r2, #0
 800afdc:	210f      	movs	r1, #15
 800afde:	f06f 0001 	mvn.w	r0, #1
 800afe2:	f7f5 ff1d 	bl	8000e20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	40021000 	.word	0x40021000

0800aff4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	; 0x28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800affc:	f107 0314 	add.w	r3, r7, #20
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	605a      	str	r2, [r3, #4]
 800b006:	609a      	str	r2, [r3, #8]
 800b008:	60da      	str	r2, [r3, #12]
 800b00a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a42      	ldr	r2, [pc, #264]	; (800b11c <HAL_DAC_MspInit+0x128>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d17e      	bne.n	800b114 <HAL_DAC_MspInit+0x120>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800b016:	4b42      	ldr	r3, [pc, #264]	; (800b120 <HAL_DAC_MspInit+0x12c>)
 800b018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b01a:	4a41      	ldr	r2, [pc, #260]	; (800b120 <HAL_DAC_MspInit+0x12c>)
 800b01c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b020:	6593      	str	r3, [r2, #88]	; 0x58
 800b022:	4b3f      	ldr	r3, [pc, #252]	; (800b120 <HAL_DAC_MspInit+0x12c>)
 800b024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b02a:	613b      	str	r3, [r7, #16]
 800b02c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b02e:	4b3c      	ldr	r3, [pc, #240]	; (800b120 <HAL_DAC_MspInit+0x12c>)
 800b030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b032:	4a3b      	ldr	r2, [pc, #236]	; (800b120 <HAL_DAC_MspInit+0x12c>)
 800b034:	f043 0301 	orr.w	r3, r3, #1
 800b038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b03a:	4b39      	ldr	r3, [pc, #228]	; (800b120 <HAL_DAC_MspInit+0x12c>)
 800b03c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b046:	2330      	movs	r3, #48	; 0x30
 800b048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b04a:	2303      	movs	r3, #3
 800b04c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b04e:	2300      	movs	r3, #0
 800b050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b052:	f107 0314 	add.w	r3, r7, #20
 800b056:	4619      	mov	r1, r3
 800b058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b05c:	f7f6 fdca 	bl	8001bf4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800b060:	4b30      	ldr	r3, [pc, #192]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b062:	4a31      	ldr	r2, [pc, #196]	; (800b128 <HAL_DAC_MspInit+0x134>)
 800b064:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800b066:	4b2f      	ldr	r3, [pc, #188]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b068:	2206      	movs	r2, #6
 800b06a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b06c:	4b2d      	ldr	r3, [pc, #180]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b06e:	2210      	movs	r2, #16
 800b070:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b072:	4b2c      	ldr	r3, [pc, #176]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b074:	2200      	movs	r2, #0
 800b076:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800b078:	4b2a      	ldr	r3, [pc, #168]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b07a:	2280      	movs	r2, #128	; 0x80
 800b07c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b07e:	4b29      	ldr	r3, [pc, #164]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b080:	2200      	movs	r2, #0
 800b082:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b084:	4b27      	ldr	r3, [pc, #156]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b086:	2200      	movs	r2, #0
 800b088:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800b08a:	4b26      	ldr	r3, [pc, #152]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b08c:	2220      	movs	r2, #32
 800b08e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800b090:	4b24      	ldr	r3, [pc, #144]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b092:	2200      	movs	r2, #0
 800b094:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800b096:	4823      	ldr	r0, [pc, #140]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b098:	f7f6 fa70 	bl	800157c <HAL_DMA_Init>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 800b0a2:	f7ff f93b 	bl	800a31c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a1e      	ldr	r2, [pc, #120]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b0aa:	609a      	str	r2, [r3, #8]
 800b0ac:	4a1d      	ldr	r2, [pc, #116]	; (800b124 <HAL_DAC_MspInit+0x130>)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 800b0b2:	4b1e      	ldr	r3, [pc, #120]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b0b4:	4a1e      	ldr	r2, [pc, #120]	; (800b130 <HAL_DAC_MspInit+0x13c>)
 800b0b6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CH2;
 800b0b8:	4b1c      	ldr	r3, [pc, #112]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b0ba:	2207      	movs	r2, #7
 800b0bc:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b0be:	4b1b      	ldr	r3, [pc, #108]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b0c0:	2210      	movs	r2, #16
 800b0c2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800b0c4:	4b19      	ldr	r3, [pc, #100]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800b0ca:	4b18      	ldr	r3, [pc, #96]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b0cc:	2280      	movs	r2, #128	; 0x80
 800b0ce:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b0d0:	4b16      	ldr	r3, [pc, #88]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b0d6:	4b15      	ldr	r3, [pc, #84]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800b0dc:	4b13      	ldr	r3, [pc, #76]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b0de:	2220      	movs	r2, #32
 800b0e0:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800b0e2:	4b12      	ldr	r3, [pc, #72]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800b0e8:	4810      	ldr	r0, [pc, #64]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b0ea:	f7f6 fa47 	bl	800157c <HAL_DMA_Init>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <HAL_DAC_MspInit+0x104>
    {
      Error_Handler();
 800b0f4:	f7ff f912 	bl	800a31c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a0c      	ldr	r2, [pc, #48]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b0fc:	60da      	str	r2, [r3, #12]
 800b0fe:	4a0b      	ldr	r2, [pc, #44]	; (800b12c <HAL_DAC_MspInit+0x138>)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800b104:	2200      	movs	r2, #0
 800b106:	2105      	movs	r1, #5
 800b108:	2036      	movs	r0, #54	; 0x36
 800b10a:	f7f5 fe89 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b10e:	2036      	movs	r0, #54	; 0x36
 800b110:	f7f5 fea2 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800b114:	bf00      	nop
 800b116:	3728      	adds	r7, #40	; 0x28
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	40007400 	.word	0x40007400
 800b120:	40021000 	.word	0x40021000
 800b124:	20021524 	.word	0x20021524
 800b128:	40020008 	.word	0x40020008
 800b12c:	20021584 	.word	0x20021584
 800b130:	4002001c 	.word	0x4002001c

0800b134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b0ae      	sub	sp, #184	; 0xb8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b13c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b140:	2200      	movs	r2, #0
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	605a      	str	r2, [r3, #4]
 800b146:	609a      	str	r2, [r3, #8]
 800b148:	60da      	str	r2, [r3, #12]
 800b14a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b14c:	f107 0310 	add.w	r3, r7, #16
 800b150:	2294      	movs	r2, #148	; 0x94
 800b152:	2100      	movs	r1, #0
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fbe9 	bl	800b92c <memset>
  if(hi2c->Instance==I2C2)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a29      	ldr	r2, [pc, #164]	; (800b204 <HAL_I2C_MspInit+0xd0>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d14b      	bne.n	800b1fc <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800b164:	2380      	movs	r3, #128	; 0x80
 800b166:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800b168:	2300      	movs	r3, #0
 800b16a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b16c:	f107 0310 	add.w	r3, r7, #16
 800b170:	4618      	mov	r0, r3
 800b172:	f7fa fbf5 	bl	8005960 <HAL_RCCEx_PeriphCLKConfig>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d001      	beq.n	800b180 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800b17c:	f7ff f8ce 	bl	800a31c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b180:	4b21      	ldr	r3, [pc, #132]	; (800b208 <HAL_I2C_MspInit+0xd4>)
 800b182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b184:	4a20      	ldr	r2, [pc, #128]	; (800b208 <HAL_I2C_MspInit+0xd4>)
 800b186:	f043 0302 	orr.w	r3, r3, #2
 800b18a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b18c:	4b1e      	ldr	r3, [pc, #120]	; (800b208 <HAL_I2C_MspInit+0xd4>)
 800b18e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b190:	f003 0302 	and.w	r3, r3, #2
 800b194:	60fb      	str	r3, [r7, #12]
 800b196:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b198:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b19c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b1a0:	2312      	movs	r3, #18
 800b1a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b1b2:	2304      	movs	r3, #4
 800b1b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b1b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4813      	ldr	r0, [pc, #76]	; (800b20c <HAL_I2C_MspInit+0xd8>)
 800b1c0:	f7f6 fd18 	bl	8001bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b1c4:	4b10      	ldr	r3, [pc, #64]	; (800b208 <HAL_I2C_MspInit+0xd4>)
 800b1c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c8:	4a0f      	ldr	r2, [pc, #60]	; (800b208 <HAL_I2C_MspInit+0xd4>)
 800b1ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b1ce:	6593      	str	r3, [r2, #88]	; 0x58
 800b1d0:	4b0d      	ldr	r3, [pc, #52]	; (800b208 <HAL_I2C_MspInit+0xd4>)
 800b1d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1d8:	60bb      	str	r3, [r7, #8]
 800b1da:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2105      	movs	r1, #5
 800b1e0:	2021      	movs	r0, #33	; 0x21
 800b1e2:	f7f5 fe1d 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800b1e6:	2021      	movs	r0, #33	; 0x21
 800b1e8:	f7f5 fe36 	bl	8000e58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	2105      	movs	r1, #5
 800b1f0:	2022      	movs	r0, #34	; 0x22
 800b1f2:	f7f5 fe15 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800b1f6:	2022      	movs	r0, #34	; 0x22
 800b1f8:	f7f5 fe2e 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b1fc:	bf00      	nop
 800b1fe:	37b8      	adds	r7, #184	; 0xb8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	40005800 	.word	0x40005800
 800b208:	40021000 	.word	0x40021000
 800b20c:	48000400 	.word	0x48000400

0800b210 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a0e      	ldr	r2, [pc, #56]	; (800b258 <HAL_I2C_MspDeInit+0x48>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d115      	bne.n	800b24e <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800b222:	4b0e      	ldr	r3, [pc, #56]	; (800b25c <HAL_I2C_MspDeInit+0x4c>)
 800b224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b226:	4a0d      	ldr	r2, [pc, #52]	; (800b25c <HAL_I2C_MspDeInit+0x4c>)
 800b228:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800b22c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800b22e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b232:	480b      	ldr	r0, [pc, #44]	; (800b260 <HAL_I2C_MspDeInit+0x50>)
 800b234:	f7f6 fe70 	bl	8001f18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800b238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b23c:	4808      	ldr	r0, [pc, #32]	; (800b260 <HAL_I2C_MspDeInit+0x50>)
 800b23e:	f7f6 fe6b 	bl	8001f18 <HAL_GPIO_DeInit>

    /* I2C2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800b242:	2021      	movs	r0, #33	; 0x21
 800b244:	f7f5 fe16 	bl	8000e74 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800b248:	2022      	movs	r0, #34	; 0x22
 800b24a:	f7f5 fe13 	bl	8000e74 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800b24e:	bf00      	nop
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	40005800 	.word	0x40005800
 800b25c:	40021000 	.word	0x40021000
 800b260:	48000400 	.word	0x48000400

0800b264 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b0b0      	sub	sp, #192	; 0xc0
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b26c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b270:	2200      	movs	r2, #0
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	605a      	str	r2, [r3, #4]
 800b276:	609a      	str	r2, [r3, #8]
 800b278:	60da      	str	r2, [r3, #12]
 800b27a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b27c:	f107 0318 	add.w	r3, r7, #24
 800b280:	2294      	movs	r2, #148	; 0x94
 800b282:	2100      	movs	r1, #0
 800b284:	4618      	mov	r0, r3
 800b286:	f000 fb51 	bl	800b92c <memset>
  if(hospi->Instance==OCTOSPI1)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a28      	ldr	r2, [pc, #160]	; (800b330 <HAL_OSPI_MspInit+0xcc>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d149      	bne.n	800b328 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800b294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b298:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b2a0:	f107 0318 	add.w	r3, r7, #24
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fa fb5b 	bl	8005960 <HAL_RCCEx_PeriphCLKConfig>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800b2b0:	f7ff f834 	bl	800a31c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800b2b4:	4b1f      	ldr	r3, [pc, #124]	; (800b334 <HAL_OSPI_MspInit+0xd0>)
 800b2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b8:	4a1e      	ldr	r2, [pc, #120]	; (800b334 <HAL_OSPI_MspInit+0xd0>)
 800b2ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2be:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2c0:	4b1c      	ldr	r3, [pc, #112]	; (800b334 <HAL_OSPI_MspInit+0xd0>)
 800b2c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2c8:	617b      	str	r3, [r7, #20]
 800b2ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800b2cc:	4b19      	ldr	r3, [pc, #100]	; (800b334 <HAL_OSPI_MspInit+0xd0>)
 800b2ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2d0:	4a18      	ldr	r2, [pc, #96]	; (800b334 <HAL_OSPI_MspInit+0xd0>)
 800b2d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2d6:	6513      	str	r3, [r2, #80]	; 0x50
 800b2d8:	4b16      	ldr	r3, [pc, #88]	; (800b334 <HAL_OSPI_MspInit+0xd0>)
 800b2da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2e0:	613b      	str	r3, [r7, #16]
 800b2e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b2e4:	4b13      	ldr	r3, [pc, #76]	; (800b334 <HAL_OSPI_MspInit+0xd0>)
 800b2e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2e8:	4a12      	ldr	r2, [pc, #72]	; (800b334 <HAL_OSPI_MspInit+0xd0>)
 800b2ea:	f043 0310 	orr.w	r3, r3, #16
 800b2ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2f0:	4b10      	ldr	r3, [pc, #64]	; (800b334 <HAL_OSPI_MspInit+0xd0>)
 800b2f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2f4:	f003 0310 	and.w	r3, r3, #16
 800b2f8:	60fb      	str	r3, [r7, #12]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800b2fc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800b300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b304:	2302      	movs	r3, #2
 800b306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b310:	2303      	movs	r3, #3
 800b312:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800b316:	230a      	movs	r3, #10
 800b318:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b31c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b320:	4619      	mov	r1, r3
 800b322:	4805      	ldr	r0, [pc, #20]	; (800b338 <HAL_OSPI_MspInit+0xd4>)
 800b324:	f7f6 fc66 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800b328:	bf00      	nop
 800b32a:	37c0      	adds	r7, #192	; 0xc0
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	a0001000 	.word	0xa0001000
 800b334:	40021000 	.word	0x40021000
 800b338:	48001000 	.word	0x48001000

0800b33c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a0b      	ldr	r2, [pc, #44]	; (800b378 <HAL_OSPI_MspDeInit+0x3c>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d110      	bne.n	800b370 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800b34e:	4b0b      	ldr	r3, [pc, #44]	; (800b37c <HAL_OSPI_MspDeInit+0x40>)
 800b350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b352:	4a0a      	ldr	r2, [pc, #40]	; (800b37c <HAL_OSPI_MspDeInit+0x40>)
 800b354:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b358:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800b35a:	4b08      	ldr	r3, [pc, #32]	; (800b37c <HAL_OSPI_MspDeInit+0x40>)
 800b35c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b35e:	4a07      	ldr	r2, [pc, #28]	; (800b37c <HAL_OSPI_MspDeInit+0x40>)
 800b360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b364:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800b366:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800b36a:	4805      	ldr	r0, [pc, #20]	; (800b380 <HAL_OSPI_MspDeInit+0x44>)
 800b36c:	f7f6 fdd4 	bl	8001f18 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 800b370:	bf00      	nop
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	a0001000 	.word	0xa0001000
 800b37c:	40021000 	.word	0x40021000
 800b380:	48001000 	.word	0x48001000

0800b384 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b394:	d113      	bne.n	800b3be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b396:	4b0c      	ldr	r3, [pc, #48]	; (800b3c8 <HAL_TIM_Base_MspInit+0x44>)
 800b398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39a:	4a0b      	ldr	r2, [pc, #44]	; (800b3c8 <HAL_TIM_Base_MspInit+0x44>)
 800b39c:	f043 0301 	orr.w	r3, r3, #1
 800b3a0:	6593      	str	r3, [r2, #88]	; 0x58
 800b3a2:	4b09      	ldr	r3, [pc, #36]	; (800b3c8 <HAL_TIM_Base_MspInit+0x44>)
 800b3a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	60fb      	str	r3, [r7, #12]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2105      	movs	r1, #5
 800b3b2:	201c      	movs	r0, #28
 800b3b4:	f7f5 fd34 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b3b8:	201c      	movs	r0, #28
 800b3ba:	f7f5 fd4d 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b3be:	bf00      	nop
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	40021000 	.word	0x40021000

0800b3cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b0ae      	sub	sp, #184	; 0xb8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b3d8:	2200      	movs	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	605a      	str	r2, [r3, #4]
 800b3de:	609a      	str	r2, [r3, #8]
 800b3e0:	60da      	str	r2, [r3, #12]
 800b3e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b3e4:	f107 0310 	add.w	r3, r7, #16
 800b3e8:	2294      	movs	r2, #148	; 0x94
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 fa9d 	bl	800b92c <memset>
  if(huart->Instance==USART1)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a21      	ldr	r2, [pc, #132]	; (800b47c <HAL_UART_MspInit+0xb0>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d13a      	bne.n	800b472 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b400:	2300      	movs	r3, #0
 800b402:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b404:	f107 0310 	add.w	r3, r7, #16
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fa faa9 	bl	8005960 <HAL_RCCEx_PeriphCLKConfig>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800b414:	f7fe ff82 	bl	800a31c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b418:	4b19      	ldr	r3, [pc, #100]	; (800b480 <HAL_UART_MspInit+0xb4>)
 800b41a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b41c:	4a18      	ldr	r2, [pc, #96]	; (800b480 <HAL_UART_MspInit+0xb4>)
 800b41e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b422:	6613      	str	r3, [r2, #96]	; 0x60
 800b424:	4b16      	ldr	r3, [pc, #88]	; (800b480 <HAL_UART_MspInit+0xb4>)
 800b426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b42c:	60fb      	str	r3, [r7, #12]
 800b42e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b430:	4b13      	ldr	r3, [pc, #76]	; (800b480 <HAL_UART_MspInit+0xb4>)
 800b432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b434:	4a12      	ldr	r2, [pc, #72]	; (800b480 <HAL_UART_MspInit+0xb4>)
 800b436:	f043 0302 	orr.w	r3, r3, #2
 800b43a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b43c:	4b10      	ldr	r3, [pc, #64]	; (800b480 <HAL_UART_MspInit+0xb4>)
 800b43e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b440:	f003 0302 	and.w	r3, r3, #2
 800b444:	60bb      	str	r3, [r7, #8]
 800b446:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b448:	23c0      	movs	r3, #192	; 0xc0
 800b44a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b44e:	2302      	movs	r3, #2
 800b450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b454:	2300      	movs	r3, #0
 800b456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b45a:	2303      	movs	r3, #3
 800b45c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b460:	2307      	movs	r3, #7
 800b462:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b466:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b46a:	4619      	mov	r1, r3
 800b46c:	4805      	ldr	r0, [pc, #20]	; (800b484 <HAL_UART_MspInit+0xb8>)
 800b46e:	f7f6 fbc1 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b472:	bf00      	nop
 800b474:	37b8      	adds	r7, #184	; 0xb8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	40013800 	.word	0x40013800
 800b480:	40021000 	.word	0x40021000
 800b484:	48000400 	.word	0x48000400

0800b488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08e      	sub	sp, #56	; 0x38
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b496:	4b34      	ldr	r3, [pc, #208]	; (800b568 <HAL_InitTick+0xe0>)
 800b498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b49a:	4a33      	ldr	r2, [pc, #204]	; (800b568 <HAL_InitTick+0xe0>)
 800b49c:	f043 0310 	orr.w	r3, r3, #16
 800b4a0:	6593      	str	r3, [r2, #88]	; 0x58
 800b4a2:	4b31      	ldr	r3, [pc, #196]	; (800b568 <HAL_InitTick+0xe0>)
 800b4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a6:	f003 0310 	and.w	r3, r3, #16
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b4ae:	f107 0210 	add.w	r2, r7, #16
 800b4b2:	f107 0314 	add.w	r3, r7, #20
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fa f95f 	bl	800577c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800b4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d103      	bne.n	800b4d0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b4c8:	f7fa f92c 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 800b4cc:	6378      	str	r0, [r7, #52]	; 0x34
 800b4ce:	e004      	b.n	800b4da <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800b4d0:	f7fa f928 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	005b      	lsls	r3, r3, #1
 800b4d8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4dc:	4a23      	ldr	r2, [pc, #140]	; (800b56c <HAL_InitTick+0xe4>)
 800b4de:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e2:	0c9b      	lsrs	r3, r3, #18
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b4e8:	4b21      	ldr	r3, [pc, #132]	; (800b570 <HAL_InitTick+0xe8>)
 800b4ea:	4a22      	ldr	r2, [pc, #136]	; (800b574 <HAL_InitTick+0xec>)
 800b4ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b4ee:	4b20      	ldr	r3, [pc, #128]	; (800b570 <HAL_InitTick+0xe8>)
 800b4f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b4f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b4f6:	4a1e      	ldr	r2, [pc, #120]	; (800b570 <HAL_InitTick+0xe8>)
 800b4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b4fc:	4b1c      	ldr	r3, [pc, #112]	; (800b570 <HAL_InitTick+0xe8>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b502:	4b1b      	ldr	r3, [pc, #108]	; (800b570 <HAL_InitTick+0xe8>)
 800b504:	2200      	movs	r2, #0
 800b506:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b508:	4b19      	ldr	r3, [pc, #100]	; (800b570 <HAL_InitTick+0xe8>)
 800b50a:	2200      	movs	r2, #0
 800b50c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800b50e:	4818      	ldr	r0, [pc, #96]	; (800b570 <HAL_InitTick+0xe8>)
 800b510:	f7fa ff3e 	bl	8006390 <HAL_TIM_Base_Init>
 800b514:	4603      	mov	r3, r0
 800b516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800b51a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d11b      	bne.n	800b55a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800b522:	4813      	ldr	r0, [pc, #76]	; (800b570 <HAL_InitTick+0xe8>)
 800b524:	f7fa ff8c 	bl	8006440 <HAL_TIM_Base_Start_IT>
 800b528:	4603      	mov	r3, r0
 800b52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800b52e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b532:	2b00      	cmp	r3, #0
 800b534:	d111      	bne.n	800b55a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b536:	2036      	movs	r0, #54	; 0x36
 800b538:	f7f5 fc8e 	bl	8000e58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b0f      	cmp	r3, #15
 800b540:	d808      	bhi.n	800b554 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800b542:	2200      	movs	r2, #0
 800b544:	6879      	ldr	r1, [r7, #4]
 800b546:	2036      	movs	r0, #54	; 0x36
 800b548:	f7f5 fc6a 	bl	8000e20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b54c:	4a0a      	ldr	r2, [pc, #40]	; (800b578 <HAL_InitTick+0xf0>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6013      	str	r3, [r2, #0]
 800b552:	e002      	b.n	800b55a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800b55a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3738      	adds	r7, #56	; 0x38
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	40021000 	.word	0x40021000
 800b56c:	431bde83 	.word	0x431bde83
 800b570:	200219cc 	.word	0x200219cc
 800b574:	40001000 	.word	0x40001000
 800b578:	20000000 	.word	0x20000000

0800b57c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b57c:	b480      	push	{r7}
 800b57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b580:	e7fe      	b.n	800b580 <NMI_Handler+0x4>

0800b582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b582:	b480      	push	{r7}
 800b584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b586:	e7fe      	b.n	800b586 <HardFault_Handler+0x4>

0800b588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b588:	b480      	push	{r7}
 800b58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b58c:	e7fe      	b.n	800b58c <MemManage_Handler+0x4>

0800b58e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b58e:	b480      	push	{r7}
 800b590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b592:	e7fe      	b.n	800b592 <BusFault_Handler+0x4>

0800b594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b594:	b480      	push	{r7}
 800b596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b598:	e7fe      	b.n	800b598 <UsageFault_Handler+0x4>

0800b59a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b59a:	b480      	push	{r7}
 800b59c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b59e:	bf00      	nop
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800b5ac:	4802      	ldr	r0, [pc, #8]	; (800b5b8 <DMA1_Channel1_IRQHandler+0x10>)
 800b5ae:	f7f6 f9c3 	bl	8001938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b5b2:	bf00      	nop
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20021524 	.word	0x20021524

0800b5bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800b5c0:	4802      	ldr	r0, [pc, #8]	; (800b5cc <DMA1_Channel2_IRQHandler+0x10>)
 800b5c2:	f7f6 f9b9 	bl	8001938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800b5c6:	bf00      	nop
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20021584 	.word	0x20021584

0800b5d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b5d4:	4802      	ldr	r0, [pc, #8]	; (800b5e0 <TIM2_IRQHandler+0x10>)
 800b5d6:	f7fa ffa3 	bl	8006520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b5da:	bf00      	nop
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	20021688 	.word	0x20021688

0800b5e4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800b5e8:	4802      	ldr	r0, [pc, #8]	; (800b5f4 <I2C2_EV_IRQHandler+0x10>)
 800b5ea:	f7f7 f8bd 	bl	8002768 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800b5ee:	bf00      	nop
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	200215e4 	.word	0x200215e4

0800b5f8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800b5fc:	4802      	ldr	r0, [pc, #8]	; (800b608 <I2C2_ER_IRQHandler+0x10>)
 800b5fe:	f7f7 f8cd 	bl	800279c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800b602:	bf00      	nop
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	200215e4 	.word	0x200215e4

0800b60c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(blue_button_Pin);
 800b610:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b614:	f7f6 fda4 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b618:	bf00      	nop
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b620:	4803      	ldr	r0, [pc, #12]	; (800b630 <TIM6_DAC_IRQHandler+0x14>)
 800b622:	f7fa ff7d 	bl	8006520 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800b626:	4803      	ldr	r0, [pc, #12]	; (800b634 <TIM6_DAC_IRQHandler+0x18>)
 800b628:	f7f5 fd65 	bl	80010f6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b62c:	bf00      	nop
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	200219cc 	.word	0x200219cc
 800b634:	20021510 	.word	0x20021510

0800b638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b640:	4a14      	ldr	r2, [pc, #80]	; (800b694 <_sbrk+0x5c>)
 800b642:	4b15      	ldr	r3, [pc, #84]	; (800b698 <_sbrk+0x60>)
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b64c:	4b13      	ldr	r3, [pc, #76]	; (800b69c <_sbrk+0x64>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d102      	bne.n	800b65a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b654:	4b11      	ldr	r3, [pc, #68]	; (800b69c <_sbrk+0x64>)
 800b656:	4a12      	ldr	r2, [pc, #72]	; (800b6a0 <_sbrk+0x68>)
 800b658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b65a:	4b10      	ldr	r3, [pc, #64]	; (800b69c <_sbrk+0x64>)
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4413      	add	r3, r2
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	429a      	cmp	r2, r3
 800b666:	d207      	bcs.n	800b678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b668:	f000 f928 	bl	800b8bc <__errno>
 800b66c:	4603      	mov	r3, r0
 800b66e:	220c      	movs	r2, #12
 800b670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b672:	f04f 33ff 	mov.w	r3, #4294967295
 800b676:	e009      	b.n	800b68c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b678:	4b08      	ldr	r3, [pc, #32]	; (800b69c <_sbrk+0x64>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b67e:	4b07      	ldr	r3, [pc, #28]	; (800b69c <_sbrk+0x64>)
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4413      	add	r3, r2
 800b686:	4a05      	ldr	r2, [pc, #20]	; (800b69c <_sbrk+0x64>)
 800b688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b68a:	68fb      	ldr	r3, [r7, #12]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3718      	adds	r7, #24
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	200a0000 	.word	0x200a0000
 800b698:	00000400 	.word	0x00000400
 800b69c:	20021a18 	.word	0x20021a18
 800b6a0:	20021a30 	.word	0x20021a30

0800b6a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b6a8:	4b06      	ldr	r3, [pc, #24]	; (800b6c4 <SystemInit+0x20>)
 800b6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ae:	4a05      	ldr	r2, [pc, #20]	; (800b6c4 <SystemInit+0x20>)
 800b6b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b6b8:	bf00      	nop
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	e000ed00 	.word	0xe000ed00

0800b6c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b6c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b700 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b6cc:	f7ff ffea 	bl	800b6a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b6d0:	480c      	ldr	r0, [pc, #48]	; (800b704 <LoopForever+0x6>)
  ldr r1, =_edata
 800b6d2:	490d      	ldr	r1, [pc, #52]	; (800b708 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b6d4:	4a0d      	ldr	r2, [pc, #52]	; (800b70c <LoopForever+0xe>)
  movs r3, #0
 800b6d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b6d8:	e002      	b.n	800b6e0 <LoopCopyDataInit>

0800b6da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b6da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b6dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b6de:	3304      	adds	r3, #4

0800b6e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b6e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b6e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b6e4:	d3f9      	bcc.n	800b6da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b6e6:	4a0a      	ldr	r2, [pc, #40]	; (800b710 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b6e8:	4c0a      	ldr	r4, [pc, #40]	; (800b714 <LoopForever+0x16>)
  movs r3, #0
 800b6ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b6ec:	e001      	b.n	800b6f2 <LoopFillZerobss>

0800b6ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b6ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b6f0:	3204      	adds	r2, #4

0800b6f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b6f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b6f4:	d3fb      	bcc.n	800b6ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b6f6:	f000 f8e7 	bl	800b8c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b6fa:	f7fe f87d 	bl	80097f8 <main>

0800b6fe <LoopForever>:

LoopForever:
    b LoopForever
 800b6fe:	e7fe      	b.n	800b6fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b700:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800b704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b708:	20020590 	.word	0x20020590
  ldr r2, =_sidata
 800b70c:	0800cca8 	.word	0x0800cca8
  ldr r2, =_sbss
 800b710:	20020590 	.word	0x20020590
  ldr r4, =_ebss
 800b714:	20021a2c 	.word	0x20021a2c

0800b718 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b718:	e7fe      	b.n	800b718 <ADC1_IRQHandler>
	...

0800b71c <arm_std_f32>:
 800b71c:	2901      	cmp	r1, #1
 800b71e:	d97d      	bls.n	800b81c <arm_std_f32+0x100>
 800b720:	b530      	push	{r4, r5, lr}
 800b722:	ed2d 8b02 	vpush	{d8}
 800b726:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b82c <arm_std_f32+0x110>
 800b72a:	088d      	lsrs	r5, r1, #2
 800b72c:	b083      	sub	sp, #12
 800b72e:	eef0 4a47 	vmov.f32	s9, s14
 800b732:	d028      	beq.n	800b786 <arm_std_f32+0x6a>
 800b734:	f100 0310 	add.w	r3, r0, #16
 800b738:	462c      	mov	r4, r5
 800b73a:	ed53 7a04 	vldr	s15, [r3, #-16]
 800b73e:	ed13 5a03 	vldr	s10, [r3, #-12]
 800b742:	ed53 5a02 	vldr	s11, [r3, #-8]
 800b746:	ed13 6a01 	vldr	s12, [r3, #-4]
 800b74a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b74e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800b752:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b756:	ee65 6a05 	vmul.f32	s13, s10, s10
 800b75a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b75e:	ee76 6a87 	vadd.f32	s13, s13, s14
 800b762:	ee25 7aa5 	vmul.f32	s14, s11, s11
 800b766:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b76a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800b76e:	ee26 7a06 	vmul.f32	s14, s12, s12
 800b772:	3c01      	subs	r4, #1
 800b774:	ee77 4a86 	vadd.f32	s9, s15, s12
 800b778:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b77c:	f103 0310 	add.w	r3, r3, #16
 800b780:	d1db      	bne.n	800b73a <arm_std_f32+0x1e>
 800b782:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b786:	f011 0303 	ands.w	r3, r1, #3
 800b78a:	d01b      	beq.n	800b7c4 <arm_std_f32+0xa8>
 800b78c:	edd0 7a00 	vldr	s15, [r0]
 800b790:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b794:	3b01      	subs	r3, #1
 800b796:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800b79a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b79e:	d011      	beq.n	800b7c4 <arm_std_f32+0xa8>
 800b7a0:	edd0 7a01 	vldr	s15, [r0, #4]
 800b7a4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800b7ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b7b2:	d007      	beq.n	800b7c4 <arm_std_f32+0xa8>
 800b7b4:	edd0 7a02 	vldr	s15, [r0, #8]
 800b7b8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b7bc:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800b7c0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b7c4:	ee07 1a90 	vmov	s15, r1
 800b7c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b7d0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800b7d4:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 800b7d8:	eec7 5a86 	vdiv.f32	s11, s15, s12
 800b7dc:	ee87 0a06 	vdiv.f32	s0, s14, s12
 800b7e0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800b7e4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b7e8:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b7ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f4:	db0c      	blt.n	800b810 <arm_std_f32+0xf4>
 800b7f6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7fe:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b802:	d40e      	bmi.n	800b822 <arm_std_f32+0x106>
 800b804:	ed82 8a00 	vstr	s16, [r2]
 800b808:	b003      	add	sp, #12
 800b80a:	ecbd 8b02 	vpop	{d8}
 800b80e:	bd30      	pop	{r4, r5, pc}
 800b810:	2300      	movs	r3, #0
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	b003      	add	sp, #12
 800b816:	ecbd 8b02 	vpop	{d8}
 800b81a:	bd30      	pop	{r4, r5, pc}
 800b81c:	2300      	movs	r3, #0
 800b81e:	6013      	str	r3, [r2, #0]
 800b820:	4770      	bx	lr
 800b822:	9201      	str	r2, [sp, #4]
 800b824:	f000 fcea 	bl	800c1fc <sqrtf>
 800b828:	9a01      	ldr	r2, [sp, #4]
 800b82a:	e7eb      	b.n	800b804 <arm_std_f32+0xe8>
 800b82c:	00000000 	.word	0x00000000

0800b830 <arm_sin_f32>:
 800b830:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b8b0 <arm_sin_f32+0x80>
 800b834:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b838:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b840:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b844:	d504      	bpl.n	800b850 <arm_sin_f32+0x20>
 800b846:	ee17 3a90 	vmov	r3, s15
 800b84a:	3b01      	subs	r3, #1
 800b84c:	ee07 3a90 	vmov	s15, r3
 800b850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b854:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800b8b4 <arm_sin_f32+0x84>
 800b858:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b85c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b860:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b864:	ee17 3a90 	vmov	r3, s15
 800b868:	b29b      	uxth	r3, r3
 800b86a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b86e:	d21a      	bcs.n	800b8a6 <arm_sin_f32+0x76>
 800b870:	ee07 3a90 	vmov	s15, r3
 800b874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b878:	1c59      	adds	r1, r3, #1
 800b87a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b87e:	4a0e      	ldr	r2, [pc, #56]	; (800b8b8 <arm_sin_f32+0x88>)
 800b880:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b888:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b88c:	ed93 7a00 	vldr	s14, [r3]
 800b890:	edd2 6a00 	vldr	s13, [r2]
 800b894:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b898:	ee20 0a26 	vmul.f32	s0, s0, s13
 800b89c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8a0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b8a4:	4770      	bx	lr
 800b8a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b8aa:	2101      	movs	r1, #1
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	e7e6      	b.n	800b87e <arm_sin_f32+0x4e>
 800b8b0:	3e22f983 	.word	0x3e22f983
 800b8b4:	44000000 	.word	0x44000000
 800b8b8:	0800c460 	.word	0x0800c460

0800b8bc <__errno>:
 800b8bc:	4b01      	ldr	r3, [pc, #4]	; (800b8c4 <__errno+0x8>)
 800b8be:	6818      	ldr	r0, [r3, #0]
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	2002052c 	.word	0x2002052c

0800b8c8 <__libc_init_array>:
 800b8c8:	b570      	push	{r4, r5, r6, lr}
 800b8ca:	4d0d      	ldr	r5, [pc, #52]	; (800b900 <__libc_init_array+0x38>)
 800b8cc:	4c0d      	ldr	r4, [pc, #52]	; (800b904 <__libc_init_array+0x3c>)
 800b8ce:	1b64      	subs	r4, r4, r5
 800b8d0:	10a4      	asrs	r4, r4, #2
 800b8d2:	2600      	movs	r6, #0
 800b8d4:	42a6      	cmp	r6, r4
 800b8d6:	d109      	bne.n	800b8ec <__libc_init_array+0x24>
 800b8d8:	4d0b      	ldr	r5, [pc, #44]	; (800b908 <__libc_init_array+0x40>)
 800b8da:	4c0c      	ldr	r4, [pc, #48]	; (800b90c <__libc_init_array+0x44>)
 800b8dc:	f000 fcb0 	bl	800c240 <_init>
 800b8e0:	1b64      	subs	r4, r4, r5
 800b8e2:	10a4      	asrs	r4, r4, #2
 800b8e4:	2600      	movs	r6, #0
 800b8e6:	42a6      	cmp	r6, r4
 800b8e8:	d105      	bne.n	800b8f6 <__libc_init_array+0x2e>
 800b8ea:	bd70      	pop	{r4, r5, r6, pc}
 800b8ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f0:	4798      	blx	r3
 800b8f2:	3601      	adds	r6, #1
 800b8f4:	e7ee      	b.n	800b8d4 <__libc_init_array+0xc>
 800b8f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8fa:	4798      	blx	r3
 800b8fc:	3601      	adds	r6, #1
 800b8fe:	e7f2      	b.n	800b8e6 <__libc_init_array+0x1e>
 800b900:	0800cca0 	.word	0x0800cca0
 800b904:	0800cca0 	.word	0x0800cca0
 800b908:	0800cca0 	.word	0x0800cca0
 800b90c:	0800cca4 	.word	0x0800cca4

0800b910 <memcpy>:
 800b910:	440a      	add	r2, r1
 800b912:	4291      	cmp	r1, r2
 800b914:	f100 33ff 	add.w	r3, r0, #4294967295
 800b918:	d100      	bne.n	800b91c <memcpy+0xc>
 800b91a:	4770      	bx	lr
 800b91c:	b510      	push	{r4, lr}
 800b91e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b922:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b926:	4291      	cmp	r1, r2
 800b928:	d1f9      	bne.n	800b91e <memcpy+0xe>
 800b92a:	bd10      	pop	{r4, pc}

0800b92c <memset>:
 800b92c:	4402      	add	r2, r0
 800b92e:	4603      	mov	r3, r0
 800b930:	4293      	cmp	r3, r2
 800b932:	d100      	bne.n	800b936 <memset+0xa>
 800b934:	4770      	bx	lr
 800b936:	f803 1b01 	strb.w	r1, [r3], #1
 800b93a:	e7f9      	b.n	800b930 <memset+0x4>

0800b93c <siprintf>:
 800b93c:	b40e      	push	{r1, r2, r3}
 800b93e:	b500      	push	{lr}
 800b940:	b09c      	sub	sp, #112	; 0x70
 800b942:	ab1d      	add	r3, sp, #116	; 0x74
 800b944:	9002      	str	r0, [sp, #8]
 800b946:	9006      	str	r0, [sp, #24]
 800b948:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b94c:	4809      	ldr	r0, [pc, #36]	; (800b974 <siprintf+0x38>)
 800b94e:	9107      	str	r1, [sp, #28]
 800b950:	9104      	str	r1, [sp, #16]
 800b952:	4909      	ldr	r1, [pc, #36]	; (800b978 <siprintf+0x3c>)
 800b954:	f853 2b04 	ldr.w	r2, [r3], #4
 800b958:	9105      	str	r1, [sp, #20]
 800b95a:	6800      	ldr	r0, [r0, #0]
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	a902      	add	r1, sp, #8
 800b960:	f000 f868 	bl	800ba34 <_svfiprintf_r>
 800b964:	9b02      	ldr	r3, [sp, #8]
 800b966:	2200      	movs	r2, #0
 800b968:	701a      	strb	r2, [r3, #0]
 800b96a:	b01c      	add	sp, #112	; 0x70
 800b96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b970:	b003      	add	sp, #12
 800b972:	4770      	bx	lr
 800b974:	2002052c 	.word	0x2002052c
 800b978:	ffff0208 	.word	0xffff0208

0800b97c <__ssputs_r>:
 800b97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b980:	688e      	ldr	r6, [r1, #8]
 800b982:	429e      	cmp	r6, r3
 800b984:	4682      	mov	sl, r0
 800b986:	460c      	mov	r4, r1
 800b988:	4690      	mov	r8, r2
 800b98a:	461f      	mov	r7, r3
 800b98c:	d838      	bhi.n	800ba00 <__ssputs_r+0x84>
 800b98e:	898a      	ldrh	r2, [r1, #12]
 800b990:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b994:	d032      	beq.n	800b9fc <__ssputs_r+0x80>
 800b996:	6825      	ldr	r5, [r4, #0]
 800b998:	6909      	ldr	r1, [r1, #16]
 800b99a:	eba5 0901 	sub.w	r9, r5, r1
 800b99e:	6965      	ldr	r5, [r4, #20]
 800b9a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	444b      	add	r3, r9
 800b9ac:	106d      	asrs	r5, r5, #1
 800b9ae:	429d      	cmp	r5, r3
 800b9b0:	bf38      	it	cc
 800b9b2:	461d      	movcc	r5, r3
 800b9b4:	0553      	lsls	r3, r2, #21
 800b9b6:	d531      	bpl.n	800ba1c <__ssputs_r+0xa0>
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	f000 fb55 	bl	800c068 <_malloc_r>
 800b9be:	4606      	mov	r6, r0
 800b9c0:	b950      	cbnz	r0, 800b9d8 <__ssputs_r+0x5c>
 800b9c2:	230c      	movs	r3, #12
 800b9c4:	f8ca 3000 	str.w	r3, [sl]
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ce:	81a3      	strh	r3, [r4, #12]
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d8:	6921      	ldr	r1, [r4, #16]
 800b9da:	464a      	mov	r2, r9
 800b9dc:	f7ff ff98 	bl	800b910 <memcpy>
 800b9e0:	89a3      	ldrh	r3, [r4, #12]
 800b9e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ea:	81a3      	strh	r3, [r4, #12]
 800b9ec:	6126      	str	r6, [r4, #16]
 800b9ee:	6165      	str	r5, [r4, #20]
 800b9f0:	444e      	add	r6, r9
 800b9f2:	eba5 0509 	sub.w	r5, r5, r9
 800b9f6:	6026      	str	r6, [r4, #0]
 800b9f8:	60a5      	str	r5, [r4, #8]
 800b9fa:	463e      	mov	r6, r7
 800b9fc:	42be      	cmp	r6, r7
 800b9fe:	d900      	bls.n	800ba02 <__ssputs_r+0x86>
 800ba00:	463e      	mov	r6, r7
 800ba02:	6820      	ldr	r0, [r4, #0]
 800ba04:	4632      	mov	r2, r6
 800ba06:	4641      	mov	r1, r8
 800ba08:	f000 faa8 	bl	800bf5c <memmove>
 800ba0c:	68a3      	ldr	r3, [r4, #8]
 800ba0e:	1b9b      	subs	r3, r3, r6
 800ba10:	60a3      	str	r3, [r4, #8]
 800ba12:	6823      	ldr	r3, [r4, #0]
 800ba14:	4433      	add	r3, r6
 800ba16:	6023      	str	r3, [r4, #0]
 800ba18:	2000      	movs	r0, #0
 800ba1a:	e7db      	b.n	800b9d4 <__ssputs_r+0x58>
 800ba1c:	462a      	mov	r2, r5
 800ba1e:	f000 fb97 	bl	800c150 <_realloc_r>
 800ba22:	4606      	mov	r6, r0
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d1e1      	bne.n	800b9ec <__ssputs_r+0x70>
 800ba28:	6921      	ldr	r1, [r4, #16]
 800ba2a:	4650      	mov	r0, sl
 800ba2c:	f000 fab0 	bl	800bf90 <_free_r>
 800ba30:	e7c7      	b.n	800b9c2 <__ssputs_r+0x46>
	...

0800ba34 <_svfiprintf_r>:
 800ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	4698      	mov	r8, r3
 800ba3a:	898b      	ldrh	r3, [r1, #12]
 800ba3c:	061b      	lsls	r3, r3, #24
 800ba3e:	b09d      	sub	sp, #116	; 0x74
 800ba40:	4607      	mov	r7, r0
 800ba42:	460d      	mov	r5, r1
 800ba44:	4614      	mov	r4, r2
 800ba46:	d50e      	bpl.n	800ba66 <_svfiprintf_r+0x32>
 800ba48:	690b      	ldr	r3, [r1, #16]
 800ba4a:	b963      	cbnz	r3, 800ba66 <_svfiprintf_r+0x32>
 800ba4c:	2140      	movs	r1, #64	; 0x40
 800ba4e:	f000 fb0b 	bl	800c068 <_malloc_r>
 800ba52:	6028      	str	r0, [r5, #0]
 800ba54:	6128      	str	r0, [r5, #16]
 800ba56:	b920      	cbnz	r0, 800ba62 <_svfiprintf_r+0x2e>
 800ba58:	230c      	movs	r3, #12
 800ba5a:	603b      	str	r3, [r7, #0]
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	e0d1      	b.n	800bc06 <_svfiprintf_r+0x1d2>
 800ba62:	2340      	movs	r3, #64	; 0x40
 800ba64:	616b      	str	r3, [r5, #20]
 800ba66:	2300      	movs	r3, #0
 800ba68:	9309      	str	r3, [sp, #36]	; 0x24
 800ba6a:	2320      	movs	r3, #32
 800ba6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba74:	2330      	movs	r3, #48	; 0x30
 800ba76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc20 <_svfiprintf_r+0x1ec>
 800ba7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba7e:	f04f 0901 	mov.w	r9, #1
 800ba82:	4623      	mov	r3, r4
 800ba84:	469a      	mov	sl, r3
 800ba86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba8a:	b10a      	cbz	r2, 800ba90 <_svfiprintf_r+0x5c>
 800ba8c:	2a25      	cmp	r2, #37	; 0x25
 800ba8e:	d1f9      	bne.n	800ba84 <_svfiprintf_r+0x50>
 800ba90:	ebba 0b04 	subs.w	fp, sl, r4
 800ba94:	d00b      	beq.n	800baae <_svfiprintf_r+0x7a>
 800ba96:	465b      	mov	r3, fp
 800ba98:	4622      	mov	r2, r4
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	f7ff ff6d 	bl	800b97c <__ssputs_r>
 800baa2:	3001      	adds	r0, #1
 800baa4:	f000 80aa 	beq.w	800bbfc <_svfiprintf_r+0x1c8>
 800baa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baaa:	445a      	add	r2, fp
 800baac:	9209      	str	r2, [sp, #36]	; 0x24
 800baae:	f89a 3000 	ldrb.w	r3, [sl]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f000 80a2 	beq.w	800bbfc <_svfiprintf_r+0x1c8>
 800bab8:	2300      	movs	r3, #0
 800baba:	f04f 32ff 	mov.w	r2, #4294967295
 800babe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bac2:	f10a 0a01 	add.w	sl, sl, #1
 800bac6:	9304      	str	r3, [sp, #16]
 800bac8:	9307      	str	r3, [sp, #28]
 800baca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bace:	931a      	str	r3, [sp, #104]	; 0x68
 800bad0:	4654      	mov	r4, sl
 800bad2:	2205      	movs	r2, #5
 800bad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad8:	4851      	ldr	r0, [pc, #324]	; (800bc20 <_svfiprintf_r+0x1ec>)
 800bada:	f7f4 fb91 	bl	8000200 <memchr>
 800bade:	9a04      	ldr	r2, [sp, #16]
 800bae0:	b9d8      	cbnz	r0, 800bb1a <_svfiprintf_r+0xe6>
 800bae2:	06d0      	lsls	r0, r2, #27
 800bae4:	bf44      	itt	mi
 800bae6:	2320      	movmi	r3, #32
 800bae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baec:	0711      	lsls	r1, r2, #28
 800baee:	bf44      	itt	mi
 800baf0:	232b      	movmi	r3, #43	; 0x2b
 800baf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baf6:	f89a 3000 	ldrb.w	r3, [sl]
 800bafa:	2b2a      	cmp	r3, #42	; 0x2a
 800bafc:	d015      	beq.n	800bb2a <_svfiprintf_r+0xf6>
 800bafe:	9a07      	ldr	r2, [sp, #28]
 800bb00:	4654      	mov	r4, sl
 800bb02:	2000      	movs	r0, #0
 800bb04:	f04f 0c0a 	mov.w	ip, #10
 800bb08:	4621      	mov	r1, r4
 800bb0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb0e:	3b30      	subs	r3, #48	; 0x30
 800bb10:	2b09      	cmp	r3, #9
 800bb12:	d94e      	bls.n	800bbb2 <_svfiprintf_r+0x17e>
 800bb14:	b1b0      	cbz	r0, 800bb44 <_svfiprintf_r+0x110>
 800bb16:	9207      	str	r2, [sp, #28]
 800bb18:	e014      	b.n	800bb44 <_svfiprintf_r+0x110>
 800bb1a:	eba0 0308 	sub.w	r3, r0, r8
 800bb1e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb22:	4313      	orrs	r3, r2
 800bb24:	9304      	str	r3, [sp, #16]
 800bb26:	46a2      	mov	sl, r4
 800bb28:	e7d2      	b.n	800bad0 <_svfiprintf_r+0x9c>
 800bb2a:	9b03      	ldr	r3, [sp, #12]
 800bb2c:	1d19      	adds	r1, r3, #4
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	9103      	str	r1, [sp, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bfbb      	ittet	lt
 800bb36:	425b      	neglt	r3, r3
 800bb38:	f042 0202 	orrlt.w	r2, r2, #2
 800bb3c:	9307      	strge	r3, [sp, #28]
 800bb3e:	9307      	strlt	r3, [sp, #28]
 800bb40:	bfb8      	it	lt
 800bb42:	9204      	strlt	r2, [sp, #16]
 800bb44:	7823      	ldrb	r3, [r4, #0]
 800bb46:	2b2e      	cmp	r3, #46	; 0x2e
 800bb48:	d10c      	bne.n	800bb64 <_svfiprintf_r+0x130>
 800bb4a:	7863      	ldrb	r3, [r4, #1]
 800bb4c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb4e:	d135      	bne.n	800bbbc <_svfiprintf_r+0x188>
 800bb50:	9b03      	ldr	r3, [sp, #12]
 800bb52:	1d1a      	adds	r2, r3, #4
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	9203      	str	r2, [sp, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	bfb8      	it	lt
 800bb5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb60:	3402      	adds	r4, #2
 800bb62:	9305      	str	r3, [sp, #20]
 800bb64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc30 <_svfiprintf_r+0x1fc>
 800bb68:	7821      	ldrb	r1, [r4, #0]
 800bb6a:	2203      	movs	r2, #3
 800bb6c:	4650      	mov	r0, sl
 800bb6e:	f7f4 fb47 	bl	8000200 <memchr>
 800bb72:	b140      	cbz	r0, 800bb86 <_svfiprintf_r+0x152>
 800bb74:	2340      	movs	r3, #64	; 0x40
 800bb76:	eba0 000a 	sub.w	r0, r0, sl
 800bb7a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb7e:	9b04      	ldr	r3, [sp, #16]
 800bb80:	4303      	orrs	r3, r0
 800bb82:	3401      	adds	r4, #1
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8a:	4826      	ldr	r0, [pc, #152]	; (800bc24 <_svfiprintf_r+0x1f0>)
 800bb8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb90:	2206      	movs	r2, #6
 800bb92:	f7f4 fb35 	bl	8000200 <memchr>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d038      	beq.n	800bc0c <_svfiprintf_r+0x1d8>
 800bb9a:	4b23      	ldr	r3, [pc, #140]	; (800bc28 <_svfiprintf_r+0x1f4>)
 800bb9c:	bb1b      	cbnz	r3, 800bbe6 <_svfiprintf_r+0x1b2>
 800bb9e:	9b03      	ldr	r3, [sp, #12]
 800bba0:	3307      	adds	r3, #7
 800bba2:	f023 0307 	bic.w	r3, r3, #7
 800bba6:	3308      	adds	r3, #8
 800bba8:	9303      	str	r3, [sp, #12]
 800bbaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbac:	4433      	add	r3, r6
 800bbae:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb0:	e767      	b.n	800ba82 <_svfiprintf_r+0x4e>
 800bbb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	2001      	movs	r0, #1
 800bbba:	e7a5      	b.n	800bb08 <_svfiprintf_r+0xd4>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	3401      	adds	r4, #1
 800bbc0:	9305      	str	r3, [sp, #20]
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	f04f 0c0a 	mov.w	ip, #10
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbce:	3a30      	subs	r2, #48	; 0x30
 800bbd0:	2a09      	cmp	r2, #9
 800bbd2:	d903      	bls.n	800bbdc <_svfiprintf_r+0x1a8>
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d0c5      	beq.n	800bb64 <_svfiprintf_r+0x130>
 800bbd8:	9105      	str	r1, [sp, #20]
 800bbda:	e7c3      	b.n	800bb64 <_svfiprintf_r+0x130>
 800bbdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e7f0      	b.n	800bbc8 <_svfiprintf_r+0x194>
 800bbe6:	ab03      	add	r3, sp, #12
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	462a      	mov	r2, r5
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <_svfiprintf_r+0x1f8>)
 800bbee:	a904      	add	r1, sp, #16
 800bbf0:	4638      	mov	r0, r7
 800bbf2:	f3af 8000 	nop.w
 800bbf6:	1c42      	adds	r2, r0, #1
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	d1d6      	bne.n	800bbaa <_svfiprintf_r+0x176>
 800bbfc:	89ab      	ldrh	r3, [r5, #12]
 800bbfe:	065b      	lsls	r3, r3, #25
 800bc00:	f53f af2c 	bmi.w	800ba5c <_svfiprintf_r+0x28>
 800bc04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc06:	b01d      	add	sp, #116	; 0x74
 800bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0c:	ab03      	add	r3, sp, #12
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	462a      	mov	r2, r5
 800bc12:	4b06      	ldr	r3, [pc, #24]	; (800bc2c <_svfiprintf_r+0x1f8>)
 800bc14:	a904      	add	r1, sp, #16
 800bc16:	4638      	mov	r0, r7
 800bc18:	f000 f87a 	bl	800bd10 <_printf_i>
 800bc1c:	e7eb      	b.n	800bbf6 <_svfiprintf_r+0x1c2>
 800bc1e:	bf00      	nop
 800bc20:	0800cc64 	.word	0x0800cc64
 800bc24:	0800cc6e 	.word	0x0800cc6e
 800bc28:	00000000 	.word	0x00000000
 800bc2c:	0800b97d 	.word	0x0800b97d
 800bc30:	0800cc6a 	.word	0x0800cc6a

0800bc34 <_printf_common>:
 800bc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc38:	4616      	mov	r6, r2
 800bc3a:	4699      	mov	r9, r3
 800bc3c:	688a      	ldr	r2, [r1, #8]
 800bc3e:	690b      	ldr	r3, [r1, #16]
 800bc40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc44:	4293      	cmp	r3, r2
 800bc46:	bfb8      	it	lt
 800bc48:	4613      	movlt	r3, r2
 800bc4a:	6033      	str	r3, [r6, #0]
 800bc4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc50:	4607      	mov	r7, r0
 800bc52:	460c      	mov	r4, r1
 800bc54:	b10a      	cbz	r2, 800bc5a <_printf_common+0x26>
 800bc56:	3301      	adds	r3, #1
 800bc58:	6033      	str	r3, [r6, #0]
 800bc5a:	6823      	ldr	r3, [r4, #0]
 800bc5c:	0699      	lsls	r1, r3, #26
 800bc5e:	bf42      	ittt	mi
 800bc60:	6833      	ldrmi	r3, [r6, #0]
 800bc62:	3302      	addmi	r3, #2
 800bc64:	6033      	strmi	r3, [r6, #0]
 800bc66:	6825      	ldr	r5, [r4, #0]
 800bc68:	f015 0506 	ands.w	r5, r5, #6
 800bc6c:	d106      	bne.n	800bc7c <_printf_common+0x48>
 800bc6e:	f104 0a19 	add.w	sl, r4, #25
 800bc72:	68e3      	ldr	r3, [r4, #12]
 800bc74:	6832      	ldr	r2, [r6, #0]
 800bc76:	1a9b      	subs	r3, r3, r2
 800bc78:	42ab      	cmp	r3, r5
 800bc7a:	dc26      	bgt.n	800bcca <_printf_common+0x96>
 800bc7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc80:	1e13      	subs	r3, r2, #0
 800bc82:	6822      	ldr	r2, [r4, #0]
 800bc84:	bf18      	it	ne
 800bc86:	2301      	movne	r3, #1
 800bc88:	0692      	lsls	r2, r2, #26
 800bc8a:	d42b      	bmi.n	800bce4 <_printf_common+0xb0>
 800bc8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc90:	4649      	mov	r1, r9
 800bc92:	4638      	mov	r0, r7
 800bc94:	47c0      	blx	r8
 800bc96:	3001      	adds	r0, #1
 800bc98:	d01e      	beq.n	800bcd8 <_printf_common+0xa4>
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	68e5      	ldr	r5, [r4, #12]
 800bc9e:	6832      	ldr	r2, [r6, #0]
 800bca0:	f003 0306 	and.w	r3, r3, #6
 800bca4:	2b04      	cmp	r3, #4
 800bca6:	bf08      	it	eq
 800bca8:	1aad      	subeq	r5, r5, r2
 800bcaa:	68a3      	ldr	r3, [r4, #8]
 800bcac:	6922      	ldr	r2, [r4, #16]
 800bcae:	bf0c      	ite	eq
 800bcb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcb4:	2500      	movne	r5, #0
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	bfc4      	itt	gt
 800bcba:	1a9b      	subgt	r3, r3, r2
 800bcbc:	18ed      	addgt	r5, r5, r3
 800bcbe:	2600      	movs	r6, #0
 800bcc0:	341a      	adds	r4, #26
 800bcc2:	42b5      	cmp	r5, r6
 800bcc4:	d11a      	bne.n	800bcfc <_printf_common+0xc8>
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	e008      	b.n	800bcdc <_printf_common+0xa8>
 800bcca:	2301      	movs	r3, #1
 800bccc:	4652      	mov	r2, sl
 800bcce:	4649      	mov	r1, r9
 800bcd0:	4638      	mov	r0, r7
 800bcd2:	47c0      	blx	r8
 800bcd4:	3001      	adds	r0, #1
 800bcd6:	d103      	bne.n	800bce0 <_printf_common+0xac>
 800bcd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce0:	3501      	adds	r5, #1
 800bce2:	e7c6      	b.n	800bc72 <_printf_common+0x3e>
 800bce4:	18e1      	adds	r1, r4, r3
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	2030      	movs	r0, #48	; 0x30
 800bcea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcee:	4422      	add	r2, r4
 800bcf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcf8:	3302      	adds	r3, #2
 800bcfa:	e7c7      	b.n	800bc8c <_printf_common+0x58>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	4622      	mov	r2, r4
 800bd00:	4649      	mov	r1, r9
 800bd02:	4638      	mov	r0, r7
 800bd04:	47c0      	blx	r8
 800bd06:	3001      	adds	r0, #1
 800bd08:	d0e6      	beq.n	800bcd8 <_printf_common+0xa4>
 800bd0a:	3601      	adds	r6, #1
 800bd0c:	e7d9      	b.n	800bcc2 <_printf_common+0x8e>
	...

0800bd10 <_printf_i>:
 800bd10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd14:	7e0f      	ldrb	r7, [r1, #24]
 800bd16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd18:	2f78      	cmp	r7, #120	; 0x78
 800bd1a:	4691      	mov	r9, r2
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	460c      	mov	r4, r1
 800bd20:	469a      	mov	sl, r3
 800bd22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd26:	d807      	bhi.n	800bd38 <_printf_i+0x28>
 800bd28:	2f62      	cmp	r7, #98	; 0x62
 800bd2a:	d80a      	bhi.n	800bd42 <_printf_i+0x32>
 800bd2c:	2f00      	cmp	r7, #0
 800bd2e:	f000 80d8 	beq.w	800bee2 <_printf_i+0x1d2>
 800bd32:	2f58      	cmp	r7, #88	; 0x58
 800bd34:	f000 80a3 	beq.w	800be7e <_printf_i+0x16e>
 800bd38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd40:	e03a      	b.n	800bdb8 <_printf_i+0xa8>
 800bd42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd46:	2b15      	cmp	r3, #21
 800bd48:	d8f6      	bhi.n	800bd38 <_printf_i+0x28>
 800bd4a:	a101      	add	r1, pc, #4	; (adr r1, 800bd50 <_printf_i+0x40>)
 800bd4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd50:	0800bda9 	.word	0x0800bda9
 800bd54:	0800bdbd 	.word	0x0800bdbd
 800bd58:	0800bd39 	.word	0x0800bd39
 800bd5c:	0800bd39 	.word	0x0800bd39
 800bd60:	0800bd39 	.word	0x0800bd39
 800bd64:	0800bd39 	.word	0x0800bd39
 800bd68:	0800bdbd 	.word	0x0800bdbd
 800bd6c:	0800bd39 	.word	0x0800bd39
 800bd70:	0800bd39 	.word	0x0800bd39
 800bd74:	0800bd39 	.word	0x0800bd39
 800bd78:	0800bd39 	.word	0x0800bd39
 800bd7c:	0800bec9 	.word	0x0800bec9
 800bd80:	0800bded 	.word	0x0800bded
 800bd84:	0800beab 	.word	0x0800beab
 800bd88:	0800bd39 	.word	0x0800bd39
 800bd8c:	0800bd39 	.word	0x0800bd39
 800bd90:	0800beeb 	.word	0x0800beeb
 800bd94:	0800bd39 	.word	0x0800bd39
 800bd98:	0800bded 	.word	0x0800bded
 800bd9c:	0800bd39 	.word	0x0800bd39
 800bda0:	0800bd39 	.word	0x0800bd39
 800bda4:	0800beb3 	.word	0x0800beb3
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	1d1a      	adds	r2, r3, #4
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	602a      	str	r2, [r5, #0]
 800bdb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e0a3      	b.n	800bf04 <_printf_i+0x1f4>
 800bdbc:	6820      	ldr	r0, [r4, #0]
 800bdbe:	6829      	ldr	r1, [r5, #0]
 800bdc0:	0606      	lsls	r6, r0, #24
 800bdc2:	f101 0304 	add.w	r3, r1, #4
 800bdc6:	d50a      	bpl.n	800bdde <_printf_i+0xce>
 800bdc8:	680e      	ldr	r6, [r1, #0]
 800bdca:	602b      	str	r3, [r5, #0]
 800bdcc:	2e00      	cmp	r6, #0
 800bdce:	da03      	bge.n	800bdd8 <_printf_i+0xc8>
 800bdd0:	232d      	movs	r3, #45	; 0x2d
 800bdd2:	4276      	negs	r6, r6
 800bdd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdd8:	485e      	ldr	r0, [pc, #376]	; (800bf54 <_printf_i+0x244>)
 800bdda:	230a      	movs	r3, #10
 800bddc:	e019      	b.n	800be12 <_printf_i+0x102>
 800bdde:	680e      	ldr	r6, [r1, #0]
 800bde0:	602b      	str	r3, [r5, #0]
 800bde2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bde6:	bf18      	it	ne
 800bde8:	b236      	sxthne	r6, r6
 800bdea:	e7ef      	b.n	800bdcc <_printf_i+0xbc>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	6820      	ldr	r0, [r4, #0]
 800bdf0:	1d19      	adds	r1, r3, #4
 800bdf2:	6029      	str	r1, [r5, #0]
 800bdf4:	0601      	lsls	r1, r0, #24
 800bdf6:	d501      	bpl.n	800bdfc <_printf_i+0xec>
 800bdf8:	681e      	ldr	r6, [r3, #0]
 800bdfa:	e002      	b.n	800be02 <_printf_i+0xf2>
 800bdfc:	0646      	lsls	r6, r0, #25
 800bdfe:	d5fb      	bpl.n	800bdf8 <_printf_i+0xe8>
 800be00:	881e      	ldrh	r6, [r3, #0]
 800be02:	4854      	ldr	r0, [pc, #336]	; (800bf54 <_printf_i+0x244>)
 800be04:	2f6f      	cmp	r7, #111	; 0x6f
 800be06:	bf0c      	ite	eq
 800be08:	2308      	moveq	r3, #8
 800be0a:	230a      	movne	r3, #10
 800be0c:	2100      	movs	r1, #0
 800be0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be12:	6865      	ldr	r5, [r4, #4]
 800be14:	60a5      	str	r5, [r4, #8]
 800be16:	2d00      	cmp	r5, #0
 800be18:	bfa2      	ittt	ge
 800be1a:	6821      	ldrge	r1, [r4, #0]
 800be1c:	f021 0104 	bicge.w	r1, r1, #4
 800be20:	6021      	strge	r1, [r4, #0]
 800be22:	b90e      	cbnz	r6, 800be28 <_printf_i+0x118>
 800be24:	2d00      	cmp	r5, #0
 800be26:	d04d      	beq.n	800bec4 <_printf_i+0x1b4>
 800be28:	4615      	mov	r5, r2
 800be2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800be2e:	fb03 6711 	mls	r7, r3, r1, r6
 800be32:	5dc7      	ldrb	r7, [r0, r7]
 800be34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be38:	4637      	mov	r7, r6
 800be3a:	42bb      	cmp	r3, r7
 800be3c:	460e      	mov	r6, r1
 800be3e:	d9f4      	bls.n	800be2a <_printf_i+0x11a>
 800be40:	2b08      	cmp	r3, #8
 800be42:	d10b      	bne.n	800be5c <_printf_i+0x14c>
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	07de      	lsls	r6, r3, #31
 800be48:	d508      	bpl.n	800be5c <_printf_i+0x14c>
 800be4a:	6923      	ldr	r3, [r4, #16]
 800be4c:	6861      	ldr	r1, [r4, #4]
 800be4e:	4299      	cmp	r1, r3
 800be50:	bfde      	ittt	le
 800be52:	2330      	movle	r3, #48	; 0x30
 800be54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be5c:	1b52      	subs	r2, r2, r5
 800be5e:	6122      	str	r2, [r4, #16]
 800be60:	f8cd a000 	str.w	sl, [sp]
 800be64:	464b      	mov	r3, r9
 800be66:	aa03      	add	r2, sp, #12
 800be68:	4621      	mov	r1, r4
 800be6a:	4640      	mov	r0, r8
 800be6c:	f7ff fee2 	bl	800bc34 <_printf_common>
 800be70:	3001      	adds	r0, #1
 800be72:	d14c      	bne.n	800bf0e <_printf_i+0x1fe>
 800be74:	f04f 30ff 	mov.w	r0, #4294967295
 800be78:	b004      	add	sp, #16
 800be7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7e:	4835      	ldr	r0, [pc, #212]	; (800bf54 <_printf_i+0x244>)
 800be80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be84:	6829      	ldr	r1, [r5, #0]
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	f851 6b04 	ldr.w	r6, [r1], #4
 800be8c:	6029      	str	r1, [r5, #0]
 800be8e:	061d      	lsls	r5, r3, #24
 800be90:	d514      	bpl.n	800bebc <_printf_i+0x1ac>
 800be92:	07df      	lsls	r7, r3, #31
 800be94:	bf44      	itt	mi
 800be96:	f043 0320 	orrmi.w	r3, r3, #32
 800be9a:	6023      	strmi	r3, [r4, #0]
 800be9c:	b91e      	cbnz	r6, 800bea6 <_printf_i+0x196>
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	f023 0320 	bic.w	r3, r3, #32
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	2310      	movs	r3, #16
 800bea8:	e7b0      	b.n	800be0c <_printf_i+0xfc>
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	f043 0320 	orr.w	r3, r3, #32
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	2378      	movs	r3, #120	; 0x78
 800beb4:	4828      	ldr	r0, [pc, #160]	; (800bf58 <_printf_i+0x248>)
 800beb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800beba:	e7e3      	b.n	800be84 <_printf_i+0x174>
 800bebc:	0659      	lsls	r1, r3, #25
 800bebe:	bf48      	it	mi
 800bec0:	b2b6      	uxthmi	r6, r6
 800bec2:	e7e6      	b.n	800be92 <_printf_i+0x182>
 800bec4:	4615      	mov	r5, r2
 800bec6:	e7bb      	b.n	800be40 <_printf_i+0x130>
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	6826      	ldr	r6, [r4, #0]
 800becc:	6961      	ldr	r1, [r4, #20]
 800bece:	1d18      	adds	r0, r3, #4
 800bed0:	6028      	str	r0, [r5, #0]
 800bed2:	0635      	lsls	r5, r6, #24
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	d501      	bpl.n	800bedc <_printf_i+0x1cc>
 800bed8:	6019      	str	r1, [r3, #0]
 800beda:	e002      	b.n	800bee2 <_printf_i+0x1d2>
 800bedc:	0670      	lsls	r0, r6, #25
 800bede:	d5fb      	bpl.n	800bed8 <_printf_i+0x1c8>
 800bee0:	8019      	strh	r1, [r3, #0]
 800bee2:	2300      	movs	r3, #0
 800bee4:	6123      	str	r3, [r4, #16]
 800bee6:	4615      	mov	r5, r2
 800bee8:	e7ba      	b.n	800be60 <_printf_i+0x150>
 800beea:	682b      	ldr	r3, [r5, #0]
 800beec:	1d1a      	adds	r2, r3, #4
 800beee:	602a      	str	r2, [r5, #0]
 800bef0:	681d      	ldr	r5, [r3, #0]
 800bef2:	6862      	ldr	r2, [r4, #4]
 800bef4:	2100      	movs	r1, #0
 800bef6:	4628      	mov	r0, r5
 800bef8:	f7f4 f982 	bl	8000200 <memchr>
 800befc:	b108      	cbz	r0, 800bf02 <_printf_i+0x1f2>
 800befe:	1b40      	subs	r0, r0, r5
 800bf00:	6060      	str	r0, [r4, #4]
 800bf02:	6863      	ldr	r3, [r4, #4]
 800bf04:	6123      	str	r3, [r4, #16]
 800bf06:	2300      	movs	r3, #0
 800bf08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf0c:	e7a8      	b.n	800be60 <_printf_i+0x150>
 800bf0e:	6923      	ldr	r3, [r4, #16]
 800bf10:	462a      	mov	r2, r5
 800bf12:	4649      	mov	r1, r9
 800bf14:	4640      	mov	r0, r8
 800bf16:	47d0      	blx	sl
 800bf18:	3001      	adds	r0, #1
 800bf1a:	d0ab      	beq.n	800be74 <_printf_i+0x164>
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	079b      	lsls	r3, r3, #30
 800bf20:	d413      	bmi.n	800bf4a <_printf_i+0x23a>
 800bf22:	68e0      	ldr	r0, [r4, #12]
 800bf24:	9b03      	ldr	r3, [sp, #12]
 800bf26:	4298      	cmp	r0, r3
 800bf28:	bfb8      	it	lt
 800bf2a:	4618      	movlt	r0, r3
 800bf2c:	e7a4      	b.n	800be78 <_printf_i+0x168>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	4632      	mov	r2, r6
 800bf32:	4649      	mov	r1, r9
 800bf34:	4640      	mov	r0, r8
 800bf36:	47d0      	blx	sl
 800bf38:	3001      	adds	r0, #1
 800bf3a:	d09b      	beq.n	800be74 <_printf_i+0x164>
 800bf3c:	3501      	adds	r5, #1
 800bf3e:	68e3      	ldr	r3, [r4, #12]
 800bf40:	9903      	ldr	r1, [sp, #12]
 800bf42:	1a5b      	subs	r3, r3, r1
 800bf44:	42ab      	cmp	r3, r5
 800bf46:	dcf2      	bgt.n	800bf2e <_printf_i+0x21e>
 800bf48:	e7eb      	b.n	800bf22 <_printf_i+0x212>
 800bf4a:	2500      	movs	r5, #0
 800bf4c:	f104 0619 	add.w	r6, r4, #25
 800bf50:	e7f5      	b.n	800bf3e <_printf_i+0x22e>
 800bf52:	bf00      	nop
 800bf54:	0800cc75 	.word	0x0800cc75
 800bf58:	0800cc86 	.word	0x0800cc86

0800bf5c <memmove>:
 800bf5c:	4288      	cmp	r0, r1
 800bf5e:	b510      	push	{r4, lr}
 800bf60:	eb01 0402 	add.w	r4, r1, r2
 800bf64:	d902      	bls.n	800bf6c <memmove+0x10>
 800bf66:	4284      	cmp	r4, r0
 800bf68:	4623      	mov	r3, r4
 800bf6a:	d807      	bhi.n	800bf7c <memmove+0x20>
 800bf6c:	1e43      	subs	r3, r0, #1
 800bf6e:	42a1      	cmp	r1, r4
 800bf70:	d008      	beq.n	800bf84 <memmove+0x28>
 800bf72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf7a:	e7f8      	b.n	800bf6e <memmove+0x12>
 800bf7c:	4402      	add	r2, r0
 800bf7e:	4601      	mov	r1, r0
 800bf80:	428a      	cmp	r2, r1
 800bf82:	d100      	bne.n	800bf86 <memmove+0x2a>
 800bf84:	bd10      	pop	{r4, pc}
 800bf86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf8e:	e7f7      	b.n	800bf80 <memmove+0x24>

0800bf90 <_free_r>:
 800bf90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf92:	2900      	cmp	r1, #0
 800bf94:	d044      	beq.n	800c020 <_free_r+0x90>
 800bf96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf9a:	9001      	str	r0, [sp, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f1a1 0404 	sub.w	r4, r1, #4
 800bfa2:	bfb8      	it	lt
 800bfa4:	18e4      	addlt	r4, r4, r3
 800bfa6:	f000 f913 	bl	800c1d0 <__malloc_lock>
 800bfaa:	4a1e      	ldr	r2, [pc, #120]	; (800c024 <_free_r+0x94>)
 800bfac:	9801      	ldr	r0, [sp, #4]
 800bfae:	6813      	ldr	r3, [r2, #0]
 800bfb0:	b933      	cbnz	r3, 800bfc0 <_free_r+0x30>
 800bfb2:	6063      	str	r3, [r4, #4]
 800bfb4:	6014      	str	r4, [r2, #0]
 800bfb6:	b003      	add	sp, #12
 800bfb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfbc:	f000 b90e 	b.w	800c1dc <__malloc_unlock>
 800bfc0:	42a3      	cmp	r3, r4
 800bfc2:	d908      	bls.n	800bfd6 <_free_r+0x46>
 800bfc4:	6825      	ldr	r5, [r4, #0]
 800bfc6:	1961      	adds	r1, r4, r5
 800bfc8:	428b      	cmp	r3, r1
 800bfca:	bf01      	itttt	eq
 800bfcc:	6819      	ldreq	r1, [r3, #0]
 800bfce:	685b      	ldreq	r3, [r3, #4]
 800bfd0:	1949      	addeq	r1, r1, r5
 800bfd2:	6021      	streq	r1, [r4, #0]
 800bfd4:	e7ed      	b.n	800bfb2 <_free_r+0x22>
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	b10b      	cbz	r3, 800bfe0 <_free_r+0x50>
 800bfdc:	42a3      	cmp	r3, r4
 800bfde:	d9fa      	bls.n	800bfd6 <_free_r+0x46>
 800bfe0:	6811      	ldr	r1, [r2, #0]
 800bfe2:	1855      	adds	r5, r2, r1
 800bfe4:	42a5      	cmp	r5, r4
 800bfe6:	d10b      	bne.n	800c000 <_free_r+0x70>
 800bfe8:	6824      	ldr	r4, [r4, #0]
 800bfea:	4421      	add	r1, r4
 800bfec:	1854      	adds	r4, r2, r1
 800bfee:	42a3      	cmp	r3, r4
 800bff0:	6011      	str	r1, [r2, #0]
 800bff2:	d1e0      	bne.n	800bfb6 <_free_r+0x26>
 800bff4:	681c      	ldr	r4, [r3, #0]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	6053      	str	r3, [r2, #4]
 800bffa:	4421      	add	r1, r4
 800bffc:	6011      	str	r1, [r2, #0]
 800bffe:	e7da      	b.n	800bfb6 <_free_r+0x26>
 800c000:	d902      	bls.n	800c008 <_free_r+0x78>
 800c002:	230c      	movs	r3, #12
 800c004:	6003      	str	r3, [r0, #0]
 800c006:	e7d6      	b.n	800bfb6 <_free_r+0x26>
 800c008:	6825      	ldr	r5, [r4, #0]
 800c00a:	1961      	adds	r1, r4, r5
 800c00c:	428b      	cmp	r3, r1
 800c00e:	bf04      	itt	eq
 800c010:	6819      	ldreq	r1, [r3, #0]
 800c012:	685b      	ldreq	r3, [r3, #4]
 800c014:	6063      	str	r3, [r4, #4]
 800c016:	bf04      	itt	eq
 800c018:	1949      	addeq	r1, r1, r5
 800c01a:	6021      	streq	r1, [r4, #0]
 800c01c:	6054      	str	r4, [r2, #4]
 800c01e:	e7ca      	b.n	800bfb6 <_free_r+0x26>
 800c020:	b003      	add	sp, #12
 800c022:	bd30      	pop	{r4, r5, pc}
 800c024:	20021a1c 	.word	0x20021a1c

0800c028 <sbrk_aligned>:
 800c028:	b570      	push	{r4, r5, r6, lr}
 800c02a:	4e0e      	ldr	r6, [pc, #56]	; (800c064 <sbrk_aligned+0x3c>)
 800c02c:	460c      	mov	r4, r1
 800c02e:	6831      	ldr	r1, [r6, #0]
 800c030:	4605      	mov	r5, r0
 800c032:	b911      	cbnz	r1, 800c03a <sbrk_aligned+0x12>
 800c034:	f000 f8bc 	bl	800c1b0 <_sbrk_r>
 800c038:	6030      	str	r0, [r6, #0]
 800c03a:	4621      	mov	r1, r4
 800c03c:	4628      	mov	r0, r5
 800c03e:	f000 f8b7 	bl	800c1b0 <_sbrk_r>
 800c042:	1c43      	adds	r3, r0, #1
 800c044:	d00a      	beq.n	800c05c <sbrk_aligned+0x34>
 800c046:	1cc4      	adds	r4, r0, #3
 800c048:	f024 0403 	bic.w	r4, r4, #3
 800c04c:	42a0      	cmp	r0, r4
 800c04e:	d007      	beq.n	800c060 <sbrk_aligned+0x38>
 800c050:	1a21      	subs	r1, r4, r0
 800c052:	4628      	mov	r0, r5
 800c054:	f000 f8ac 	bl	800c1b0 <_sbrk_r>
 800c058:	3001      	adds	r0, #1
 800c05a:	d101      	bne.n	800c060 <sbrk_aligned+0x38>
 800c05c:	f04f 34ff 	mov.w	r4, #4294967295
 800c060:	4620      	mov	r0, r4
 800c062:	bd70      	pop	{r4, r5, r6, pc}
 800c064:	20021a20 	.word	0x20021a20

0800c068 <_malloc_r>:
 800c068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c06c:	1ccd      	adds	r5, r1, #3
 800c06e:	f025 0503 	bic.w	r5, r5, #3
 800c072:	3508      	adds	r5, #8
 800c074:	2d0c      	cmp	r5, #12
 800c076:	bf38      	it	cc
 800c078:	250c      	movcc	r5, #12
 800c07a:	2d00      	cmp	r5, #0
 800c07c:	4607      	mov	r7, r0
 800c07e:	db01      	blt.n	800c084 <_malloc_r+0x1c>
 800c080:	42a9      	cmp	r1, r5
 800c082:	d905      	bls.n	800c090 <_malloc_r+0x28>
 800c084:	230c      	movs	r3, #12
 800c086:	603b      	str	r3, [r7, #0]
 800c088:	2600      	movs	r6, #0
 800c08a:	4630      	mov	r0, r6
 800c08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c090:	4e2e      	ldr	r6, [pc, #184]	; (800c14c <_malloc_r+0xe4>)
 800c092:	f000 f89d 	bl	800c1d0 <__malloc_lock>
 800c096:	6833      	ldr	r3, [r6, #0]
 800c098:	461c      	mov	r4, r3
 800c09a:	bb34      	cbnz	r4, 800c0ea <_malloc_r+0x82>
 800c09c:	4629      	mov	r1, r5
 800c09e:	4638      	mov	r0, r7
 800c0a0:	f7ff ffc2 	bl	800c028 <sbrk_aligned>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	d14d      	bne.n	800c146 <_malloc_r+0xde>
 800c0aa:	6834      	ldr	r4, [r6, #0]
 800c0ac:	4626      	mov	r6, r4
 800c0ae:	2e00      	cmp	r6, #0
 800c0b0:	d140      	bne.n	800c134 <_malloc_r+0xcc>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	4631      	mov	r1, r6
 800c0b6:	4638      	mov	r0, r7
 800c0b8:	eb04 0803 	add.w	r8, r4, r3
 800c0bc:	f000 f878 	bl	800c1b0 <_sbrk_r>
 800c0c0:	4580      	cmp	r8, r0
 800c0c2:	d13a      	bne.n	800c13a <_malloc_r+0xd2>
 800c0c4:	6821      	ldr	r1, [r4, #0]
 800c0c6:	3503      	adds	r5, #3
 800c0c8:	1a6d      	subs	r5, r5, r1
 800c0ca:	f025 0503 	bic.w	r5, r5, #3
 800c0ce:	3508      	adds	r5, #8
 800c0d0:	2d0c      	cmp	r5, #12
 800c0d2:	bf38      	it	cc
 800c0d4:	250c      	movcc	r5, #12
 800c0d6:	4629      	mov	r1, r5
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f7ff ffa5 	bl	800c028 <sbrk_aligned>
 800c0de:	3001      	adds	r0, #1
 800c0e0:	d02b      	beq.n	800c13a <_malloc_r+0xd2>
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	442b      	add	r3, r5
 800c0e6:	6023      	str	r3, [r4, #0]
 800c0e8:	e00e      	b.n	800c108 <_malloc_r+0xa0>
 800c0ea:	6822      	ldr	r2, [r4, #0]
 800c0ec:	1b52      	subs	r2, r2, r5
 800c0ee:	d41e      	bmi.n	800c12e <_malloc_r+0xc6>
 800c0f0:	2a0b      	cmp	r2, #11
 800c0f2:	d916      	bls.n	800c122 <_malloc_r+0xba>
 800c0f4:	1961      	adds	r1, r4, r5
 800c0f6:	42a3      	cmp	r3, r4
 800c0f8:	6025      	str	r5, [r4, #0]
 800c0fa:	bf18      	it	ne
 800c0fc:	6059      	strne	r1, [r3, #4]
 800c0fe:	6863      	ldr	r3, [r4, #4]
 800c100:	bf08      	it	eq
 800c102:	6031      	streq	r1, [r6, #0]
 800c104:	5162      	str	r2, [r4, r5]
 800c106:	604b      	str	r3, [r1, #4]
 800c108:	4638      	mov	r0, r7
 800c10a:	f104 060b 	add.w	r6, r4, #11
 800c10e:	f000 f865 	bl	800c1dc <__malloc_unlock>
 800c112:	f026 0607 	bic.w	r6, r6, #7
 800c116:	1d23      	adds	r3, r4, #4
 800c118:	1af2      	subs	r2, r6, r3
 800c11a:	d0b6      	beq.n	800c08a <_malloc_r+0x22>
 800c11c:	1b9b      	subs	r3, r3, r6
 800c11e:	50a3      	str	r3, [r4, r2]
 800c120:	e7b3      	b.n	800c08a <_malloc_r+0x22>
 800c122:	6862      	ldr	r2, [r4, #4]
 800c124:	42a3      	cmp	r3, r4
 800c126:	bf0c      	ite	eq
 800c128:	6032      	streq	r2, [r6, #0]
 800c12a:	605a      	strne	r2, [r3, #4]
 800c12c:	e7ec      	b.n	800c108 <_malloc_r+0xa0>
 800c12e:	4623      	mov	r3, r4
 800c130:	6864      	ldr	r4, [r4, #4]
 800c132:	e7b2      	b.n	800c09a <_malloc_r+0x32>
 800c134:	4634      	mov	r4, r6
 800c136:	6876      	ldr	r6, [r6, #4]
 800c138:	e7b9      	b.n	800c0ae <_malloc_r+0x46>
 800c13a:	230c      	movs	r3, #12
 800c13c:	603b      	str	r3, [r7, #0]
 800c13e:	4638      	mov	r0, r7
 800c140:	f000 f84c 	bl	800c1dc <__malloc_unlock>
 800c144:	e7a1      	b.n	800c08a <_malloc_r+0x22>
 800c146:	6025      	str	r5, [r4, #0]
 800c148:	e7de      	b.n	800c108 <_malloc_r+0xa0>
 800c14a:	bf00      	nop
 800c14c:	20021a1c 	.word	0x20021a1c

0800c150 <_realloc_r>:
 800c150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c154:	4680      	mov	r8, r0
 800c156:	4614      	mov	r4, r2
 800c158:	460e      	mov	r6, r1
 800c15a:	b921      	cbnz	r1, 800c166 <_realloc_r+0x16>
 800c15c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c160:	4611      	mov	r1, r2
 800c162:	f7ff bf81 	b.w	800c068 <_malloc_r>
 800c166:	b92a      	cbnz	r2, 800c174 <_realloc_r+0x24>
 800c168:	f7ff ff12 	bl	800bf90 <_free_r>
 800c16c:	4625      	mov	r5, r4
 800c16e:	4628      	mov	r0, r5
 800c170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c174:	f000 f838 	bl	800c1e8 <_malloc_usable_size_r>
 800c178:	4284      	cmp	r4, r0
 800c17a:	4607      	mov	r7, r0
 800c17c:	d802      	bhi.n	800c184 <_realloc_r+0x34>
 800c17e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c182:	d812      	bhi.n	800c1aa <_realloc_r+0x5a>
 800c184:	4621      	mov	r1, r4
 800c186:	4640      	mov	r0, r8
 800c188:	f7ff ff6e 	bl	800c068 <_malloc_r>
 800c18c:	4605      	mov	r5, r0
 800c18e:	2800      	cmp	r0, #0
 800c190:	d0ed      	beq.n	800c16e <_realloc_r+0x1e>
 800c192:	42bc      	cmp	r4, r7
 800c194:	4622      	mov	r2, r4
 800c196:	4631      	mov	r1, r6
 800c198:	bf28      	it	cs
 800c19a:	463a      	movcs	r2, r7
 800c19c:	f7ff fbb8 	bl	800b910 <memcpy>
 800c1a0:	4631      	mov	r1, r6
 800c1a2:	4640      	mov	r0, r8
 800c1a4:	f7ff fef4 	bl	800bf90 <_free_r>
 800c1a8:	e7e1      	b.n	800c16e <_realloc_r+0x1e>
 800c1aa:	4635      	mov	r5, r6
 800c1ac:	e7df      	b.n	800c16e <_realloc_r+0x1e>
	...

0800c1b0 <_sbrk_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	4d06      	ldr	r5, [pc, #24]	; (800c1cc <_sbrk_r+0x1c>)
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	4608      	mov	r0, r1
 800c1ba:	602b      	str	r3, [r5, #0]
 800c1bc:	f7ff fa3c 	bl	800b638 <_sbrk>
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	d102      	bne.n	800c1ca <_sbrk_r+0x1a>
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	b103      	cbz	r3, 800c1ca <_sbrk_r+0x1a>
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	bd38      	pop	{r3, r4, r5, pc}
 800c1cc:	20021a24 	.word	0x20021a24

0800c1d0 <__malloc_lock>:
 800c1d0:	4801      	ldr	r0, [pc, #4]	; (800c1d8 <__malloc_lock+0x8>)
 800c1d2:	f000 b811 	b.w	800c1f8 <__retarget_lock_acquire_recursive>
 800c1d6:	bf00      	nop
 800c1d8:	20021a28 	.word	0x20021a28

0800c1dc <__malloc_unlock>:
 800c1dc:	4801      	ldr	r0, [pc, #4]	; (800c1e4 <__malloc_unlock+0x8>)
 800c1de:	f000 b80c 	b.w	800c1fa <__retarget_lock_release_recursive>
 800c1e2:	bf00      	nop
 800c1e4:	20021a28 	.word	0x20021a28

0800c1e8 <_malloc_usable_size_r>:
 800c1e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1ec:	1f18      	subs	r0, r3, #4
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	bfbc      	itt	lt
 800c1f2:	580b      	ldrlt	r3, [r1, r0]
 800c1f4:	18c0      	addlt	r0, r0, r3
 800c1f6:	4770      	bx	lr

0800c1f8 <__retarget_lock_acquire_recursive>:
 800c1f8:	4770      	bx	lr

0800c1fa <__retarget_lock_release_recursive>:
 800c1fa:	4770      	bx	lr

0800c1fc <sqrtf>:
 800c1fc:	b508      	push	{r3, lr}
 800c1fe:	ed2d 8b02 	vpush	{d8}
 800c202:	eeb0 8a40 	vmov.f32	s16, s0
 800c206:	f000 f817 	bl	800c238 <__ieee754_sqrtf>
 800c20a:	eeb4 8a48 	vcmp.f32	s16, s16
 800c20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c212:	d60c      	bvs.n	800c22e <sqrtf+0x32>
 800c214:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c234 <sqrtf+0x38>
 800c218:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c220:	d505      	bpl.n	800c22e <sqrtf+0x32>
 800c222:	f7ff fb4b 	bl	800b8bc <__errno>
 800c226:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c22a:	2321      	movs	r3, #33	; 0x21
 800c22c:	6003      	str	r3, [r0, #0]
 800c22e:	ecbd 8b02 	vpop	{d8}
 800c232:	bd08      	pop	{r3, pc}
 800c234:	00000000 	.word	0x00000000

0800c238 <__ieee754_sqrtf>:
 800c238:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c23c:	4770      	bx	lr
	...

0800c240 <_init>:
 800c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c242:	bf00      	nop
 800c244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c246:	bc08      	pop	{r3}
 800c248:	469e      	mov	lr, r3
 800c24a:	4770      	bx	lr

0800c24c <_fini>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	bf00      	nop
 800c250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c252:	bc08      	pop	{r3}
 800c254:	469e      	mov	lr, r3
 800c256:	4770      	bx	lr
