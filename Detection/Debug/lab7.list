
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af44  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a0  0800b104  0800b104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baa4  0800baa4  00040590  2**0
                  CONTENTS
  4 .ARM          00000008  0800baa4  0800baa4  0001baa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baac  0800baac  00040590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baac  0800baac  0001baac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bab0  0800bab0  0001bab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00020590  20000000  0800bab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20020590  0802c044  00040590  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20020b78  0802c044  00040b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040590  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026dc9  00000000  00000000  000405c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000485f  00000000  00000000  00067389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  0006bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a90  00000000  00000000  0006d850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e60d  00000000  00000000  0006f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002322e  00000000  00000000  0009d8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120b02  00000000  00000000  000c0b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001e161d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c00  00000000  00000000  001e16e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000006c3  00000000  00000000  001e92e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20020590 	.word	0x20020590
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b0ec 	.word	0x0800b0ec

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20020594 	.word	0x20020594
 80001fc:	0800b0ec 	.word	0x0800b0ec

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f000 f925 	bl	8000e0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc0:	2005      	movs	r0, #5
 8000bc2:	f009 fba9 	bl	800a318 <HAL_InitTick>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	e001      	b.n	8000bd6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd2:	f009 f92f 	bl	8009e34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000004 	.word	0x20000004
 8000c04:	200205ac 	.word	0x200205ac

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200205ac 	.word	0x200205ac

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff ffee 	bl	8000c08 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c46:	bf00      	nop
 8000c48:	f7ff ffde 	bl	8000c08 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000004 	.word	0x20000004

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db12      	blt.n	8000d40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	490a      	ldr	r1, [pc, #40]	; (8000d4c <__NVIC_DisableIRQ+0x44>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	3320      	adds	r3, #32
 8000d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d34:	f3bf 8f4f 	dsb	sy
}
 8000d38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d3a:	f3bf 8f6f 	isb	sy
}
 8000d3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff28 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e32:	f7ff ff3d 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000e36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	6978      	ldr	r0, [r7, #20]
 8000e3e:	f7ff ffb1 	bl	8000da4 <NVIC_EncodePriority>
 8000e42:	4602      	mov	r2, r0
 8000e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff80 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff30 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff40 	bl	8000d08 <__NVIC_DisableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e014      	b.n	8000ecc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	791b      	ldrb	r3, [r3, #4]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d105      	bne.n	8000eb8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f008 ffe6 	bl	8009e84 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2202      	movs	r2, #2
 8000ebc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	795b      	ldrb	r3, [r3, #5]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d101      	bne.n	8000ef2 <HAL_DAC_Start_DMA+0x1e>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e0ab      	b.n	800104a <HAL_DAC_Start_DMA+0x176>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2202      	movs	r2, #2
 8000efc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d12f      	bne.n	8000f64 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	4a52      	ldr	r2, [pc, #328]	; (8001054 <HAL_DAC_Start_DMA+0x180>)
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	4a51      	ldr	r2, [pc, #324]	; (8001058 <HAL_DAC_Start_DMA+0x184>)
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4a50      	ldr	r2, [pc, #320]	; (800105c <HAL_DAC_Start_DMA+0x188>)
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d013      	beq.n	8000f5a <HAL_DAC_Start_DMA+0x86>
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d845      	bhi.n	8000fc4 <HAL_DAC_Start_DMA+0xf0>
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_DAC_Start_DMA+0x72>
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d005      	beq.n	8000f50 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000f44:	e03e      	b.n	8000fc4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	613b      	str	r3, [r7, #16]
        break;
 8000f4e:	e03c      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	330c      	adds	r3, #12
 8000f56:	613b      	str	r3, [r7, #16]
        break;
 8000f58:	e037      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3310      	adds	r3, #16
 8000f60:	613b      	str	r3, [r7, #16]
        break;
 8000f62:	e032      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a3d      	ldr	r2, [pc, #244]	; (8001060 <HAL_DAC_Start_DMA+0x18c>)
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	4a3c      	ldr	r2, [pc, #240]	; (8001064 <HAL_DAC_Start_DMA+0x190>)
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	4a3b      	ldr	r2, [pc, #236]	; (8001068 <HAL_DAC_Start_DMA+0x194>)
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f8a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d013      	beq.n	8000fba <HAL_DAC_Start_DMA+0xe6>
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d817      	bhi.n	8000fc8 <HAL_DAC_Start_DMA+0xf4>
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_DAC_Start_DMA+0xd2>
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d005      	beq.n	8000fb0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000fa4:	e010      	b.n	8000fc8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3314      	adds	r3, #20
 8000fac:	613b      	str	r3, [r7, #16]
        break;
 8000fae:	e00c      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3318      	adds	r3, #24
 8000fb6:	613b      	str	r3, [r7, #16]
        break;
 8000fb8:	e007      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	331c      	adds	r3, #28
 8000fc0:	613b      	str	r3, [r7, #16]
        break;
 8000fc2:	e002      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        break;
 8000fc4:	bf00      	nop
 8000fc6:	e000      	b.n	8000fca <HAL_DAC_Start_DMA+0xf6>
        break;
 8000fc8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d111      	bne.n	8000ff4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fde:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6898      	ldr	r0, [r3, #8]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	f000 fb83 	bl	80016f4 <HAL_DMA_Start_IT>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	e010      	b.n	8001016 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001002:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	68d8      	ldr	r0, [r3, #12]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	f000 fb71 	bl	80016f4 <HAL_DMA_Start_IT>
 8001012:	4603      	mov	r3, r0
 8001014:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10c      	bne.n	800103c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	2201      	movs	r2, #1
 8001030:	409a      	lsls	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e005      	b.n	8001048 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	f043 0204 	orr.w	r2, r3, #4
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001048:	7dfb      	ldrb	r3, [r7, #23]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	0800147d 	.word	0x0800147d
 8001058:	0800149f 	.word	0x0800149f
 800105c:	080014bb 	.word	0x080014bb
 8001060:	08001539 	.word	0x08001539
 8001064:	0800155b 	.word	0x0800155b
 8001068:	08001577 	.word	0x08001577

0800106c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6819      	ldr	r1, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	400a      	ands	r2, r1
 8001092:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6819      	ldr	r1, [r3, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	2201      	movs	r2, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10d      	bne.n	80010d2 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fb95 	bl	80017ea <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e00c      	b.n	80010ec <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fb87 	bl	80017ea <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80010ea:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800110c:	d120      	bne.n	8001150 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800111c:	d118      	bne.n	8001150 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2204      	movs	r2, #4
 8001122:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001138:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001148:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f84b 	bl	80011e6 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800115a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800115e:	d120      	bne.n	80011a2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800116a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800116e:	d118      	bne.n	80011a2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2204      	movs	r2, #4
 8001174:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	f043 0202 	orr.w	r2, r3, #2
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800118a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800119a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f9c1 	bl	8001524 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	795b      	ldrb	r3, [r3, #5]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_DAC_ConfigChannel+0x1c>
 8001214:	2302      	movs	r3, #2
 8001216:	e12a      	b.n	800146e <HAL_DAC_ConfigChannel+0x272>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2201      	movs	r2, #1
 800121c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2202      	movs	r2, #2
 8001222:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b04      	cmp	r3, #4
 800122a:	d174      	bne.n	8001316 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800122c:	f7ff fcec 	bl	8000c08 <HAL_GetTick>
 8001230:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d134      	bne.n	80012a2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001238:	e011      	b.n	800125e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800123a:	f7ff fce5 	bl	8000c08 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b01      	cmp	r3, #1
 8001246:	d90a      	bls.n	800125e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	f043 0208 	orr.w	r2, r3, #8
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2203      	movs	r2, #3
 8001258:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e107      	b.n	800146e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e6      	bne.n	800123a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fcd7 	bl	8000c20 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	69d2      	ldr	r2, [r2, #28]
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
 800127c:	e01e      	b.n	80012bc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800127e:	f7ff fcc3 	bl	8000c08 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d90a      	bls.n	80012a2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	f043 0208 	orr.w	r2, r3, #8
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2203      	movs	r2, #3
 800129c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e0e5      	b.n	800146e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	dbe8      	blt.n	800127e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80012ac:	2001      	movs	r0, #1
 80012ae:	f7ff fcb7 	bl	8000c20 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	69d2      	ldr	r2, [r2, #28]
 80012ba:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	ea02 0103 	and.w	r1, r2, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	6a1a      	ldr	r2, [r3, #32]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	409a      	lsls	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	21ff      	movs	r1, #255	; 0xff
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	ea02 0103 	and.w	r1, r2, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	409a      	lsls	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d11d      	bne.n	800135a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001324:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	221f      	movs	r2, #31
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	4013      	ands	r3, r2
 8001338:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	4313      	orrs	r3, r2
 8001350:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001360:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	2207      	movs	r2, #7
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	4013      	ands	r3, r2
 8001374:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	431a      	orrs	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	4313      	orrs	r3, r2
 8001398:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6819      	ldr	r1, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	400a      	ands	r2, r1
 80013be:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	f640 72fe 	movw	r2, #4094	; 0xffe
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	4013      	ands	r3, r2
 80013dc:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013fe:	d104      	bne.n	800140a <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	e018      	b.n	800143c <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d104      	bne.n	800141c <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	e00f      	b.n	800143c <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800141c:	f004 f98a 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8001420:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_DAC_ConfigChannel+0x27c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d904      	bls.n	8001434 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e003      	b.n	800143c <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800143a:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6819      	ldr	r1, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	22c0      	movs	r2, #192	; 0xc0
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	400a      	ands	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2201      	movs	r2, #1
 8001464:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	04c4b400 	.word	0x04c4b400

0800147c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff fe8d 	bl	80011aa <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	711a      	strb	r2, [r3, #4]
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f7ff fe86 	bl	80011be <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	f043 0204 	orr.w	r2, r3, #4
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff fe7c 	bl	80011d2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2201      	movs	r2, #1
 80014de:	711a      	strb	r2, [r3, #4]
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff ffce 	bl	80014e8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	711a      	strb	r2, [r3, #4]
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff ffc7 	bl	80014fc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	f043 0204 	orr.w	r2, r3, #4
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff ffbd 	bl	8001510 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2201      	movs	r2, #1
 800159a:	711a      	strb	r2, [r3, #4]
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e08d      	b.n	80016d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_DMA_Init+0x138>)
 80015be:	429a      	cmp	r2, r3
 80015c0:	d80f      	bhi.n	80015e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <HAL_DMA_Init+0x13c>)
 80015ca:	4413      	add	r3, r2
 80015cc:	4a45      	ldr	r2, [pc, #276]	; (80016e4 <HAL_DMA_Init+0x140>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	009a      	lsls	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a42      	ldr	r2, [pc, #264]	; (80016e8 <HAL_DMA_Init+0x144>)
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
 80015e0:	e00e      	b.n	8001600 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b40      	ldr	r3, [pc, #256]	; (80016ec <HAL_DMA_Init+0x148>)
 80015ea:	4413      	add	r3, r2
 80015ec:	4a3d      	ldr	r2, [pc, #244]	; (80016e4 <HAL_DMA_Init+0x140>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	009a      	lsls	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a3c      	ldr	r2, [pc, #240]	; (80016f0 <HAL_DMA_Init+0x14c>)
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800161a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fa80 	bl	8001b58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001660:	d102      	bne.n	8001668 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800167c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d010      	beq.n	80016a8 <HAL_DMA_Init+0x104>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b04      	cmp	r3, #4
 800168c:	d80c      	bhi.n	80016a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 faa0 	bl	8001bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	e008      	b.n	80016ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40020407 	.word	0x40020407
 80016e0:	bffdfff8 	.word	0xbffdfff8
 80016e4:	cccccccd 	.word	0xcccccccd
 80016e8:	40020000 	.word	0x40020000
 80016ec:	bffdfbf8 	.word	0xbffdfbf8
 80016f0:	40020400 	.word	0x40020400

080016f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_DMA_Start_IT+0x20>
 8001710:	2302      	movs	r3, #2
 8001712:	e066      	b.n	80017e2 <HAL_DMA_Start_IT+0xee>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d155      	bne.n	80017d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0201 	bic.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 f9c4 	bl	8001ada <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	2b00      	cmp	r3, #0
 8001758:	d008      	beq.n	800176c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 020e 	orr.w	r2, r2, #14
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e00f      	b.n	800178c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0204 	bic.w	r2, r2, #4
 800177a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 020a 	orr.w	r2, r2, #10
 800178a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017a8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017c0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e005      	b.n	80017e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
 80017de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d008      	beq.n	8001814 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2204      	movs	r2, #4
 8001806:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e040      	b.n	8001896 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 020e 	bic.w	r2, r2, #14
 8001822:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001832:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f003 021c 	and.w	r2, r3, #28
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001860:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00c      	beq.n	8001884 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001878:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001882:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d005      	beq.n	80018c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2204      	movs	r2, #4
 80018be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e047      	b.n	8001956 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 020e 	bic.w	r2, r2, #14
 80018d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f003 021c 	and.w	r2, r3, #28
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	2101      	movs	r1, #1
 8001904:	fa01 f202 	lsl.w	r2, r1, r2
 8001908:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001912:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00c      	beq.n	8001936 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800192a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001934:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	4798      	blx	r3
    }
  }
  return status;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197c:	f003 031c 	and.w	r3, r3, #28
 8001980:	2204      	movs	r2, #4
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d026      	beq.n	80019da <HAL_DMA_IRQHandler+0x7a>
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b00      	cmp	r3, #0
 8001994:	d021      	beq.n	80019da <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0204 	bic.w	r2, r2, #4
 80019b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f003 021c 	and.w	r2, r3, #28
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	2104      	movs	r1, #4
 80019c2:	fa01 f202 	lsl.w	r2, r1, r2
 80019c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d071      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80019d8:	e06c      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f003 031c 	and.w	r3, r3, #28
 80019e2:	2202      	movs	r2, #2
 80019e4:	409a      	lsls	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d02e      	beq.n	8001a4c <HAL_DMA_IRQHandler+0xec>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d029      	beq.n	8001a4c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10b      	bne.n	8001a1e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 020a 	bic.w	r2, r2, #10
 8001a14:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f003 021c 	and.w	r2, r3, #28
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d038      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a4a:	e033      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f003 031c 	and.w	r3, r3, #28
 8001a54:	2208      	movs	r2, #8
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d02a      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x156>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d025      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 020e 	bic.w	r2, r2, #14
 8001a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f003 021c 	and.w	r2, r3, #28
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
}
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001acc:	b2db      	uxtb	r3, r3
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001af0:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d004      	beq.n	8001b04 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b02:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	f003 021c 	and.w	r2, r3, #28
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	2101      	movs	r1, #1
 8001b12:	fa01 f202 	lsl.w	r2, r1, r2
 8001b16:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d108      	bne.n	8001b3a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b38:	e007      	b.n	8001b4a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	60da      	str	r2, [r3, #12]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d80a      	bhi.n	8001b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b78:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6493      	str	r3, [r2, #72]	; 0x48
 8001b80:	e007      	b.n	8001b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	009a      	lsls	r2, r3, #2
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3b08      	subs	r3, #8
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40020407 	.word	0x40020407
 8001bc8:	4002081c 	.word	0x4002081c
 8001bcc:	cccccccd 	.word	0xcccccccd
 8001bd0:	40020880 	.word	0x40020880

08001bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bf6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2201      	movs	r2, #1
 8001c02:	409a      	lsls	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	1000823f 	.word	0x1000823f
 8001c18:	40020940 	.word	0x40020940

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2a:	e166      	b.n	8001efa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2101      	movs	r1, #1
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8158 	beq.w	8001ef4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d005      	beq.n	8001c5c <HAL_GPIO_Init+0x40>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d130      	bne.n	8001cbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c92:	2201      	movs	r2, #1
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	f003 0201 	and.w	r2, r3, #1
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d017      	beq.n	8001cfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d123      	bne.n	8001d4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	08da      	lsrs	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3208      	adds	r2, #8
 8001d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	6939      	ldr	r1, [r7, #16]
 8001d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0203 	and.w	r2, r3, #3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80b2 	beq.w	8001ef4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d90:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <HAL_GPIO_Init+0x2fc>)
 8001d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d94:	4a60      	ldr	r2, [pc, #384]	; (8001f18 <HAL_GPIO_Init+0x2fc>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d9c:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_GPIO_Init+0x2fc>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001da8:	4a5c      	ldr	r2, [pc, #368]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dd2:	d02b      	beq.n	8001e2c <HAL_GPIO_Init+0x210>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d025      	beq.n	8001e28 <HAL_GPIO_Init+0x20c>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a51      	ldr	r2, [pc, #324]	; (8001f24 <HAL_GPIO_Init+0x308>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d01f      	beq.n	8001e24 <HAL_GPIO_Init+0x208>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a50      	ldr	r2, [pc, #320]	; (8001f28 <HAL_GPIO_Init+0x30c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d019      	beq.n	8001e20 <HAL_GPIO_Init+0x204>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a4f      	ldr	r2, [pc, #316]	; (8001f2c <HAL_GPIO_Init+0x310>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_GPIO_Init+0x200>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a4e      	ldr	r2, [pc, #312]	; (8001f30 <HAL_GPIO_Init+0x314>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00d      	beq.n	8001e18 <HAL_GPIO_Init+0x1fc>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a4d      	ldr	r2, [pc, #308]	; (8001f34 <HAL_GPIO_Init+0x318>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d007      	beq.n	8001e14 <HAL_GPIO_Init+0x1f8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a4c      	ldr	r2, [pc, #304]	; (8001f38 <HAL_GPIO_Init+0x31c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d101      	bne.n	8001e10 <HAL_GPIO_Init+0x1f4>
 8001e0c:	2307      	movs	r3, #7
 8001e0e:	e00e      	b.n	8001e2e <HAL_GPIO_Init+0x212>
 8001e10:	2308      	movs	r3, #8
 8001e12:	e00c      	b.n	8001e2e <HAL_GPIO_Init+0x212>
 8001e14:	2306      	movs	r3, #6
 8001e16:	e00a      	b.n	8001e2e <HAL_GPIO_Init+0x212>
 8001e18:	2305      	movs	r3, #5
 8001e1a:	e008      	b.n	8001e2e <HAL_GPIO_Init+0x212>
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	e006      	b.n	8001e2e <HAL_GPIO_Init+0x212>
 8001e20:	2303      	movs	r3, #3
 8001e22:	e004      	b.n	8001e2e <HAL_GPIO_Init+0x212>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x212>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_GPIO_Init+0x212>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	f002 0203 	and.w	r2, r2, #3
 8001e34:	0092      	lsls	r2, r2, #2
 8001e36:	4093      	lsls	r3, r2
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e3e:	4937      	ldr	r1, [pc, #220]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e4c:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e70:	4a32      	ldr	r2, [pc, #200]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e9a:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eee:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f47f ae91 	bne.w	8001c2c <HAL_GPIO_Init+0x10>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	48000400 	.word	0x48000400
 8001f24:	48000800 	.word	0x48000800
 8001f28:	48000c00 	.word	0x48000c00
 8001f2c:	48001000 	.word	0x48001000
 8001f30:	48001400 	.word	0x48001400
 8001f34:	48001800 	.word	0x48001800
 8001f38:	48001c00 	.word	0x48001c00
 8001f3c:	40010400 	.word	0x40010400

08001f40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f4e:	e0c9      	b.n	80020e4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f50:	2201      	movs	r2, #1
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80bc 	beq.w	80020de <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001f66:	4a66      	ldr	r2, [pc, #408]	; (8002100 <HAL_GPIO_DeInit+0x1c0>)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f8e:	d02b      	beq.n	8001fe8 <HAL_GPIO_DeInit+0xa8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a5c      	ldr	r2, [pc, #368]	; (8002104 <HAL_GPIO_DeInit+0x1c4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d025      	beq.n	8001fe4 <HAL_GPIO_DeInit+0xa4>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a5b      	ldr	r2, [pc, #364]	; (8002108 <HAL_GPIO_DeInit+0x1c8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d01f      	beq.n	8001fe0 <HAL_GPIO_DeInit+0xa0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a5a      	ldr	r2, [pc, #360]	; (800210c <HAL_GPIO_DeInit+0x1cc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d019      	beq.n	8001fdc <HAL_GPIO_DeInit+0x9c>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a59      	ldr	r2, [pc, #356]	; (8002110 <HAL_GPIO_DeInit+0x1d0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <HAL_GPIO_DeInit+0x98>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a58      	ldr	r2, [pc, #352]	; (8002114 <HAL_GPIO_DeInit+0x1d4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_GPIO_DeInit+0x94>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a57      	ldr	r2, [pc, #348]	; (8002118 <HAL_GPIO_DeInit+0x1d8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <HAL_GPIO_DeInit+0x90>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a56      	ldr	r2, [pc, #344]	; (800211c <HAL_GPIO_DeInit+0x1dc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_GPIO_DeInit+0x8c>
 8001fc8:	2307      	movs	r3, #7
 8001fca:	e00e      	b.n	8001fea <HAL_GPIO_DeInit+0xaa>
 8001fcc:	2308      	movs	r3, #8
 8001fce:	e00c      	b.n	8001fea <HAL_GPIO_DeInit+0xaa>
 8001fd0:	2306      	movs	r3, #6
 8001fd2:	e00a      	b.n	8001fea <HAL_GPIO_DeInit+0xaa>
 8001fd4:	2305      	movs	r3, #5
 8001fd6:	e008      	b.n	8001fea <HAL_GPIO_DeInit+0xaa>
 8001fd8:	2304      	movs	r3, #4
 8001fda:	e006      	b.n	8001fea <HAL_GPIO_DeInit+0xaa>
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e004      	b.n	8001fea <HAL_GPIO_DeInit+0xaa>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e002      	b.n	8001fea <HAL_GPIO_DeInit+0xaa>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_GPIO_DeInit+0xaa>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	f002 0203 	and.w	r2, r2, #3
 8001ff0:	0092      	lsls	r2, r2, #2
 8001ff2:	4093      	lsls	r3, r2
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d132      	bne.n	8002060 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001ffa:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_GPIO_DeInit+0x1e0>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	4947      	ldr	r1, [pc, #284]	; (8002120 <HAL_GPIO_DeInit+0x1e0>)
 8002004:	4013      	ands	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002008:	4b45      	ldr	r3, [pc, #276]	; (8002120 <HAL_GPIO_DeInit+0x1e0>)
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	4943      	ldr	r1, [pc, #268]	; (8002120 <HAL_GPIO_DeInit+0x1e0>)
 8002012:	4013      	ands	r3, r2
 8002014:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002016:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_GPIO_DeInit+0x1e0>)
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	4940      	ldr	r1, [pc, #256]	; (8002120 <HAL_GPIO_DeInit+0x1e0>)
 8002020:	4013      	ands	r3, r2
 8002022:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002024:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <HAL_GPIO_DeInit+0x1e0>)
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	493c      	ldr	r1, [pc, #240]	; (8002120 <HAL_GPIO_DeInit+0x1e0>)
 800202e:	4013      	ands	r3, r2
 8002030:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002042:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <HAL_GPIO_DeInit+0x1c0>)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43da      	mvns	r2, r3
 8002052:	482b      	ldr	r0, [pc, #172]	; (8002100 <HAL_GPIO_DeInit+0x1c0>)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	400a      	ands	r2, r1
 800205a:	3302      	adds	r3, #2
 800205c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2103      	movs	r1, #3
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4019      	ands	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3208      	adds	r2, #8
 800209a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2103      	movs	r1, #3
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	401a      	ands	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	2101      	movs	r1, #1
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2103      	movs	r1, #3
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	401a      	ands	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f47f af2f 	bne.w	8001f50 <HAL_GPIO_DeInit+0x10>
  }
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40010000 	.word	0x40010000
 8002104:	48000400 	.word	0x48000400
 8002108:	48000800 	.word	0x48000800
 800210c:	48000c00 	.word	0x48000c00
 8002110:	48001000 	.word	0x48001000
 8002114:	48001400 	.word	0x48001400
 8002118:	48001800 	.word	0x48001800
 800211c:	48001c00 	.word	0x48001c00
 8002120:	40010400 	.word	0x40010400

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002140:	e002      	b.n	8002148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4013      	ands	r3, r2
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43d9      	mvns	r1, r3
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	400b      	ands	r3, r1
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f006 f8ee 	bl	8008388 <HAL_GPIO_EXTI_Callback>
  }
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40010400 	.word	0x40010400

080021b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e081      	b.n	80022ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f007 fef0 	bl	8009fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002208:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002218:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	e006      	b.n	8002240 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800223e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d104      	bne.n	8002252 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002250:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002264:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002274:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69d9      	ldr	r1, [r3, #28]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1a      	ldr	r2, [r3, #32]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e021      	b.n	800232c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2224      	movs	r2, #36	; 0x24
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f007 fecd 	bl	800a0a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	4608      	mov	r0, r1
 800233e:	4611      	mov	r1, r2
 8002340:	461a      	mov	r2, r3
 8002342:	4603      	mov	r3, r0
 8002344:	817b      	strh	r3, [r7, #10]
 8002346:	460b      	mov	r3, r1
 8002348:	813b      	strh	r3, [r7, #8]
 800234a:	4613      	mov	r3, r2
 800234c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b20      	cmp	r3, #32
 8002358:	f040 80f9 	bne.w	800254e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_I2C_Mem_Write+0x34>
 8002362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800236e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0ed      	b.n	8002550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Mem_Write+0x4e>
 800237e:	2302      	movs	r3, #2
 8002380:	e0e6      	b.n	8002550 <HAL_I2C_Mem_Write+0x21c>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800238a:	f7fe fc3d 	bl	8000c08 <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2319      	movs	r3, #25
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 ffd8 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0d1      	b.n	8002550 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2221      	movs	r2, #33	; 0x21
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023d4:	88f8      	ldrh	r0, [r7, #6]
 80023d6:	893a      	ldrh	r2, [r7, #8]
 80023d8:	8979      	ldrh	r1, [r7, #10]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	4603      	mov	r3, r0
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fb91 	bl	8002b0c <I2C_RequestMemoryWrite>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0a9      	b.n	8002550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d90e      	bls.n	8002424 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	22ff      	movs	r2, #255	; 0xff
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	b2da      	uxtb	r2, r3
 8002412:	8979      	ldrh	r1, [r7, #10]
 8002414:	2300      	movs	r3, #0
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f001 f941 	bl	80036a4 <I2C_TransferConfig>
 8002422:	e00f      	b.n	8002444 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	b2da      	uxtb	r2, r3
 8002434:	8979      	ldrh	r1, [r7, #10]
 8002436:	2300      	movs	r3, #0
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f001 f930 	bl	80036a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 ffc2 	bl	80033d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e07b      	b.n	8002550 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d034      	beq.n	80024fc <HAL_I2C_Mem_Write+0x1c8>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	2b00      	cmp	r3, #0
 8002498:	d130      	bne.n	80024fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	2200      	movs	r2, #0
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 ff54 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e04d      	b.n	8002550 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2bff      	cmp	r3, #255	; 0xff
 80024bc:	d90e      	bls.n	80024dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	22ff      	movs	r2, #255	; 0xff
 80024c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	8979      	ldrh	r1, [r7, #10]
 80024cc:	2300      	movs	r3, #0
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f001 f8e5 	bl	80036a4 <I2C_TransferConfig>
 80024da:	e00f      	b.n	80024fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	8979      	ldrh	r1, [r7, #10]
 80024ee:	2300      	movs	r3, #0
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f001 f8d4 	bl	80036a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d19e      	bne.n	8002444 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 ffa1 	bl	8003452 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e01a      	b.n	8002550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2220      	movs	r2, #32
 8002520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_I2C_Mem_Write+0x224>)
 800252e:	400b      	ands	r3, r1
 8002530:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	fe00e800 	.word	0xfe00e800

0800255c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	4608      	mov	r0, r1
 8002566:	4611      	mov	r1, r2
 8002568:	461a      	mov	r2, r3
 800256a:	4603      	mov	r3, r0
 800256c:	817b      	strh	r3, [r7, #10]
 800256e:	460b      	mov	r3, r1
 8002570:	813b      	strh	r3, [r7, #8]
 8002572:	4613      	mov	r3, r2
 8002574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b20      	cmp	r3, #32
 8002580:	f040 80fd 	bne.w	800277e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_I2C_Mem_Read+0x34>
 800258a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002596:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0f1      	b.n	8002780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_I2C_Mem_Read+0x4e>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e0ea      	b.n	8002780 <HAL_I2C_Mem_Read+0x224>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025b2:	f7fe fb29 	bl	8000c08 <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2319      	movs	r3, #25
 80025be:	2201      	movs	r2, #1
 80025c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fec4 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0d5      	b.n	8002780 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2222      	movs	r2, #34	; 0x22
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a3a      	ldr	r2, [r7, #32]
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025fc:	88f8      	ldrh	r0, [r7, #6]
 80025fe:	893a      	ldrh	r2, [r7, #8]
 8002600:	8979      	ldrh	r1, [r7, #10]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	4603      	mov	r3, r0
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fad1 	bl	8002bb4 <I2C_RequestMemoryRead>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0ad      	b.n	8002780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d90e      	bls.n	800264c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	b2da      	uxtb	r2, r3
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	4b52      	ldr	r3, [pc, #328]	; (8002788 <HAL_I2C_Mem_Read+0x22c>)
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f001 f82d 	bl	80036a4 <I2C_TransferConfig>
 800264a:	e00f      	b.n	800266c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	b2da      	uxtb	r2, r3
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	4b4a      	ldr	r3, [pc, #296]	; (8002788 <HAL_I2C_Mem_Read+0x22c>)
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f001 f81c 	bl	80036a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	2200      	movs	r2, #0
 8002674:	2104      	movs	r1, #4
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fe6b 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07c      	b.n	8002780 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d034      	beq.n	800272c <HAL_I2C_Mem_Read+0x1d0>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d130      	bne.n	800272c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	2200      	movs	r2, #0
 80026d2:	2180      	movs	r1, #128	; 0x80
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fe3c 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e04d      	b.n	8002780 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2bff      	cmp	r3, #255	; 0xff
 80026ec:	d90e      	bls.n	800270c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	22ff      	movs	r2, #255	; 0xff
 80026f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	8979      	ldrh	r1, [r7, #10]
 80026fc:	2300      	movs	r3, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 ffcd 	bl	80036a4 <I2C_TransferConfig>
 800270a:	e00f      	b.n	800272c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	b2da      	uxtb	r2, r3
 800271c:	8979      	ldrh	r1, [r7, #10]
 800271e:	2300      	movs	r3, #0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 ffbc 	bl	80036a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d19a      	bne.n	800266c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fe89 	bl	8003452 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e01a      	b.n	8002780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2220      	movs	r2, #32
 8002750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_I2C_Mem_Read+0x230>)
 800275e:	400b      	ands	r3, r1
 8002760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	80002400 	.word	0x80002400
 800278c:	fe00e800 	.word	0xfe00e800

08002790 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	68f9      	ldr	r1, [r7, #12]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
  }
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	09db      	lsrs	r3, r3, #7
 80027ec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002808:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	0a9b      	lsrs	r3, r3, #10
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	09db      	lsrs	r3, r3, #7
 800281a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f043 0208 	orr.w	r2, r3, #8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002836:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	0a5b      	lsrs	r3, r3, #9
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	09db      	lsrs	r3, r3, #7
 8002848:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f043 0202 	orr.w	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002864:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 030b 	and.w	r3, r3, #11
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fc31 	bl	80030e0 <I2C_ITError>
  }
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	70fb      	strb	r3, [r7, #3]
 80028ba:	4613      	mov	r3, r2
 80028bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <I2C_Slave_ISR_IT+0x24>
 8002926:	2302      	movs	r3, #2
 8002928:	e0ec      	b.n	8002b04 <I2C_Slave_ISR_IT+0x1fe>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800294a:	6939      	ldr	r1, [r7, #16]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fa67 	bl	8002e20 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d04d      	beq.n	80029fa <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002966:	2b00      	cmp	r3, #0
 8002968:	d047      	beq.n	80029fa <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d128      	bne.n	80029c6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b28      	cmp	r3, #40	; 0x28
 800297e:	d108      	bne.n	8002992 <I2C_Slave_ISR_IT+0x8c>
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002986:	d104      	bne.n	8002992 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002988:	6939      	ldr	r1, [r7, #16]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fb52 	bl	8003034 <I2C_ITListenCplt>
 8002990:	e032      	b.n	80029f8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b29      	cmp	r3, #41	; 0x29
 800299c:	d10e      	bne.n	80029bc <I2C_Slave_ISR_IT+0xb6>
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029a4:	d00a      	beq.n	80029bc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2210      	movs	r2, #16
 80029ac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fc8d 	bl	80032ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f9d5 	bl	8002d64 <I2C_ITSlaveSeqCplt>
 80029ba:	e01d      	b.n	80029f8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2210      	movs	r2, #16
 80029c2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80029c4:	e096      	b.n	8002af4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2210      	movs	r2, #16
 80029cc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f043 0204 	orr.w	r2, r3, #4
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <I2C_Slave_ISR_IT+0xe4>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e6:	f040 8085 	bne.w	8002af4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4619      	mov	r1, r3
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fb75 	bl	80030e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80029f6:	e07d      	b.n	8002af4 <I2C_Slave_ISR_IT+0x1ee>
 80029f8:	e07c      	b.n	8002af4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d030      	beq.n	8002a68 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d02a      	beq.n	8002a68 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d018      	beq.n	8002a4e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d14f      	bne.n	8002af8 <I2C_Slave_ISR_IT+0x1f2>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a5e:	d04b      	beq.n	8002af8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f97f 	bl	8002d64 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002a66:	e047      	b.n	8002af8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	08db      	lsrs	r3, r3, #3
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	08db      	lsrs	r3, r3, #3
 8002a78:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002a80:	6939      	ldr	r1, [r7, #16]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f8ea 	bl	8002c5c <I2C_ITAddrCplt>
 8002a88:	e037      	b.n	8002afa <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	085b      	lsrs	r3, r3, #1
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d031      	beq.n	8002afa <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d02b      	beq.n	8002afa <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d018      	beq.n	8002ade <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
 8002adc:	e00d      	b.n	8002afa <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae4:	d002      	beq.n	8002aec <I2C_Slave_ISR_IT+0x1e6>
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d106      	bne.n	8002afa <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f939 	bl	8002d64 <I2C_ITSlaveSeqCplt>
 8002af2:	e002      	b.n	8002afa <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002af4:	bf00      	nop
 8002af6:	e000      	b.n	8002afa <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002af8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	4608      	mov	r0, r1
 8002b16:	4611      	mov	r1, r2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	817b      	strh	r3, [r7, #10]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	813b      	strh	r3, [r7, #8]
 8002b22:	4613      	mov	r3, r2
 8002b24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	8979      	ldrh	r1, [r7, #10]
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <I2C_RequestMemoryWrite+0xa4>)
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fdb5 	bl	80036a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	69b9      	ldr	r1, [r7, #24]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fc47 	bl	80033d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e02c      	b.n	8002ba8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d105      	bne.n	8002b60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b54:	893b      	ldrh	r3, [r7, #8]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b5e:	e015      	b.n	8002b8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b60:	893b      	ldrh	r3, [r7, #8]
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	69b9      	ldr	r1, [r7, #24]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fc2d 	bl	80033d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e012      	b.n	8002ba8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b82:	893b      	ldrh	r3, [r7, #8]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2200      	movs	r2, #0
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fbdb 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	80002000 	.word	0x80002000

08002bb4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	813b      	strh	r3, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	8979      	ldrh	r1, [r7, #10]
 8002bd4:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <I2C_RequestMemoryRead+0xa4>)
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fd62 	bl	80036a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	69b9      	ldr	r1, [r7, #24]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fbf4 	bl	80033d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e02c      	b.n	8002c4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfa:	893b      	ldrh	r3, [r7, #8]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
 8002c04:	e015      	b.n	8002c32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c06:	893b      	ldrh	r3, [r7, #8]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fbda 	bl	80033d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e012      	b.n	8002c4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c28:	893b      	ldrh	r3, [r7, #8]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2140      	movs	r1, #64	; 0x40
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fb88 	bl	8003352 <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	80002000 	.word	0x80002000

08002c5c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c72:	2b28      	cmp	r3, #40	; 0x28
 8002c74:	d16a      	bne.n	8002d4c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c94:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002cb0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d138      	bne.n	8002d2c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002cba:	897b      	ldrh	r3, [r7, #10]
 8002cbc:	09db      	lsrs	r3, r3, #7
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	89bb      	ldrh	r3, [r7, #12]
 8002cc2:	4053      	eors	r3, r2
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f003 0306 	and.w	r3, r3, #6
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11c      	bne.n	8002d08 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d13b      	bne.n	8002d5c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2208      	movs	r2, #8
 8002cf0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cfa:	89ba      	ldrh	r2, [r7, #12]
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff fdd4 	bl	80028ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d06:	e029      	b.n	8002d5c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002d08:	893b      	ldrh	r3, [r7, #8]
 8002d0a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fcf9 	bl	8003708 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d1e:	89ba      	ldrh	r2, [r7, #12]
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	4619      	mov	r1, r3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fdc2 	bl	80028ae <HAL_I2C_AddrCallback>
}
 8002d2a:	e017      	b.n	8002d5c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fce9 	bl	8003708 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d3e:	89ba      	ldrh	r2, [r7, #12]
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fdb2 	bl	80028ae <HAL_I2C_AddrCallback>
}
 8002d4a:	e007      	b.n	8002d5c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2208      	movs	r2, #8
 8002d52:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	0b9b      	lsrs	r3, r3, #14
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e00d      	b.n	8002db6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	0bdb      	lsrs	r3, r3, #15
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b29      	cmp	r3, #41	; 0x29
 8002dc0:	d112      	bne.n	8002de8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2228      	movs	r2, #40	; 0x28
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2221      	movs	r2, #33	; 0x21
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fc98 	bl	8003708 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff fd50 	bl	8002886 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002de6:	e017      	b.n	8002e18 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b2a      	cmp	r3, #42	; 0x2a
 8002df2:	d111      	bne.n	8002e18 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2228      	movs	r2, #40	; 0x28
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2222      	movs	r2, #34	; 0x22
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e02:	2102      	movs	r1, #2
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fc7f 	bl	8003708 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fd41 	bl	800289a <HAL_I2C_SlaveRxCpltCallback>
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2220      	movs	r2, #32
 8002e44:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2b21      	cmp	r3, #33	; 0x21
 8002e4a:	d002      	beq.n	8002e52 <I2C_ITSlaveCplt+0x32>
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b29      	cmp	r3, #41	; 0x29
 8002e50:	d108      	bne.n	8002e64 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002e52:	f248 0101 	movw	r1, #32769	; 0x8001
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fc56 	bl	8003708 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2221      	movs	r2, #33	; 0x21
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
 8002e62:	e00d      	b.n	8002e80 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b22      	cmp	r3, #34	; 0x22
 8002e68:	d002      	beq.n	8002e70 <I2C_ITSlaveCplt+0x50>
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e6e:	d107      	bne.n	8002e80 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002e70:	f248 0102 	movw	r1, #32770	; 0x8002
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fc47 	bl	8003708 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2222      	movs	r2, #34	; 0x22
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6859      	ldr	r1, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b64      	ldr	r3, [pc, #400]	; (800302c <I2C_ITSlaveCplt+0x20c>)
 8002e9c:	400b      	ands	r3, r1
 8002e9e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fa14 	bl	80032ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	0b9b      	lsrs	r3, r3, #14
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d013      	beq.n	8002eda <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ec0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d020      	beq.n	8002f0c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ed8:	e018      	b.n	8002f0c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	0bdb      	lsrs	r3, r3, #15
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d012      	beq.n	8002f0c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ef4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d006      	beq.n	8002f0c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f023 0304 	bic.w	r3, r3, #4
 8002f1e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00c      	beq.n	8002f5a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	f043 0204 	orr.w	r2, r3, #4
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d010      	beq.n	8002fa8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f8a7 	bl	80030e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b28      	cmp	r3, #40	; 0x28
 8002f9c:	d141      	bne.n	8003022 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f9e:	6979      	ldr	r1, [r7, #20]
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f847 	bl	8003034 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fa6:	e03c      	b.n	8003022 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fb0:	d014      	beq.n	8002fdc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fed6 	bl	8002d64 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <I2C_ITSlaveCplt+0x210>)
 8002fbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fc78 	bl	80028ca <HAL_I2C_ListenCpltCallback>
}
 8002fda:	e022      	b.n	8003022 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b22      	cmp	r3, #34	; 0x22
 8002fe6:	d10e      	bne.n	8003006 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fc4b 	bl	800289a <HAL_I2C_SlaveRxCpltCallback>
}
 8003004:	e00d      	b.n	8003022 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff fc32 	bl	8002886 <HAL_I2C_SlaveTxCpltCallback>
}
 8003022:	bf00      	nop
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	fe00e800 	.word	0xfe00e800
 8003030:	ffff0000 	.word	0xffff0000

08003034 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a26      	ldr	r2, [pc, #152]	; (80030dc <I2C_ITListenCplt+0xa8>)
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	089b      	lsrs	r3, r3, #2
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d022      	beq.n	80030b2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	2b00      	cmp	r3, #0
 800308a:	d012      	beq.n	80030b2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0204 	orr.w	r2, r3, #4
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030b2:	f248 0103 	movw	r1, #32771	; 0x8003
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fb26 	bl	8003708 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2210      	movs	r2, #16
 80030c2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fbfc 	bl	80028ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	ffff0000 	.word	0xffff0000

080030e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a5d      	ldr	r2, [pc, #372]	; (8003274 <I2C_ITError+0x194>)
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b28      	cmp	r3, #40	; 0x28
 8003116:	d005      	beq.n	8003124 <I2C_ITError+0x44>
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b29      	cmp	r3, #41	; 0x29
 800311c:	d002      	beq.n	8003124 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	2b2a      	cmp	r3, #42	; 0x2a
 8003122:	d10b      	bne.n	800313c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003124:	2103      	movs	r1, #3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 faee 	bl	8003708 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2228      	movs	r2, #40	; 0x28
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a50      	ldr	r2, [pc, #320]	; (8003278 <I2C_ITError+0x198>)
 8003138:	635a      	str	r2, [r3, #52]	; 0x34
 800313a:	e011      	b.n	8003160 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800313c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fae1 	bl	8003708 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b60      	cmp	r3, #96	; 0x60
 8003150:	d003      	beq.n	800315a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d039      	beq.n	80031e2 <I2C_ITError+0x102>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b11      	cmp	r3, #17
 8003172:	d002      	beq.n	800317a <I2C_ITError+0x9a>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b21      	cmp	r3, #33	; 0x21
 8003178:	d133      	bne.n	80031e2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003188:	d107      	bne.n	800319a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003198:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fc8d 	bl	8001abe <HAL_DMA_GetState>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d017      	beq.n	80031da <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	4a33      	ldr	r2, [pc, #204]	; (800327c <I2C_ITError+0x19c>)
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fe fb6f 	bl	80018a2 <HAL_DMA_Abort_IT>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d04d      	beq.n	8003266 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031d4:	4610      	mov	r0, r2
 80031d6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031d8:	e045      	b.n	8003266 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f850 	bl	8003280 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031e0:	e041      	b.n	8003266 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d039      	beq.n	800325e <I2C_ITError+0x17e>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b12      	cmp	r3, #18
 80031ee:	d002      	beq.n	80031f6 <I2C_ITError+0x116>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b22      	cmp	r3, #34	; 0x22
 80031f4:	d133      	bne.n	800325e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003204:	d107      	bne.n	8003216 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003214:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fc4f 	bl	8001abe <HAL_DMA_GetState>
 8003220:	4603      	mov	r3, r0
 8003222:	2b01      	cmp	r3, #1
 8003224:	d017      	beq.n	8003256 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	4a14      	ldr	r2, [pc, #80]	; (800327c <I2C_ITError+0x19c>)
 800322c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fb31 	bl	80018a2 <HAL_DMA_Abort_IT>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d011      	beq.n	800326a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003254:	e009      	b.n	800326a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f812 	bl	8003280 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800325c:	e005      	b.n	800326a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f80e 	bl	8003280 <I2C_TreatErrorCallback>
  }
}
 8003264:	e002      	b.n	800326c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003266:	bf00      	nop
 8003268:	e000      	b.n	800326c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800326a:	bf00      	nop
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	ffff0000 	.word	0xffff0000
 8003278:	08002907 	.word	0x08002907
 800327c:	08003317 	.word	0x08003317

08003280 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b60      	cmp	r3, #96	; 0x60
 8003292:	d10e      	bne.n	80032b2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff fb21 	bl	80028f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032b0:	e009      	b.n	80032c6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fb0c 	bl	80028de <HAL_I2C_ErrorCallback>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d103      	bne.n	80032ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2200      	movs	r2, #0
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d007      	beq.n	800330a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	619a      	str	r2, [r3, #24]
  }
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	2200      	movs	r2, #0
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003340:	2200      	movs	r2, #0
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff ff9b 	bl	8003280 <I2C_TreatErrorCallback>
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003362:	e022      	b.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d01e      	beq.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336c:	f7fd fc4c 	bl	8000c08 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d302      	bcc.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x30>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d113      	bne.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e00f      	b.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4013      	ands	r3, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d0cd      	beq.n	8003364 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033de:	e02c      	b.n	800343a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f871 	bl	80034cc <I2C_IsErrorOccurred>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e02a      	b.n	800344a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fa:	d01e      	beq.n	800343a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fc:	f7fd fc04 	bl	8000c08 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d302      	bcc.n	8003412 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d113      	bne.n	800343a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e007      	b.n	800344a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d1cb      	bne.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800345e:	e028      	b.n	80034b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f831 	bl	80034cc <I2C_IsErrorOccurred>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e026      	b.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003474:	f7fd fbc8 	bl	8000c08 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d302      	bcc.n	800348a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d113      	bne.n	80034b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e007      	b.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d1cf      	bne.n	8003460 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d075      	beq.n	80035e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2210      	movs	r2, #16
 80034fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003500:	e056      	b.n	80035b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d052      	beq.n	80035b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800350a:	f7fd fb7d 	bl	8000c08 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <I2C_IsErrorOccurred+0x54>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d147      	bne.n	80035b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003532:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800353e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003542:	d12e      	bne.n	80035a2 <I2C_IsErrorOccurred+0xd6>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800354a:	d02a      	beq.n	80035a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b20      	cmp	r3, #32
 8003550:	d027      	beq.n	80035a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003560:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003562:	f7fd fb51 	bl	8000c08 <HAL_GetTick>
 8003566:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003568:	e01b      	b.n	80035a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800356a:	f7fd fb4d 	bl	8000c08 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b19      	cmp	r3, #25
 8003576:	d914      	bls.n	80035a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d1dc      	bne.n	800356a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d003      	beq.n	80035c6 <I2C_IsErrorOccurred+0xfa>
 80035be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d09d      	beq.n	8003502 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2220      	movs	r2, #32
 80035d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	f043 0304 	orr.w	r3, r3, #4
 80035dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003606:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f043 0308 	orr.w	r3, r3, #8
 800361e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003628:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	f043 0302 	orr.w	r3, r3, #2
 8003640:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01c      	beq.n	8003694 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f7ff fe37 	bl	80032ce <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6859      	ldr	r1, [r3, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <I2C_IsErrorOccurred+0x1d4>)
 800366c:	400b      	ands	r3, r1
 800366e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	431a      	orrs	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003698:	4618      	mov	r0, r3
 800369a:	3728      	adds	r7, #40	; 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	fe00e800 	.word	0xfe00e800

080036a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	460b      	mov	r3, r1
 80036b0:	817b      	strh	r3, [r7, #10]
 80036b2:	4613      	mov	r3, r2
 80036b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036b6:	897b      	ldrh	r3, [r7, #10]
 80036b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036bc:	7a7b      	ldrb	r3, [r7, #9]
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	0d5b      	lsrs	r3, r3, #21
 80036de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <I2C_TransferConfig+0x60>)
 80036e4:	430b      	orrs	r3, r1
 80036e6:	43db      	mvns	r3, r3
 80036e8:	ea02 0103 	and.w	r1, r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	03ff63ff 	.word	0x03ff63ff

08003708 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00f      	beq.n	8003742 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003728:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003736:	2b28      	cmp	r3, #40	; 0x28
 8003738:	d003      	beq.n	8003742 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003740:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00f      	beq.n	800376c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003752:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003760:	2b28      	cmp	r3, #40	; 0x28
 8003762:	d003      	beq.n	800376c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800376a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800376c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003770:	2b00      	cmp	r3, #0
 8003772:	da03      	bge.n	800377c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800377a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800377c:	887b      	ldrh	r3, [r7, #2]
 800377e:	2b10      	cmp	r3, #16
 8003780:	d103      	bne.n	800378a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003788:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	2b20      	cmp	r3, #32
 800378e:	d103      	bne.n	8003798 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f043 0320 	orr.w	r3, r3, #32
 8003796:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003798:	887b      	ldrh	r3, [r7, #2]
 800379a:	2b40      	cmp	r3, #64	; 0x40
 800379c:	d103      	bne.n	80037a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6819      	ldr	r1, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43da      	mvns	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	400a      	ands	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d138      	bne.n	800384c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e032      	b.n	800384e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2224      	movs	r2, #36	; 0x24
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6819      	ldr	r1, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b20      	cmp	r3, #32
 800386e:	d139      	bne.n	80038e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800387a:	2302      	movs	r3, #2
 800387c:	e033      	b.n	80038e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2224      	movs	r2, #36	; 0x24
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003900:	f7fd f982 	bl	8000c08 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	e092      	b.n	8003a38 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	2b00      	cmp	r3, #0
 800391e:	f040 808b 	bne.w	8003a38 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f006 fbe6 	bl	800a0f4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003928:	f241 3188 	movw	r1, #5000	; 0x1388
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fad0 	bl	8003ed2 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	4b42      	ldr	r3, [pc, #264]	; (8003a44 <HAL_OSPI_Init+0x150>)
 800393a:	4013      	ands	r3, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	68d1      	ldr	r1, [r2, #12]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6912      	ldr	r2, [r2, #16]
 8003944:	3a01      	subs	r2, #1
 8003946:	0412      	lsls	r2, r2, #16
 8003948:	4311      	orrs	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6952      	ldr	r2, [r2, #20]
 800394e:	3a01      	subs	r2, #1
 8003950:	0212      	lsls	r2, r2, #8
 8003952:	4311      	orrs	r1, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003958:	4311      	orrs	r1, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	69d2      	ldr	r2, [r2, #28]
 800395e:	4311      	orrs	r1, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	430b      	orrs	r3, r1
 8003966:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	0412      	lsls	r2, r2, #16
 8003972:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	021a      	lsls	r2, r3, #8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	2120      	movs	r1, #32
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fddc 	bl	8004558 <OSPI_WaitFlagStateUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d146      	bne.n	8003a38 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	1e5a      	subs	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039e0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d107      	bne.n	8003a20 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0202 	orr.w	r2, r2, #2
 8003a1e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a28:	d103      	bne.n	8003a32 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	645a      	str	r2, [r3, #68]	; 0x44
 8003a30:	e002      	b.n	8003a38 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	f8e0f8f4 	.word	0xf8e0f8f4

08003a48 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e015      	b.n	8003a8c <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0202 	bic.w	r2, r2, #2
 8003a7e:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f006 fba3 	bl	800a1cc <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b08a      	sub	sp, #40	; 0x28
 8003a9a:	af02      	add	r7, sp, #8
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003aa2:	f7fd f8b1 	bl	8000c08 <HAL_GetTick>
 8003aa6:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d104      	bne.n	8003ac4 <HAL_OSPI_Command+0x2e>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac2:	d10d      	bne.n	8003ae0 <HAL_OSPI_Command+0x4a>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b14      	cmp	r3, #20
 8003ac8:	d103      	bne.n	8003ad2 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d006      	beq.n	8003ae0 <HAL_OSPI_Command+0x4a>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b24      	cmp	r3, #36	; 0x24
 8003ad6:	d153      	bne.n	8003b80 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d14f      	bne.n	8003b80 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2120      	movs	r1, #32
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fd34 	bl	8004558 <OSPI_WaitFlagStateUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003af4:	7ffb      	ldrb	r3, [r7, #31]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d148      	bne.n	8003b8c <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fd60 	bl	80045c8 <OSPI_ConfigCmd>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003b0c:	7ffb      	ldrb	r3, [r7, #31]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d13c      	bne.n	8003b8c <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10e      	bne.n	8003b38 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2201      	movs	r2, #1
 8003b22:	2102      	movs	r1, #2
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fd17 	bl	8004558 <OSPI_WaitFlagStateUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2202      	movs	r2, #2
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003b36:	e029      	b.n	8003b8c <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d103      	bne.n	8003b48 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2204      	movs	r2, #4
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003b46:	e021      	b.n	8003b8c <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d10b      	bne.n	8003b68 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b54:	2b24      	cmp	r3, #36	; 0x24
 8003b56:	d103      	bne.n	8003b60 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003b5e:	e015      	b.n	8003b8c <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2214      	movs	r2, #20
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003b66:	e011      	b.n	8003b8c <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	2b14      	cmp	r3, #20
 8003b6e:	d103      	bne.n	8003b78 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2204      	movs	r2, #4
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003b76:	e009      	b.n	8003b8c <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2224      	movs	r2, #36	; 0x24
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003b7e:	e005      	b.n	8003b8c <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2210      	movs	r2, #16
 8003b88:	649a      	str	r2, [r3, #72]	; 0x48
 8003b8a:	e000      	b.n	8003b8e <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8003b8c:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003b8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7fd f830 	bl	8000c08 <HAL_GetTick>
 8003ba8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3350      	adds	r3, #80	; 0x50
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	649a      	str	r2, [r3, #72]	; 0x48
 8003bc2:	e057      	b.n	8003c74 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d14e      	bne.n	8003c6a <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bf4:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	2104      	movs	r1, #4
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fca9 	bl	8004558 <OSPI_WaitFlagStateUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003c0a:	7ffb      	ldrb	r3, [r7, #31]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d113      	bne.n	8003c38 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	1e5a      	subs	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1df      	bne.n	8003bf6 <HAL_OSPI_Transmit+0x5e>
 8003c36:	e000      	b.n	8003c3a <HAL_OSPI_Transmit+0xa2>
          break;
 8003c38:	bf00      	nop

      if (status == HAL_OK)
 8003c3a:	7ffb      	ldrb	r3, [r7, #31]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d119      	bne.n	8003c74 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2201      	movs	r2, #1
 8003c48:	2102      	movs	r1, #2
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fc84 	bl	8004558 <OSPI_WaitFlagStateUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003c54:	7ffb      	ldrb	r3, [r7, #31]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10c      	bne.n	8003c74 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2202      	movs	r2, #2
 8003c66:	645a      	str	r2, [r3, #68]	; 0x44
 8003c68:	e004      	b.n	8003c74 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2210      	movs	r2, #16
 8003c72:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003c74:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b08c      	sub	sp, #48	; 0x30
 8003c82:	af02      	add	r7, sp, #8
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c8a:	f7fc ffbd 	bl	8000c08 <HAL_GetTick>
 8003c8e:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3350      	adds	r3, #80	; 0x50
 8003c96:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9e:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003ca8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	649a      	str	r2, [r3, #72]	; 0x48
 8003cbc:	e07c      	b.n	8003db8 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d172      	bne.n	8003dac <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cfc:	d104      	bne.n	8003d08 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	649a      	str	r2, [r3, #72]	; 0x48
 8003d06:	e011      	b.n	8003d2c <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d004      	beq.n	8003d22 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	649a      	str	r2, [r3, #72]	; 0x48
 8003d20:	e004      	b.n	8003d2c <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	2201      	movs	r2, #1
 8003d34:	2106      	movs	r1, #6
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fc0e 	bl	8004558 <OSPI_WaitFlagStateUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8003d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d114      	bne.n	8003d74 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1dc      	bne.n	8003d2c <HAL_OSPI_Receive+0xae>
 8003d72:	e000      	b.n	8003d76 <HAL_OSPI_Receive+0xf8>
          break;
 8003d74:	bf00      	nop

      if (status == HAL_OK)
 8003d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11c      	bne.n	8003db8 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	2201      	movs	r2, #1
 8003d86:	2102      	movs	r1, #2
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fbe5 	bl	8004558 <OSPI_WaitFlagStateUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8003d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10d      	bne.n	8003db8 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2202      	movs	r2, #2
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2202      	movs	r2, #2
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
 8003daa:	e005      	b.n	8003db8 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2210      	movs	r2, #16
 8003db6:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3728      	adds	r7, #40	; 0x28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7fc ff1a 	bl	8000c08 <HAL_GetTick>
 8003dd4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ddc:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003de6:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d164      	bne.n	8003eba <HAL_OSPI_AutoPolling+0xf6>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df8:	d15f      	bne.n	8003eba <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	2200      	movs	r2, #0
 8003e02:	2120      	movs	r1, #32
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 fba7 	bl	8004558 <OSPI_WaitFlagStateUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003e0e:	7ffb      	ldrb	r3, [r7, #31]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d158      	bne.n	8003ec6 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	6852      	ldr	r2, [r2, #4]
 8003e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	6912      	ldr	r2, [r2, #16]
 8003e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6899      	ldr	r1, [r3, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003e56:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e60:	d104      	bne.n	8003e6c <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	649a      	str	r2, [r3, #72]	; 0x48
 8003e6a:	e011      	b.n	8003e90 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	649a      	str	r2, [r3, #72]	; 0x48
 8003e84:	e004      	b.n	8003e90 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2201      	movs	r2, #1
 8003e98:	2108      	movs	r1, #8
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fb5c 	bl	8004558 <OSPI_WaitFlagStateUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003ea4:	7ffb      	ldrb	r3, [r7, #31]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10d      	bne.n	8003ec6 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2208      	movs	r2, #8
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003eb8:	e005      	b.n	8003ec6 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	649a      	str	r2, [r3, #72]	; 0x48
 8003ec4:	e000      	b.n	8003ec8 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8003ec6:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3720      	adds	r7, #32
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b092      	sub	sp, #72	; 0x48
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a08      	ldr	r2, [pc, #32]	; (8003f30 <HAL_OSPIM_Config+0x40>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d105      	bne.n	8003f1e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003f1c:	e004      	b.n	8003f28 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f2e:	e01f      	b.n	8003f70 <HAL_OSPIM_Config+0x80>
 8003f30:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003f34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f38:	3301      	adds	r3, #1
 8003f3a:	b2d8      	uxtb	r0, r3
 8003f3c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003f40:	f107 0114 	add.w	r1, r7, #20
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f000 fc9c 	bl	800488c <OSPIM_GetConfig>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2208      	movs	r2, #8
 8003f64:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d9dd      	bls.n	8003f34 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003f78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 82de 	bne.w	800453e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003f82:	4bc6      	ldr	r3, [pc, #792]	; (800429c <HAL_OSPIM_Config+0x3ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003f8e:	4bc3      	ldr	r3, [pc, #780]	; (800429c <HAL_OSPIM_Config+0x3ac>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4ac2      	ldr	r2, [pc, #776]	; (800429c <HAL_OSPIM_Config+0x3ac>)
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003f9a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003fa6:	4bbe      	ldr	r3, [pc, #760]	; (80042a0 <HAL_OSPIM_Config+0x3b0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003fb2:	4bbb      	ldr	r3, [pc, #748]	; (80042a0 <HAL_OSPIM_Config+0x3b0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4aba      	ldr	r2, [pc, #744]	; (80042a0 <HAL_OSPIM_Config+0x3b0>)
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003fbe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003fc2:	f043 0302 	orr.w	r3, r3, #2
 8003fc6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003fca:	49b6      	ldr	r1, [pc, #728]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 8003fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	3348      	adds	r3, #72	; 0x48
 8003fd8:	443b      	add	r3, r7
 8003fda:	3b2c      	subs	r3, #44	; 0x2c
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	48af      	ldr	r0, [pc, #700]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 8003fe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	3348      	adds	r3, #72	; 0x48
 8003ff4:	443b      	add	r3, r7
 8003ff6:	3b2c      	subs	r3, #44	; 0x2c
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4403      	add	r3, r0
 8004004:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	3348      	adds	r3, #72	; 0x48
 8004012:	443b      	add	r3, r7
 8004014:	3b34      	subs	r3, #52	; 0x34
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a1 	beq.w	8004160 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800401e:	49a1      	ldr	r1, [pc, #644]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 8004020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	3348      	adds	r3, #72	; 0x48
 800402c:	443b      	add	r3, r7
 800402e:	3b34      	subs	r3, #52	; 0x34
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3b01      	subs	r3, #1
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	6859      	ldr	r1, [r3, #4]
 800403a:	489a      	ldr	r0, [pc, #616]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 800403c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	3348      	adds	r3, #72	; 0x48
 8004048:	443b      	add	r3, r7
 800404a:	3b34      	subs	r3, #52	; 0x34
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3b01      	subs	r3, #1
 8004050:	f021 0201 	bic.w	r2, r1, #1
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4403      	add	r3, r0
 8004058:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800405a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	3348      	adds	r3, #72	; 0x48
 8004066:	443b      	add	r3, r7
 8004068:	3b30      	subs	r3, #48	; 0x30
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01d      	beq.n	80040ac <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004070:	498c      	ldr	r1, [pc, #560]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 8004072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	3348      	adds	r3, #72	; 0x48
 800407e:	443b      	add	r3, r7
 8004080:	3b30      	subs	r3, #48	; 0x30
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3b01      	subs	r3, #1
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	4885      	ldr	r0, [pc, #532]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 800408e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	3348      	adds	r3, #72	; 0x48
 800409a:	443b      	add	r3, r7
 800409c:	3b30      	subs	r3, #48	; 0x30
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	f021 0210 	bic.w	r2, r1, #16
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4403      	add	r3, r0
 80040aa:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80040ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	3348      	adds	r3, #72	; 0x48
 80040b8:	443b      	add	r3, r7
 80040ba:	3b28      	subs	r3, #40	; 0x28
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d021      	beq.n	8004106 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80040c2:	4978      	ldr	r1, [pc, #480]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 80040c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	3348      	adds	r3, #72	; 0x48
 80040d0:	443b      	add	r3, r7
 80040d2:	3b28      	subs	r3, #40	; 0x28
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	6859      	ldr	r1, [r3, #4]
 80040e2:	4870      	ldr	r0, [pc, #448]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 80040e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	3348      	adds	r3, #72	; 0x48
 80040f0:	443b      	add	r3, r7
 80040f2:	3b28      	subs	r3, #40	; 0x28
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4403      	add	r3, r0
 8004104:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004106:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	3348      	adds	r3, #72	; 0x48
 8004112:	443b      	add	r3, r7
 8004114:	3b24      	subs	r3, #36	; 0x24
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d021      	beq.n	8004160 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800411c:	4961      	ldr	r1, [pc, #388]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 800411e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	3348      	adds	r3, #72	; 0x48
 800412a:	443b      	add	r3, r7
 800412c:	3b24      	subs	r3, #36	; 0x24
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3b01      	subs	r3, #1
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	4859      	ldr	r0, [pc, #356]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 800413e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	3348      	adds	r3, #72	; 0x48
 800414a:	443b      	add	r3, r7
 800414c:	3b24      	subs	r3, #36	; 0x24
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3b01      	subs	r3, #1
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4403      	add	r3, r0
 800415e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	6819      	ldr	r1, [r3, #0]
 8004164:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	3348      	adds	r3, #72	; 0x48
 8004172:	443b      	add	r3, r7
 8004174:	3b34      	subs	r3, #52	; 0x34
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4299      	cmp	r1, r3
 800417a:	d038      	beq.n	80041ee <HAL_OSPIM_Config+0x2fe>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	3348      	adds	r3, #72	; 0x48
 800418e:	443b      	add	r3, r7
 8004190:	3b30      	subs	r3, #48	; 0x30
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4299      	cmp	r1, r3
 8004196:	d02a      	beq.n	80041ee <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6899      	ldr	r1, [r3, #8]
 800419c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	3348      	adds	r3, #72	; 0x48
 80041aa:	443b      	add	r3, r7
 80041ac:	3b2c      	subs	r3, #44	; 0x2c
 80041ae:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80041b0:	4299      	cmp	r1, r3
 80041b2:	d01c      	beq.n	80041ee <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	68d9      	ldr	r1, [r3, #12]
 80041b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	3348      	adds	r3, #72	; 0x48
 80041c6:	443b      	add	r3, r7
 80041c8:	3b28      	subs	r3, #40	; 0x28
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4299      	cmp	r1, r3
 80041ce:	d00e      	beq.n	80041ee <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	6919      	ldr	r1, [r3, #16]
 80041d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	3348      	adds	r3, #72	; 0x48
 80041e2:	443b      	add	r3, r7
 80041e4:	3b24      	subs	r3, #36	; 0x24
 80041e6:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80041e8:	4299      	cmp	r1, r3
 80041ea:	f040 80d3 	bne.w	8004394 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80041ee:	492d      	ldr	r1, [pc, #180]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 80041f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	3348      	adds	r3, #72	; 0x48
 80041fe:	443b      	add	r3, r7
 8004200:	3b34      	subs	r3, #52	; 0x34
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3b01      	subs	r3, #1
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	6859      	ldr	r1, [r3, #4]
 800420c:	4825      	ldr	r0, [pc, #148]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 800420e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	3348      	adds	r3, #72	; 0x48
 800421c:	443b      	add	r3, r7
 800421e:	3b34      	subs	r3, #52	; 0x34
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3b01      	subs	r3, #1
 8004224:	f021 0201 	bic.w	r2, r1, #1
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4403      	add	r3, r0
 800422c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800422e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	3348      	adds	r3, #72	; 0x48
 800423c:	443b      	add	r3, r7
 800423e:	3b30      	subs	r3, #48	; 0x30
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01f      	beq.n	8004286 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004246:	4917      	ldr	r1, [pc, #92]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 8004248:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	3348      	adds	r3, #72	; 0x48
 8004256:	443b      	add	r3, r7
 8004258:	3b30      	subs	r3, #48	; 0x30
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3b01      	subs	r3, #1
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	480f      	ldr	r0, [pc, #60]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 8004266:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	3348      	adds	r3, #72	; 0x48
 8004274:	443b      	add	r3, r7
 8004276:	3b30      	subs	r3, #48	; 0x30
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3b01      	subs	r3, #1
 800427c:	f021 0210 	bic.w	r2, r1, #16
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4403      	add	r3, r0
 8004284:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004286:	4907      	ldr	r1, [pc, #28]	; (80042a4 <HAL_OSPIM_Config+0x3b4>)
 8004288:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	3348      	adds	r3, #72	; 0x48
 8004296:	443b      	add	r3, r7
 8004298:	3b2c      	subs	r3, #44	; 0x2c
 800429a:	e005      	b.n	80042a8 <HAL_OSPIM_Config+0x3b8>
 800429c:	a0001000 	.word	0xa0001000
 80042a0:	a0001400 	.word	0xa0001400
 80042a4:	50061c00 	.word	0x50061c00
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	48a6      	ldr	r0, [pc, #664]	; (800454c <HAL_OSPIM_Config+0x65c>)
 80042b4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	3348      	adds	r3, #72	; 0x48
 80042c2:	443b      	add	r3, r7
 80042c4:	3b2c      	subs	r3, #44	; 0x2c
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4403      	add	r3, r0
 80042d2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80042d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	3348      	adds	r3, #72	; 0x48
 80042e2:	443b      	add	r3, r7
 80042e4:	3b28      	subs	r3, #40	; 0x28
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d023      	beq.n	8004334 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80042ec:	4997      	ldr	r1, [pc, #604]	; (800454c <HAL_OSPIM_Config+0x65c>)
 80042ee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3348      	adds	r3, #72	; 0x48
 80042fc:	443b      	add	r3, r7
 80042fe:	3b28      	subs	r3, #40	; 0x28
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3b01      	subs	r3, #1
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	488f      	ldr	r0, [pc, #572]	; (800454c <HAL_OSPIM_Config+0x65c>)
 8004310:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	3348      	adds	r3, #72	; 0x48
 800431e:	443b      	add	r3, r7
 8004320:	3b28      	subs	r3, #40	; 0x28
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3b01      	subs	r3, #1
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4403      	add	r3, r0
 8004332:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004334:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	3348      	adds	r3, #72	; 0x48
 8004342:	443b      	add	r3, r7
 8004344:	3b24      	subs	r3, #36	; 0x24
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d023      	beq.n	8004394 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800434c:	497f      	ldr	r1, [pc, #508]	; (800454c <HAL_OSPIM_Config+0x65c>)
 800434e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	3348      	adds	r3, #72	; 0x48
 800435c:	443b      	add	r3, r7
 800435e:	3b24      	subs	r3, #36	; 0x24
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3b01      	subs	r3, #1
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	4877      	ldr	r0, [pc, #476]	; (800454c <HAL_OSPIM_Config+0x65c>)
 8004370:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	3348      	adds	r3, #72	; 0x48
 800437e:	443b      	add	r3, r7
 8004380:	3b24      	subs	r3, #36	; 0x24
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3b01      	subs	r3, #1
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4403      	add	r3, r0
 8004392:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004394:	4a6d      	ldr	r2, [pc, #436]	; (800454c <HAL_OSPIM_Config+0x65c>)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	3b01      	subs	r3, #1
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a8:	025b      	lsls	r3, r3, #9
 80043aa:	431a      	orrs	r2, r3
 80043ac:	4967      	ldr	r1, [pc, #412]	; (800454c <HAL_OSPIM_Config+0x65c>)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80043be:	4a63      	ldr	r2, [pc, #396]	; (800454c <HAL_OSPIM_Config+0x65c>)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f023 0203 	bic.w	r2, r3, #3
 80043d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	431a      	orrs	r2, r3
 80043d6:	495d      	ldr	r1, [pc, #372]	; (800454c <HAL_OSPIM_Config+0x65c>)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3b01      	subs	r3, #1
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d014      	beq.n	800441a <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80043f0:	4a56      	ldr	r2, [pc, #344]	; (800454c <HAL_OSPIM_Config+0x65c>)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004404:	015b      	lsls	r3, r3, #5
 8004406:	431a      	orrs	r2, r3
 8004408:	4950      	ldr	r1, [pc, #320]	; (800454c <HAL_OSPIM_Config+0x65c>)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	f042 0210 	orr.w	r2, r2, #16
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d019      	beq.n	800445a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004426:	4a49      	ldr	r2, [pc, #292]	; (800454c <HAL_OSPIM_Config+0x65c>)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	3b01      	subs	r3, #1
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800443c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443e:	049b      	lsls	r3, r3, #18
 8004440:	431a      	orrs	r2, r3
 8004442:	4942      	ldr	r1, [pc, #264]	; (800454c <HAL_OSPIM_Config+0x65c>)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	3b01      	subs	r3, #1
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	e01c      	b.n	8004494 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d018      	beq.n	8004494 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004462:	4a3a      	ldr	r2, [pc, #232]	; (800454c <HAL_OSPIM_Config+0x65c>)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	3b01      	subs	r3, #1
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800447a:	069b      	lsls	r3, r3, #26
 800447c:	431a      	orrs	r2, r3
 800447e:	4933      	ldr	r1, [pc, #204]	; (800454c <HAL_OSPIM_Config+0x65c>)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	3b01      	subs	r3, #1
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d019      	beq.n	80044d4 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80044a0:	4a2a      	ldr	r2, [pc, #168]	; (800454c <HAL_OSPIM_Config+0x65c>)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b8:	049b      	lsls	r3, r3, #18
 80044ba:	431a      	orrs	r2, r3
 80044bc:	4923      	ldr	r1, [pc, #140]	; (800454c <HAL_OSPIM_Config+0x65c>)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	e01c      	b.n	800450e <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d018      	beq.n	800450e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80044dc:	4a1b      	ldr	r2, [pc, #108]	; (800454c <HAL_OSPIM_Config+0x65c>)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f4:	069b      	lsls	r3, r3, #26
 80044f6:	431a      	orrs	r2, r3
 80044f8:	4914      	ldr	r1, [pc, #80]	; (800454c <HAL_OSPIM_Config+0x65c>)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	3b01      	subs	r3, #1
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800450e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800451a:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <HAL_OSPIM_Config+0x660>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <HAL_OSPIM_Config+0x660>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004526:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d005      	beq.n	800453e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <HAL_OSPIM_Config+0x664>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a07      	ldr	r2, [pc, #28]	; (8004554 <HAL_OSPIM_Config+0x664>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800453e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004542:	4618      	mov	r0, r3
 8004544:	3748      	adds	r7, #72	; 0x48
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	50061c00 	.word	0x50061c00
 8004550:	a0001000 	.word	0xa0001000
 8004554:	a0001400 	.word	0xa0001400

08004558 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004568:	e01a      	b.n	80045a0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d016      	beq.n	80045a0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fc fb49 	bl	8000c08 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e00e      	b.n	80045be <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bf14      	ite	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	2300      	moveq	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1d6      	bne.n	800456a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b089      	sub	sp, #36	; 0x24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045e4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d114      	bne.n	8004636 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004614:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800461e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004628:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e013      	b.n	800465e <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800463e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004648:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004652:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800465c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004666:	431a      	orrs	r2, r3
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d012      	beq.n	800469a <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468c:	4319      	orrs	r1, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	430b      	orrs	r3, r1
 8004694:	431a      	orrs	r2, r3
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f023 021f 	bic.w	r2, r3, #31
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	431a      	orrs	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3a01      	subs	r2, #1
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8099 	beq.w	8004804 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d055      	beq.n	8004786 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01e      	beq.n	8004720 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b68      	ldr	r3, [pc, #416]	; (8004888 <OSPI_ConfigCmd+0x2c0>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	68d1      	ldr	r1, [r2, #12]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	6952      	ldr	r2, [r2, #20]
 80046f2:	4311      	orrs	r1, r2
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	6912      	ldr	r2, [r2, #16]
 80046f8:	4311      	orrs	r1, r2
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	69d2      	ldr	r2, [r2, #28]
 80046fe:	4311      	orrs	r1, r2
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004704:	4311      	orrs	r1, r2
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	6a12      	ldr	r2, [r2, #32]
 800470a:	4311      	orrs	r1, r2
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004710:	4311      	orrs	r1, r2
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004716:	430a      	orrs	r2, r1
 8004718:	431a      	orrs	r2, r3
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e028      	b.n	8004772 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	68d1      	ldr	r1, [r2, #12]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	6952      	ldr	r2, [r2, #20]
 8004734:	4311      	orrs	r1, r2
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	6912      	ldr	r2, [r2, #16]
 800473a:	4311      	orrs	r1, r2
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	69d2      	ldr	r2, [r2, #28]
 8004740:	4311      	orrs	r1, r2
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004746:	4311      	orrs	r1, r2
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	6a12      	ldr	r2, [r2, #32]
 800474c:	430a      	orrs	r2, r1
 800474e:	431a      	orrs	r2, r3
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800475c:	d109      	bne.n	8004772 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004762:	2b08      	cmp	r3, #8
 8004764:	d105      	bne.n	8004772 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	6992      	ldr	r2, [r2, #24]
 8004782:	649a      	str	r2, [r3, #72]	; 0x48
 8004784:	e078      	b.n	8004878 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	2b00      	cmp	r3, #0
 800478c:	d017      	beq.n	80047be <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004796:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	68d1      	ldr	r1, [r2, #12]
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	6952      	ldr	r2, [r2, #20]
 80047a2:	4311      	orrs	r1, r2
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	6912      	ldr	r2, [r2, #16]
 80047a8:	4311      	orrs	r1, r2
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047ae:	4311      	orrs	r1, r2
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047b4:	430a      	orrs	r2, r1
 80047b6:	431a      	orrs	r2, r3
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	e01d      	b.n	80047fa <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68d9      	ldr	r1, [r3, #12]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	4319      	orrs	r1, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	430b      	orrs	r3, r1
 80047d6:	431a      	orrs	r2, r3
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047e4:	d109      	bne.n	80047fa <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d105      	bne.n	80047fa <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e039      	b.n	8004878 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d030      	beq.n	800486e <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	2b00      	cmp	r3, #0
 8004812:	d017      	beq.n	8004844 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800481c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	69d1      	ldr	r1, [r2, #28]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004828:	4311      	orrs	r1, r2
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	6a12      	ldr	r2, [r2, #32]
 800482e:	4311      	orrs	r1, r2
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004834:	4311      	orrs	r1, r2
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800483a:	430a      	orrs	r2, r1
 800483c:	431a      	orrs	r2, r3
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e00e      	b.n	8004862 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	69d9      	ldr	r1, [r3, #28]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	4319      	orrs	r1, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	430b      	orrs	r3, r1
 800485c:	431a      	orrs	r2, r3
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	6992      	ldr	r2, [r2, #24]
 800486a:	649a      	str	r2, [r3, #72]	; 0x48
 800486c:	e004      	b.n	8004878 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2208      	movs	r2, #8
 8004876:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8004878:	7ffb      	ldrb	r3, [r7, #31]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3724      	adds	r7, #36	; 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	f0ffc0c0 	.word	0xf0ffc0c0

0800488c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	6039      	str	r1, [r7, #0]
 8004896:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <OSPIM_GetConfig+0x26>
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d802      	bhi.n	80048b2 <OSPIM_GetConfig+0x26>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
 80048b6:	e08e      	b.n	80049d6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2200      	movs	r2, #0
 80048c2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2200      	movs	r2, #0
 80048ce:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d101      	bne.n	80048e0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80048dc:	4b41      	ldr	r3, [pc, #260]	; (80049e4 <OSPIM_GetConfig+0x158>)
 80048de:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e074      	b.n	80049d0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80048e6:	4a40      	ldr	r2, [pc, #256]	; (80049e8 <OSPIM_GetConfig+0x15c>)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4053      	eors	r3, r2
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4053      	eors	r3, r2
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4053      	eors	r3, r2
 8004942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004946:	2b00      	cmp	r3, #0
 8004948:	d103      	bne.n	8004952 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d018      	beq.n	800498e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4053      	eors	r3, r2
 8004962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d111      	bne.n	800498e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3301      	adds	r3, #1
 8004978:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	60da      	str	r2, [r3, #12]
 8004980:	e005      	b.n	800498e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3301      	adds	r3, #1
 8004986:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d018      	beq.n	80049ca <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4053      	eors	r3, r2
 800499e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d111      	bne.n	80049ca <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d106      	bne.n	80049be <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	611a      	str	r2, [r3, #16]
 80049bc:	e005      	b.n	80049ca <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3301      	adds	r3, #1
 80049c2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3301      	adds	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d987      	bls.n	80048e6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	04040222 	.word	0x04040222
 80049e8:	50061c00 	.word	0x50061c00

080049ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <HAL_PWREx_GetVoltageRange+0x3c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fc:	d102      	bne.n	8004a04 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80049fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a02:	e00b      	b.n	8004a1c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a12:	d102      	bne.n	8004a1a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a18:	e000      	b.n	8004a1c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004a1a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40007000 	.word	0x40007000

08004a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d141      	bne.n	8004abe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a3a:	4b4b      	ldr	r3, [pc, #300]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a46:	d131      	bne.n	8004aac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a48:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a4e:	4a46      	ldr	r2, [pc, #280]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a58:	4b43      	ldr	r3, [pc, #268]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a60:	4a41      	ldr	r2, [pc, #260]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004a68:	4b40      	ldr	r3, [pc, #256]	; (8004b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2232      	movs	r2, #50	; 0x32
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	4a3f      	ldr	r2, [pc, #252]	; (8004b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	0c9b      	lsrs	r3, r3, #18
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a7e:	e002      	b.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a86:	4b38      	ldr	r3, [pc, #224]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a92:	d102      	bne.n	8004a9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f2      	bne.n	8004a80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a9a:	4b33      	ldr	r3, [pc, #204]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa6:	d158      	bne.n	8004b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e057      	b.n	8004b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aac:	4b2e      	ldr	r3, [pc, #184]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab2:	4a2d      	ldr	r2, [pc, #180]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004abc:	e04d      	b.n	8004b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac4:	d141      	bne.n	8004b4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ac6:	4b28      	ldr	r3, [pc, #160]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad2:	d131      	bne.n	8004b38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ad4:	4b24      	ldr	r3, [pc, #144]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ada:	4a23      	ldr	r2, [pc, #140]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ae4:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aec:	4a1e      	ldr	r2, [pc, #120]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004af2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2232      	movs	r2, #50	; 0x32
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	4a1c      	ldr	r2, [pc, #112]	; (8004b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	0c9b      	lsrs	r3, r3, #18
 8004b06:	3301      	adds	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b0a:	e002      	b.n	8004b12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1e:	d102      	bne.n	8004b26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f2      	bne.n	8004b0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b26:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b32:	d112      	bne.n	8004b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e011      	b.n	8004b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b48:	e007      	b.n	8004b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b52:	4a05      	ldr	r2, [pc, #20]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b58:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	20020528 	.word	0x20020528
 8004b70:	431bde83 	.word	0x431bde83

08004b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f000 bc08 	b.w	8005398 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b88:	4b96      	ldr	r3, [pc, #600]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b92:	4b94      	ldr	r3, [pc, #592]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80e4 	beq.w	8004d72 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x4c>
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	f040 808b 	bne.w	8004cce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	f040 8087 	bne.w	8004cce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bc0:	4b88      	ldr	r3, [pc, #544]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x64>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e3df      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1a      	ldr	r2, [r3, #32]
 8004bdc:	4b81      	ldr	r3, [pc, #516]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x7e>
 8004be8:	4b7e      	ldr	r3, [pc, #504]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	e005      	b.n	8004bfe <HAL_RCC_OscConfig+0x8a>
 8004bf2:	4b7c      	ldr	r3, [pc, #496]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d223      	bcs.n	8004c4a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fdfe 	bl	8005808 <RCC_SetFlashLatencyFromMSIRange>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e3c0      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c16:	4b73      	ldr	r3, [pc, #460]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a72      	ldr	r2, [pc, #456]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c1c:	f043 0308 	orr.w	r3, r3, #8
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	4b70      	ldr	r3, [pc, #448]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	496d      	ldr	r1, [pc, #436]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c34:	4b6b      	ldr	r3, [pc, #428]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	4968      	ldr	r1, [pc, #416]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	604b      	str	r3, [r1, #4]
 8004c48:	e025      	b.n	8004c96 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c4a:	4b66      	ldr	r3, [pc, #408]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a65      	ldr	r2, [pc, #404]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c50:	f043 0308 	orr.w	r3, r3, #8
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4b63      	ldr	r3, [pc, #396]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	4960      	ldr	r1, [pc, #384]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c68:	4b5e      	ldr	r3, [pc, #376]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	495b      	ldr	r1, [pc, #364]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fdbe 	bl	8005808 <RCC_SetFlashLatencyFromMSIRange>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e380      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c96:	f000 fcc1 	bl	800561c <HAL_RCC_GetSysClockFreq>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4b51      	ldr	r3, [pc, #324]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	4950      	ldr	r1, [pc, #320]	; (8004de8 <HAL_RCC_OscConfig+0x274>)
 8004ca8:	5ccb      	ldrb	r3, [r1, r3]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a4e      	ldr	r2, [pc, #312]	; (8004dec <HAL_RCC_OscConfig+0x278>)
 8004cb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cb6:	4b4e      	ldr	r3, [pc, #312]	; (8004df0 <HAL_RCC_OscConfig+0x27c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f005 fb2c 	bl	800a318 <HAL_InitTick>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d052      	beq.n	8004d70 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	e364      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d032      	beq.n	8004d3c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cd6:	4b43      	ldr	r3, [pc, #268]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a42      	ldr	r2, [pc, #264]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ce2:	f7fb ff91 	bl	8000c08 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cea:	f7fb ff8d 	bl	8000c08 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e34d      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cfc:	4b39      	ldr	r3, [pc, #228]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d08:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a35      	ldr	r2, [pc, #212]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004d0e:	f043 0308 	orr.w	r3, r3, #8
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	4b33      	ldr	r3, [pc, #204]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	4930      	ldr	r1, [pc, #192]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d26:	4b2f      	ldr	r3, [pc, #188]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	492b      	ldr	r1, [pc, #172]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	604b      	str	r3, [r1, #4]
 8004d3a:	e01a      	b.n	8004d72 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d3c:	4b29      	ldr	r3, [pc, #164]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a28      	ldr	r2, [pc, #160]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d48:	f7fb ff5e 	bl	8000c08 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d50:	f7fb ff5a 	bl	8000c08 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e31a      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x1dc>
 8004d6e:	e000      	b.n	8004d72 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d073      	beq.n	8004e66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_OscConfig+0x21c>
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d10e      	bne.n	8004da8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d10b      	bne.n	8004da8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d063      	beq.n	8004e64 <HAL_RCC_OscConfig+0x2f0>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d15f      	bne.n	8004e64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e2f7      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db0:	d106      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x24c>
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a0b      	ldr	r2, [pc, #44]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e025      	b.n	8004e0c <HAL_RCC_OscConfig+0x298>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dc8:	d114      	bne.n	8004df4 <HAL_RCC_OscConfig+0x280>
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a05      	ldr	r2, [pc, #20]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	4b03      	ldr	r3, [pc, #12]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a02      	ldr	r2, [pc, #8]	; (8004de4 <HAL_RCC_OscConfig+0x270>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e013      	b.n	8004e0c <HAL_RCC_OscConfig+0x298>
 8004de4:	40021000 	.word	0x40021000
 8004de8:	0800b224 	.word	0x0800b224
 8004dec:	20020528 	.word	0x20020528
 8004df0:	20000000 	.word	0x20000000
 8004df4:	4ba0      	ldr	r3, [pc, #640]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a9f      	ldr	r2, [pc, #636]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b9d      	ldr	r3, [pc, #628]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a9c      	ldr	r2, [pc, #624]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d013      	beq.n	8004e3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fb fef8 	bl	8000c08 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fb fef4 	bl	8000c08 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e2b4      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e2e:	4b92      	ldr	r3, [pc, #584]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x2a8>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fb fee4 	bl	8000c08 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e44:	f7fb fee0 	bl	8000c08 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	; 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e2a0      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e56:	4b88      	ldr	r3, [pc, #544]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0x2d0>
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d060      	beq.n	8004f34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_OscConfig+0x310>
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b0c      	cmp	r3, #12
 8004e7c:	d119      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d116      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e84:	4b7c      	ldr	r3, [pc, #496]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_OscConfig+0x328>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e27d      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9c:	4b76      	ldr	r3, [pc, #472]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	061b      	lsls	r3, r3, #24
 8004eaa:	4973      	ldr	r1, [pc, #460]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eb0:	e040      	b.n	8004f34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d023      	beq.n	8004f02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eba:	4b6f      	ldr	r3, [pc, #444]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6e      	ldr	r2, [pc, #440]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fb fe9f 	bl	8000c08 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ece:	f7fb fe9b 	bl	8000c08 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e25b      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee0:	4b65      	ldr	r3, [pc, #404]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eec:	4b62      	ldr	r3, [pc, #392]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	495f      	ldr	r1, [pc, #380]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	604b      	str	r3, [r1, #4]
 8004f00:	e018      	b.n	8004f34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f02:	4b5d      	ldr	r3, [pc, #372]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a5c      	ldr	r2, [pc, #368]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fb fe7b 	bl	8000c08 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f16:	f7fb fe77 	bl	8000c08 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e237      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f28:	4b53      	ldr	r3, [pc, #332]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f0      	bne.n	8004f16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d03c      	beq.n	8004fba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01c      	beq.n	8004f82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f48:	4b4b      	ldr	r3, [pc, #300]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4e:	4a4a      	ldr	r2, [pc, #296]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fb fe56 	bl	8000c08 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f60:	f7fb fe52 	bl	8000c08 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e212      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f72:	4b41      	ldr	r3, [pc, #260]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0ef      	beq.n	8004f60 <HAL_RCC_OscConfig+0x3ec>
 8004f80:	e01b      	b.n	8004fba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f82:	4b3d      	ldr	r3, [pc, #244]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f88:	4a3b      	ldr	r2, [pc, #236]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fb fe39 	bl	8000c08 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f9a:	f7fb fe35 	bl	8000c08 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e1f5      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fac:	4b32      	ldr	r3, [pc, #200]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1ef      	bne.n	8004f9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80a6 	beq.w	8005114 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fcc:	4b2a      	ldr	r3, [pc, #168]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10d      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd8:	4b27      	ldr	r3, [pc, #156]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fdc:	4a26      	ldr	r2, [pc, #152]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe4:	4b24      	ldr	r3, [pc, #144]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff4:	4b21      	ldr	r3, [pc, #132]	; (800507c <HAL_RCC_OscConfig+0x508>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d118      	bne.n	8005032 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005000:	4b1e      	ldr	r3, [pc, #120]	; (800507c <HAL_RCC_OscConfig+0x508>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1d      	ldr	r2, [pc, #116]	; (800507c <HAL_RCC_OscConfig+0x508>)
 8005006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500c:	f7fb fdfc 	bl	8000c08 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005014:	f7fb fdf8 	bl	8000c08 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e1b8      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <HAL_RCC_OscConfig+0x508>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d108      	bne.n	800504c <HAL_RCC_OscConfig+0x4d8>
 800503a:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	4a0d      	ldr	r2, [pc, #52]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800504a:	e029      	b.n	80050a0 <HAL_RCC_OscConfig+0x52c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b05      	cmp	r3, #5
 8005052:	d115      	bne.n	8005080 <HAL_RCC_OscConfig+0x50c>
 8005054:	4b08      	ldr	r3, [pc, #32]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	4a07      	ldr	r2, [pc, #28]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 800505c:	f043 0304 	orr.w	r3, r3, #4
 8005060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005064:	4b04      	ldr	r3, [pc, #16]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	4a03      	ldr	r2, [pc, #12]	; (8005078 <HAL_RCC_OscConfig+0x504>)
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005074:	e014      	b.n	80050a0 <HAL_RCC_OscConfig+0x52c>
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000
 800507c:	40007000 	.word	0x40007000
 8005080:	4b9d      	ldr	r3, [pc, #628]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005086:	4a9c      	ldr	r2, [pc, #624]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005090:	4b99      	ldr	r3, [pc, #612]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	4a98      	ldr	r2, [pc, #608]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d016      	beq.n	80050d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fb fdae 	bl	8000c08 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b0:	f7fb fdaa 	bl	8000c08 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e168      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c6:	4b8c      	ldr	r3, [pc, #560]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0ed      	beq.n	80050b0 <HAL_RCC_OscConfig+0x53c>
 80050d4:	e015      	b.n	8005102 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d6:	f7fb fd97 	bl	8000c08 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fb fd93 	bl	8000c08 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e151      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f4:	4b80      	ldr	r3, [pc, #512]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1ed      	bne.n	80050de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005102:	7ffb      	ldrb	r3, [r7, #31]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d105      	bne.n	8005114 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005108:	4b7b      	ldr	r3, [pc, #492]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	4a7a      	ldr	r2, [pc, #488]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 800510e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005112:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b00      	cmp	r3, #0
 800511e:	d03c      	beq.n	800519a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01c      	beq.n	8005162 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005128:	4b73      	ldr	r3, [pc, #460]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 800512a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800512e:	4a72      	ldr	r2, [pc, #456]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fb fd66 	bl	8000c08 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005140:	f7fb fd62 	bl	8000c08 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e122      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005152:	4b69      	ldr	r3, [pc, #420]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ef      	beq.n	8005140 <HAL_RCC_OscConfig+0x5cc>
 8005160:	e01b      	b.n	800519a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005162:	4b65      	ldr	r3, [pc, #404]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005168:	4a63      	ldr	r2, [pc, #396]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005172:	f7fb fd49 	bl	8000c08 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800517a:	f7fb fd45 	bl	8000c08 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e105      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800518c:	4b5a      	ldr	r3, [pc, #360]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 800518e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1ef      	bne.n	800517a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80f9 	beq.w	8005396 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	f040 80cf 	bne.w	800534c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80051ae:	4b52      	ldr	r3, [pc, #328]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f003 0203 	and.w	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	429a      	cmp	r2, r3
 80051c0:	d12c      	bne.n	800521c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	3b01      	subs	r3, #1
 80051ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d123      	bne.n	800521c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d11b      	bne.n	800521c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d113      	bne.n	800521c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	3b01      	subs	r3, #1
 8005202:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005204:	429a      	cmp	r2, r3
 8005206:	d109      	bne.n	800521c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	3b01      	subs	r3, #1
 8005216:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d071      	beq.n	8005300 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d068      	beq.n	80052f4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005222:	4b35      	ldr	r3, [pc, #212]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d105      	bne.n	800523a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800522e:	4b32      	ldr	r3, [pc, #200]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e0ac      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800523e:	4b2e      	ldr	r3, [pc, #184]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2d      	ldr	r2, [pc, #180]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005248:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800524a:	f7fb fcdd 	bl	8000c08 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005252:	f7fb fcd9 	bl	8000c08 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e099      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005264:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f0      	bne.n	8005252 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005270:	4b21      	ldr	r3, [pc, #132]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	4b21      	ldr	r3, [pc, #132]	; (80052fc <HAL_RCC_OscConfig+0x788>)
 8005276:	4013      	ands	r3, r2
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005280:	3a01      	subs	r2, #1
 8005282:	0112      	lsls	r2, r2, #4
 8005284:	4311      	orrs	r1, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800528a:	0212      	lsls	r2, r2, #8
 800528c:	4311      	orrs	r1, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005292:	0852      	lsrs	r2, r2, #1
 8005294:	3a01      	subs	r2, #1
 8005296:	0552      	lsls	r2, r2, #21
 8005298:	4311      	orrs	r1, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800529e:	0852      	lsrs	r2, r2, #1
 80052a0:	3a01      	subs	r2, #1
 80052a2:	0652      	lsls	r2, r2, #25
 80052a4:	4311      	orrs	r1, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052aa:	06d2      	lsls	r2, r2, #27
 80052ac:	430a      	orrs	r2, r1
 80052ae:	4912      	ldr	r1, [pc, #72]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052b4:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a0f      	ldr	r2, [pc, #60]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 80052ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052c0:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 80052c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052cc:	f7fb fc9c 	bl	8000c08 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fb fc98 	bl	8000c08 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e058      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e6:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <HAL_RCC_OscConfig+0x784>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f0      	beq.n	80052d4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052f2:	e050      	b.n	8005396 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e04f      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
 80052f8:	40021000 	.word	0x40021000
 80052fc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005300:	4b27      	ldr	r3, [pc, #156]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d144      	bne.n	8005396 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a23      	ldr	r2, [pc, #140]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005316:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005318:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a20      	ldr	r2, [pc, #128]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800531e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005322:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005324:	f7fb fc70 	bl	8000c08 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532c:	f7fb fc6c 	bl	8000c08 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e02c      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800533e:	4b18      	ldr	r3, [pc, #96]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x7b8>
 800534a:	e024      	b.n	8005396 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b0c      	cmp	r3, #12
 8005350:	d01f      	beq.n	8005392 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005352:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a12      	ldr	r2, [pc, #72]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005358:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800535c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535e:	f7fb fc53 	bl	8000c08 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005366:	f7fb fc4f 	bl	8000c08 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e00f      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005378:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f0      	bne.n	8005366 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005384:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	4905      	ldr	r1, [pc, #20]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_RCC_OscConfig+0x830>)
 800538c:	4013      	ands	r3, r2
 800538e:	60cb      	str	r3, [r1, #12]
 8005390:	e001      	b.n	8005396 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40021000 	.word	0x40021000
 80053a4:	feeefffc 	.word	0xfeeefffc

080053a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e11d      	b.n	80055fc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053c0:	4b90      	ldr	r3, [pc, #576]	; (8005604 <HAL_RCC_ClockConfig+0x25c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d910      	bls.n	80053f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ce:	4b8d      	ldr	r3, [pc, #564]	; (8005604 <HAL_RCC_ClockConfig+0x25c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f023 020f 	bic.w	r2, r3, #15
 80053d6:	498b      	ldr	r1, [pc, #556]	; (8005604 <HAL_RCC_ClockConfig+0x25c>)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	4313      	orrs	r3, r2
 80053dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053de:	4b89      	ldr	r3, [pc, #548]	; (8005604 <HAL_RCC_ClockConfig+0x25c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e105      	b.n	80055fc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d010      	beq.n	800541e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	4b81      	ldr	r3, [pc, #516]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005408:	429a      	cmp	r2, r3
 800540a:	d908      	bls.n	800541e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800540c:	4b7e      	ldr	r3, [pc, #504]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	497b      	ldr	r1, [pc, #492]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d079      	beq.n	800551e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b03      	cmp	r3, #3
 8005430:	d11e      	bne.n	8005470 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005432:	4b75      	ldr	r3, [pc, #468]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e0dc      	b.n	80055fc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005442:	f000 fa3b 	bl	80058bc <RCC_GetSysClockFreqFromPLLSource>
 8005446:	4603      	mov	r3, r0
 8005448:	4a70      	ldr	r2, [pc, #448]	; (800560c <HAL_RCC_ClockConfig+0x264>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d946      	bls.n	80054dc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800544e:	4b6e      	ldr	r3, [pc, #440]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d140      	bne.n	80054dc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800545a:	4b6b      	ldr	r3, [pc, #428]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005462:	4a69      	ldr	r2, [pc, #420]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 8005464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005468:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e035      	b.n	80054dc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d107      	bne.n	8005488 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005478:	4b63      	ldr	r3, [pc, #396]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d115      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0b9      	b.n	80055fc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d107      	bne.n	80054a0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005490:	4b5d      	ldr	r3, [pc, #372]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d109      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0ad      	b.n	80055fc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a0:	4b59      	ldr	r3, [pc, #356]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0a5      	b.n	80055fc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80054b0:	f000 f8b4 	bl	800561c <HAL_RCC_GetSysClockFreq>
 80054b4:	4603      	mov	r3, r0
 80054b6:	4a55      	ldr	r2, [pc, #340]	; (800560c <HAL_RCC_ClockConfig+0x264>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d90f      	bls.n	80054dc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80054bc:	4b52      	ldr	r3, [pc, #328]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054c8:	4b4f      	ldr	r3, [pc, #316]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d0:	4a4d      	ldr	r2, [pc, #308]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 80054d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054dc:	4b4a      	ldr	r3, [pc, #296]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f023 0203 	bic.w	r2, r3, #3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	4947      	ldr	r1, [pc, #284]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ee:	f7fb fb8b 	bl	8000c08 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f4:	e00a      	b.n	800550c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f6:	f7fb fb87 	bl	8000c08 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	f241 3288 	movw	r2, #5000	; 0x1388
 8005504:	4293      	cmp	r3, r2
 8005506:	d901      	bls.n	800550c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e077      	b.n	80055fc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550c:	4b3e      	ldr	r3, [pc, #248]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 020c 	and.w	r2, r3, #12
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	429a      	cmp	r2, r3
 800551c:	d1eb      	bne.n	80054f6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b80      	cmp	r3, #128	; 0x80
 8005522:	d105      	bne.n	8005530 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005524:	4b38      	ldr	r3, [pc, #224]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4a37      	ldr	r2, [pc, #220]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 800552a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800552e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d010      	beq.n	800555e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	4b31      	ldr	r3, [pc, #196]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005548:	429a      	cmp	r2, r3
 800554a:	d208      	bcs.n	800555e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800554c:	4b2e      	ldr	r3, [pc, #184]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	492b      	ldr	r1, [pc, #172]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800555e:	4b29      	ldr	r3, [pc, #164]	; (8005604 <HAL_RCC_ClockConfig+0x25c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d210      	bcs.n	800558e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556c:	4b25      	ldr	r3, [pc, #148]	; (8005604 <HAL_RCC_ClockConfig+0x25c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f023 020f 	bic.w	r2, r3, #15
 8005574:	4923      	ldr	r1, [pc, #140]	; (8005604 <HAL_RCC_ClockConfig+0x25c>)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557c:	4b21      	ldr	r3, [pc, #132]	; (8005604 <HAL_RCC_ClockConfig+0x25c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d001      	beq.n	800558e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e036      	b.n	80055fc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800559a:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	4918      	ldr	r1, [pc, #96]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d009      	beq.n	80055cc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055b8:	4b13      	ldr	r3, [pc, #76]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4910      	ldr	r1, [pc, #64]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055cc:	f000 f826 	bl	800561c <HAL_RCC_GetSysClockFreq>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <HAL_RCC_ClockConfig+0x260>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	091b      	lsrs	r3, r3, #4
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	490c      	ldr	r1, [pc, #48]	; (8005610 <HAL_RCC_ClockConfig+0x268>)
 80055de:	5ccb      	ldrb	r3, [r1, r3]
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
 80055e8:	4a0a      	ldr	r2, [pc, #40]	; (8005614 <HAL_RCC_ClockConfig+0x26c>)
 80055ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <HAL_RCC_ClockConfig+0x270>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f004 fe91 	bl	800a318 <HAL_InitTick>
 80055f6:	4603      	mov	r3, r0
 80055f8:	73fb      	strb	r3, [r7, #15]

  return status;
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40022000 	.word	0x40022000
 8005608:	40021000 	.word	0x40021000
 800560c:	04c4b400 	.word	0x04c4b400
 8005610:	0800b224 	.word	0x0800b224
 8005614:	20020528 	.word	0x20020528
 8005618:	20000000 	.word	0x20000000

0800561c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800561c:	b480      	push	{r7}
 800561e:	b089      	sub	sp, #36	; 0x24
 8005620:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800562a:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005634:	4b3b      	ldr	r3, [pc, #236]	; (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x34>
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b0c      	cmp	r3, #12
 8005648:	d121      	bne.n	800568e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d11e      	bne.n	800568e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005650:	4b34      	ldr	r3, [pc, #208]	; (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d107      	bne.n	800566c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800565c:	4b31      	ldr	r3, [pc, #196]	; (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 800565e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	61fb      	str	r3, [r7, #28]
 800566a:	e005      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800566c:	4b2d      	ldr	r3, [pc, #180]	; (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005678:	4a2b      	ldr	r2, [pc, #172]	; (8005728 <HAL_RCC_GetSysClockFreq+0x10c>)
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005680:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10d      	bne.n	80056a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800568c:	e00a      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b04      	cmp	r3, #4
 8005692:	d102      	bne.n	800569a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005694:	4b25      	ldr	r3, [pc, #148]	; (800572c <HAL_RCC_GetSysClockFreq+0x110>)
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	e004      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b08      	cmp	r3, #8
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056a0:	4b23      	ldr	r3, [pc, #140]	; (8005730 <HAL_RCC_GetSysClockFreq+0x114>)
 80056a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b0c      	cmp	r3, #12
 80056a8:	d134      	bne.n	8005714 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056aa:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d003      	beq.n	80056c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d003      	beq.n	80056c8 <HAL_RCC_GetSysClockFreq+0xac>
 80056c0:	e005      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80056c2:	4b1a      	ldr	r3, [pc, #104]	; (800572c <HAL_RCC_GetSysClockFreq+0x110>)
 80056c4:	617b      	str	r3, [r7, #20]
      break;
 80056c6:	e005      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80056c8:	4b19      	ldr	r3, [pc, #100]	; (8005730 <HAL_RCC_GetSysClockFreq+0x114>)
 80056ca:	617b      	str	r3, [r7, #20]
      break;
 80056cc:	e002      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	617b      	str	r3, [r7, #20]
      break;
 80056d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056d4:	4b13      	ldr	r3, [pc, #76]	; (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	3301      	adds	r3, #1
 80056e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056e2:	4b10      	ldr	r3, [pc, #64]	; (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	0a1b      	lsrs	r3, r3, #8
 80056e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	fb03 f202 	mul.w	r2, r3, r2
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056fa:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	0e5b      	lsrs	r3, r3, #25
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	3301      	adds	r3, #1
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005712:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005714:	69bb      	ldr	r3, [r7, #24]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3724      	adds	r7, #36	; 0x24
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000
 8005728:	0800b23c 	.word	0x0800b23c
 800572c:	00f42400 	.word	0x00f42400
 8005730:	007a1200 	.word	0x007a1200

08005734 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005738:	4b03      	ldr	r3, [pc, #12]	; (8005748 <HAL_RCC_GetHCLKFreq+0x14>)
 800573a:	681b      	ldr	r3, [r3, #0]
}
 800573c:	4618      	mov	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20020528 	.word	0x20020528

0800574c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005750:	f7ff fff0 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005754:	4602      	mov	r2, r0
 8005756:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	0a1b      	lsrs	r3, r3, #8
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	4904      	ldr	r1, [pc, #16]	; (8005774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005762:	5ccb      	ldrb	r3, [r1, r3]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800576c:	4618      	mov	r0, r3
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40021000 	.word	0x40021000
 8005774:	0800b234 	.word	0x0800b234

08005778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800577c:	f7ff ffda 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005780:	4602      	mov	r2, r0
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	0adb      	lsrs	r3, r3, #11
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	4904      	ldr	r1, [pc, #16]	; (80057a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800578e:	5ccb      	ldrb	r3, [r1, r3]
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005798:	4618      	mov	r0, r3
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40021000 	.word	0x40021000
 80057a0:	0800b234 	.word	0x0800b234

080057a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	220f      	movs	r2, #15
 80057b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80057b4:	4b12      	ldr	r3, [pc, #72]	; (8005800 <HAL_RCC_GetClockConfig+0x5c>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 0203 	and.w	r2, r3, #3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80057c0:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <HAL_RCC_GetClockConfig+0x5c>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80057cc:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <HAL_RCC_GetClockConfig+0x5c>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80057d8:	4b09      	ldr	r3, [pc, #36]	; (8005800 <HAL_RCC_GetClockConfig+0x5c>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	08db      	lsrs	r3, r3, #3
 80057de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <HAL_RCC_GetClockConfig+0x60>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 020f 	and.w	r2, r3, #15
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	601a      	str	r2, [r3, #0]
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40021000 	.word	0x40021000
 8005804:	40022000 	.word	0x40022000

08005808 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005814:	4b27      	ldr	r3, [pc, #156]	; (80058b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005820:	f7ff f8e4 	bl	80049ec <HAL_PWREx_GetVoltageRange>
 8005824:	6178      	str	r0, [r7, #20]
 8005826:	e014      	b.n	8005852 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	4a21      	ldr	r2, [pc, #132]	; (80058b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800582e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005832:	6593      	str	r3, [r2, #88]	; 0x58
 8005834:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005840:	f7ff f8d4 	bl	80049ec <HAL_PWREx_GetVoltageRange>
 8005844:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005846:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584a:	4a1a      	ldr	r2, [pc, #104]	; (80058b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800584c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005850:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005858:	d10b      	bne.n	8005872 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b80      	cmp	r3, #128	; 0x80
 800585e:	d913      	bls.n	8005888 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2ba0      	cmp	r3, #160	; 0xa0
 8005864:	d902      	bls.n	800586c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005866:	2302      	movs	r3, #2
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	e00d      	b.n	8005888 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800586c:	2301      	movs	r3, #1
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	e00a      	b.n	8005888 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b7f      	cmp	r3, #127	; 0x7f
 8005876:	d902      	bls.n	800587e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005878:	2302      	movs	r3, #2
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	e004      	b.n	8005888 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b70      	cmp	r3, #112	; 0x70
 8005882:	d101      	bne.n	8005888 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005884:	2301      	movs	r3, #1
 8005886:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f023 020f 	bic.w	r2, r3, #15
 8005890:	4909      	ldr	r1, [pc, #36]	; (80058b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005898:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d001      	beq.n	80058aa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40021000 	.word	0x40021000
 80058b8:	40022000 	.word	0x40022000

080058bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058c2:	4b2d      	ldr	r3, [pc, #180]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d00b      	beq.n	80058ea <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d825      	bhi.n	8005924 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d008      	beq.n	80058f0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d11f      	bne.n	8005924 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80058e4:	4b25      	ldr	r3, [pc, #148]	; (800597c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80058e6:	613b      	str	r3, [r7, #16]
    break;
 80058e8:	e01f      	b.n	800592a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80058ea:	4b25      	ldr	r3, [pc, #148]	; (8005980 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80058ec:	613b      	str	r3, [r7, #16]
    break;
 80058ee:	e01c      	b.n	800592a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058f0:	4b21      	ldr	r3, [pc, #132]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d107      	bne.n	800590c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058fc:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e005      	b.n	8005918 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800590c:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005918:	4a1a      	ldr	r2, [pc, #104]	; (8005984 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005920:	613b      	str	r3, [r7, #16]
    break;
 8005922:	e002      	b.n	800592a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]
    break;
 8005928:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	3301      	adds	r3, #1
 8005936:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	0a1b      	lsrs	r3, r3, #8
 800593e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	fb03 f202 	mul.w	r2, r3, r2
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	0e5b      	lsrs	r3, r3, #25
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	3301      	adds	r3, #1
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800596a:	683b      	ldr	r3, [r7, #0]
}
 800596c:	4618      	mov	r0, r3
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40021000 	.word	0x40021000
 800597c:	00f42400 	.word	0x00f42400
 8005980:	007a1200 	.word	0x007a1200
 8005984:	0800b23c 	.word	0x0800b23c

08005988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005990:	2300      	movs	r3, #0
 8005992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005994:	2300      	movs	r3, #0
 8005996:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d040      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a8:	2b80      	cmp	r3, #128	; 0x80
 80059aa:	d02a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059ac:	2b80      	cmp	r3, #128	; 0x80
 80059ae:	d825      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80059b0:	2b60      	cmp	r3, #96	; 0x60
 80059b2:	d026      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059b4:	2b60      	cmp	r3, #96	; 0x60
 80059b6:	d821      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d006      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x42>
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d81d      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d010      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x62>
 80059c8:	e018      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059ca:	4b89      	ldr	r3, [pc, #548]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	4a88      	ldr	r2, [pc, #544]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059d6:	e015      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fb02 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059e8:	e00c      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3320      	adds	r3, #32
 80059ee:	2100      	movs	r1, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fbed 	bl	80061d0 <RCCEx_PLLSAI2_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059fa:	e003      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	74fb      	strb	r3, [r7, #19]
      break;
 8005a00:	e000      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a04:	7cfb      	ldrb	r3, [r7, #19]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10b      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a0a:	4b79      	ldr	r3, [pc, #484]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a10:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a18:	4975      	ldr	r1, [pc, #468]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005a20:	e001      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a22:	7cfb      	ldrb	r3, [r7, #19]
 8005a24:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d047      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3a:	d030      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a40:	d82a      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a46:	d02a      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a4c:	d824      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a52:	d008      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a58:	d81e      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a62:	d010      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a64:	e018      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a66:	4b62      	ldr	r3, [pc, #392]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	4a61      	ldr	r2, [pc, #388]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a70:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a72:	e015      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3304      	adds	r3, #4
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fab4 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a84:	e00c      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3320      	adds	r3, #32
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fb9f 	bl	80061d0 <RCCEx_PLLSAI2_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a96:	e003      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	74fb      	strb	r3, [r7, #19]
      break;
 8005a9c:	e000      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aa0:	7cfb      	ldrb	r3, [r7, #19]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10b      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005aa6:	4b52      	ldr	r3, [pc, #328]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	494e      	ldr	r1, [pc, #312]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005abc:	e001      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 809f 	beq.w	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ad4:	4b46      	ldr	r3, [pc, #280]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aea:	4b41      	ldr	r3, [pc, #260]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aee:	4a40      	ldr	r2, [pc, #256]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af4:	6593      	str	r3, [r2, #88]	; 0x58
 8005af6:	4b3e      	ldr	r3, [pc, #248]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afe:	60bb      	str	r3, [r7, #8]
 8005b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b02:	2301      	movs	r3, #1
 8005b04:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b06:	4b3b      	ldr	r3, [pc, #236]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a3a      	ldr	r2, [pc, #232]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b12:	f7fb f879 	bl	8000c08 <HAL_GetTick>
 8005b16:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b18:	e009      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b1a:	f7fb f875 	bl	8000c08 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d902      	bls.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	74fb      	strb	r3, [r7, #19]
        break;
 8005b2c:	e005      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b2e:	4b31      	ldr	r3, [pc, #196]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0ef      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005b3a:	7cfb      	ldrb	r3, [r7, #19]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d15b      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b40:	4b2b      	ldr	r3, [pc, #172]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01f      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d019      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b5e:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b6a:	4b21      	ldr	r3, [pc, #132]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b70:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b7a:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b80:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b8a:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d016      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9c:	f7fb f834 	bl	8000c08 <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ba2:	e00b      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba4:	f7fb f830 	bl	8000c08 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d902      	bls.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	74fb      	strb	r3, [r7, #19]
            break;
 8005bba:	e006      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0ec      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005bca:	7cfb      	ldrb	r3, [r7, #19]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10c      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bd0:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be0:	4903      	ldr	r1, [pc, #12]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005be8:	e008      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bea:	7cfb      	ldrb	r3, [r7, #19]
 8005bec:	74bb      	strb	r3, [r7, #18]
 8005bee:	e005      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	7cfb      	ldrb	r3, [r7, #19]
 8005bfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bfc:	7c7b      	ldrb	r3, [r7, #17]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d105      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c02:	4ba0      	ldr	r3, [pc, #640]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c06:	4a9f      	ldr	r2, [pc, #636]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c1a:	4b9a      	ldr	r3, [pc, #616]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	f023 0203 	bic.w	r2, r3, #3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c28:	4996      	ldr	r1, [pc, #600]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c3c:	4b91      	ldr	r3, [pc, #580]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c42:	f023 020c 	bic.w	r2, r3, #12
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	498e      	ldr	r1, [pc, #568]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c5e:	4b89      	ldr	r3, [pc, #548]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6c:	4985      	ldr	r1, [pc, #532]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c80:	4b80      	ldr	r3, [pc, #512]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8e:	497d      	ldr	r1, [pc, #500]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ca2:	4b78      	ldr	r3, [pc, #480]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb0:	4974      	ldr	r1, [pc, #464]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cc4:	4b6f      	ldr	r3, [pc, #444]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd2:	496c      	ldr	r1, [pc, #432]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ce6:	4b67      	ldr	r3, [pc, #412]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf4:	4963      	ldr	r1, [pc, #396]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d08:	4b5e      	ldr	r3, [pc, #376]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d16:	495b      	ldr	r1, [pc, #364]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d2a:	4b56      	ldr	r3, [pc, #344]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	4952      	ldr	r1, [pc, #328]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d4c:	4b4d      	ldr	r3, [pc, #308]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5a:	494a      	ldr	r1, [pc, #296]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d6e:	4b45      	ldr	r3, [pc, #276]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7c:	4941      	ldr	r1, [pc, #260]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d90:	4b3c      	ldr	r3, [pc, #240]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d96:	f023 0203 	bic.w	r2, r3, #3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9e:	4939      	ldr	r1, [pc, #228]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d028      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005db2:	4b34      	ldr	r3, [pc, #208]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc0:	4930      	ldr	r1, [pc, #192]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dd0:	d106      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd2:	4b2c      	ldr	r3, [pc, #176]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	4a2b      	ldr	r2, [pc, #172]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ddc:	60d3      	str	r3, [r2, #12]
 8005dde:	e011      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	2101      	movs	r1, #1
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 f8f9 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005dfa:	7cfb      	ldrb	r3, [r7, #19]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005e00:	7cfb      	ldrb	r3, [r7, #19]
 8005e02:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d04d      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e18:	d108      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005e1a:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e20:	4a18      	ldr	r2, [pc, #96]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e26:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005e2a:	e012      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005e2c:	4b15      	ldr	r3, [pc, #84]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e32:	4a14      	ldr	r2, [pc, #80]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e38:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005e3c:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e4a:	490e      	ldr	r1, [pc, #56]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e5a:	d106      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e5c:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	4a08      	ldr	r2, [pc, #32]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e66:	60d3      	str	r3, [r2, #12]
 8005e68:	e020      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e72:	d109      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e74:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a02      	ldr	r2, [pc, #8]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7e:	60d3      	str	r3, [r2, #12]
 8005e80:	e014      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005e82:	bf00      	nop
 8005e84:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e90:	d10c      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3304      	adds	r3, #4
 8005e96:	2101      	movs	r1, #1
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 f8a5 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ea2:	7cfb      	ldrb	r3, [r7, #19]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005ea8:	7cfb      	ldrb	r3, [r7, #19]
 8005eaa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d028      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eb8:	4b4a      	ldr	r3, [pc, #296]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec6:	4947      	ldr	r1, [pc, #284]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed6:	d106      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed8:	4b42      	ldr	r3, [pc, #264]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4a41      	ldr	r2, [pc, #260]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee2:	60d3      	str	r3, [r2, #12]
 8005ee4:	e011      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eee:	d10c      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 f876 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f00:	7cfb      	ldrb	r3, [r7, #19]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005f06:	7cfb      	ldrb	r3, [r7, #19]
 8005f08:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01e      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f16:	4b33      	ldr	r3, [pc, #204]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f26:	492f      	ldr	r1, [pc, #188]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f38:	d10c      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	2102      	movs	r1, #2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 f851 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f4a:	7cfb      	ldrb	r3, [r7, #19]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005f50:	7cfb      	ldrb	r3, [r7, #19]
 8005f52:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f60:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f66:	f023 0204 	bic.w	r2, r3, #4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f70:	491c      	ldr	r1, [pc, #112]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f84:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f8a:	f023 0218 	bic.w	r2, r3, #24
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	4913      	ldr	r1, [pc, #76]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d017      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005fa8:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb8:	490a      	ldr	r1, [pc, #40]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fca:	d105      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a04      	ldr	r2, [pc, #16]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005fd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000

08005fe8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ff6:	4b72      	ldr	r3, [pc, #456]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00e      	beq.n	8006020 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006002:	4b6f      	ldr	r3, [pc, #444]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0203 	and.w	r2, r3, #3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d103      	bne.n	800601a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
       ||
 8006016:	2b00      	cmp	r3, #0
 8006018:	d142      	bne.n	80060a0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
 800601e:	e03f      	b.n	80060a0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d018      	beq.n	800605a <RCCEx_PLLSAI1_Config+0x72>
 8006028:	2b03      	cmp	r3, #3
 800602a:	d825      	bhi.n	8006078 <RCCEx_PLLSAI1_Config+0x90>
 800602c:	2b01      	cmp	r3, #1
 800602e:	d002      	beq.n	8006036 <RCCEx_PLLSAI1_Config+0x4e>
 8006030:	2b02      	cmp	r3, #2
 8006032:	d009      	beq.n	8006048 <RCCEx_PLLSAI1_Config+0x60>
 8006034:	e020      	b.n	8006078 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006036:	4b62      	ldr	r3, [pc, #392]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d11d      	bne.n	800607e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006046:	e01a      	b.n	800607e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006048:	4b5d      	ldr	r3, [pc, #372]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006050:	2b00      	cmp	r3, #0
 8006052:	d116      	bne.n	8006082 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006058:	e013      	b.n	8006082 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800605a:	4b59      	ldr	r3, [pc, #356]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10f      	bne.n	8006086 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006066:	4b56      	ldr	r3, [pc, #344]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006076:	e006      	b.n	8006086 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
      break;
 800607c:	e004      	b.n	8006088 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800607e:	bf00      	nop
 8006080:	e002      	b.n	8006088 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006082:	bf00      	nop
 8006084:	e000      	b.n	8006088 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006086:	bf00      	nop
    }

    if(status == HAL_OK)
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d108      	bne.n	80060a0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800608e:	4b4c      	ldr	r3, [pc, #304]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f023 0203 	bic.w	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4949      	ldr	r1, [pc, #292]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800609c:	4313      	orrs	r3, r2
 800609e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 8086 	bne.w	80061b4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060a8:	4b45      	ldr	r3, [pc, #276]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a44      	ldr	r2, [pc, #272]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b4:	f7fa fda8 	bl	8000c08 <HAL_GetTick>
 80060b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060ba:	e009      	b.n	80060d0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060bc:	f7fa fda4 	bl	8000c08 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d902      	bls.n	80060d0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	73fb      	strb	r3, [r7, #15]
        break;
 80060ce:	e005      	b.n	80060dc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060d0:	4b3b      	ldr	r3, [pc, #236]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1ef      	bne.n	80060bc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d168      	bne.n	80061b4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d113      	bne.n	8006110 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060e8:	4b35      	ldr	r3, [pc, #212]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	4b35      	ldr	r3, [pc, #212]	; (80061c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6892      	ldr	r2, [r2, #8]
 80060f4:	0211      	lsls	r1, r2, #8
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68d2      	ldr	r2, [r2, #12]
 80060fa:	06d2      	lsls	r2, r2, #27
 80060fc:	4311      	orrs	r1, r2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6852      	ldr	r2, [r2, #4]
 8006102:	3a01      	subs	r2, #1
 8006104:	0112      	lsls	r2, r2, #4
 8006106:	430a      	orrs	r2, r1
 8006108:	492d      	ldr	r1, [pc, #180]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800610a:	4313      	orrs	r3, r2
 800610c:	610b      	str	r3, [r1, #16]
 800610e:	e02d      	b.n	800616c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d115      	bne.n	8006142 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006116:	4b2a      	ldr	r3, [pc, #168]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	4b2b      	ldr	r3, [pc, #172]	; (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800611c:	4013      	ands	r3, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6892      	ldr	r2, [r2, #8]
 8006122:	0211      	lsls	r1, r2, #8
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6912      	ldr	r2, [r2, #16]
 8006128:	0852      	lsrs	r2, r2, #1
 800612a:	3a01      	subs	r2, #1
 800612c:	0552      	lsls	r2, r2, #21
 800612e:	4311      	orrs	r1, r2
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6852      	ldr	r2, [r2, #4]
 8006134:	3a01      	subs	r2, #1
 8006136:	0112      	lsls	r2, r2, #4
 8006138:	430a      	orrs	r2, r1
 800613a:	4921      	ldr	r1, [pc, #132]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800613c:	4313      	orrs	r3, r2
 800613e:	610b      	str	r3, [r1, #16]
 8006140:	e014      	b.n	800616c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006142:	4b1f      	ldr	r3, [pc, #124]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	4b21      	ldr	r3, [pc, #132]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006148:	4013      	ands	r3, r2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6892      	ldr	r2, [r2, #8]
 800614e:	0211      	lsls	r1, r2, #8
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6952      	ldr	r2, [r2, #20]
 8006154:	0852      	lsrs	r2, r2, #1
 8006156:	3a01      	subs	r2, #1
 8006158:	0652      	lsls	r2, r2, #25
 800615a:	4311      	orrs	r1, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6852      	ldr	r2, [r2, #4]
 8006160:	3a01      	subs	r2, #1
 8006162:	0112      	lsls	r2, r2, #4
 8006164:	430a      	orrs	r2, r1
 8006166:	4916      	ldr	r1, [pc, #88]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006168:	4313      	orrs	r3, r2
 800616a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800616c:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a13      	ldr	r2, [pc, #76]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006176:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006178:	f7fa fd46 	bl	8000c08 <HAL_GetTick>
 800617c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800617e:	e009      	b.n	8006194 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006180:	f7fa fd42 	bl	8000c08 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d902      	bls.n	8006194 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	73fb      	strb	r3, [r7, #15]
          break;
 8006192:	e005      	b.n	80061a0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ef      	beq.n	8006180 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	4904      	ldr	r1, [pc, #16]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40021000 	.word	0x40021000
 80061c4:	07ff800f 	.word	0x07ff800f
 80061c8:	ff9f800f 	.word	0xff9f800f
 80061cc:	f9ff800f 	.word	0xf9ff800f

080061d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061de:	4b72      	ldr	r3, [pc, #456]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00e      	beq.n	8006208 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80061ea:	4b6f      	ldr	r3, [pc, #444]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f003 0203 	and.w	r2, r3, #3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d103      	bne.n	8006202 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
       ||
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d142      	bne.n	8006288 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	73fb      	strb	r3, [r7, #15]
 8006206:	e03f      	b.n	8006288 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b03      	cmp	r3, #3
 800620e:	d018      	beq.n	8006242 <RCCEx_PLLSAI2_Config+0x72>
 8006210:	2b03      	cmp	r3, #3
 8006212:	d825      	bhi.n	8006260 <RCCEx_PLLSAI2_Config+0x90>
 8006214:	2b01      	cmp	r3, #1
 8006216:	d002      	beq.n	800621e <RCCEx_PLLSAI2_Config+0x4e>
 8006218:	2b02      	cmp	r3, #2
 800621a:	d009      	beq.n	8006230 <RCCEx_PLLSAI2_Config+0x60>
 800621c:	e020      	b.n	8006260 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800621e:	4b62      	ldr	r3, [pc, #392]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d11d      	bne.n	8006266 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800622e:	e01a      	b.n	8006266 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006230:	4b5d      	ldr	r3, [pc, #372]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006238:	2b00      	cmp	r3, #0
 800623a:	d116      	bne.n	800626a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006240:	e013      	b.n	800626a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006242:	4b59      	ldr	r3, [pc, #356]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10f      	bne.n	800626e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800624e:	4b56      	ldr	r3, [pc, #344]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800625e:	e006      	b.n	800626e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
      break;
 8006264:	e004      	b.n	8006270 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006266:	bf00      	nop
 8006268:	e002      	b.n	8006270 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800626a:	bf00      	nop
 800626c:	e000      	b.n	8006270 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800626e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d108      	bne.n	8006288 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006276:	4b4c      	ldr	r3, [pc, #304]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f023 0203 	bic.w	r2, r3, #3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4949      	ldr	r1, [pc, #292]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006284:	4313      	orrs	r3, r2
 8006286:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 8086 	bne.w	800639c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006290:	4b45      	ldr	r3, [pc, #276]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a44      	ldr	r2, [pc, #272]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800629a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629c:	f7fa fcb4 	bl	8000c08 <HAL_GetTick>
 80062a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062a2:	e009      	b.n	80062b8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062a4:	f7fa fcb0 	bl	8000c08 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d902      	bls.n	80062b8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	73fb      	strb	r3, [r7, #15]
        break;
 80062b6:	e005      	b.n	80062c4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062b8:	4b3b      	ldr	r3, [pc, #236]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1ef      	bne.n	80062a4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d168      	bne.n	800639c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d113      	bne.n	80062f8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062d0:	4b35      	ldr	r3, [pc, #212]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	4b35      	ldr	r3, [pc, #212]	; (80063ac <RCCEx_PLLSAI2_Config+0x1dc>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6892      	ldr	r2, [r2, #8]
 80062dc:	0211      	lsls	r1, r2, #8
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68d2      	ldr	r2, [r2, #12]
 80062e2:	06d2      	lsls	r2, r2, #27
 80062e4:	4311      	orrs	r1, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6852      	ldr	r2, [r2, #4]
 80062ea:	3a01      	subs	r2, #1
 80062ec:	0112      	lsls	r2, r2, #4
 80062ee:	430a      	orrs	r2, r1
 80062f0:	492d      	ldr	r1, [pc, #180]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	614b      	str	r3, [r1, #20]
 80062f6:	e02d      	b.n	8006354 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d115      	bne.n	800632a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062fe:	4b2a      	ldr	r3, [pc, #168]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006300:	695a      	ldr	r2, [r3, #20]
 8006302:	4b2b      	ldr	r3, [pc, #172]	; (80063b0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006304:	4013      	ands	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6892      	ldr	r2, [r2, #8]
 800630a:	0211      	lsls	r1, r2, #8
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6912      	ldr	r2, [r2, #16]
 8006310:	0852      	lsrs	r2, r2, #1
 8006312:	3a01      	subs	r2, #1
 8006314:	0552      	lsls	r2, r2, #21
 8006316:	4311      	orrs	r1, r2
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6852      	ldr	r2, [r2, #4]
 800631c:	3a01      	subs	r2, #1
 800631e:	0112      	lsls	r2, r2, #4
 8006320:	430a      	orrs	r2, r1
 8006322:	4921      	ldr	r1, [pc, #132]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006324:	4313      	orrs	r3, r2
 8006326:	614b      	str	r3, [r1, #20]
 8006328:	e014      	b.n	8006354 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800632a:	4b1f      	ldr	r3, [pc, #124]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800632c:	695a      	ldr	r2, [r3, #20]
 800632e:	4b21      	ldr	r3, [pc, #132]	; (80063b4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006330:	4013      	ands	r3, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6892      	ldr	r2, [r2, #8]
 8006336:	0211      	lsls	r1, r2, #8
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6952      	ldr	r2, [r2, #20]
 800633c:	0852      	lsrs	r2, r2, #1
 800633e:	3a01      	subs	r2, #1
 8006340:	0652      	lsls	r2, r2, #25
 8006342:	4311      	orrs	r1, r2
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6852      	ldr	r2, [r2, #4]
 8006348:	3a01      	subs	r2, #1
 800634a:	0112      	lsls	r2, r2, #4
 800634c:	430a      	orrs	r2, r1
 800634e:	4916      	ldr	r1, [pc, #88]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006350:	4313      	orrs	r3, r2
 8006352:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006354:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a13      	ldr	r2, [pc, #76]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800635a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006360:	f7fa fc52 	bl	8000c08 <HAL_GetTick>
 8006364:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006366:	e009      	b.n	800637c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006368:	f7fa fc4e 	bl	8000c08 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d902      	bls.n	800637c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	73fb      	strb	r3, [r7, #15]
          break;
 800637a:	e005      	b.n	8006388 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0ef      	beq.n	8006368 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800638e:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006390:	695a      	ldr	r2, [r3, #20]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	4904      	ldr	r1, [pc, #16]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006398:	4313      	orrs	r3, r2
 800639a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	40021000 	.word	0x40021000
 80063ac:	07ff800f 	.word	0x07ff800f
 80063b0:	ff9f800f 	.word	0xff9f800f
 80063b4:	f9ff800f 	.word	0xf9ff800f

080063b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e049      	b.n	800645e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f003 ff18 	bl	800a214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3304      	adds	r3, #4
 80063f4:	4619      	mov	r1, r3
 80063f6:	4610      	mov	r0, r2
 80063f8:	f000 fab6 	bl	8006968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	d001      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e04f      	b.n	8006520 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a23      	ldr	r2, [pc, #140]	; (800652c <HAL_TIM_Base_Start_IT+0xc4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d01d      	beq.n	80064de <HAL_TIM_Base_Start_IT+0x76>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064aa:	d018      	beq.n	80064de <HAL_TIM_Base_Start_IT+0x76>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1f      	ldr	r2, [pc, #124]	; (8006530 <HAL_TIM_Base_Start_IT+0xc8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <HAL_TIM_Base_Start_IT+0x76>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1e      	ldr	r2, [pc, #120]	; (8006534 <HAL_TIM_Base_Start_IT+0xcc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00e      	beq.n	80064de <HAL_TIM_Base_Start_IT+0x76>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1c      	ldr	r2, [pc, #112]	; (8006538 <HAL_TIM_Base_Start_IT+0xd0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d009      	beq.n	80064de <HAL_TIM_Base_Start_IT+0x76>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1b      	ldr	r2, [pc, #108]	; (800653c <HAL_TIM_Base_Start_IT+0xd4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_TIM_Base_Start_IT+0x76>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a19      	ldr	r2, [pc, #100]	; (8006540 <HAL_TIM_Base_Start_IT+0xd8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d115      	bne.n	800650a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	4b17      	ldr	r3, [pc, #92]	; (8006544 <HAL_TIM_Base_Start_IT+0xdc>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b06      	cmp	r3, #6
 80064ee:	d015      	beq.n	800651c <HAL_TIM_Base_Start_IT+0xb4>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f6:	d011      	beq.n	800651c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0201 	orr.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006508:	e008      	b.n	800651c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0201 	orr.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	e000      	b.n	800651e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	40000c00 	.word	0x40000c00
 800653c:	40013400 	.word	0x40013400
 8006540:	40014000 	.word	0x40014000
 8006544:	00010007 	.word	0x00010007

08006548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b02      	cmp	r3, #2
 800655c:	d122      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b02      	cmp	r3, #2
 800656a:	d11b      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0202 	mvn.w	r2, #2
 8006574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f9ce 	bl	800692c <HAL_TIM_IC_CaptureCallback>
 8006590:	e005      	b.n	800659e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f9c0 	bl	8006918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f9d1 	bl	8006940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d122      	bne.n	80065f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d11b      	bne.n	80065f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0204 	mvn.w	r2, #4
 80065c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2202      	movs	r2, #2
 80065ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f9a4 	bl	800692c <HAL_TIM_IC_CaptureCallback>
 80065e4:	e005      	b.n	80065f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f996 	bl	8006918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f9a7 	bl	8006940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b08      	cmp	r3, #8
 8006604:	d122      	bne.n	800664c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b08      	cmp	r3, #8
 8006612:	d11b      	bne.n	800664c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0208 	mvn.w	r2, #8
 800661c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2204      	movs	r2, #4
 8006622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f97a 	bl	800692c <HAL_TIM_IC_CaptureCallback>
 8006638:	e005      	b.n	8006646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f96c 	bl	8006918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f97d 	bl	8006940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b10      	cmp	r3, #16
 8006658:	d122      	bne.n	80066a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b10      	cmp	r3, #16
 8006666:	d11b      	bne.n	80066a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0210 	mvn.w	r2, #16
 8006670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2208      	movs	r2, #8
 8006676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f950 	bl	800692c <HAL_TIM_IC_CaptureCallback>
 800668c:	e005      	b.n	800669a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f942 	bl	8006918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f953 	bl	8006940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d10e      	bne.n	80066cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d107      	bne.n	80066cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f06f 0201 	mvn.w	r2, #1
 80066c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f002 fd52 	bl	8009170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b80      	cmp	r3, #128	; 0x80
 80066d8:	d10e      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e4:	2b80      	cmp	r3, #128	; 0x80
 80066e6:	d107      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fafe 	bl	8006cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006706:	d10e      	bne.n	8006726 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	d107      	bne.n	8006726 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800671e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 faf1 	bl	8006d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b40      	cmp	r3, #64	; 0x40
 8006732:	d10e      	bne.n	8006752 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673e:	2b40      	cmp	r3, #64	; 0x40
 8006740:	d107      	bne.n	8006752 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800674a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f901 	bl	8006954 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b20      	cmp	r3, #32
 800675e:	d10e      	bne.n	800677e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b20      	cmp	r3, #32
 800676c:	d107      	bne.n	800677e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f06f 0220 	mvn.w	r2, #32
 8006776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fab1 	bl	8006ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800677e:	bf00      	nop
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_TIM_ConfigClockSource+0x1c>
 800679e:	2302      	movs	r3, #2
 80067a0:	e0b6      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x18a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067cc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067de:	d03e      	beq.n	800685e <HAL_TIM_ConfigClockSource+0xd8>
 80067e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e4:	f200 8087 	bhi.w	80068f6 <HAL_TIM_ConfigClockSource+0x170>
 80067e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ec:	f000 8086 	beq.w	80068fc <HAL_TIM_ConfigClockSource+0x176>
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f4:	d87f      	bhi.n	80068f6 <HAL_TIM_ConfigClockSource+0x170>
 80067f6:	2b70      	cmp	r3, #112	; 0x70
 80067f8:	d01a      	beq.n	8006830 <HAL_TIM_ConfigClockSource+0xaa>
 80067fa:	2b70      	cmp	r3, #112	; 0x70
 80067fc:	d87b      	bhi.n	80068f6 <HAL_TIM_ConfigClockSource+0x170>
 80067fe:	2b60      	cmp	r3, #96	; 0x60
 8006800:	d050      	beq.n	80068a4 <HAL_TIM_ConfigClockSource+0x11e>
 8006802:	2b60      	cmp	r3, #96	; 0x60
 8006804:	d877      	bhi.n	80068f6 <HAL_TIM_ConfigClockSource+0x170>
 8006806:	2b50      	cmp	r3, #80	; 0x50
 8006808:	d03c      	beq.n	8006884 <HAL_TIM_ConfigClockSource+0xfe>
 800680a:	2b50      	cmp	r3, #80	; 0x50
 800680c:	d873      	bhi.n	80068f6 <HAL_TIM_ConfigClockSource+0x170>
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	d058      	beq.n	80068c4 <HAL_TIM_ConfigClockSource+0x13e>
 8006812:	2b40      	cmp	r3, #64	; 0x40
 8006814:	d86f      	bhi.n	80068f6 <HAL_TIM_ConfigClockSource+0x170>
 8006816:	2b30      	cmp	r3, #48	; 0x30
 8006818:	d064      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x15e>
 800681a:	2b30      	cmp	r3, #48	; 0x30
 800681c:	d86b      	bhi.n	80068f6 <HAL_TIM_ConfigClockSource+0x170>
 800681e:	2b20      	cmp	r3, #32
 8006820:	d060      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x15e>
 8006822:	2b20      	cmp	r3, #32
 8006824:	d867      	bhi.n	80068f6 <HAL_TIM_ConfigClockSource+0x170>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d05c      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x15e>
 800682a:	2b10      	cmp	r3, #16
 800682c:	d05a      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x15e>
 800682e:	e062      	b.n	80068f6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	6899      	ldr	r1, [r3, #8]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f000 f9a6 	bl	8006b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006852:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	609a      	str	r2, [r3, #8]
      break;
 800685c:	e04f      	b.n	80068fe <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	6899      	ldr	r1, [r3, #8]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f000 f98f 	bl	8006b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006880:	609a      	str	r2, [r3, #8]
      break;
 8006882:	e03c      	b.n	80068fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	6859      	ldr	r1, [r3, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	461a      	mov	r2, r3
 8006892:	f000 f903 	bl	8006a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2150      	movs	r1, #80	; 0x50
 800689c:	4618      	mov	r0, r3
 800689e:	f000 f95c 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 80068a2:	e02c      	b.n	80068fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	6859      	ldr	r1, [r3, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	461a      	mov	r2, r3
 80068b2:	f000 f922 	bl	8006afa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2160      	movs	r1, #96	; 0x60
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 f94c 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 80068c2:	e01c      	b.n	80068fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	6859      	ldr	r1, [r3, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	461a      	mov	r2, r3
 80068d2:	f000 f8e3 	bl	8006a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2140      	movs	r1, #64	; 0x40
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 f93c 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 80068e2:	e00c      	b.n	80068fe <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f000 f933 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 80068f4:	e003      	b.n	80068fe <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
      break;
 80068fa:	e000      	b.n	80068fe <HAL_TIM_ConfigClockSource+0x178>
      break;
 80068fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800690e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a40      	ldr	r2, [pc, #256]	; (8006a7c <TIM_Base_SetConfig+0x114>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d013      	beq.n	80069a8 <TIM_Base_SetConfig+0x40>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006986:	d00f      	beq.n	80069a8 <TIM_Base_SetConfig+0x40>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a3d      	ldr	r2, [pc, #244]	; (8006a80 <TIM_Base_SetConfig+0x118>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00b      	beq.n	80069a8 <TIM_Base_SetConfig+0x40>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a3c      	ldr	r2, [pc, #240]	; (8006a84 <TIM_Base_SetConfig+0x11c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d007      	beq.n	80069a8 <TIM_Base_SetConfig+0x40>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a3b      	ldr	r2, [pc, #236]	; (8006a88 <TIM_Base_SetConfig+0x120>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_Base_SetConfig+0x40>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a3a      	ldr	r2, [pc, #232]	; (8006a8c <TIM_Base_SetConfig+0x124>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d108      	bne.n	80069ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a2f      	ldr	r2, [pc, #188]	; (8006a7c <TIM_Base_SetConfig+0x114>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d01f      	beq.n	8006a02 <TIM_Base_SetConfig+0x9a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c8:	d01b      	beq.n	8006a02 <TIM_Base_SetConfig+0x9a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a2c      	ldr	r2, [pc, #176]	; (8006a80 <TIM_Base_SetConfig+0x118>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d017      	beq.n	8006a02 <TIM_Base_SetConfig+0x9a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a2b      	ldr	r2, [pc, #172]	; (8006a84 <TIM_Base_SetConfig+0x11c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d013      	beq.n	8006a02 <TIM_Base_SetConfig+0x9a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a2a      	ldr	r2, [pc, #168]	; (8006a88 <TIM_Base_SetConfig+0x120>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00f      	beq.n	8006a02 <TIM_Base_SetConfig+0x9a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a29      	ldr	r2, [pc, #164]	; (8006a8c <TIM_Base_SetConfig+0x124>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00b      	beq.n	8006a02 <TIM_Base_SetConfig+0x9a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a28      	ldr	r2, [pc, #160]	; (8006a90 <TIM_Base_SetConfig+0x128>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d007      	beq.n	8006a02 <TIM_Base_SetConfig+0x9a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a27      	ldr	r2, [pc, #156]	; (8006a94 <TIM_Base_SetConfig+0x12c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <TIM_Base_SetConfig+0x9a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a26      	ldr	r2, [pc, #152]	; (8006a98 <TIM_Base_SetConfig+0x130>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d108      	bne.n	8006a14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a10      	ldr	r2, [pc, #64]	; (8006a7c <TIM_Base_SetConfig+0x114>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00f      	beq.n	8006a60 <TIM_Base_SetConfig+0xf8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a12      	ldr	r2, [pc, #72]	; (8006a8c <TIM_Base_SetConfig+0x124>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00b      	beq.n	8006a60 <TIM_Base_SetConfig+0xf8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a11      	ldr	r2, [pc, #68]	; (8006a90 <TIM_Base_SetConfig+0x128>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d007      	beq.n	8006a60 <TIM_Base_SetConfig+0xf8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a10      	ldr	r2, [pc, #64]	; (8006a94 <TIM_Base_SetConfig+0x12c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d003      	beq.n	8006a60 <TIM_Base_SetConfig+0xf8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a0f      	ldr	r2, [pc, #60]	; (8006a98 <TIM_Base_SetConfig+0x130>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d103      	bne.n	8006a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	691a      	ldr	r2, [r3, #16]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	615a      	str	r2, [r3, #20]
}
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40012c00 	.word	0x40012c00
 8006a80:	40000400 	.word	0x40000400
 8006a84:	40000800 	.word	0x40000800
 8006a88:	40000c00 	.word	0x40000c00
 8006a8c:	40013400 	.word	0x40013400
 8006a90:	40014000 	.word	0x40014000
 8006a94:	40014400 	.word	0x40014400
 8006a98:	40014800 	.word	0x40014800

08006a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f023 0201 	bic.w	r2, r3, #1
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f023 030a 	bic.w	r3, r3, #10
 8006ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b087      	sub	sp, #28
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f023 0210 	bic.w	r2, r3, #16
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	031b      	lsls	r3, r3, #12
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	621a      	str	r2, [r3, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f043 0307 	orr.w	r3, r3, #7
 8006b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	609a      	str	r2, [r3, #8]
}
 8006b84:	bf00      	nop
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	021a      	lsls	r2, r3, #8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	609a      	str	r2, [r3, #8]
}
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e068      	b.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a2e      	ldr	r2, [pc, #184]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a2d      	ldr	r2, [pc, #180]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d108      	bne.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01d      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5a:	d018      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a1b      	ldr	r2, [pc, #108]	; (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d013      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1a      	ldr	r2, [pc, #104]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00e      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a18      	ldr	r2, [pc, #96]	; (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d009      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a13      	ldr	r2, [pc, #76]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d004      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a14      	ldr	r2, [pc, #80]	; (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d10c      	bne.n	8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40013400 	.word	0x40013400
 8006cd0:	40000400 	.word	0x40000400
 8006cd4:	40000800 	.word	0x40000800
 8006cd8:	40000c00 	.word	0x40000c00
 8006cdc:	40014000 	.word	0x40014000

08006ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e042      	b.n	8006db4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d106      	bne.n	8006d46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f003 fa8b 	bl	800a25c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2224      	movs	r2, #36	; 0x24
 8006d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0201 	bic.w	r2, r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f8c4 	bl	8006eec <UART_SetConfig>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e022      	b.n	8006db4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fbb4 	bl	80074e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0201 	orr.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fc3b 	bl	8007628 <UART_CheckIdleState>
 8006db2:	4603      	mov	r3, r0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08a      	sub	sp, #40	; 0x28
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	f040 8084 	bne.w	8006ee0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_UART_Transmit+0x28>
 8006dde:	88fb      	ldrh	r3, [r7, #6]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e07c      	b.n	8006ee2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d101      	bne.n	8006df6 <HAL_UART_Transmit+0x3a>
 8006df2:	2302      	movs	r3, #2
 8006df4:	e075      	b.n	8006ee2 <HAL_UART_Transmit+0x126>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2221      	movs	r2, #33	; 0x21
 8006e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e0e:	f7f9 fefb 	bl	8000c08 <HAL_GetTick>
 8006e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	88fa      	ldrh	r2, [r7, #6]
 8006e18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	88fa      	ldrh	r2, [r7, #6]
 8006e20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2c:	d108      	bne.n	8006e40 <HAL_UART_Transmit+0x84>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	e003      	b.n	8006e48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006e50:	e02d      	b.n	8006eae <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2180      	movs	r1, #128	; 0x80
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fc2e 	bl	80076be <UART_WaitOnFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e03a      	b.n	8006ee2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10b      	bne.n	8006e8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	881a      	ldrh	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e7e:	b292      	uxth	r2, r2
 8006e80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	3302      	adds	r3, #2
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	e008      	b.n	8006e9c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	781a      	ldrb	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	b292      	uxth	r2, r2
 8006e94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1cb      	bne.n	8006e52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2140      	movs	r1, #64	; 0x40
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fbfa 	bl	80076be <UART_WaitOnFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e006      	b.n	8006ee2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	e000      	b.n	8006ee2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006ee0:	2302      	movs	r3, #2
  }
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ef0:	b08c      	sub	sp, #48	; 0x30
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	431a      	orrs	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4baa      	ldr	r3, [pc, #680]	; (80071c4 <UART_SetConfig+0x2d8>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f24:	430b      	orrs	r3, r1
 8006f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a9f      	ldr	r2, [pc, #636]	; (80071c8 <UART_SetConfig+0x2dc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d004      	beq.n	8006f58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f54:	4313      	orrs	r3, r2
 8006f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006f62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	f023 010f 	bic.w	r1, r3, #15
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a90      	ldr	r2, [pc, #576]	; (80071cc <UART_SetConfig+0x2e0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d125      	bne.n	8006fdc <UART_SetConfig+0xf0>
 8006f90:	4b8f      	ldr	r3, [pc, #572]	; (80071d0 <UART_SetConfig+0x2e4>)
 8006f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d81a      	bhi.n	8006fd4 <UART_SetConfig+0xe8>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <UART_SetConfig+0xb8>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fc5 	.word	0x08006fc5
 8006fac:	08006fbd 	.word	0x08006fbd
 8006fb0:	08006fcd 	.word	0x08006fcd
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fba:	e116      	b.n	80071ea <UART_SetConfig+0x2fe>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fc2:	e112      	b.n	80071ea <UART_SetConfig+0x2fe>
 8006fc4:	2304      	movs	r3, #4
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fca:	e10e      	b.n	80071ea <UART_SetConfig+0x2fe>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fd2:	e10a      	b.n	80071ea <UART_SetConfig+0x2fe>
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fda:	e106      	b.n	80071ea <UART_SetConfig+0x2fe>
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a7c      	ldr	r2, [pc, #496]	; (80071d4 <UART_SetConfig+0x2e8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d138      	bne.n	8007058 <UART_SetConfig+0x16c>
 8006fe6:	4b7a      	ldr	r3, [pc, #488]	; (80071d0 <UART_SetConfig+0x2e4>)
 8006fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fec:	f003 030c 	and.w	r3, r3, #12
 8006ff0:	2b0c      	cmp	r3, #12
 8006ff2:	d82d      	bhi.n	8007050 <UART_SetConfig+0x164>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0x110>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	08007031 	.word	0x08007031
 8007000:	08007051 	.word	0x08007051
 8007004:	08007051 	.word	0x08007051
 8007008:	08007051 	.word	0x08007051
 800700c:	08007041 	.word	0x08007041
 8007010:	08007051 	.word	0x08007051
 8007014:	08007051 	.word	0x08007051
 8007018:	08007051 	.word	0x08007051
 800701c:	08007039 	.word	0x08007039
 8007020:	08007051 	.word	0x08007051
 8007024:	08007051 	.word	0x08007051
 8007028:	08007051 	.word	0x08007051
 800702c:	08007049 	.word	0x08007049
 8007030:	2300      	movs	r3, #0
 8007032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007036:	e0d8      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007038:	2302      	movs	r3, #2
 800703a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800703e:	e0d4      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007040:	2304      	movs	r3, #4
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007046:	e0d0      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007048:	2308      	movs	r3, #8
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800704e:	e0cc      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007050:	2310      	movs	r3, #16
 8007052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007056:	e0c8      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a5e      	ldr	r2, [pc, #376]	; (80071d8 <UART_SetConfig+0x2ec>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d125      	bne.n	80070ae <UART_SetConfig+0x1c2>
 8007062:	4b5b      	ldr	r3, [pc, #364]	; (80071d0 <UART_SetConfig+0x2e4>)
 8007064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007068:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800706c:	2b30      	cmp	r3, #48	; 0x30
 800706e:	d016      	beq.n	800709e <UART_SetConfig+0x1b2>
 8007070:	2b30      	cmp	r3, #48	; 0x30
 8007072:	d818      	bhi.n	80070a6 <UART_SetConfig+0x1ba>
 8007074:	2b20      	cmp	r3, #32
 8007076:	d00a      	beq.n	800708e <UART_SetConfig+0x1a2>
 8007078:	2b20      	cmp	r3, #32
 800707a:	d814      	bhi.n	80070a6 <UART_SetConfig+0x1ba>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <UART_SetConfig+0x19a>
 8007080:	2b10      	cmp	r3, #16
 8007082:	d008      	beq.n	8007096 <UART_SetConfig+0x1aa>
 8007084:	e00f      	b.n	80070a6 <UART_SetConfig+0x1ba>
 8007086:	2300      	movs	r3, #0
 8007088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708c:	e0ad      	b.n	80071ea <UART_SetConfig+0x2fe>
 800708e:	2302      	movs	r3, #2
 8007090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007094:	e0a9      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007096:	2304      	movs	r3, #4
 8007098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800709c:	e0a5      	b.n	80071ea <UART_SetConfig+0x2fe>
 800709e:	2308      	movs	r3, #8
 80070a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a4:	e0a1      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070a6:	2310      	movs	r3, #16
 80070a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ac:	e09d      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a4a      	ldr	r2, [pc, #296]	; (80071dc <UART_SetConfig+0x2f0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d125      	bne.n	8007104 <UART_SetConfig+0x218>
 80070b8:	4b45      	ldr	r3, [pc, #276]	; (80071d0 <UART_SetConfig+0x2e4>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070c2:	2bc0      	cmp	r3, #192	; 0xc0
 80070c4:	d016      	beq.n	80070f4 <UART_SetConfig+0x208>
 80070c6:	2bc0      	cmp	r3, #192	; 0xc0
 80070c8:	d818      	bhi.n	80070fc <UART_SetConfig+0x210>
 80070ca:	2b80      	cmp	r3, #128	; 0x80
 80070cc:	d00a      	beq.n	80070e4 <UART_SetConfig+0x1f8>
 80070ce:	2b80      	cmp	r3, #128	; 0x80
 80070d0:	d814      	bhi.n	80070fc <UART_SetConfig+0x210>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <UART_SetConfig+0x1f0>
 80070d6:	2b40      	cmp	r3, #64	; 0x40
 80070d8:	d008      	beq.n	80070ec <UART_SetConfig+0x200>
 80070da:	e00f      	b.n	80070fc <UART_SetConfig+0x210>
 80070dc:	2300      	movs	r3, #0
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e2:	e082      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070e4:	2302      	movs	r3, #2
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ea:	e07e      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070ec:	2304      	movs	r3, #4
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f2:	e07a      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070f4:	2308      	movs	r3, #8
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fa:	e076      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070fc:	2310      	movs	r3, #16
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007102:	e072      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a35      	ldr	r2, [pc, #212]	; (80071e0 <UART_SetConfig+0x2f4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d12a      	bne.n	8007164 <UART_SetConfig+0x278>
 800710e:	4b30      	ldr	r3, [pc, #192]	; (80071d0 <UART_SetConfig+0x2e4>)
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800711c:	d01a      	beq.n	8007154 <UART_SetConfig+0x268>
 800711e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007122:	d81b      	bhi.n	800715c <UART_SetConfig+0x270>
 8007124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007128:	d00c      	beq.n	8007144 <UART_SetConfig+0x258>
 800712a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800712e:	d815      	bhi.n	800715c <UART_SetConfig+0x270>
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <UART_SetConfig+0x250>
 8007134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007138:	d008      	beq.n	800714c <UART_SetConfig+0x260>
 800713a:	e00f      	b.n	800715c <UART_SetConfig+0x270>
 800713c:	2300      	movs	r3, #0
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007142:	e052      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007144:	2302      	movs	r3, #2
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714a:	e04e      	b.n	80071ea <UART_SetConfig+0x2fe>
 800714c:	2304      	movs	r3, #4
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007152:	e04a      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007154:	2308      	movs	r3, #8
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715a:	e046      	b.n	80071ea <UART_SetConfig+0x2fe>
 800715c:	2310      	movs	r3, #16
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007162:	e042      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a17      	ldr	r2, [pc, #92]	; (80071c8 <UART_SetConfig+0x2dc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d13a      	bne.n	80071e4 <UART_SetConfig+0x2f8>
 800716e:	4b18      	ldr	r3, [pc, #96]	; (80071d0 <UART_SetConfig+0x2e4>)
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007174:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800717c:	d01a      	beq.n	80071b4 <UART_SetConfig+0x2c8>
 800717e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007182:	d81b      	bhi.n	80071bc <UART_SetConfig+0x2d0>
 8007184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007188:	d00c      	beq.n	80071a4 <UART_SetConfig+0x2b8>
 800718a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800718e:	d815      	bhi.n	80071bc <UART_SetConfig+0x2d0>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <UART_SetConfig+0x2b0>
 8007194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007198:	d008      	beq.n	80071ac <UART_SetConfig+0x2c0>
 800719a:	e00f      	b.n	80071bc <UART_SetConfig+0x2d0>
 800719c:	2300      	movs	r3, #0
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071a2:	e022      	b.n	80071ea <UART_SetConfig+0x2fe>
 80071a4:	2302      	movs	r3, #2
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071aa:	e01e      	b.n	80071ea <UART_SetConfig+0x2fe>
 80071ac:	2304      	movs	r3, #4
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b2:	e01a      	b.n	80071ea <UART_SetConfig+0x2fe>
 80071b4:	2308      	movs	r3, #8
 80071b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ba:	e016      	b.n	80071ea <UART_SetConfig+0x2fe>
 80071bc:	2310      	movs	r3, #16
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c2:	e012      	b.n	80071ea <UART_SetConfig+0x2fe>
 80071c4:	cfff69f3 	.word	0xcfff69f3
 80071c8:	40008000 	.word	0x40008000
 80071cc:	40013800 	.word	0x40013800
 80071d0:	40021000 	.word	0x40021000
 80071d4:	40004400 	.word	0x40004400
 80071d8:	40004800 	.word	0x40004800
 80071dc:	40004c00 	.word	0x40004c00
 80071e0:	40005000 	.word	0x40005000
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4aae      	ldr	r2, [pc, #696]	; (80074a8 <UART_SetConfig+0x5bc>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	f040 8097 	bne.w	8007324 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	d823      	bhi.n	8007246 <UART_SetConfig+0x35a>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <UART_SetConfig+0x318>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007229 	.word	0x08007229
 8007208:	08007247 	.word	0x08007247
 800720c:	08007231 	.word	0x08007231
 8007210:	08007247 	.word	0x08007247
 8007214:	08007237 	.word	0x08007237
 8007218:	08007247 	.word	0x08007247
 800721c:	08007247 	.word	0x08007247
 8007220:	08007247 	.word	0x08007247
 8007224:	0800723f 	.word	0x0800723f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007228:	f7fe fa90 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 800722c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800722e:	e010      	b.n	8007252 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007230:	4b9e      	ldr	r3, [pc, #632]	; (80074ac <UART_SetConfig+0x5c0>)
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007234:	e00d      	b.n	8007252 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007236:	f7fe f9f1 	bl	800561c <HAL_RCC_GetSysClockFreq>
 800723a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800723c:	e009      	b.n	8007252 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007244:	e005      	b.n	8007252 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007250:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8130 	beq.w	80074ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	4a94      	ldr	r2, [pc, #592]	; (80074b0 <UART_SetConfig+0x5c4>)
 8007260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007264:	461a      	mov	r2, r3
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	fbb3 f3f2 	udiv	r3, r3, r2
 800726c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	4413      	add	r3, r2
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	429a      	cmp	r2, r3
 800727c:	d305      	bcc.n	800728a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	429a      	cmp	r2, r3
 8007288:	d903      	bls.n	8007292 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007290:	e113      	b.n	80074ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	2200      	movs	r2, #0
 8007296:	60bb      	str	r3, [r7, #8]
 8007298:	60fa      	str	r2, [r7, #12]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	4a84      	ldr	r2, [pc, #528]	; (80074b0 <UART_SetConfig+0x5c4>)
 80072a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2200      	movs	r2, #0
 80072a8:	603b      	str	r3, [r7, #0]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072b4:	f7f9 fafa 	bl	80008ac <__aeabi_uldivmod>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4610      	mov	r0, r2
 80072be:	4619      	mov	r1, r3
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	020b      	lsls	r3, r1, #8
 80072ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072ce:	0202      	lsls	r2, r0, #8
 80072d0:	6979      	ldr	r1, [r7, #20]
 80072d2:	6849      	ldr	r1, [r1, #4]
 80072d4:	0849      	lsrs	r1, r1, #1
 80072d6:	2000      	movs	r0, #0
 80072d8:	460c      	mov	r4, r1
 80072da:	4605      	mov	r5, r0
 80072dc:	eb12 0804 	adds.w	r8, r2, r4
 80072e0:	eb43 0905 	adc.w	r9, r3, r5
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	469a      	mov	sl, r3
 80072ec:	4693      	mov	fp, r2
 80072ee:	4652      	mov	r2, sl
 80072f0:	465b      	mov	r3, fp
 80072f2:	4640      	mov	r0, r8
 80072f4:	4649      	mov	r1, r9
 80072f6:	f7f9 fad9 	bl	80008ac <__aeabi_uldivmod>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4613      	mov	r3, r2
 8007300:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007308:	d308      	bcc.n	800731c <UART_SetConfig+0x430>
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007310:	d204      	bcs.n	800731c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6a3a      	ldr	r2, [r7, #32]
 8007318:	60da      	str	r2, [r3, #12]
 800731a:	e0ce      	b.n	80074ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007322:	e0ca      	b.n	80074ba <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732c:	d166      	bne.n	80073fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800732e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007332:	2b08      	cmp	r3, #8
 8007334:	d827      	bhi.n	8007386 <UART_SetConfig+0x49a>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <UART_SetConfig+0x450>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	08007361 	.word	0x08007361
 8007340:	08007369 	.word	0x08007369
 8007344:	08007371 	.word	0x08007371
 8007348:	08007387 	.word	0x08007387
 800734c:	08007377 	.word	0x08007377
 8007350:	08007387 	.word	0x08007387
 8007354:	08007387 	.word	0x08007387
 8007358:	08007387 	.word	0x08007387
 800735c:	0800737f 	.word	0x0800737f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007360:	f7fe f9f4 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8007364:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007366:	e014      	b.n	8007392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007368:	f7fe fa06 	bl	8005778 <HAL_RCC_GetPCLK2Freq>
 800736c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800736e:	e010      	b.n	8007392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007370:	4b4e      	ldr	r3, [pc, #312]	; (80074ac <UART_SetConfig+0x5c0>)
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007374:	e00d      	b.n	8007392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007376:	f7fe f951 	bl	800561c <HAL_RCC_GetSysClockFreq>
 800737a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800737c:	e009      	b.n	8007392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007384:	e005      	b.n	8007392 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8090 	beq.w	80074ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	4a44      	ldr	r2, [pc, #272]	; (80074b0 <UART_SetConfig+0x5c4>)
 80073a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a4:	461a      	mov	r2, r3
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073ac:	005a      	lsls	r2, r3, #1
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	441a      	add	r2, r3
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80073be:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	2b0f      	cmp	r3, #15
 80073c4:	d916      	bls.n	80073f4 <UART_SetConfig+0x508>
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073cc:	d212      	bcs.n	80073f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f023 030f 	bic.w	r3, r3, #15
 80073d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	8bfb      	ldrh	r3, [r7, #30]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	8bfa      	ldrh	r2, [r7, #30]
 80073f0:	60da      	str	r2, [r3, #12]
 80073f2:	e062      	b.n	80074ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073fa:	e05e      	b.n	80074ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007400:	2b08      	cmp	r3, #8
 8007402:	d828      	bhi.n	8007456 <UART_SetConfig+0x56a>
 8007404:	a201      	add	r2, pc, #4	; (adr r2, 800740c <UART_SetConfig+0x520>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	08007431 	.word	0x08007431
 8007410:	08007439 	.word	0x08007439
 8007414:	08007441 	.word	0x08007441
 8007418:	08007457 	.word	0x08007457
 800741c:	08007447 	.word	0x08007447
 8007420:	08007457 	.word	0x08007457
 8007424:	08007457 	.word	0x08007457
 8007428:	08007457 	.word	0x08007457
 800742c:	0800744f 	.word	0x0800744f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007430:	f7fe f98c 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8007434:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007436:	e014      	b.n	8007462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007438:	f7fe f99e 	bl	8005778 <HAL_RCC_GetPCLK2Freq>
 800743c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800743e:	e010      	b.n	8007462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007440:	4b1a      	ldr	r3, [pc, #104]	; (80074ac <UART_SetConfig+0x5c0>)
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007444:	e00d      	b.n	8007462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007446:	f7fe f8e9 	bl	800561c <HAL_RCC_GetSysClockFreq>
 800744a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800744c:	e009      	b.n	8007462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800744e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007454:	e005      	b.n	8007462 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007460:	bf00      	nop
    }

    if (pclk != 0U)
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d028      	beq.n	80074ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	4a10      	ldr	r2, [pc, #64]	; (80074b0 <UART_SetConfig+0x5c4>)
 800746e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007472:	461a      	mov	r2, r3
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	fbb3 f2f2 	udiv	r2, r3, r2
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	441a      	add	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	fbb2 f3f3 	udiv	r3, r2, r3
 800748a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	2b0f      	cmp	r3, #15
 8007490:	d910      	bls.n	80074b4 <UART_SetConfig+0x5c8>
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007498:	d20c      	bcs.n	80074b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	b29a      	uxth	r2, r3
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60da      	str	r2, [r3, #12]
 80074a4:	e009      	b.n	80074ba <UART_SetConfig+0x5ce>
 80074a6:	bf00      	nop
 80074a8:	40008000 	.word	0x40008000
 80074ac:	00f42400 	.word	0x00f42400
 80074b0:	0800b1fc 	.word	0x0800b1fc
      }
      else
      {
        ret = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2201      	movs	r2, #1
 80074be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2200      	movs	r2, #0
 80074ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2200      	movs	r2, #0
 80074d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80074d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3730      	adds	r7, #48	; 0x30
 80074de:	46bd      	mov	sp, r7
 80074e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080074e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00a      	beq.n	8007596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01a      	beq.n	80075fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075e2:	d10a      	bne.n	80075fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
  }
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af02      	add	r7, sp, #8
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007638:	f7f9 fae6 	bl	8000c08 <HAL_GetTick>
 800763c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b08      	cmp	r3, #8
 800764a:	d10e      	bne.n	800766a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800764c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f82f 	bl	80076be <UART_WaitOnFlagUntilTimeout>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e025      	b.n	80076b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b04      	cmp	r3, #4
 8007676:	d10e      	bne.n	8007696 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f819 	bl	80076be <UART_WaitOnFlagUntilTimeout>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e00f      	b.n	80076b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b09c      	sub	sp, #112	; 0x70
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	60b9      	str	r1, [r7, #8]
 80076c8:	603b      	str	r3, [r7, #0]
 80076ca:	4613      	mov	r3, r2
 80076cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ce:	e0a9      	b.n	8007824 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	f000 80a5 	beq.w	8007824 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076da:	f7f9 fa95 	bl	8000c08 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d302      	bcc.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80076ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d140      	bne.n	8007772 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007704:	667b      	str	r3, [r7, #100]	; 0x64
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800770e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007710:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007714:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800771c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e6      	bne.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	f023 0301 	bic.w	r3, r3, #1
 8007738:	663b      	str	r3, [r7, #96]	; 0x60
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007742:	64ba      	str	r2, [r7, #72]	; 0x48
 8007744:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e5      	bne.n	8007722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2220      	movs	r2, #32
 800775a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2220      	movs	r2, #32
 8007762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e069      	b.n	8007846 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d051      	beq.n	8007824 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800778a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800778e:	d149      	bne.n	8007824 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007798:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b8:	637b      	str	r3, [r7, #52]	; 0x34
 80077ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e6      	bne.n	800779a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3308      	adds	r3, #8
 80077d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	e853 3f00 	ldrex	r3, [r3]
 80077da:	613b      	str	r3, [r7, #16]
   return(result);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f023 0301 	bic.w	r3, r3, #1
 80077e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3308      	adds	r3, #8
 80077ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077ec:	623a      	str	r2, [r7, #32]
 80077ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	69f9      	ldr	r1, [r7, #28]
 80077f2:	6a3a      	ldr	r2, [r7, #32]
 80077f4:	e841 2300 	strex	r3, r2, [r1]
 80077f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e5      	bne.n	80077cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2220      	movs	r2, #32
 8007804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2220      	movs	r2, #32
 800780c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2220      	movs	r2, #32
 8007814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e010      	b.n	8007846 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69da      	ldr	r2, [r3, #28]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4013      	ands	r3, r2
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	429a      	cmp	r2, r3
 8007832:	bf0c      	ite	eq
 8007834:	2301      	moveq	r3, #1
 8007836:	2300      	movne	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	429a      	cmp	r2, r3
 8007840:	f43f af46 	beq.w	80076d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3770      	adds	r7, #112	; 0x70
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_UARTEx_DisableFifoMode+0x16>
 8007860:	2302      	movs	r3, #2
 8007862:	e027      	b.n	80078b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	; 0x24
 8007870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0201 	bic.w	r2, r2, #1
 800788a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007892:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e02d      	b.n	8007934 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2224      	movs	r2, #36	; 0x24
 80078e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0201 	bic.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f84f 	bl	80079b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007950:	2302      	movs	r3, #2
 8007952:	e02d      	b.n	80079b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2224      	movs	r2, #36	; 0x24
 8007960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0201 	bic.w	r2, r2, #1
 800797a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f811 	bl	80079b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d108      	bne.n	80079da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079d8:	e031      	b.n	8007a3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079da:	2308      	movs	r3, #8
 80079dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079de:	2308      	movs	r3, #8
 80079e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	0e5b      	lsrs	r3, r3, #25
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	0f5b      	lsrs	r3, r3, #29
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	7b3a      	ldrb	r2, [r7, #12]
 8007a06:	4911      	ldr	r1, [pc, #68]	; (8007a4c <UARTEx_SetNbDataToProcess+0x94>)
 8007a08:	5c8a      	ldrb	r2, [r1, r2]
 8007a0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a0e:	7b3a      	ldrb	r2, [r7, #12]
 8007a10:	490f      	ldr	r1, [pc, #60]	; (8007a50 <UARTEx_SetNbDataToProcess+0x98>)
 8007a12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a14:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	7b7a      	ldrb	r2, [r7, #13]
 8007a24:	4909      	ldr	r1, [pc, #36]	; (8007a4c <UARTEx_SetNbDataToProcess+0x94>)
 8007a26:	5c8a      	ldrb	r2, [r1, r2]
 8007a28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a2c:	7b7a      	ldrb	r2, [r7, #13]
 8007a2e:	4908      	ldr	r1, [pc, #32]	; (8007a50 <UARTEx_SetNbDataToProcess+0x98>)
 8007a30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a32:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a3e:	bf00      	nop
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	0800b214 	.word	0x0800b214
 8007a50:	0800b21c 	.word	0x0800b21c

08007a54 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	601a      	str	r2, [r3, #0]
}
 8007a90:	bf00      	nop
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6892      	ldr	r2, [r2, #8]
 8007ab2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6852      	ldr	r2, [r2, #4]
 8007abc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d103      	bne.n	8007ad0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	1e5a      	subs	r2, r3, #1
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007afa:	4b4e      	ldr	r3, [pc, #312]	; (8007c34 <xTaskIncrementTick+0x144>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f040 808e 	bne.w	8007c20 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b04:	4b4c      	ldr	r3, [pc, #304]	; (8007c38 <xTaskIncrementTick+0x148>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b0c:	4a4a      	ldr	r2, [pc, #296]	; (8007c38 <xTaskIncrementTick+0x148>)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d120      	bne.n	8007b5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b18:	4b48      	ldr	r3, [pc, #288]	; (8007c3c <xTaskIncrementTick+0x14c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00a      	beq.n	8007b38 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b34:	bf00      	nop
 8007b36:	e7fe      	b.n	8007b36 <xTaskIncrementTick+0x46>
 8007b38:	4b40      	ldr	r3, [pc, #256]	; (8007c3c <xTaskIncrementTick+0x14c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	4b40      	ldr	r3, [pc, #256]	; (8007c40 <xTaskIncrementTick+0x150>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a3e      	ldr	r2, [pc, #248]	; (8007c3c <xTaskIncrementTick+0x14c>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	4a3e      	ldr	r2, [pc, #248]	; (8007c40 <xTaskIncrementTick+0x150>)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	4b3d      	ldr	r3, [pc, #244]	; (8007c44 <xTaskIncrementTick+0x154>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3301      	adds	r3, #1
 8007b52:	4a3c      	ldr	r2, [pc, #240]	; (8007c44 <xTaskIncrementTick+0x154>)
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	f000 f8df 	bl	8007d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b5a:	4b3b      	ldr	r3, [pc, #236]	; (8007c48 <xTaskIncrementTick+0x158>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d348      	bcc.n	8007bf6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b64:	4b35      	ldr	r3, [pc, #212]	; (8007c3c <xTaskIncrementTick+0x14c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d104      	bne.n	8007b78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b6e:	4b36      	ldr	r3, [pc, #216]	; (8007c48 <xTaskIncrementTick+0x158>)
 8007b70:	f04f 32ff 	mov.w	r2, #4294967295
 8007b74:	601a      	str	r2, [r3, #0]
					break;
 8007b76:	e03e      	b.n	8007bf6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b78:	4b30      	ldr	r3, [pc, #192]	; (8007c3c <xTaskIncrementTick+0x14c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d203      	bcs.n	8007b98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b90:	4a2d      	ldr	r2, [pc, #180]	; (8007c48 <xTaskIncrementTick+0x158>)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b96:	e02e      	b.n	8007bf6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff ff7d 	bl	8007a9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d004      	beq.n	8007bb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	3318      	adds	r3, #24
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff ff74 	bl	8007a9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	2201      	movs	r2, #1
 8007bba:	409a      	lsls	r2, r3
 8007bbc:	4b23      	ldr	r3, [pc, #140]	; (8007c4c <xTaskIncrementTick+0x15c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	4a22      	ldr	r2, [pc, #136]	; (8007c4c <xTaskIncrementTick+0x15c>)
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4a1f      	ldr	r2, [pc, #124]	; (8007c50 <xTaskIncrementTick+0x160>)
 8007bd4:	441a      	add	r2, r3
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4610      	mov	r0, r2
 8007bde:	f7ff ff39 	bl	8007a54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be6:	4b1b      	ldr	r3, [pc, #108]	; (8007c54 <xTaskIncrementTick+0x164>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d3b9      	bcc.n	8007b64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bf4:	e7b6      	b.n	8007b64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bf6:	4b17      	ldr	r3, [pc, #92]	; (8007c54 <xTaskIncrementTick+0x164>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfc:	4914      	ldr	r1, [pc, #80]	; (8007c50 <xTaskIncrementTick+0x160>)
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	440b      	add	r3, r1
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d901      	bls.n	8007c12 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c12:	4b11      	ldr	r3, [pc, #68]	; (8007c58 <xTaskIncrementTick+0x168>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d007      	beq.n	8007c2a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	617b      	str	r3, [r7, #20]
 8007c1e:	e004      	b.n	8007c2a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c20:	4b0e      	ldr	r3, [pc, #56]	; (8007c5c <xTaskIncrementTick+0x16c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3301      	adds	r3, #1
 8007c26:	4a0d      	ldr	r2, [pc, #52]	; (8007c5c <xTaskIncrementTick+0x16c>)
 8007c28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c2a:	697b      	ldr	r3, [r7, #20]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	20020660 	.word	0x20020660
 8007c38:	20020648 	.word	0x20020648
 8007c3c:	20020640 	.word	0x20020640
 8007c40:	20020644 	.word	0x20020644
 8007c44:	20020658 	.word	0x20020658
 8007c48:	2002065c 	.word	0x2002065c
 8007c4c:	2002064c 	.word	0x2002064c
 8007c50:	200205b4 	.word	0x200205b4
 8007c54:	200205b0 	.word	0x200205b0
 8007c58:	20020654 	.word	0x20020654
 8007c5c:	20020650 	.word	0x20020650

08007c60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c66:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <vTaskSwitchContext+0xa4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c6e:	4b26      	ldr	r3, [pc, #152]	; (8007d08 <vTaskSwitchContext+0xa8>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c74:	e03f      	b.n	8007cf6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007c76:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <vTaskSwitchContext+0xa8>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c7c:	4b23      	ldr	r3, [pc, #140]	; (8007d0c <vTaskSwitchContext+0xac>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	fab3 f383 	clz	r3, r3
 8007c88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c8a:	7afb      	ldrb	r3, [r7, #11]
 8007c8c:	f1c3 031f 	rsb	r3, r3, #31
 8007c90:	617b      	str	r3, [r7, #20]
 8007c92:	491f      	ldr	r1, [pc, #124]	; (8007d10 <vTaskSwitchContext+0xb0>)
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <vTaskSwitchContext+0x5c>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	607b      	str	r3, [r7, #4]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <vTaskSwitchContext+0x5a>
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4a12      	ldr	r2, [pc, #72]	; (8007d10 <vTaskSwitchContext+0xb0>)
 8007cc8:	4413      	add	r3, r2
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	605a      	str	r2, [r3, #4]
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	3308      	adds	r3, #8
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d104      	bne.n	8007cec <vTaskSwitchContext+0x8c>
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	605a      	str	r2, [r3, #4]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	4a08      	ldr	r2, [pc, #32]	; (8007d14 <vTaskSwitchContext+0xb4>)
 8007cf4:	6013      	str	r3, [r2, #0]
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20020660 	.word	0x20020660
 8007d08:	20020654 	.word	0x20020654
 8007d0c:	2002064c 	.word	0x2002064c
 8007d10:	200205b4 	.word	0x200205b4
 8007d14:	200205b0 	.word	0x200205b0

08007d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d1e:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <prvResetNextTaskUnblockTime+0x38>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d104      	bne.n	8007d32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d28:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <prvResetNextTaskUnblockTime+0x3c>)
 8007d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d30:	e008      	b.n	8007d44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d32:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <prvResetNextTaskUnblockTime+0x38>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4a04      	ldr	r2, [pc, #16]	; (8007d54 <prvResetNextTaskUnblockTime+0x3c>)
 8007d42:	6013      	str	r3, [r2, #0]
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	20020640 	.word	0x20020640
 8007d54:	2002065c 	.word	0x2002065c
	...

08007d60 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d60:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <pxCurrentTCBConst2>)
 8007d62:	6819      	ldr	r1, [r3, #0]
 8007d64:	6808      	ldr	r0, [r1, #0]
 8007d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6a:	f380 8809 	msr	PSP, r0
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f04f 0000 	mov.w	r0, #0
 8007d76:	f380 8811 	msr	BASEPRI, r0
 8007d7a:	4770      	bx	lr
 8007d7c:	f3af 8000 	nop.w

08007d80 <pxCurrentTCBConst2>:
 8007d80:	200205b0 	.word	0x200205b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
	...

08007d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d90:	f3ef 8009 	mrs	r0, PSP
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <pxCurrentTCBConst>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	f01e 0f10 	tst.w	lr, #16
 8007da0:	bf08      	it	eq
 8007da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007daa:	6010      	str	r0, [r2, #0]
 8007dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007db4:	f380 8811 	msr	BASEPRI, r0
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f7ff ff4e 	bl	8007c60 <vTaskSwitchContext>
 8007dc4:	f04f 0000 	mov.w	r0, #0
 8007dc8:	f380 8811 	msr	BASEPRI, r0
 8007dcc:	bc09      	pop	{r0, r3}
 8007dce:	6819      	ldr	r1, [r3, #0]
 8007dd0:	6808      	ldr	r0, [r1, #0]
 8007dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd6:	f01e 0f10 	tst.w	lr, #16
 8007dda:	bf08      	it	eq
 8007ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007de0:	f380 8809 	msr	PSP, r0
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	f3af 8000 	nop.w

08007df0 <pxCurrentTCBConst>:
 8007df0:	200205b0 	.word	0x200205b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop

08007df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	607b      	str	r3, [r7, #4]
}
 8007e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e12:	f7ff fe6d 	bl	8007af0 <xTaskIncrementTick>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e1c:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <SysTick_Handler+0x40>)
 8007e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	2300      	movs	r3, #0
 8007e26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8007e4a:	2111      	movs	r1, #17
 8007e4c:	20d4      	movs	r0, #212	; 0xd4
 8007e4e:	f001 fac7 	bl	80093e0 <SENSOR_IO_Read>
 8007e52:	4603      	mov	r3, r0
 8007e54:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	f003 0303 	and.w	r3, r3, #3
 8007e60:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8007e62:	7bba      	ldrb	r2, [r7, #14]
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	2111      	movs	r1, #17
 8007e70:	20d4      	movs	r0, #212	; 0xd4
 8007e72:	f001 fa9b 	bl	80093ac <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8007e76:	2112      	movs	r1, #18
 8007e78:	20d4      	movs	r0, #212	; 0xd4
 8007e7a:	f001 fab1 	bl	80093e0 <SENSOR_IO_Read>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8007e82:	88fb      	ldrh	r3, [r7, #6]
 8007e84:	0a1b      	lsrs	r3, r3, #8
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8007e90:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8007e92:	7bba      	ldrb	r2, [r7, #14]
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	2112      	movs	r1, #18
 8007ea0:	20d4      	movs	r0, #212	; 0xd4
 8007ea2:	f001 fa83 	bl	80093ac <SENSOR_IO_Write>
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8007eb8:	2111      	movs	r1, #17
 8007eba:	20d4      	movs	r0, #212	; 0xd4
 8007ebc:	f001 fa90 	bl	80093e0 <SENSOR_IO_Read>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	2111      	movs	r1, #17
 8007ed2:	20d4      	movs	r0, #212	; 0xd4
 8007ed4:	f001 fa6a 	bl	80093ac <SENSOR_IO_Write>
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8007ee4:	f001 fa58 	bl	8009398 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8007ee8:	210f      	movs	r1, #15
 8007eea:	20d4      	movs	r0, #212	; 0xd4
 8007eec:	f001 fa78 	bl	80093e0 <SENSOR_IO_Read>
 8007ef0:	4603      	mov	r3, r0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	4603      	mov	r3, r0
 8007efe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8007f00:	2300      	movs	r3, #0
 8007f02:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8007f04:	2116      	movs	r1, #22
 8007f06:	20d4      	movs	r0, #212	; 0xd4
 8007f08:	f001 fa6a 	bl	80093e0 <SENSOR_IO_Read>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f16:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8007f18:	88fb      	ldrh	r3, [r7, #6]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f24:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	2116      	movs	r1, #22
 8007f2c:	20d4      	movs	r0, #212	; 0xd4
 8007f2e:	f001 fa3d 	bl	80093ac <SENSOR_IO_Write>
}
 8007f32:	bf00      	nop
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8007f52:	2111      	movs	r1, #17
 8007f54:	20d4      	movs	r0, #212	; 0xd4
 8007f56:	f001 fa43 	bl	80093e0 <SENSOR_IO_Read>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8007f5e:	f107 0208 	add.w	r2, r7, #8
 8007f62:	2306      	movs	r3, #6
 8007f64:	2122      	movs	r1, #34	; 0x22
 8007f66:	20d4      	movs	r0, #212	; 0xd4
 8007f68:	f001 fa58 	bl	800941c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	77fb      	strb	r3, [r7, #31]
 8007f70:	e01c      	b.n	8007fac <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8007f72:	7ffb      	ldrb	r3, [r7, #31]
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	3301      	adds	r3, #1
 8007f78:	3320      	adds	r3, #32
 8007f7a:	443b      	add	r3, r7
 8007f7c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	021b      	lsls	r3, r3, #8
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	7ffb      	ldrb	r3, [r7, #31]
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	3320      	adds	r3, #32
 8007f8c:	443b      	add	r3, r7
 8007f8e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	4413      	add	r3, r2
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	7ffb      	ldrb	r3, [r7, #31]
 8007f9a:	b212      	sxth	r2, r2
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	3320      	adds	r3, #32
 8007fa0:	443b      	add	r3, r7
 8007fa2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8007fa6:	7ffb      	ldrb	r3, [r7, #31]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	77fb      	strb	r3, [r7, #31]
 8007fac:	7ffb      	ldrb	r3, [r7, #31]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d9df      	bls.n	8007f72 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	f003 030c 	and.w	r3, r3, #12
 8007fb8:	2b0c      	cmp	r3, #12
 8007fba:	d829      	bhi.n	8008010 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8007fbc:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8007fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc2:	bf00      	nop
 8007fc4:	08007ff9 	.word	0x08007ff9
 8007fc8:	08008011 	.word	0x08008011
 8007fcc:	08008011 	.word	0x08008011
 8007fd0:	08008011 	.word	0x08008011
 8007fd4:	08007fff 	.word	0x08007fff
 8007fd8:	08008011 	.word	0x08008011
 8007fdc:	08008011 	.word	0x08008011
 8007fe0:	08008011 	.word	0x08008011
 8007fe4:	08008005 	.word	0x08008005
 8007fe8:	08008011 	.word	0x08008011
 8007fec:	08008011 	.word	0x08008011
 8007ff0:	08008011 	.word	0x08008011
 8007ff4:	0800800b 	.word	0x0800800b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8007ff8:	4b16      	ldr	r3, [pc, #88]	; (8008054 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8007ffa:	61bb      	str	r3, [r7, #24]
    break;
 8007ffc:	e008      	b.n	8008010 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8007ffe:	4b16      	ldr	r3, [pc, #88]	; (8008058 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8008000:	61bb      	str	r3, [r7, #24]
    break;
 8008002:	e005      	b.n	8008010 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8008004:	4b15      	ldr	r3, [pc, #84]	; (800805c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8008006:	61bb      	str	r3, [r7, #24]
    break;
 8008008:	e002      	b.n	8008010 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800800a:	4b15      	ldr	r3, [pc, #84]	; (8008060 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 800800c:	61bb      	str	r3, [r7, #24]
    break;    
 800800e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8008010:	2300      	movs	r3, #0
 8008012:	77fb      	strb	r3, [r7, #31]
 8008014:	e016      	b.n	8008044 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8008016:	7ffb      	ldrb	r3, [r7, #31]
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	3320      	adds	r3, #32
 800801c:	443b      	add	r3, r7
 800801e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800802a:	7ffb      	ldrb	r3, [r7, #31]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	4413      	add	r3, r2
 8008032:	edd7 7a06 	vldr	s15, [r7, #24]
 8008036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800803e:	7ffb      	ldrb	r3, [r7, #31]
 8008040:	3301      	adds	r3, #1
 8008042:	77fb      	strb	r3, [r7, #31]
 8008044:	7ffb      	ldrb	r3, [r7, #31]
 8008046:	2b02      	cmp	r3, #2
 8008048:	d9e5      	bls.n	8008016 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 800804a:	bf00      	nop
 800804c:	bf00      	nop
 800804e:	3720      	adds	r7, #32
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	410c0000 	.word	0x410c0000
 8008058:	418c0000 	.word	0x418c0000
 800805c:	420c0000 	.word	0x420c0000
 8008060:	428c0000 	.word	0x428c0000

08008064 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2120      	movs	r1, #32
 8008074:	4618      	mov	r0, r3
 8008076:	f001 f9b3 	bl	80093e0 <SENSOR_IO_Read>
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	f023 0304 	bic.w	r3, r3, #4
 8008084:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	f043 0304 	orr.w	r3, r3, #4
 800808c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	f023 0303 	bic.w	r3, r3, #3
 8008094:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	f043 0301 	orr.w	r3, r3, #1
 800809c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080a4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80080a6:	88fb      	ldrh	r3, [r7, #6]
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	7bfa      	ldrb	r2, [r7, #15]
 80080ac:	2120      	movs	r1, #32
 80080ae:	4618      	mov	r0, r3
 80080b0:	f001 f97c 	bl	80093ac <SENSOR_IO_Write>
}
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4603      	mov	r3, r0
 80080c4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80080ca:	f001 f965 	bl	8009398 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	210f      	movs	r1, #15
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 f983 	bl	80093e0 <SENSOR_IO_Read>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80080de:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80080f2:	88fb      	ldrh	r3, [r7, #6]
 80080f4:	b2d8      	uxtb	r0, r3
 80080f6:	f107 020c 	add.w	r2, r7, #12
 80080fa:	2302      	movs	r3, #2
 80080fc:	21b0      	movs	r1, #176	; 0xb0
 80080fe:	f001 f98d 	bl	800941c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8008102:	7b3b      	ldrb	r3, [r7, #12]
 8008104:	085b      	lsrs	r3, r3, #1
 8008106:	b2db      	uxtb	r3, r3
 8008108:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800810a:	7b7b      	ldrb	r3, [r7, #13]
 800810c:	085b      	lsrs	r3, r3, #1
 800810e:	b2db      	uxtb	r3, r3
 8008110:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8008112:	88fb      	ldrh	r3, [r7, #6]
 8008114:	b2d8      	uxtb	r0, r3
 8008116:	f107 020c 	add.w	r2, r7, #12
 800811a:	2302      	movs	r3, #2
 800811c:	21b6      	movs	r1, #182	; 0xb6
 800811e:	f001 f97d 	bl	800941c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8008122:	7b7b      	ldrb	r3, [r7, #13]
 8008124:	021b      	lsls	r3, r3, #8
 8008126:	b21a      	sxth	r2, r3
 8008128:	7b3b      	ldrb	r3, [r7, #12]
 800812a:	b21b      	sxth	r3, r3
 800812c:	4313      	orrs	r3, r2
 800812e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	b2d8      	uxtb	r0, r3
 8008134:	f107 020c 	add.w	r2, r7, #12
 8008138:	2302      	movs	r3, #2
 800813a:	21ba      	movs	r1, #186	; 0xba
 800813c:	f001 f96e 	bl	800941c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8008140:	7b7b      	ldrb	r3, [r7, #13]
 8008142:	021b      	lsls	r3, r3, #8
 8008144:	b21a      	sxth	r2, r3
 8008146:	7b3b      	ldrb	r3, [r7, #12]
 8008148:	b21b      	sxth	r3, r3
 800814a:	4313      	orrs	r3, r2
 800814c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800814e:	88fb      	ldrh	r3, [r7, #6]
 8008150:	b2d8      	uxtb	r0, r3
 8008152:	f107 020c 	add.w	r2, r7, #12
 8008156:	2302      	movs	r3, #2
 8008158:	21a8      	movs	r1, #168	; 0xa8
 800815a:	f001 f95f 	bl	800941c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800815e:	7b7b      	ldrb	r3, [r7, #13]
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	b21a      	sxth	r2, r3
 8008164:	7b3b      	ldrb	r3, [r7, #12]
 8008166:	b21b      	sxth	r3, r3
 8008168:	4313      	orrs	r3, r2
 800816a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800816c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008170:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800817e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008182:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	ee07 3a90 	vmov	s15, r3
 800818c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008190:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008194:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8008198:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081ba:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80081be:	edd7 7a04 	vldr	s15, [r7, #16]
 80081c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80081c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081ca:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80081ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80081d2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8008218 <HTS221_H_ReadHumidity+0x130>
 80081d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081de:	dd01      	ble.n	80081e4 <HTS221_H_ReadHumidity+0xfc>
 80081e0:	4b0e      	ldr	r3, [pc, #56]	; (800821c <HTS221_H_ReadHumidity+0x134>)
 80081e2:	e00a      	b.n	80081fa <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80081e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80081e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80081ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f0:	d502      	bpl.n	80081f8 <HTS221_H_ReadHumidity+0x110>
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	e000      	b.n	80081fa <HTS221_H_ReadHumidity+0x112>
 80081f8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80081fa:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80081fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8008200:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008204:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008208:	eef0 7a66 	vmov.f32	s15, s13
}
 800820c:	eeb0 0a67 	vmov.f32	s0, s15
 8008210:	3720      	adds	r7, #32
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	447a0000 	.word	0x447a0000
 800821c:	447a0000 	.word	0x447a0000

08008220 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	6039      	str	r1, [r7, #0]
 800822a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2120      	movs	r1, #32
 8008232:	4618      	mov	r0, r3
 8008234:	f001 f8d4 	bl	80093e0 <SENSOR_IO_Read>
 8008238:	4603      	mov	r3, r0
 800823a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	f023 0304 	bic.w	r3, r3, #4
 8008242:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	f043 0304 	orr.w	r3, r3, #4
 800824a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	f023 0303 	bic.w	r3, r3, #3
 8008252:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	f043 0301 	orr.w	r3, r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008262:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8008264:	88fb      	ldrh	r3, [r7, #6]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	7bfa      	ldrb	r2, [r7, #15]
 800826a:	2120      	movs	r1, #32
 800826c:	4618      	mov	r0, r3
 800826e:	f001 f89d 	bl	80093ac <SENSOR_IO_Write>
}
 8008272:	bf00      	nop
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b088      	sub	sp, #32
 800827e:	af00      	add	r7, sp, #0
 8008280:	4603      	mov	r3, r0
 8008282:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8008284:	88fb      	ldrh	r3, [r7, #6]
 8008286:	b2d8      	uxtb	r0, r3
 8008288:	f107 0208 	add.w	r2, r7, #8
 800828c:	2302      	movs	r3, #2
 800828e:	21b2      	movs	r1, #178	; 0xb2
 8008290:	f001 f8c4 	bl	800941c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8008294:	88fb      	ldrh	r3, [r7, #6]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2135      	movs	r1, #53	; 0x35
 800829a:	4618      	mov	r0, r3
 800829c:	f001 f8a0 	bl	80093e0 <SENSOR_IO_Read>
 80082a0:	4603      	mov	r3, r0
 80082a2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80082a4:	7ffb      	ldrb	r3, [r7, #31]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	b21b      	sxth	r3, r3
 80082aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ae:	b21a      	sxth	r2, r3
 80082b0:	7a3b      	ldrb	r3, [r7, #8]
 80082b2:	b21b      	sxth	r3, r3
 80082b4:	4313      	orrs	r3, r2
 80082b6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80082b8:	7ffb      	ldrb	r3, [r7, #31]
 80082ba:	019b      	lsls	r3, r3, #6
 80082bc:	b21b      	sxth	r3, r3
 80082be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082c2:	b21a      	sxth	r2, r3
 80082c4:	7a7b      	ldrb	r3, [r7, #9]
 80082c6:	b21b      	sxth	r3, r3
 80082c8:	4313      	orrs	r3, r2
 80082ca:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80082cc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80082d0:	10db      	asrs	r3, r3, #3
 80082d2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80082d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80082d8:	10db      	asrs	r3, r3, #3
 80082da:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	b2d8      	uxtb	r0, r3
 80082e0:	f107 0208 	add.w	r2, r7, #8
 80082e4:	2304      	movs	r3, #4
 80082e6:	21bc      	movs	r1, #188	; 0xbc
 80082e8:	f001 f898 	bl	800941c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80082ec:	7a7b      	ldrb	r3, [r7, #9]
 80082ee:	021b      	lsls	r3, r3, #8
 80082f0:	b21a      	sxth	r2, r3
 80082f2:	7a3b      	ldrb	r3, [r7, #8]
 80082f4:	b21b      	sxth	r3, r3
 80082f6:	4313      	orrs	r3, r2
 80082f8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	b21a      	sxth	r2, r3
 8008300:	7abb      	ldrb	r3, [r7, #10]
 8008302:	b21b      	sxth	r3, r3
 8008304:	4313      	orrs	r3, r2
 8008306:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8008308:	88fb      	ldrh	r3, [r7, #6]
 800830a:	b2d8      	uxtb	r0, r3
 800830c:	f107 0208 	add.w	r2, r7, #8
 8008310:	2302      	movs	r3, #2
 8008312:	21aa      	movs	r1, #170	; 0xaa
 8008314:	f001 f882 	bl	800941c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8008318:	7a7b      	ldrb	r3, [r7, #9]
 800831a:	021b      	lsls	r3, r3, #8
 800831c:	b21a      	sxth	r2, r3
 800831e:	7a3b      	ldrb	r3, [r7, #8]
 8008320:	b21b      	sxth	r3, r3
 8008322:	4313      	orrs	r3, r2
 8008324:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8008326:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800832a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	ee07 3a90 	vmov	s15, r3
 8008334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008338:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800833c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800834a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800834e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8008352:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	ee07 3a90 	vmov	s15, r3
 800835c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008364:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008368:	ee07 3a90 	vmov	s15, r3
 800836c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008374:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	ee07 3a90 	vmov	s15, r3
}
 800837e:	eeb0 0a67 	vmov.f32	s0, s15
 8008382:	3720      	adds	r7, #32
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

uint32_t play[wave_size]={1};//33075

//each time the blue button is pressed, modify the counter to change the detected sensor.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	4603      	mov	r3, r0
 8008390:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_13) {
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008398:	d112      	bne.n	80083c0 <HAL_GPIO_EXTI_Callback+0x38>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800839a:	2120      	movs	r1, #32
 800839c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80083a0:	f7f9 fed8 	bl	8002154 <HAL_GPIO_TogglePin>
		mode=(mode+1)%3;
 80083a4:	4b08      	ldr	r3, [pc, #32]	; (80083c8 <HAL_GPIO_EXTI_Callback+0x40>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	1c59      	adds	r1, r3, #1
 80083aa:	4b08      	ldr	r3, [pc, #32]	; (80083cc <HAL_GPIO_EXTI_Callback+0x44>)
 80083ac:	fb83 3201 	smull	r3, r2, r3, r1
 80083b0:	17cb      	asrs	r3, r1, #31
 80083b2:	1ad2      	subs	r2, r2, r3
 80083b4:	4613      	mov	r3, r2
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	4413      	add	r3, r2
 80083ba:	1aca      	subs	r2, r1, r3
 80083bc:	4b02      	ldr	r3, [pc, #8]	; (80083c8 <HAL_GPIO_EXTI_Callback+0x40>)
 80083be:	601a      	str	r2, [r3, #0]
	}
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	20020a64 	.word	0x20020a64
 80083cc:	55555556 	.word	0x55555556

080083d0 <init_sound_wave>:
 * Initialize the warning sound wave.
 * Level1: with frequency: xxx
 * Level2: with frequency: xxx
 * Level3: with frequency: xxx
 */
void init_sound_wave(){
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
	//Tone 1
	//G6 1567.98 Hz
	//sample n = 44.1k/1567.98 = 28
	for(int i = 0; i < 28; i++){
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e038      	b.n	800844e <init_sound_wave+0x7e>
		G6[i] =  0.33*(1 + arm_sin_f32(2*PI*i/28))*256;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083e6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8008568 <init_sound_wave+0x198>
 80083ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083ee:	eef3 6a0c 	vmov.f32	s13, #60	; 0x41e00000  28.0
 80083f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80083f6:	eeb0 0a47 	vmov.f32	s0, s14
 80083fa:	f002 f961 	bl	800a6c0 <arm_sin_f32>
 80083fe:	eef0 7a40 	vmov.f32	s15, s0
 8008402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800840a:	ee17 0a90 	vmov	r0, s15
 800840e:	f7f8 f9d5 	bl	80007bc <__aeabi_f2d>
 8008412:	a353      	add	r3, pc, #332	; (adr r3, 8008560 <init_sound_wave+0x190>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	f7f7 ff42 	bl	80002a0 <__aeabi_dmul>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4610      	mov	r0, r2
 8008422:	4619      	mov	r1, r3
 8008424:	f04f 0200 	mov.w	r2, #0
 8008428:	4b50      	ldr	r3, [pc, #320]	; (800856c <init_sound_wave+0x19c>)
 800842a:	f7f7 ff39 	bl	80002a0 <__aeabi_dmul>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	4610      	mov	r0, r2
 8008434:	4619      	mov	r1, r3
 8008436:	f7f8 fa19 	bl	800086c <__aeabi_d2uiz>
 800843a:	4603      	mov	r3, r0
 800843c:	b2d9      	uxtb	r1, r3
 800843e:	4a4c      	ldr	r2, [pc, #304]	; (8008570 <init_sound_wave+0x1a0>)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4413      	add	r3, r2
 8008444:	460a      	mov	r2, r1
 8008446:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 28; i++){
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b1b      	cmp	r3, #27
 8008452:	ddc3      	ble.n	80083dc <init_sound_wave+0xc>
	}

	//Tone 2
	//E7 2637.02 Hz
	//sample n = 44.1k/1318.5 = 16
	for(int i = 0; i < 16; i++){
 8008454:	2300      	movs	r3, #0
 8008456:	60bb      	str	r3, [r7, #8]
 8008458:	e038      	b.n	80084cc <init_sound_wave+0xfc>
		E7[i] =  0.33*(1 + arm_sin_f32(2*PI*i/16))*256;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	ee07 3a90 	vmov	s15, r3
 8008460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008464:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008568 <init_sound_wave+0x198>
 8008468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800846c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8008470:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008474:	eeb0 0a47 	vmov.f32	s0, s14
 8008478:	f002 f922 	bl	800a6c0 <arm_sin_f32>
 800847c:	eef0 7a40 	vmov.f32	s15, s0
 8008480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008488:	ee17 0a90 	vmov	r0, s15
 800848c:	f7f8 f996 	bl	80007bc <__aeabi_f2d>
 8008490:	a333      	add	r3, pc, #204	; (adr r3, 8008560 <init_sound_wave+0x190>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f7 ff03 	bl	80002a0 <__aeabi_dmul>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	4b31      	ldr	r3, [pc, #196]	; (800856c <init_sound_wave+0x19c>)
 80084a8:	f7f7 fefa 	bl	80002a0 <__aeabi_dmul>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4610      	mov	r0, r2
 80084b2:	4619      	mov	r1, r3
 80084b4:	f7f8 f9da 	bl	800086c <__aeabi_d2uiz>
 80084b8:	4603      	mov	r3, r0
 80084ba:	b2d9      	uxtb	r1, r3
 80084bc:	4a2d      	ldr	r2, [pc, #180]	; (8008574 <init_sound_wave+0x1a4>)
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	4413      	add	r3, r2
 80084c2:	460a      	mov	r2, r1
 80084c4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 16; i++){
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	3301      	adds	r3, #1
 80084ca:	60bb      	str	r3, [r7, #8]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2b0f      	cmp	r3, #15
 80084d0:	ddc3      	ble.n	800845a <init_sound_wave+0x8a>
	}

	//Tone 3
	//A6 3520.0 Hz
	//sample n = 44.1k/3520 = 12
	for(int i = 0; i < 12; i++){
 80084d2:	2300      	movs	r3, #0
 80084d4:	607b      	str	r3, [r7, #4]
 80084d6:	e038      	b.n	800854a <init_sound_wave+0x17a>
		A6[i] =  0.33*(1 + arm_sin_f32(2*PI*i/12))*256;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084e2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008568 <init_sound_wave+0x198>
 80084e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084ea:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80084ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80084f2:	eeb0 0a47 	vmov.f32	s0, s14
 80084f6:	f002 f8e3 	bl	800a6c0 <arm_sin_f32>
 80084fa:	eef0 7a40 	vmov.f32	s15, s0
 80084fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008502:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008506:	ee17 0a90 	vmov	r0, s15
 800850a:	f7f8 f957 	bl	80007bc <__aeabi_f2d>
 800850e:	a314      	add	r3, pc, #80	; (adr r3, 8008560 <init_sound_wave+0x190>)
 8008510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008514:	f7f7 fec4 	bl	80002a0 <__aeabi_dmul>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4610      	mov	r0, r2
 800851e:	4619      	mov	r1, r3
 8008520:	f04f 0200 	mov.w	r2, #0
 8008524:	4b11      	ldr	r3, [pc, #68]	; (800856c <init_sound_wave+0x19c>)
 8008526:	f7f7 febb 	bl	80002a0 <__aeabi_dmul>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4610      	mov	r0, r2
 8008530:	4619      	mov	r1, r3
 8008532:	f7f8 f99b 	bl	800086c <__aeabi_d2uiz>
 8008536:	4603      	mov	r3, r0
 8008538:	b2d9      	uxtb	r1, r3
 800853a:	4a0f      	ldr	r2, [pc, #60]	; (8008578 <init_sound_wave+0x1a8>)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4413      	add	r3, r2
 8008540:	460a      	mov	r2, r1
 8008542:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 12; i++){
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3301      	adds	r3, #1
 8008548:	607b      	str	r3, [r7, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b0b      	cmp	r3, #11
 800854e:	ddc3      	ble.n	80084d8 <init_sound_wave+0x108>
	}
}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	f3af 8000 	nop.w
 8008560:	51eb851f 	.word	0x51eb851f
 8008564:	3fd51eb8 	.word	0x3fd51eb8
 8008568:	40c90fdb 	.word	0x40c90fdb
 800856c:	40700000 	.word	0x40700000
 8008570:	20020a20 	.word	0x20020a20
 8008574:	20020a3c 	.word	0x20020a3c
 8008578:	20020a4c 	.word	0x20020a4c

0800857c <write_sound_wave_into_mem>:

/**
 * Write the sound waves into the flash.
 */
void write_sound_wave_into_mem(){
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
	uint32_t tone_addr = 0x000000;
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]

	//Write in tone1 C6, start at 0
	for(int i = 0; i < 1181; i++){
 8008586:	2300      	movs	r3, #0
 8008588:	60bb      	str	r3, [r7, #8]
 800858a:	e00f      	b.n	80085ac <write_sound_wave_into_mem+0x30>
	  if(BSP_QSPI_Write((uint8_t *)G6, tone_addr, 28) != QSPI_OK){
 800858c:	221c      	movs	r2, #28
 800858e:	68f9      	ldr	r1, [r7, #12]
 8008590:	4826      	ldr	r0, [pc, #152]	; (800862c <write_sound_wave_into_mem+0xb0>)
 8008592:	f001 f8ab 	bl	80096ec <BSP_QSPI_Write>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <write_sound_wave_into_mem+0x24>
		  Error_Handler();
 800859c:	f000 fe06 	bl	80091ac <Error_Handler>
	  }
	  tone_addr += 28;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	331c      	adds	r3, #28
 80085a4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 1181; i++){
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	3301      	adds	r3, #1
 80085aa:	60bb      	str	r3, [r7, #8]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f240 429c 	movw	r2, #1180	; 0x49c
 80085b2:	4293      	cmp	r3, r2
 80085b4:	ddea      	ble.n	800858c <write_sound_wave_into_mem+0x10>
	}
	tone_addr = 0x008133;//33075
 80085b6:	f248 1333 	movw	r3, #33075	; 0x8133
 80085ba:	60fb      	str	r3, [r7, #12]


  //Write in tone2 E6, start at 33075
  for(int i = 0; i < 2067; i++){
 80085bc:	2300      	movs	r3, #0
 80085be:	607b      	str	r3, [r7, #4]
 80085c0:	e00f      	b.n	80085e2 <write_sound_wave_into_mem+0x66>
	  if(BSP_QSPI_Write((uint8_t *)E7, tone_addr, 16) != QSPI_OK){
 80085c2:	2210      	movs	r2, #16
 80085c4:	68f9      	ldr	r1, [r7, #12]
 80085c6:	481a      	ldr	r0, [pc, #104]	; (8008630 <write_sound_wave_into_mem+0xb4>)
 80085c8:	f001 f890 	bl	80096ec <BSP_QSPI_Write>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <write_sound_wave_into_mem+0x5a>
		  Error_Handler();
 80085d2:	f000 fdeb 	bl	80091ac <Error_Handler>
	  }
	  tone_addr += 16;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3310      	adds	r3, #16
 80085da:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < 2067; i++){
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3301      	adds	r3, #1
 80085e0:	607b      	str	r3, [r7, #4]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f640 0212 	movw	r2, #2066	; 0x812
 80085e8:	4293      	cmp	r3, r2
 80085ea:	ddea      	ble.n	80085c2 <write_sound_wave_into_mem+0x46>
  }
  tone_addr = 0x010266;//66150
 80085ec:	4b11      	ldr	r3, [pc, #68]	; (8008634 <write_sound_wave_into_mem+0xb8>)
 80085ee:	60fb      	str	r3, [r7, #12]

  //Write in tone3 G6, start at 66150
  for(int i = 0; i < 2756; i++){
 80085f0:	2300      	movs	r3, #0
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	e00f      	b.n	8008616 <write_sound_wave_into_mem+0x9a>
	  if(BSP_QSPI_Write((uint8_t *)A6, tone_addr, 12) != QSPI_OK){
 80085f6:	220c      	movs	r2, #12
 80085f8:	68f9      	ldr	r1, [r7, #12]
 80085fa:	480f      	ldr	r0, [pc, #60]	; (8008638 <write_sound_wave_into_mem+0xbc>)
 80085fc:	f001 f876 	bl	80096ec <BSP_QSPI_Write>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <write_sound_wave_into_mem+0x8e>
		  Error_Handler();
 8008606:	f000 fdd1 	bl	80091ac <Error_Handler>
	  }
	  tone_addr += 12;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	330c      	adds	r3, #12
 800860e:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < 2756; i++){
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	603b      	str	r3, [r7, #0]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	f640 22c3 	movw	r2, #2755	; 0xac3
 800861c:	4293      	cmp	r3, r2
 800861e:	ddea      	ble.n	80085f6 <write_sound_wave_into_mem+0x7a>
  }
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20020a20 	.word	0x20020a20
 8008630:	20020a3c 	.word	0x20020a3c
 8008634:	00010266 	.word	0x00010266
 8008638:	20020a4c 	.word	0x20020a4c

0800863c <init_gyro_record>:

/**
 * Initialize the gyro sensor data array.
 */
void init_gyro_record(){
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
	BSP_GYRO_GetXYZ(gyro);
 8008642:	4813      	ldr	r0, [pc, #76]	; (8008690 <init_gyro_record+0x54>)
 8008644:	f000 ff4a 	bl	80094dc <BSP_GYRO_GetXYZ>
	for(int i=0;i<data_array_size;i++){
 8008648:	2300      	movs	r3, #0
 800864a:	607b      	str	r3, [r7, #4]
 800864c:	e017      	b.n	800867e <init_gyro_record+0x42>
		gyro_x[i]=gyro[0];
 800864e:	4b10      	ldr	r3, [pc, #64]	; (8008690 <init_gyro_record+0x54>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4910      	ldr	r1, [pc, #64]	; (8008694 <init_gyro_record+0x58>)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	440b      	add	r3, r1
 800865a:	601a      	str	r2, [r3, #0]
		gyro_y[i]=gyro[1];
 800865c:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <init_gyro_record+0x54>)
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	490d      	ldr	r1, [pc, #52]	; (8008698 <init_gyro_record+0x5c>)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	440b      	add	r3, r1
 8008668:	601a      	str	r2, [r3, #0]
		gyro_z[i]=gyro[2];
 800866a:	4b09      	ldr	r3, [pc, #36]	; (8008690 <init_gyro_record+0x54>)
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	490b      	ldr	r1, [pc, #44]	; (800869c <init_gyro_record+0x60>)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	440b      	add	r3, r1
 8008676:	601a      	str	r2, [r3, #0]
	for(int i=0;i<data_array_size;i++){
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3301      	adds	r3, #1
 800867c:	607b      	str	r3, [r7, #4]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b13      	cmp	r3, #19
 8008682:	dde4      	ble.n	800864e <init_gyro_record+0x12>
	}
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	2002091c 	.word	0x2002091c
 8008694:	20020928 	.word	0x20020928
 8008698:	20020978 	.word	0x20020978
 800869c:	200209c8 	.word	0x200209c8

080086a0 <push_data_into_gyro_record>:

/**
 * Update the gyro record.
 */
void push_data_into_gyro_record(){
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
	for(int i=0;i<data_array_size-1;i++){
 80086a6:	2300      	movs	r3, #0
 80086a8:	607b      	str	r3, [r7, #4]
 80086aa:	e023      	b.n	80086f4 <push_data_into_gyro_record+0x54>
		gyro_x[i]=gyro_x[i+1];
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3301      	adds	r3, #1
 80086b0:	4a1b      	ldr	r2, [pc, #108]	; (8008720 <push_data_into_gyro_record+0x80>)
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	4919      	ldr	r1, [pc, #100]	; (8008720 <push_data_into_gyro_record+0x80>)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	601a      	str	r2, [r3, #0]
		gyro_y[i]=gyro_y[i+1];
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	3301      	adds	r3, #1
 80086c6:	4a17      	ldr	r2, [pc, #92]	; (8008724 <push_data_into_gyro_record+0x84>)
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	4915      	ldr	r1, [pc, #84]	; (8008724 <push_data_into_gyro_record+0x84>)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	601a      	str	r2, [r3, #0]
		gyro_z[i]=gyro_z[i+1];
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3301      	adds	r3, #1
 80086dc:	4a12      	ldr	r2, [pc, #72]	; (8008728 <push_data_into_gyro_record+0x88>)
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	4910      	ldr	r1, [pc, #64]	; (8008728 <push_data_into_gyro_record+0x88>)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	440b      	add	r3, r1
 80086ec:	601a      	str	r2, [r3, #0]
	for(int i=0;i<data_array_size-1;i++){
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3301      	adds	r3, #1
 80086f2:	607b      	str	r3, [r7, #4]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b12      	cmp	r3, #18
 80086f8:	ddd8      	ble.n	80086ac <push_data_into_gyro_record+0xc>
	}
	gyro_x[data_array_size-1]=gyro[0];
 80086fa:	4b0c      	ldr	r3, [pc, #48]	; (800872c <push_data_into_gyro_record+0x8c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a08      	ldr	r2, [pc, #32]	; (8008720 <push_data_into_gyro_record+0x80>)
 8008700:	64d3      	str	r3, [r2, #76]	; 0x4c
	gyro_y[data_array_size-1]=gyro[1];
 8008702:	4b0a      	ldr	r3, [pc, #40]	; (800872c <push_data_into_gyro_record+0x8c>)
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	4a07      	ldr	r2, [pc, #28]	; (8008724 <push_data_into_gyro_record+0x84>)
 8008708:	64d3      	str	r3, [r2, #76]	; 0x4c
	gyro_z[data_array_size-1]=gyro[2];
 800870a:	4b08      	ldr	r3, [pc, #32]	; (800872c <push_data_into_gyro_record+0x8c>)
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	4a06      	ldr	r2, [pc, #24]	; (8008728 <push_data_into_gyro_record+0x88>)
 8008710:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20020928 	.word	0x20020928
 8008724:	20020978 	.word	0x20020978
 8008728:	200209c8 	.word	0x200209c8
 800872c:	2002091c 	.word	0x2002091c

08008730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b094      	sub	sp, #80	; 0x50
 8008734:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008736:	f7f8 fa3b 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800873a:	f000 fa8b 	bl	8008c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800873e:	f000 fc7d 	bl	800903c <MX_GPIO_Init>
  MX_DMA_Init();
 8008742:	f000 fc49 	bl	8008fd8 <MX_DMA_Init>
  MX_I2C2_Init();
 8008746:	f000 fb17 	bl	8008d78 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800874a:	f000 fbf9 	bl	8008f40 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 800874e:	f000 fb53 	bl	8008df8 <MX_OCTOSPI1_Init>
  MX_TIM2_Init();
 8008752:	f000 fba7 	bl	8008ea4 <MX_TIM2_Init>
  MX_DAC1_Init();
 8008756:	f000 facf 	bl	8008cf8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  //component init
  BSP_QSPI_Init();
 800875a:	f000 fef7 	bl	800954c <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800875e:	48ba      	ldr	r0, [pc, #744]	; (8008a48 <main+0x318>)
 8008760:	f7fd fe82 	bl	8006468 <HAL_TIM_Base_Start_IT>
  BSP_HSENSOR_Init();
 8008764:	f000 fed2 	bl	800950c <BSP_HSENSOR_Init>
  BSP_GYRO_Init();
 8008768:	f000 fe76 	bl	8009458 <BSP_GYRO_Init>
  BSP_TSENSOR_Init();
 800876c:	f001 fb38 	bl	8009de0 <BSP_TSENSOR_Init>
  //private function init
  init_sound_wave();
 8008770:	f7ff fe2e 	bl	80083d0 <init_sound_wave>
  init_gyro_record();
 8008774:	f7ff ff62 	bl	800863c <init_gyro_record>


  //Erase 3 blocks prior to write in
  if(BSP_QSPI_Erase_Block(0) != QSPI_OK){
 8008778:	2000      	movs	r0, #0
 800877a:	f001 f83d 	bl	80097f8 <BSP_QSPI_Erase_Block>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <main+0x58>
	  Error_Handler();
 8008784:	f000 fd12 	bl	80091ac <Error_Handler>
  }
  if(BSP_QSPI_Erase_Block(65536) != QSPI_OK){
 8008788:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800878c:	f001 f834 	bl	80097f8 <BSP_QSPI_Erase_Block>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <main+0x6a>
	  Error_Handler();
 8008796:	f000 fd09 	bl	80091ac <Error_Handler>
  }
  if(BSP_QSPI_Erase_Block(131072) != QSPI_OK){
 800879a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800879e:	f001 f82b 	bl	80097f8 <BSP_QSPI_Erase_Block>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <main+0x7c>
	  Error_Handler();
 80087a8:	f000 fd00 	bl	80091ac <Error_Handler>
  }

  //After erased the blocks, we can write in the samples of tones
  write_sound_wave_into_mem();
 80087ac:	f7ff fee6 	bl	800857c <write_sound_wave_into_mem>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 80087b0:	48a5      	ldr	r0, [pc, #660]	; (8008a48 <main+0x318>)
 80087b2:	f7fd fe59 	bl	8006468 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

	  //earthquake part
		BSP_GYRO_GetXYZ(gyro);
 80087b6:	48a5      	ldr	r0, [pc, #660]	; (8008a4c <main+0x31c>)
 80087b8:	f000 fe90 	bl	80094dc <BSP_GYRO_GetXYZ>
		push_data_into_gyro_record();
 80087bc:	f7ff ff70 	bl	80086a0 <push_data_into_gyro_record>
		float std_x=0;
 80087c0:	f04f 0300 	mov.w	r3, #0
 80087c4:	63bb      	str	r3, [r7, #56]	; 0x38
		float std_y=0;
 80087c6:	f04f 0300 	mov.w	r3, #0
 80087ca:	637b      	str	r3, [r7, #52]	; 0x34
		float std_z=0;
 80087cc:	f04f 0300 	mov.w	r3, #0
 80087d0:	633b      	str	r3, [r7, #48]	; 0x30
		arm_std_f32(&gyro_x,10,&std_x);
 80087d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087d6:	461a      	mov	r2, r3
 80087d8:	210a      	movs	r1, #10
 80087da:	489d      	ldr	r0, [pc, #628]	; (8008a50 <main+0x320>)
 80087dc:	f001 fee6 	bl	800a5ac <arm_std_f32>
		arm_std_f32(&gyro_y,10,&std_y);
 80087e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80087e4:	461a      	mov	r2, r3
 80087e6:	210a      	movs	r1, #10
 80087e8:	489a      	ldr	r0, [pc, #616]	; (8008a54 <main+0x324>)
 80087ea:	f001 fedf 	bl	800a5ac <arm_std_f32>
		arm_std_f32(&gyro_z,10,&std_z);
 80087ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087f2:	461a      	mov	r2, r3
 80087f4:	210a      	movs	r1, #10
 80087f6:	4898      	ldr	r0, [pc, #608]	; (8008a58 <main+0x328>)
 80087f8:	f001 fed8 	bl	800a5ac <arm_std_f32>
		float shake = std_x + std_y + std_z;
 80087fc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008800:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008804:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008808:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800880c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008810:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		if(shake < 30000){
 8008814:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008818:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8008a5c <main+0x32c>
 800881c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008824:	d503      	bpl.n	800882e <main+0xfe>
			quake_warningLevel=0;
 8008826:	4b8e      	ldr	r3, [pc, #568]	; (8008a60 <main+0x330>)
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	e02e      	b.n	800888c <main+0x15c>
		}else {
			if(shake > 30000 && shake < 45000){
 800882e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008832:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8008a5c <main+0x32c>
 8008836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800883a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800883e:	dd0c      	ble.n	800885a <main+0x12a>
 8008840:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008844:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8008a64 <main+0x334>
 8008848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800884c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008850:	d503      	bpl.n	800885a <main+0x12a>
				quake_warningLevel=1;
 8008852:	4b83      	ldr	r3, [pc, #524]	; (8008a60 <main+0x330>)
 8008854:	2201      	movs	r2, #1
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	e018      	b.n	800888c <main+0x15c>
			}else if(shake > 45000 && shake < 70000){
 800885a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800885e:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8008a64 <main+0x334>
 8008862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886a:	dd0c      	ble.n	8008886 <main+0x156>
 800886c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008870:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008a68 <main+0x338>
 8008874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887c:	d503      	bpl.n	8008886 <main+0x156>
				quake_warningLevel=2;
 800887e:	4b78      	ldr	r3, [pc, #480]	; (8008a60 <main+0x330>)
 8008880:	2202      	movs	r2, #2
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	e002      	b.n	800888c <main+0x15c>
			}else{
				quake_warningLevel=3;
 8008886:	4b76      	ldr	r3, [pc, #472]	; (8008a60 <main+0x330>)
 8008888:	2203      	movs	r2, #3
 800888a:	601a      	str	r2, [r3, #0]
			}
		}


		//temperature section
		temp=BSP_TSENSOR_ReadTemp();
 800888c:	f001 fac4 	bl	8009e18 <BSP_TSENSOR_ReadTemp>
 8008890:	eef0 7a40 	vmov.f32	s15, s0
 8008894:	4b75      	ldr	r3, [pc, #468]	; (8008a6c <main+0x33c>)
 8008896:	edc3 7a00 	vstr	s15, [r3]
		  if(temp<35){
 800889a:	4b74      	ldr	r3, [pc, #464]	; (8008a6c <main+0x33c>)
 800889c:	edd3 7a00 	vldr	s15, [r3]
 80088a0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008a70 <main+0x340>
 80088a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ac:	d503      	bpl.n	80088b6 <main+0x186>
			  temp_warningLevel=0;
 80088ae:	4b71      	ldr	r3, [pc, #452]	; (8008a74 <main+0x344>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	e032      	b.n	800891c <main+0x1ec>
		  }else{
			  if(temp>=35&&temp<37){
 80088b6:	4b6d      	ldr	r3, [pc, #436]	; (8008a6c <main+0x33c>)
 80088b8:	edd3 7a00 	vldr	s15, [r3]
 80088bc:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8008a70 <main+0x340>
 80088c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c8:	db0d      	blt.n	80088e6 <main+0x1b6>
 80088ca:	4b68      	ldr	r3, [pc, #416]	; (8008a6c <main+0x33c>)
 80088cc:	edd3 7a00 	vldr	s15, [r3]
 80088d0:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8008a78 <main+0x348>
 80088d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088dc:	d503      	bpl.n	80088e6 <main+0x1b6>
				  temp_warningLevel=1;
 80088de:	4b65      	ldr	r3, [pc, #404]	; (8008a74 <main+0x344>)
 80088e0:	2201      	movs	r2, #1
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	e01a      	b.n	800891c <main+0x1ec>
			  }else if(temp>=37&&temp<42){
 80088e6:	4b61      	ldr	r3, [pc, #388]	; (8008a6c <main+0x33c>)
 80088e8:	edd3 7a00 	vldr	s15, [r3]
 80088ec:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8008a78 <main+0x348>
 80088f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f8:	db0d      	blt.n	8008916 <main+0x1e6>
 80088fa:	4b5c      	ldr	r3, [pc, #368]	; (8008a6c <main+0x33c>)
 80088fc:	edd3 7a00 	vldr	s15, [r3]
 8008900:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8008a7c <main+0x34c>
 8008904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800890c:	d503      	bpl.n	8008916 <main+0x1e6>
				  temp_warningLevel=2;
 800890e:	4b59      	ldr	r3, [pc, #356]	; (8008a74 <main+0x344>)
 8008910:	2202      	movs	r2, #2
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	e002      	b.n	800891c <main+0x1ec>
			  }else{
				  temp_warningLevel=3;
 8008916:	4b57      	ldr	r3, [pc, #348]	; (8008a74 <main+0x344>)
 8008918:	2203      	movs	r2, #3
 800891a:	601a      	str	r2, [r3, #0]
			  }
		  }

		  //check the speaker
		int warningLevel = (temp_warningLevel > quake_warningLevel) ? temp_warningLevel : quake_warningLevel;
 800891c:	4b50      	ldr	r3, [pc, #320]	; (8008a60 <main+0x330>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	4b54      	ldr	r3, [pc, #336]	; (8008a74 <main+0x344>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4293      	cmp	r3, r2
 8008926:	bfb8      	it	lt
 8008928:	4613      	movlt	r3, r2
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(warningLevel != 0){
 800892c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892e:	2b00      	cmp	r3, #0
 8008930:	d052      	beq.n	80089d8 <main+0x2a8>
			switch(warningLevel){
 8008932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008934:	2b03      	cmp	r3, #3
 8008936:	d034      	beq.n	80089a2 <main+0x272>
 8008938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893a:	2b03      	cmp	r3, #3
 800893c:	dc46      	bgt.n	80089cc <main+0x29c>
 800893e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d003      	beq.n	800894c <main+0x21c>
 8008944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008946:	2b02      	cmp	r3, #2
 8008948:	d015      	beq.n	8008976 <main+0x246>
 800894a:	e03f      	b.n	80089cc <main+0x29c>
				case 1  :
					if(BSP_QSPI_Read((uint8_t *)play, 0x000000, wave_size) != QSPI_OK) Error_Handler();
 800894c:	f248 1233 	movw	r2, #33075	; 0x8133
 8008950:	2100      	movs	r1, #0
 8008952:	484b      	ldr	r0, [pc, #300]	; (8008a80 <main+0x350>)
 8008954:	f000 fe78 	bl	8009648 <BSP_QSPI_Read>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <main+0x232>
 800895e:	f000 fc25 	bl	80091ac <Error_Handler>
					HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, wave_size, DAC_ALIGN_8B_R);
 8008962:	2308      	movs	r3, #8
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	f248 1333 	movw	r3, #33075	; 0x8133
 800896a:	4a45      	ldr	r2, [pc, #276]	; (8008a80 <main+0x350>)
 800896c:	2100      	movs	r1, #0
 800896e:	4845      	ldr	r0, [pc, #276]	; (8008a84 <main+0x354>)
 8008970:	f7f8 fab0 	bl	8000ed4 <HAL_DAC_Start_DMA>
				   break;
 8008974:	e02a      	b.n	80089cc <main+0x29c>
				case 2  :
					if(BSP_QSPI_Read((uint8_t *)play, 0x008133, wave_size) != QSPI_OK) Error_Handler();
 8008976:	f248 1233 	movw	r2, #33075	; 0x8133
 800897a:	f248 1133 	movw	r1, #33075	; 0x8133
 800897e:	4840      	ldr	r0, [pc, #256]	; (8008a80 <main+0x350>)
 8008980:	f000 fe62 	bl	8009648 <BSP_QSPI_Read>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <main+0x25e>
 800898a:	f000 fc0f 	bl	80091ac <Error_Handler>
					HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, wave_size, DAC_ALIGN_8B_R);
 800898e:	2308      	movs	r3, #8
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	f248 1333 	movw	r3, #33075	; 0x8133
 8008996:	4a3a      	ldr	r2, [pc, #232]	; (8008a80 <main+0x350>)
 8008998:	2100      	movs	r1, #0
 800899a:	483a      	ldr	r0, [pc, #232]	; (8008a84 <main+0x354>)
 800899c:	f7f8 fa9a 	bl	8000ed4 <HAL_DAC_Start_DMA>
				   break;
 80089a0:	e014      	b.n	80089cc <main+0x29c>
				case 3  :
					if(BSP_QSPI_Read((uint8_t *)play, 0x010266, wave_size) != QSPI_OK) Error_Handler();
 80089a2:	f248 1233 	movw	r2, #33075	; 0x8133
 80089a6:	4938      	ldr	r1, [pc, #224]	; (8008a88 <main+0x358>)
 80089a8:	4835      	ldr	r0, [pc, #212]	; (8008a80 <main+0x350>)
 80089aa:	f000 fe4d 	bl	8009648 <BSP_QSPI_Read>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <main+0x288>
 80089b4:	f000 fbfa 	bl	80091ac <Error_Handler>
					HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, wave_size, DAC_ALIGN_8B_R);
 80089b8:	2308      	movs	r3, #8
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80089c0:	4a2f      	ldr	r2, [pc, #188]	; (8008a80 <main+0x350>)
 80089c2:	2100      	movs	r1, #0
 80089c4:	482f      	ldr	r0, [pc, #188]	; (8008a84 <main+0x354>)
 80089c6:	f7f8 fa85 	bl	8000ed4 <HAL_DAC_Start_DMA>
				   break;
 80089ca:	bf00      	nop
			}
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80089cc:	2201      	movs	r2, #1
 80089ce:	2108      	movs	r1, #8
 80089d0:	482e      	ldr	r0, [pc, #184]	; (8008a8c <main+0x35c>)
 80089d2:	f7f9 fba7 	bl	8002124 <HAL_GPIO_WritePin>
 80089d6:	e008      	b.n	80089ea <main+0x2ba>
		}else{
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80089d8:	2200      	movs	r2, #0
 80089da:	2108      	movs	r1, #8
 80089dc:	482b      	ldr	r0, [pc, #172]	; (8008a8c <main+0x35c>)
 80089de:	f7f9 fba1 	bl	8002124 <HAL_GPIO_WritePin>
			HAL_DAC_Stop_DMA (&hdac1, DAC_CHANNEL_1);
 80089e2:	2100      	movs	r1, #0
 80089e4:	4827      	ldr	r0, [pc, #156]	; (8008a84 <main+0x354>)
 80089e6:	f7f8 fb41 	bl	800106c <HAL_DAC_Stop_DMA>

		}


		//send to terminal
		timeCounter++;
 80089ea:	4b29      	ldr	r3, [pc, #164]	; (8008a90 <main+0x360>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3301      	adds	r3, #1
 80089f0:	4a27      	ldr	r2, [pc, #156]	; (8008a90 <main+0x360>)
 80089f2:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 100; i++){
 80089f4:	2300      	movs	r3, #0
 80089f6:	647b      	str	r3, [r7, #68]	; 0x44
 80089f8:	e007      	b.n	8008a0a <main+0x2da>
			buffer[i] = '\0';
 80089fa:	4a26      	ldr	r2, [pc, #152]	; (8008a94 <main+0x364>)
 80089fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089fe:	4413      	add	r3, r2
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 100; i++){
 8008a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a06:	3301      	adds	r3, #1
 8008a08:	647b      	str	r3, [r7, #68]	; 0x44
 8008a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a0c:	2b63      	cmp	r3, #99	; 0x63
 8008a0e:	ddf4      	ble.n	80089fa <main+0x2ca>
		}

		if(mode==1){
 8008a10:	4b21      	ldr	r3, [pc, #132]	; (8008a98 <main+0x368>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	f040 8091 	bne.w	8008b3c <main+0x40c>
			if(temp<38){
 8008a1a:	4b14      	ldr	r3, [pc, #80]	; (8008a6c <main+0x33c>)
 8008a1c:	edd3 7a00 	vldr	s15, [r3]
 8008a20:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008a9c <main+0x36c>
 8008a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2c:	d53a      	bpl.n	8008aa4 <main+0x374>
				sprintf(buffer, "OK, temperature is %d \r\n", (int) temp);
 8008a2e:	4b0f      	ldr	r3, [pc, #60]	; (8008a6c <main+0x33c>)
 8008a30:	edd3 7a00 	vldr	s15, [r3]
 8008a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a38:	ee17 2a90 	vmov	r2, s15
 8008a3c:	4918      	ldr	r1, [pc, #96]	; (8008aa0 <main+0x370>)
 8008a3e:	4815      	ldr	r0, [pc, #84]	; (8008a94 <main+0x364>)
 8008a40:	f001 fec4 	bl	800a7cc <siprintf>
 8008a44:	e0b8      	b.n	8008bb8 <main+0x488>
 8008a46:	bf00      	nop
 8008a48:	200207dc 	.word	0x200207dc
 8008a4c:	2002091c 	.word	0x2002091c
 8008a50:	20020928 	.word	0x20020928
 8008a54:	20020978 	.word	0x20020978
 8008a58:	200209c8 	.word	0x200209c8
 8008a5c:	46ea6000 	.word	0x46ea6000
 8008a60:	20020a60 	.word	0x20020a60
 8008a64:	472fc800 	.word	0x472fc800
 8008a68:	4788b800 	.word	0x4788b800
 8008a6c:	20020a58 	.word	0x20020a58
 8008a70:	420c0000 	.word	0x420c0000
 8008a74:	20020a5c 	.word	0x20020a5c
 8008a78:	42140000 	.word	0x42140000
 8008a7c:	42280000 	.word	0x42280000
 8008a80:	2000005c 	.word	0x2000005c
 8008a84:	20020664 	.word	0x20020664
 8008a88:	00010266 	.word	0x00010266
 8008a8c:	48001000 	.word	0x48001000
 8008a90:	20020a18 	.word	0x20020a18
 8008a94:	200208b8 	.word	0x200208b8
 8008a98:	20020a64 	.word	0x20020a64
 8008a9c:	42180000 	.word	0x42180000
 8008aa0:	0800b104 	.word	0x0800b104
			}else if(temp>=38&&temp<40){
 8008aa4:	4b58      	ldr	r3, [pc, #352]	; (8008c08 <main+0x4d8>)
 8008aa6:	edd3 7a00 	vldr	s15, [r3]
 8008aaa:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8008c0c <main+0x4dc>
 8008aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab6:	db15      	blt.n	8008ae4 <main+0x3b4>
 8008ab8:	4b53      	ldr	r3, [pc, #332]	; (8008c08 <main+0x4d8>)
 8008aba:	edd3 7a00 	vldr	s15, [r3]
 8008abe:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8008c10 <main+0x4e0>
 8008ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aca:	d50b      	bpl.n	8008ae4 <main+0x3b4>
				sprintf(buffer, "Warning, temperature is %d !!\r\n", (int) temp);
 8008acc:	4b4e      	ldr	r3, [pc, #312]	; (8008c08 <main+0x4d8>)
 8008ace:	edd3 7a00 	vldr	s15, [r3]
 8008ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ad6:	ee17 2a90 	vmov	r2, s15
 8008ada:	494e      	ldr	r1, [pc, #312]	; (8008c14 <main+0x4e4>)
 8008adc:	484e      	ldr	r0, [pc, #312]	; (8008c18 <main+0x4e8>)
 8008ade:	f001 fe75 	bl	800a7cc <siprintf>
 8008ae2:	e069      	b.n	8008bb8 <main+0x488>
			}else if(temp>=40&&temp<45){
 8008ae4:	4b48      	ldr	r3, [pc, #288]	; (8008c08 <main+0x4d8>)
 8008ae6:	edd3 7a00 	vldr	s15, [r3]
 8008aea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008c10 <main+0x4e0>
 8008aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af6:	db15      	blt.n	8008b24 <main+0x3f4>
 8008af8:	4b43      	ldr	r3, [pc, #268]	; (8008c08 <main+0x4d8>)
 8008afa:	edd3 7a00 	vldr	s15, [r3]
 8008afe:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008c1c <main+0x4ec>
 8008b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b0a:	d50b      	bpl.n	8008b24 <main+0x3f4>
				sprintf(buffer, "Danger, temperature is %d !!!!!!\r\n", (int) temp);
 8008b0c:	4b3e      	ldr	r3, [pc, #248]	; (8008c08 <main+0x4d8>)
 8008b0e:	edd3 7a00 	vldr	s15, [r3]
 8008b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b16:	ee17 2a90 	vmov	r2, s15
 8008b1a:	4941      	ldr	r1, [pc, #260]	; (8008c20 <main+0x4f0>)
 8008b1c:	483e      	ldr	r0, [pc, #248]	; (8008c18 <main+0x4e8>)
 8008b1e:	f001 fe55 	bl	800a7cc <siprintf>
 8008b22:	e049      	b.n	8008bb8 <main+0x488>
			}else{
				sprintf(buffer, "Extremely danger, temperature is %d !!!!!!!!!!!!!Please leave the house!!!!!!!!!!\r\n", (int) temp);
 8008b24:	4b38      	ldr	r3, [pc, #224]	; (8008c08 <main+0x4d8>)
 8008b26:	edd3 7a00 	vldr	s15, [r3]
 8008b2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b2e:	ee17 2a90 	vmov	r2, s15
 8008b32:	493c      	ldr	r1, [pc, #240]	; (8008c24 <main+0x4f4>)
 8008b34:	4838      	ldr	r0, [pc, #224]	; (8008c18 <main+0x4e8>)
 8008b36:	f001 fe49 	bl	800a7cc <siprintf>
 8008b3a:	e03d      	b.n	8008bb8 <main+0x488>
			}
		}else if(mode==2){
 8008b3c:	4b3a      	ldr	r3, [pc, #232]	; (8008c28 <main+0x4f8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d135      	bne.n	8008bb0 <main+0x480>
			float std_x=0;
 8008b44:	f04f 0300 	mov.w	r3, #0
 8008b48:	62fb      	str	r3, [r7, #44]	; 0x2c
			float std_y=0;
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	62bb      	str	r3, [r7, #40]	; 0x28
			float std_z=0;
 8008b50:	f04f 0300 	mov.w	r3, #0
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
			arm_std_f32(&gyro_x,10,&std_x);
 8008b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	210a      	movs	r1, #10
 8008b5e:	4833      	ldr	r0, [pc, #204]	; (8008c2c <main+0x4fc>)
 8008b60:	f001 fd24 	bl	800a5ac <arm_std_f32>
			arm_std_f32(&gyro_y,10,&std_y);
 8008b64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b68:	461a      	mov	r2, r3
 8008b6a:	210a      	movs	r1, #10
 8008b6c:	4830      	ldr	r0, [pc, #192]	; (8008c30 <main+0x500>)
 8008b6e:	f001 fd1d 	bl	800a5ac <arm_std_f32>
			arm_std_f32(&gyro_z,10,&std_z);
 8008b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b76:	461a      	mov	r2, r3
 8008b78:	210a      	movs	r1, #10
 8008b7a:	482e      	ldr	r0, [pc, #184]	; (8008c34 <main+0x504>)
 8008b7c:	f001 fd16 	bl	800a5ac <arm_std_f32>
			sprintf(buffer, "Gyro: %d, %d, %d \r\n", (int) std_x, (int) std_y, (int) std_z);
 8008b80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008b84:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008b8c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8008b90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b98:	ee17 3a90 	vmov	r3, s15
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	ee16 3a90 	vmov	r3, s13
 8008ba2:	ee17 2a10 	vmov	r2, s14
 8008ba6:	4924      	ldr	r1, [pc, #144]	; (8008c38 <main+0x508>)
 8008ba8:	481b      	ldr	r0, [pc, #108]	; (8008c18 <main+0x4e8>)
 8008baa:	f001 fe0f 	bl	800a7cc <siprintf>
 8008bae:	e003      	b.n	8008bb8 <main+0x488>
		}else{
			sprintf(buffer, "Detection disabled now. \r\n");
 8008bb0:	4922      	ldr	r1, [pc, #136]	; (8008c3c <main+0x50c>)
 8008bb2:	4819      	ldr	r0, [pc, #100]	; (8008c18 <main+0x4e8>)
 8008bb4:	f001 fe0a 	bl	800a7cc <siprintf>
		}

		HAL_Delay(100);
 8008bb8:	2064      	movs	r0, #100	; 0x64
 8008bba:	f7f8 f831 	bl	8000c20 <HAL_Delay>
		if(timeCounter==timeCycle) {
 8008bbe:	4b20      	ldr	r3, [pc, #128]	; (8008c40 <main+0x510>)
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b20      	ldr	r3, [pc, #128]	; (8008c44 <main+0x514>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d111      	bne.n	8008bee <main+0x4be>
			char timeString[30];
			sprintf(timeString, "time taken: %d\r\n", timeTaken);
 8008bca:	4b1f      	ldr	r3, [pc, #124]	; (8008c48 <main+0x518>)
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	1d3b      	adds	r3, r7, #4
 8008bd0:	491e      	ldr	r1, [pc, #120]	; (8008c4c <main+0x51c>)
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 fdfa 	bl	800a7cc <siprintf>
			strcat(buffer, timeString);
 8008bd8:	1d3b      	adds	r3, r7, #4
 8008bda:	4619      	mov	r1, r3
 8008bdc:	480e      	ldr	r0, [pc, #56]	; (8008c18 <main+0x4e8>)
 8008bde:	f001 fe15 	bl	800a80c <strcat>
			timeCounter = 0;
 8008be2:	4b17      	ldr	r3, [pc, #92]	; (8008c40 <main+0x510>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
			timeTaken = 0;
 8008be8:	4b17      	ldr	r3, [pc, #92]	; (8008c48 <main+0x518>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 10000);
 8008bee:	f242 7310 	movw	r3, #10000	; 0x2710
 8008bf2:	2264      	movs	r2, #100	; 0x64
 8008bf4:	4908      	ldr	r1, [pc, #32]	; (8008c18 <main+0x4e8>)
 8008bf6:	4816      	ldr	r0, [pc, #88]	; (8008c50 <main+0x520>)
 8008bf8:	f7fe f8e0 	bl	8006dbc <HAL_UART_Transmit>

		//euqal osDelay(50)
		timeTaken +=50;
 8008bfc:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <main+0x518>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3332      	adds	r3, #50	; 0x32
 8008c02:	4a11      	ldr	r2, [pc, #68]	; (8008c48 <main+0x518>)
 8008c04:	6013      	str	r3, [r2, #0]
  {
 8008c06:	e5d6      	b.n	80087b6 <main+0x86>
 8008c08:	20020a58 	.word	0x20020a58
 8008c0c:	42180000 	.word	0x42180000
 8008c10:	42200000 	.word	0x42200000
 8008c14:	0800b120 	.word	0x0800b120
 8008c18:	200208b8 	.word	0x200208b8
 8008c1c:	42340000 	.word	0x42340000
 8008c20:	0800b140 	.word	0x0800b140
 8008c24:	0800b164 	.word	0x0800b164
 8008c28:	20020a64 	.word	0x20020a64
 8008c2c:	20020928 	.word	0x20020928
 8008c30:	20020978 	.word	0x20020978
 8008c34:	200209c8 	.word	0x200209c8
 8008c38:	0800b1b8 	.word	0x0800b1b8
 8008c3c:	0800b1cc 	.word	0x0800b1cc
 8008c40:	20020a18 	.word	0x20020a18
 8008c44:	20000058 	.word	0x20000058
 8008c48:	20020a1c 	.word	0x20020a1c
 8008c4c:	0800b1e8 	.word	0x0800b1e8
 8008c50:	20020828 	.word	0x20020828

08008c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b096      	sub	sp, #88	; 0x58
 8008c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c5a:	f107 0314 	add.w	r3, r7, #20
 8008c5e:	2244      	movs	r2, #68	; 0x44
 8008c60:	2100      	movs	r1, #0
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 fdaa 	bl	800a7bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c68:	463b      	mov	r3, r7
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	605a      	str	r2, [r3, #4]
 8008c70:	609a      	str	r2, [r3, #8]
 8008c72:	60da      	str	r2, [r3, #12]
 8008c74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008c76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008c7a:	f7fb fed7 	bl	8004a2c <HAL_PWREx_ControlVoltageScaling>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8008c84:	f000 fa92 	bl	80091ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008c88:	2310      	movs	r3, #16
 8008c8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008c94:	2360      	movs	r3, #96	; 0x60
 8008c96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8008ca4:	2328      	movs	r3, #40	; 0x28
 8008ca6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008cac:	2302      	movs	r3, #2
 8008cae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008cb4:	f107 0314 	add.w	r3, r7, #20
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fb ff5b 	bl	8004b74 <HAL_RCC_OscConfig>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8008cc4:	f000 fa72 	bl	80091ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008cc8:	230f      	movs	r3, #15
 8008cca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008cdc:	463b      	mov	r3, r7
 8008cde:	2103      	movs	r1, #3
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fc fb61 	bl	80053a8 <HAL_RCC_ClockConfig>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8008cec:	f000 fa5e 	bl	80091ac <Error_Handler>
  }
}
 8008cf0:	bf00      	nop
 8008cf2:	3758      	adds	r7, #88	; 0x58
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08a      	sub	sp, #40	; 0x28
 8008cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8008cfe:	463b      	mov	r3, r7
 8008d00:	2228      	movs	r2, #40	; 0x28
 8008d02:	2100      	movs	r1, #0
 8008d04:	4618      	mov	r0, r3
 8008d06:	f001 fd59 	bl	800a7bc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8008d0a:	4b19      	ldr	r3, [pc, #100]	; (8008d70 <MX_DAC1_Init+0x78>)
 8008d0c:	4a19      	ldr	r2, [pc, #100]	; (8008d74 <MX_DAC1_Init+0x7c>)
 8008d0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8008d10:	4817      	ldr	r0, [pc, #92]	; (8008d70 <MX_DAC1_Init+0x78>)
 8008d12:	f7f8 f8bd 	bl	8000e90 <HAL_DAC_Init>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8008d1c:	f000 fa46 	bl	80091ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8008d20:	2300      	movs	r3, #0
 8008d22:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8008d24:	230a      	movs	r3, #10
 8008d26:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d2c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8008d32:	2300      	movs	r3, #0
 8008d34:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8008d3a:	463b      	mov	r3, r7
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4619      	mov	r1, r3
 8008d40:	480b      	ldr	r0, [pc, #44]	; (8008d70 <MX_DAC1_Init+0x78>)
 8008d42:	f7f8 fa5b 	bl	80011fc <HAL_DAC_ConfigChannel>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8008d4c:	f000 fa2e 	bl	80091ac <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8008d50:	463b      	mov	r3, r7
 8008d52:	2210      	movs	r2, #16
 8008d54:	4619      	mov	r1, r3
 8008d56:	4806      	ldr	r0, [pc, #24]	; (8008d70 <MX_DAC1_Init+0x78>)
 8008d58:	f7f8 fa50 	bl	80011fc <HAL_DAC_ConfigChannel>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8008d62:	f000 fa23 	bl	80091ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8008d66:	bf00      	nop
 8008d68:	3728      	adds	r7, #40	; 0x28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20020664 	.word	0x20020664
 8008d74:	40007400 	.word	0x40007400

08008d78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008d7c:	4b1b      	ldr	r3, [pc, #108]	; (8008dec <MX_I2C2_Init+0x74>)
 8008d7e:	4a1c      	ldr	r2, [pc, #112]	; (8008df0 <MX_I2C2_Init+0x78>)
 8008d80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8008d82:	4b1a      	ldr	r3, [pc, #104]	; (8008dec <MX_I2C2_Init+0x74>)
 8008d84:	4a1b      	ldr	r2, [pc, #108]	; (8008df4 <MX_I2C2_Init+0x7c>)
 8008d86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008d88:	4b18      	ldr	r3, [pc, #96]	; (8008dec <MX_I2C2_Init+0x74>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008d8e:	4b17      	ldr	r3, [pc, #92]	; (8008dec <MX_I2C2_Init+0x74>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008d94:	4b15      	ldr	r3, [pc, #84]	; (8008dec <MX_I2C2_Init+0x74>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008d9a:	4b14      	ldr	r3, [pc, #80]	; (8008dec <MX_I2C2_Init+0x74>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008da0:	4b12      	ldr	r3, [pc, #72]	; (8008dec <MX_I2C2_Init+0x74>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008da6:	4b11      	ldr	r3, [pc, #68]	; (8008dec <MX_I2C2_Init+0x74>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008dac:	4b0f      	ldr	r3, [pc, #60]	; (8008dec <MX_I2C2_Init+0x74>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008db2:	480e      	ldr	r0, [pc, #56]	; (8008dec <MX_I2C2_Init+0x74>)
 8008db4:	f7f9 fa00 	bl	80021b8 <HAL_I2C_Init>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8008dbe:	f000 f9f5 	bl	80091ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	4809      	ldr	r0, [pc, #36]	; (8008dec <MX_I2C2_Init+0x74>)
 8008dc6:	f7fa fcfd 	bl	80037c4 <HAL_I2CEx_ConfigAnalogFilter>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8008dd0:	f000 f9ec 	bl	80091ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4805      	ldr	r0, [pc, #20]	; (8008dec <MX_I2C2_Init+0x74>)
 8008dd8:	f7fa fd3f 	bl	800385a <HAL_I2CEx_ConfigDigitalFilter>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8008de2:	f000 f9e3 	bl	80091ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008de6:	bf00      	nop
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20020738 	.word	0x20020738
 8008df0:	40005800 	.word	0x40005800
 8008df4:	10909cec 	.word	0x10909cec

08008df8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8008dfe:	1d3b      	adds	r3, r7, #4
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	605a      	str	r2, [r3, #4]
 8008e06:	609a      	str	r2, [r3, #8]
 8008e08:	60da      	str	r2, [r3, #12]
 8008e0a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8008e0c:	4b23      	ldr	r3, [pc, #140]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e0e:	4a24      	ldr	r2, [pc, #144]	; (8008ea0 <MX_OCTOSPI1_Init+0xa8>)
 8008e10:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8008e12:	4b22      	ldr	r3, [pc, #136]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e14:	2201      	movs	r2, #1
 8008e16:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8008e18:	4b20      	ldr	r3, [pc, #128]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8008e1e:	4b1f      	ldr	r3, [pc, #124]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e24:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8008e26:	4b1d      	ldr	r3, [pc, #116]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e28:	2220      	movs	r2, #32
 8008e2a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8008e2c:	4b1b      	ldr	r3, [pc, #108]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8008e32:	4b1a      	ldr	r3, [pc, #104]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8008e38:	4b18      	ldr	r3, [pc, #96]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8008e3e:	4b17      	ldr	r3, [pc, #92]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8008e44:	4b15      	ldr	r3, [pc, #84]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8008e4a:	4b14      	ldr	r3, [pc, #80]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8008e50:	4b12      	ldr	r3, [pc, #72]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8008e56:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e58:	2208      	movs	r2, #8
 8008e5a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8008e5c:	480f      	ldr	r0, [pc, #60]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e5e:	f7fa fd49 	bl	80038f4 <HAL_OSPI_Init>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8008e68:	f000 f9a0 	bl	80091ac <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8008e70:	2301      	movs	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8008e74:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8008e78:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e7a:	1d3b      	adds	r3, r7, #4
 8008e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e80:	4619      	mov	r1, r3
 8008e82:	4806      	ldr	r0, [pc, #24]	; (8008e9c <MX_OCTOSPI1_Init+0xa4>)
 8008e84:	f7fb f834 	bl	8003ef0 <HAL_OSPIM_Config>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8008e8e:	f000 f98d 	bl	80091ac <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8008e92:	bf00      	nop
 8008e94:	3718      	adds	r7, #24
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	2002078c 	.word	0x2002078c
 8008ea0:	a0001000 	.word	0xa0001000

08008ea4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008eaa:	f107 0310 	add.w	r3, r7, #16
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	605a      	str	r2, [r3, #4]
 8008eb4:	609a      	str	r2, [r3, #8]
 8008eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008eb8:	1d3b      	adds	r3, r7, #4
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	605a      	str	r2, [r3, #4]
 8008ec0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008ec2:	4b1e      	ldr	r3, [pc, #120]	; (8008f3c <MX_TIM2_Init+0x98>)
 8008ec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008ec8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8008eca:	4b1c      	ldr	r3, [pc, #112]	; (8008f3c <MX_TIM2_Init+0x98>)
 8008ecc:	2201      	movs	r2, #1
 8008ece:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ed0:	4b1a      	ldr	r3, [pc, #104]	; (8008f3c <MX_TIM2_Init+0x98>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 8008ed6:	4b19      	ldr	r3, [pc, #100]	; (8008f3c <MX_TIM2_Init+0x98>)
 8008ed8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008edc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ede:	4b17      	ldr	r3, [pc, #92]	; (8008f3c <MX_TIM2_Init+0x98>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ee4:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <MX_TIM2_Init+0x98>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008eea:	4814      	ldr	r0, [pc, #80]	; (8008f3c <MX_TIM2_Init+0x98>)
 8008eec:	f7fd fa64 	bl	80063b8 <HAL_TIM_Base_Init>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008ef6:	f000 f959 	bl	80091ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008efe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008f00:	f107 0310 	add.w	r3, r7, #16
 8008f04:	4619      	mov	r1, r3
 8008f06:	480d      	ldr	r0, [pc, #52]	; (8008f3c <MX_TIM2_Init+0x98>)
 8008f08:	f7fd fc3d 	bl	8006786 <HAL_TIM_ConfigClockSource>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8008f12:	f000 f94b 	bl	80091ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008f16:	2320      	movs	r3, #32
 8008f18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008f1e:	1d3b      	adds	r3, r7, #4
 8008f20:	4619      	mov	r1, r3
 8008f22:	4806      	ldr	r0, [pc, #24]	; (8008f3c <MX_TIM2_Init+0x98>)
 8008f24:	f7fd fe54 	bl	8006bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8008f2e:	f000 f93d 	bl	80091ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008f32:	bf00      	nop
 8008f34:	3720      	adds	r7, #32
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200207dc 	.word	0x200207dc

08008f40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008f44:	4b22      	ldr	r3, [pc, #136]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f46:	4a23      	ldr	r2, [pc, #140]	; (8008fd4 <MX_USART1_UART_Init+0x94>)
 8008f48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008f4a:	4b21      	ldr	r3, [pc, #132]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008f50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008f52:	4b1f      	ldr	r3, [pc, #124]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008f58:	4b1d      	ldr	r3, [pc, #116]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008f5e:	4b1c      	ldr	r3, [pc, #112]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008f64:	4b1a      	ldr	r3, [pc, #104]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f66:	220c      	movs	r2, #12
 8008f68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f6a:	4b19      	ldr	r3, [pc, #100]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f70:	4b17      	ldr	r3, [pc, #92]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008f76:	4b16      	ldr	r3, [pc, #88]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008f7c:	4b14      	ldr	r3, [pc, #80]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008f82:	4b13      	ldr	r3, [pc, #76]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008f88:	4811      	ldr	r0, [pc, #68]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f8a:	f7fd fec7 	bl	8006d1c <HAL_UART_Init>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008f94:	f000 f90a 	bl	80091ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008f98:	2100      	movs	r1, #0
 8008f9a:	480d      	ldr	r0, [pc, #52]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008f9c:	f7fe fc90 	bl	80078c0 <HAL_UARTEx_SetTxFifoThreshold>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008fa6:	f000 f901 	bl	80091ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008faa:	2100      	movs	r1, #0
 8008fac:	4808      	ldr	r0, [pc, #32]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008fae:	f7fe fcc5 	bl	800793c <HAL_UARTEx_SetRxFifoThreshold>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008fb8:	f000 f8f8 	bl	80091ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008fbc:	4804      	ldr	r0, [pc, #16]	; (8008fd0 <MX_USART1_UART_Init+0x90>)
 8008fbe:	f7fe fc46 	bl	800784e <HAL_UARTEx_DisableFifoMode>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008fc8:	f000 f8f0 	bl	80091ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008fcc:	bf00      	nop
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	20020828 	.word	0x20020828
 8008fd4:	40013800 	.word	0x40013800

08008fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008fde:	4b16      	ldr	r3, [pc, #88]	; (8009038 <MX_DMA_Init+0x60>)
 8008fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe2:	4a15      	ldr	r2, [pc, #84]	; (8009038 <MX_DMA_Init+0x60>)
 8008fe4:	f043 0304 	orr.w	r3, r3, #4
 8008fe8:	6493      	str	r3, [r2, #72]	; 0x48
 8008fea:	4b13      	ldr	r3, [pc, #76]	; (8009038 <MX_DMA_Init+0x60>)
 8008fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fee:	f003 0304 	and.w	r3, r3, #4
 8008ff2:	607b      	str	r3, [r7, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008ff6:	4b10      	ldr	r3, [pc, #64]	; (8009038 <MX_DMA_Init+0x60>)
 8008ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ffa:	4a0f      	ldr	r2, [pc, #60]	; (8009038 <MX_DMA_Init+0x60>)
 8008ffc:	f043 0301 	orr.w	r3, r3, #1
 8009000:	6493      	str	r3, [r2, #72]	; 0x48
 8009002:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <MX_DMA_Init+0x60>)
 8009004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800900e:	2200      	movs	r2, #0
 8009010:	2105      	movs	r1, #5
 8009012:	200b      	movs	r0, #11
 8009014:	f7f7 ff04 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009018:	200b      	movs	r0, #11
 800901a:	f7f7 ff1d 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800901e:	2200      	movs	r2, #0
 8009020:	2105      	movs	r1, #5
 8009022:	200c      	movs	r0, #12
 8009024:	f7f7 fefc 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8009028:	200c      	movs	r0, #12
 800902a:	f7f7 ff15 	bl	8000e58 <HAL_NVIC_EnableIRQ>

}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	40021000 	.word	0x40021000

0800903c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b08a      	sub	sp, #40	; 0x28
 8009040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009042:	f107 0314 	add.w	r3, r7, #20
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	605a      	str	r2, [r3, #4]
 800904c:	609a      	str	r2, [r3, #8]
 800904e:	60da      	str	r2, [r3, #12]
 8009050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009052:	4b43      	ldr	r3, [pc, #268]	; (8009160 <MX_GPIO_Init+0x124>)
 8009054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009056:	4a42      	ldr	r2, [pc, #264]	; (8009160 <MX_GPIO_Init+0x124>)
 8009058:	f043 0310 	orr.w	r3, r3, #16
 800905c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800905e:	4b40      	ldr	r3, [pc, #256]	; (8009160 <MX_GPIO_Init+0x124>)
 8009060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009062:	f003 0310 	and.w	r3, r3, #16
 8009066:	613b      	str	r3, [r7, #16]
 8009068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800906a:	4b3d      	ldr	r3, [pc, #244]	; (8009160 <MX_GPIO_Init+0x124>)
 800906c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800906e:	4a3c      	ldr	r2, [pc, #240]	; (8009160 <MX_GPIO_Init+0x124>)
 8009070:	f043 0304 	orr.w	r3, r3, #4
 8009074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009076:	4b3a      	ldr	r3, [pc, #232]	; (8009160 <MX_GPIO_Init+0x124>)
 8009078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907a:	f003 0304 	and.w	r3, r3, #4
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009082:	4b37      	ldr	r3, [pc, #220]	; (8009160 <MX_GPIO_Init+0x124>)
 8009084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009086:	4a36      	ldr	r2, [pc, #216]	; (8009160 <MX_GPIO_Init+0x124>)
 8009088:	f043 0301 	orr.w	r3, r3, #1
 800908c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800908e:	4b34      	ldr	r3, [pc, #208]	; (8009160 <MX_GPIO_Init+0x124>)
 8009090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	60bb      	str	r3, [r7, #8]
 8009098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800909a:	4b31      	ldr	r3, [pc, #196]	; (8009160 <MX_GPIO_Init+0x124>)
 800909c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909e:	4a30      	ldr	r2, [pc, #192]	; (8009160 <MX_GPIO_Init+0x124>)
 80090a0:	f043 0302 	orr.w	r3, r3, #2
 80090a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090a6:	4b2e      	ldr	r3, [pc, #184]	; (8009160 <MX_GPIO_Init+0x124>)
 80090a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	607b      	str	r3, [r7, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80090b2:	2200      	movs	r2, #0
 80090b4:	2108      	movs	r1, #8
 80090b6:	482b      	ldr	r0, [pc, #172]	; (8009164 <MX_GPIO_Init+0x128>)
 80090b8:	f7f9 f834 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80090bc:	2200      	movs	r2, #0
 80090be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80090c2:	4829      	ldr	r0, [pc, #164]	; (8009168 <MX_GPIO_Init+0x12c>)
 80090c4:	f7f9 f82e 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80090c8:	2200      	movs	r2, #0
 80090ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80090ce:	4827      	ldr	r0, [pc, #156]	; (800916c <MX_GPIO_Init+0x130>)
 80090d0:	f7f9 f828 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 80090d4:	2308      	movs	r3, #8
 80090d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090d8:	2301      	movs	r3, #1
 80090da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090e0:	2300      	movs	r3, #0
 80090e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80090e4:	f107 0314 	add.w	r3, r7, #20
 80090e8:	4619      	mov	r1, r3
 80090ea:	481e      	ldr	r0, [pc, #120]	; (8009164 <MX_GPIO_Init+0x128>)
 80090ec:	f7f8 fd96 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_button_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin;
 80090f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80090f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80090fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090fc:	2300      	movs	r3, #0
 80090fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(blue_button_GPIO_Port, &GPIO_InitStruct);
 8009100:	f107 0314 	add.w	r3, r7, #20
 8009104:	4619      	mov	r1, r3
 8009106:	4819      	ldr	r0, [pc, #100]	; (800916c <MX_GPIO_Init+0x130>)
 8009108:	f7f8 fd88 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800910c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009112:	2301      	movs	r3, #1
 8009114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009116:	2300      	movs	r3, #0
 8009118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800911a:	2300      	movs	r3, #0
 800911c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800911e:	f107 0314 	add.w	r3, r7, #20
 8009122:	4619      	mov	r1, r3
 8009124:	4810      	ldr	r0, [pc, #64]	; (8009168 <MX_GPIO_Init+0x12c>)
 8009126:	f7f8 fd79 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800912a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800912e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009130:	2301      	movs	r3, #1
 8009132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009134:	2300      	movs	r3, #0
 8009136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009138:	2300      	movs	r3, #0
 800913a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800913c:	f107 0314 	add.w	r3, r7, #20
 8009140:	4619      	mov	r1, r3
 8009142:	480a      	ldr	r0, [pc, #40]	; (800916c <MX_GPIO_Init+0x130>)
 8009144:	f7f8 fd6a 	bl	8001c1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8009148:	2200      	movs	r2, #0
 800914a:	2105      	movs	r1, #5
 800914c:	2028      	movs	r0, #40	; 0x28
 800914e:	f7f7 fe67 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009152:	2028      	movs	r0, #40	; 0x28
 8009154:	f7f7 fe80 	bl	8000e58 <HAL_NVIC_EnableIRQ>

}
 8009158:	bf00      	nop
 800915a:	3728      	adds	r7, #40	; 0x28
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	40021000 	.word	0x40021000
 8009164:	48001000 	.word	0x48001000
 8009168:	48000400 	.word	0x48000400
 800916c:	48000800 	.word	0x48000800

08009170 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a09      	ldr	r2, [pc, #36]	; (80091a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d102      	bne.n	8009188 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8009182:	f7f7 fd2d 	bl	8000be0 <HAL_IncTick>
	  timeTaken++;
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009186:	e009      	b.n	800919c <HAL_TIM_PeriodElapsedCallback+0x2c>
  }else if (htim->Instance == TIM2){
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009190:	d104      	bne.n	800919c <HAL_TIM_PeriodElapsedCallback+0x2c>
	  timeTaken++;
 8009192:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3301      	adds	r3, #1
 8009198:	4a03      	ldr	r2, [pc, #12]	; (80091a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800919a:	6013      	str	r3, [r2, #0]
}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	40001000 	.word	0x40001000
 80091a8:	20020a1c 	.word	0x20020a1c

080091ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80091b0:	b672      	cpsid	i
}
 80091b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80091b4:	e7fe      	b.n	80091b4 <Error_Handler+0x8>
	...

080091b8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	; 0x28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80091c0:	4b27      	ldr	r3, [pc, #156]	; (8009260 <I2Cx_MspInit+0xa8>)
 80091c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c4:	4a26      	ldr	r2, [pc, #152]	; (8009260 <I2Cx_MspInit+0xa8>)
 80091c6:	f043 0302 	orr.w	r3, r3, #2
 80091ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091cc:	4b24      	ldr	r3, [pc, #144]	; (8009260 <I2Cx_MspInit+0xa8>)
 80091ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	613b      	str	r3, [r7, #16]
 80091d6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80091d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80091dc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80091de:	2312      	movs	r3, #18
 80091e0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80091e2:	2301      	movs	r3, #1
 80091e4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091e6:	2303      	movs	r3, #3
 80091e8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80091ea:	2304      	movs	r3, #4
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80091ee:	f107 0314 	add.w	r3, r7, #20
 80091f2:	4619      	mov	r1, r3
 80091f4:	481b      	ldr	r0, [pc, #108]	; (8009264 <I2Cx_MspInit+0xac>)
 80091f6:	f7f8 fd11 	bl	8001c1c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80091fa:	f107 0314 	add.w	r3, r7, #20
 80091fe:	4619      	mov	r1, r3
 8009200:	4818      	ldr	r0, [pc, #96]	; (8009264 <I2Cx_MspInit+0xac>)
 8009202:	f7f8 fd0b 	bl	8001c1c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8009206:	4b16      	ldr	r3, [pc, #88]	; (8009260 <I2Cx_MspInit+0xa8>)
 8009208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920a:	4a15      	ldr	r2, [pc, #84]	; (8009260 <I2Cx_MspInit+0xa8>)
 800920c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009210:	6593      	str	r3, [r2, #88]	; 0x58
 8009212:	4b13      	ldr	r3, [pc, #76]	; (8009260 <I2Cx_MspInit+0xa8>)
 8009214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800921e:	4b10      	ldr	r3, [pc, #64]	; (8009260 <I2Cx_MspInit+0xa8>)
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	4a0f      	ldr	r2, [pc, #60]	; (8009260 <I2Cx_MspInit+0xa8>)
 8009224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009228:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800922a:	4b0d      	ldr	r3, [pc, #52]	; (8009260 <I2Cx_MspInit+0xa8>)
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	4a0c      	ldr	r2, [pc, #48]	; (8009260 <I2Cx_MspInit+0xa8>)
 8009230:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009234:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009236:	2200      	movs	r2, #0
 8009238:	210f      	movs	r1, #15
 800923a:	2021      	movs	r0, #33	; 0x21
 800923c:	f7f7 fdf0 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009240:	2021      	movs	r0, #33	; 0x21
 8009242:	f7f7 fe09 	bl	8000e58 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009246:	2200      	movs	r2, #0
 8009248:	210f      	movs	r1, #15
 800924a:	2022      	movs	r0, #34	; 0x22
 800924c:	f7f7 fde8 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009250:	2022      	movs	r0, #34	; 0x22
 8009252:	f7f7 fe01 	bl	8000e58 <HAL_NVIC_EnableIRQ>
}
 8009256:	bf00      	nop
 8009258:	3728      	adds	r7, #40	; 0x28
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	40021000 	.word	0x40021000
 8009264:	48000400 	.word	0x48000400

08009268 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a12      	ldr	r2, [pc, #72]	; (80092bc <I2Cx_Init+0x54>)
 8009274:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a11      	ldr	r2, [pc, #68]	; (80092c0 <I2Cx_Init+0x58>)
 800927a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff ff89 	bl	80091b8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7f8 ff86 	bl	80021b8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80092ac:	2100      	movs	r1, #0
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7fa fa88 	bl	80037c4 <HAL_I2CEx_ConfigAnalogFilter>
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	40005800 	.word	0x40005800
 80092c0:	00702681 	.word	0x00702681

080092c4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08a      	sub	sp, #40	; 0x28
 80092c8:	af04      	add	r7, sp, #16
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	4608      	mov	r0, r1
 80092ce:	4611      	mov	r1, r2
 80092d0:	461a      	mov	r2, r3
 80092d2:	4603      	mov	r3, r0
 80092d4:	72fb      	strb	r3, [r7, #11]
 80092d6:	460b      	mov	r3, r1
 80092d8:	813b      	strh	r3, [r7, #8]
 80092da:	4613      	mov	r3, r2
 80092dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80092e2:	7afb      	ldrb	r3, [r7, #11]
 80092e4:	b299      	uxth	r1, r3
 80092e6:	88f8      	ldrh	r0, [r7, #6]
 80092e8:	893a      	ldrh	r2, [r7, #8]
 80092ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092ee:	9302      	str	r3, [sp, #8]
 80092f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4603      	mov	r3, r0
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7f9 f92e 	bl	800255c <HAL_I2C_Mem_Read>
 8009300:	4603      	mov	r3, r0
 8009302:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009304:	7dfb      	ldrb	r3, [r7, #23]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	4619      	mov	r1, r3
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 f832 	bl	8009378 <I2Cx_Error>
  }
  return status;
 8009314:	7dfb      	ldrb	r3, [r7, #23]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b08a      	sub	sp, #40	; 0x28
 8009322:	af04      	add	r7, sp, #16
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	4608      	mov	r0, r1
 8009328:	4611      	mov	r1, r2
 800932a:	461a      	mov	r2, r3
 800932c:	4603      	mov	r3, r0
 800932e:	72fb      	strb	r3, [r7, #11]
 8009330:	460b      	mov	r3, r1
 8009332:	813b      	strh	r3, [r7, #8]
 8009334:	4613      	mov	r3, r2
 8009336:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800933c:	7afb      	ldrb	r3, [r7, #11]
 800933e:	b299      	uxth	r1, r3
 8009340:	88f8      	ldrh	r0, [r7, #6]
 8009342:	893a      	ldrh	r2, [r7, #8]
 8009344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009348:	9302      	str	r3, [sp, #8]
 800934a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	6a3b      	ldr	r3, [r7, #32]
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	4603      	mov	r3, r0
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f7f8 ffed 	bl	8002334 <HAL_I2C_Mem_Write>
 800935a:	4603      	mov	r3, r0
 800935c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d004      	beq.n	800936e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	4619      	mov	r1, r3
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 f805 	bl	8009378 <I2Cx_Error>
  }
  return status;
 800936e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7f8 ffa6 	bl	80022d6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7ff ff6c 	bl	8009268 <I2Cx_Init>
}
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800939c:	4802      	ldr	r0, [pc, #8]	; (80093a8 <SENSOR_IO_Init+0x10>)
 800939e:	f7ff ff63 	bl	8009268 <I2Cx_Init>
}
 80093a2:	bf00      	nop
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	20020a68 	.word	0x20020a68

080093ac <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af02      	add	r7, sp, #8
 80093b2:	4603      	mov	r3, r0
 80093b4:	71fb      	strb	r3, [r7, #7]
 80093b6:	460b      	mov	r3, r1
 80093b8:	71bb      	strb	r3, [r7, #6]
 80093ba:	4613      	mov	r3, r2
 80093bc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80093be:	79bb      	ldrb	r3, [r7, #6]
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	79f9      	ldrb	r1, [r7, #7]
 80093c4:	2301      	movs	r3, #1
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	1d7b      	adds	r3, r7, #5
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	2301      	movs	r3, #1
 80093ce:	4803      	ldr	r0, [pc, #12]	; (80093dc <SENSOR_IO_Write+0x30>)
 80093d0:	f7ff ffa5 	bl	800931e <I2Cx_WriteMultiple>
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20020a68 	.word	0x20020a68

080093e0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	4603      	mov	r3, r0
 80093e8:	460a      	mov	r2, r1
 80093ea:	71fb      	strb	r3, [r7, #7]
 80093ec:	4613      	mov	r3, r2
 80093ee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80093f4:	79bb      	ldrb	r3, [r7, #6]
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	79f9      	ldrb	r1, [r7, #7]
 80093fa:	2301      	movs	r3, #1
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	f107 030f 	add.w	r3, r7, #15
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	2301      	movs	r3, #1
 8009406:	4804      	ldr	r0, [pc, #16]	; (8009418 <SENSOR_IO_Read+0x38>)
 8009408:	f7ff ff5c 	bl	80092c4 <I2Cx_ReadMultiple>

  return read_value;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20020a68 	.word	0x20020a68

0800941c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af02      	add	r7, sp, #8
 8009422:	603a      	str	r2, [r7, #0]
 8009424:	461a      	mov	r2, r3
 8009426:	4603      	mov	r3, r0
 8009428:	71fb      	strb	r3, [r7, #7]
 800942a:	460b      	mov	r3, r1
 800942c:	71bb      	strb	r3, [r7, #6]
 800942e:	4613      	mov	r3, r2
 8009430:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009432:	79bb      	ldrb	r3, [r7, #6]
 8009434:	b29a      	uxth	r2, r3
 8009436:	79f9      	ldrb	r1, [r7, #7]
 8009438:	88bb      	ldrh	r3, [r7, #4]
 800943a:	9301      	str	r3, [sp, #4]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	2301      	movs	r3, #1
 8009442:	4804      	ldr	r0, [pc, #16]	; (8009454 <SENSOR_IO_ReadMultiple+0x38>)
 8009444:	f7ff ff3e 	bl	80092c4 <I2Cx_ReadMultiple>
 8009448:	4603      	mov	r3, r0
 800944a:	b29b      	uxth	r3, r3
}
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20020a68 	.word	0x20020a68

08009458 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8009462:	2300      	movs	r3, #0
 8009464:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8009466:	4b1b      	ldr	r3, [pc, #108]	; (80094d4 <BSP_GYRO_Init+0x7c>)
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	4798      	blx	r3
 800946c:	4603      	mov	r3, r0
 800946e:	2b6a      	cmp	r3, #106	; 0x6a
 8009470:	d002      	beq.n	8009478 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	73fb      	strb	r3, [r7, #15]
 8009476:	e028      	b.n	80094ca <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8009478:	4b17      	ldr	r3, [pc, #92]	; (80094d8 <BSP_GYRO_Init+0x80>)
 800947a:	4a16      	ldr	r2, [pc, #88]	; (80094d4 <BSP_GYRO_Init+0x7c>)
 800947c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8009482:	2330      	movs	r3, #48	; 0x30
 8009484:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800948e:	2340      	movs	r3, #64	; 0x40
 8009490:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8009496:	230c      	movs	r3, #12
 8009498:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800949a:	7aba      	ldrb	r2, [r7, #10]
 800949c:	797b      	ldrb	r3, [r7, #5]
 800949e:	4313      	orrs	r3, r2
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80094a4:	7a3b      	ldrb	r3, [r7, #8]
 80094a6:	f043 0304 	orr.w	r3, r3, #4
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	021b      	lsls	r3, r3, #8
 80094ae:	b21a      	sxth	r2, r3
 80094b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	b21b      	sxth	r3, r3
 80094b8:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80094ba:	4b07      	ldr	r3, [pc, #28]	; (80094d8 <BSP_GYRO_Init+0x80>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	89ba      	ldrh	r2, [r7, #12]
 80094c2:	4610      	mov	r0, r2
 80094c4:	4798      	blx	r3
    
    ret = GYRO_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20000008 	.word	0x20000008
 80094d8:	20020abc 	.word	0x20020abc

080094dc <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80094e4:	4b08      	ldr	r3, [pc, #32]	; (8009508 <BSP_GYRO_GetXYZ+0x2c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d009      	beq.n	8009500 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80094ec:	4b06      	ldr	r3, [pc, #24]	; (8009508 <BSP_GYRO_GetXYZ+0x2c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80094f6:	4b04      	ldr	r3, [pc, #16]	; (8009508 <BSP_GYRO_GetXYZ+0x2c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	4798      	blx	r3
    }
  }
}
 8009500:	bf00      	nop
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20020abc 	.word	0x20020abc

0800950c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8009512:	4b0c      	ldr	r3, [pc, #48]	; (8009544 <BSP_HSENSOR_Init+0x38>)
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	20be      	movs	r0, #190	; 0xbe
 8009518:	4798      	blx	r3
 800951a:	4603      	mov	r3, r0
 800951c:	2bbc      	cmp	r3, #188	; 0xbc
 800951e:	d002      	beq.n	8009526 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	607b      	str	r3, [r7, #4]
 8009524:	e009      	b.n	800953a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8009526:	4b08      	ldr	r3, [pc, #32]	; (8009548 <BSP_HSENSOR_Init+0x3c>)
 8009528:	4a06      	ldr	r2, [pc, #24]	; (8009544 <BSP_HSENSOR_Init+0x38>)
 800952a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800952c:	4b06      	ldr	r3, [pc, #24]	; (8009548 <BSP_HSENSOR_Init+0x3c>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	20be      	movs	r0, #190	; 0xbe
 8009534:	4798      	blx	r3
    ret = HSENSOR_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800953a:	687b      	ldr	r3, [r7, #4]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	2000003c 	.word	0x2000003c
 8009548:	20020ac0 	.word	0x20020ac0

0800954c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8009552:	4b3b      	ldr	r3, [pc, #236]	; (8009640 <BSP_QSPI_Init+0xf4>)
 8009554:	4a3b      	ldr	r2, [pc, #236]	; (8009644 <BSP_QSPI_Init+0xf8>)
 8009556:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8009558:	4839      	ldr	r0, [pc, #228]	; (8009640 <BSP_QSPI_Init+0xf4>)
 800955a:	f7fa fa75 	bl	8003a48 <HAL_OSPI_DeInit>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e067      	b.n	8009638 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8009568:	f000 f990 	bl	800988c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 800956c:	4b34      	ldr	r3, [pc, #208]	; (8009640 <BSP_QSPI_Init+0xf4>)
 800956e:	2204      	movs	r2, #4
 8009570:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8009572:	4b33      	ldr	r3, [pc, #204]	; (8009640 <BSP_QSPI_Init+0xf4>)
 8009574:	2200      	movs	r2, #0
 8009576:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8009578:	4b31      	ldr	r3, [pc, #196]	; (8009640 <BSP_QSPI_Init+0xf4>)
 800957a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800957e:	60da      	str	r2, [r3, #12]
 8009580:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009584:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	fa93 f3a3 	rbit	r3, r3
 800958c:	607b      	str	r3, [r7, #4]
  return result;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d101      	bne.n	800959c <BSP_QSPI_Init+0x50>
    return 32U;
 8009598:	2320      	movs	r3, #32
 800959a:	e003      	b.n	80095a4 <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	fab3 f383 	clz	r3, r3
 80095a2:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 80095a4:	461a      	mov	r2, r3
 80095a6:	4b26      	ldr	r3, [pc, #152]	; (8009640 <BSP_QSPI_Init+0xf4>)
 80095a8:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 80095aa:	4b25      	ldr	r3, [pc, #148]	; (8009640 <BSP_QSPI_Init+0xf4>)
 80095ac:	2201      	movs	r2, #1
 80095ae:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 80095b0:	4b23      	ldr	r3, [pc, #140]	; (8009640 <BSP_QSPI_Init+0xf4>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 80095b6:	4b22      	ldr	r3, [pc, #136]	; (8009640 <BSP_QSPI_Init+0xf4>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 80095bc:	4b20      	ldr	r3, [pc, #128]	; (8009640 <BSP_QSPI_Init+0xf4>)
 80095be:	2204      	movs	r2, #4
 80095c0:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80095c2:	4b1f      	ldr	r3, [pc, #124]	; (8009640 <BSP_QSPI_Init+0xf4>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80095c8:	4b1d      	ldr	r3, [pc, #116]	; (8009640 <BSP_QSPI_Init+0xf4>)
 80095ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ce:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 80095d0:	4b1b      	ldr	r3, [pc, #108]	; (8009640 <BSP_QSPI_Init+0xf4>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 80095d6:	4b1a      	ldr	r3, [pc, #104]	; (8009640 <BSP_QSPI_Init+0xf4>)
 80095d8:	2200      	movs	r2, #0
 80095da:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80095dc:	4818      	ldr	r0, [pc, #96]	; (8009640 <BSP_QSPI_Init+0xf4>)
 80095de:	f7fa f989 	bl	80038f4 <HAL_OSPI_Init>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e025      	b.n	8009638 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 80095ec:	4814      	ldr	r0, [pc, #80]	; (8009640 <BSP_QSPI_Init+0xf4>)
 80095ee:	f000 f98d 	bl	800990c <QSPI_ResetMemory>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 80095f8:	2304      	movs	r3, #4
 80095fa:	e01d      	b.n	8009638 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80095fc:	2101      	movs	r1, #1
 80095fe:	4810      	ldr	r0, [pc, #64]	; (8009640 <BSP_QSPI_Init+0xf4>)
 8009600:	f000 fa72 	bl	8009ae8 <QSPI_QuadMode>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e014      	b.n	8009638 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 800960e:	2101      	movs	r1, #1
 8009610:	480b      	ldr	r0, [pc, #44]	; (8009640 <BSP_QSPI_Init+0xf4>)
 8009612:	f000 fb15 	bl	8009c40 <QSPI_HighPerfMode>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e00b      	b.n	8009638 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8009620:	4b07      	ldr	r3, [pc, #28]	; (8009640 <BSP_QSPI_Init+0xf4>)
 8009622:	2202      	movs	r2, #2
 8009624:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8009626:	4806      	ldr	r0, [pc, #24]	; (8009640 <BSP_QSPI_Init+0xf4>)
 8009628:	f7fa f964 	bl	80038f4 <HAL_OSPI_Init>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20020ac4 	.word	0x20020ac4
 8009644:	a0001000 	.word	0xa0001000

08009648 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b098      	sub	sp, #96	; 0x60
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009654:	2300      	movs	r3, #0
 8009656:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8009658:	2300      	movs	r3, #0
 800965a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 800965c:	23eb      	movs	r3, #235	; 0xeb
 800965e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8009660:	2301      	movs	r3, #1
 8009662:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8009664:	2300      	movs	r3, #0
 8009666:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009668:	2300      	movs	r3, #0
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8009670:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009674:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8009676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800967a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800967c:	2300      	movs	r3, #0
 800967e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8009680:	23aa      	movs	r3, #170	; 0xaa
 8009682:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8009684:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8009688:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 800968a:	2300      	movs	r3, #0
 800968c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 800968e:	2300      	movs	r3, #0
 8009690:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8009692:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009696:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 800969c:	2300      	movs	r3, #0
 800969e:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80096a0:	2304      	movs	r3, #4
 80096a2:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 80096a4:	2300      	movs	r3, #0
 80096a6:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80096a8:	2300      	movs	r3, #0
 80096aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096ac:	f107 0310 	add.w	r3, r7, #16
 80096b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096b4:	4619      	mov	r1, r3
 80096b6:	480c      	ldr	r0, [pc, #48]	; (80096e8 <BSP_QSPI_Read+0xa0>)
 80096b8:	f7fa f9ed 	bl	8003a96 <HAL_OSPI_Command>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e00b      	b.n	80096de <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ca:	68f9      	ldr	r1, [r7, #12]
 80096cc:	4806      	ldr	r0, [pc, #24]	; (80096e8 <BSP_QSPI_Read+0xa0>)
 80096ce:	f7fa fad6 	bl	8003c7e <HAL_OSPI_Receive>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e000      	b.n	80096de <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3760      	adds	r7, #96	; 0x60
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20020ac4 	.word	0x20020ac4

080096ec <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b09c      	sub	sp, #112	; 0x70
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009700:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8009702:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	429a      	cmp	r2, r3
 8009708:	d901      	bls.n	800970e <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4413      	add	r3, r2
 8009718:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800971a:	2300      	movs	r3, #0
 800971c:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800971e:	2300      	movs	r3, #0
 8009720:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 8009722:	2338      	movs	r3, #56	; 0x38
 8009724:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009726:	2301      	movs	r3, #1
 8009728:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800972a:	2300      	movs	r3, #0
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800972e:	2300      	movs	r3, #0
 8009730:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 8009732:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009736:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8009738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800973c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800973e:	2300      	movs	r3, #0
 8009740:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009742:	2300      	movs	r3, #0
 8009744:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8009746:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800974a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800974c:	2300      	movs	r3, #0
 800974e:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009754:	2300      	movs	r3, #0
 8009756:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009758:	2300      	movs	r3, #0
 800975a:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800975c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800975e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8009760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009762:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8009764:	4823      	ldr	r0, [pc, #140]	; (80097f4 <BSP_QSPI_Write+0x108>)
 8009766:	f000 f918 	bl	800999a <QSPI_WriteEnable>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e03b      	b.n	80097ec <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009774:	f107 0314 	add.w	r3, r7, #20
 8009778:	f241 3288 	movw	r2, #5000	; 0x1388
 800977c:	4619      	mov	r1, r3
 800977e:	481d      	ldr	r0, [pc, #116]	; (80097f4 <BSP_QSPI_Write+0x108>)
 8009780:	f7fa f989 	bl	8003a96 <HAL_OSPI_Command>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e02e      	b.n	80097ec <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800978e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009792:	68f9      	ldr	r1, [r7, #12]
 8009794:	4817      	ldr	r0, [pc, #92]	; (80097f4 <BSP_QSPI_Write+0x108>)
 8009796:	f7fa f9ff 	bl	8003b98 <HAL_OSPI_Transmit>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e023      	b.n	80097ec <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80097a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80097a8:	4812      	ldr	r0, [pc, #72]	; (80097f4 <BSP_QSPI_Write+0x108>)
 80097aa:	f000 f952 	bl	8009a52 <QSPI_AutoPollingMemReady>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e019      	b.n	80097ec <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80097b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097bc:	4413      	add	r3, r2
 80097be:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c4:	4413      	add	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 80097c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80097ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d203      	bcs.n	80097dc <BSP_QSPI_Write+0xf0>
 80097d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80097d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	e001      	b.n	80097e0 <BSP_QSPI_Write+0xf4>
 80097dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 80097e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d3b8      	bcc.n	800975c <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3770      	adds	r7, #112	; 0x70
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	20020ac4 	.word	0x20020ac4

080097f8 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b096      	sub	sp, #88	; 0x58
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009800:	2300      	movs	r3, #0
 8009802:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009804:	2300      	movs	r3, #0
 8009806:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 8009808:	23d8      	movs	r3, #216	; 0xd8
 800980a:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800980c:	2301      	movs	r3, #1
 800980e:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009810:	2300      	movs	r3, #0
 8009812:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009814:	2300      	movs	r3, #0
 8009816:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 800981c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009820:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8009822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009826:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009828:	2300      	movs	r3, #0
 800982a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800982c:	2300      	movs	r3, #0
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8009830:	2300      	movs	r3, #0
 8009832:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009838:	2300      	movs	r3, #0
 800983a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800983c:	2300      	movs	r3, #0
 800983e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8009840:	4811      	ldr	r0, [pc, #68]	; (8009888 <BSP_QSPI_Erase_Block+0x90>)
 8009842:	f000 f8aa 	bl	800999a <QSPI_WriteEnable>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e017      	b.n	8009880 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009850:	f107 0308 	add.w	r3, r7, #8
 8009854:	f241 3288 	movw	r2, #5000	; 0x1388
 8009858:	4619      	mov	r1, r3
 800985a:	480b      	ldr	r0, [pc, #44]	; (8009888 <BSP_QSPI_Erase_Block+0x90>)
 800985c:	f7fa f91b 	bl	8003a96 <HAL_OSPI_Command>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e00a      	b.n	8009880 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 800986a:	f640 51ac 	movw	r1, #3500	; 0xdac
 800986e:	4806      	ldr	r0, [pc, #24]	; (8009888 <BSP_QSPI_Erase_Block+0x90>)
 8009870:	f000 f8ef 	bl	8009a52 <QSPI_AutoPollingMemReady>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e000      	b.n	8009880 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3758      	adds	r7, #88	; 0x58
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	20020ac4 	.word	0x20020ac4

0800988c <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 8009892:	4b1c      	ldr	r3, [pc, #112]	; (8009904 <BSP_QSPI_MspInit+0x78>)
 8009894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009896:	4a1b      	ldr	r2, [pc, #108]	; (8009904 <BSP_QSPI_MspInit+0x78>)
 8009898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800989c:	6513      	str	r3, [r2, #80]	; 0x50
 800989e:	4b19      	ldr	r3, [pc, #100]	; (8009904 <BSP_QSPI_MspInit+0x78>)
 80098a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a6:	60bb      	str	r3, [r7, #8]
 80098a8:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 80098aa:	4b16      	ldr	r3, [pc, #88]	; (8009904 <BSP_QSPI_MspInit+0x78>)
 80098ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ae:	4a15      	ldr	r2, [pc, #84]	; (8009904 <BSP_QSPI_MspInit+0x78>)
 80098b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098b4:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 80098b6:	4b13      	ldr	r3, [pc, #76]	; (8009904 <BSP_QSPI_MspInit+0x78>)
 80098b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ba:	4a12      	ldr	r2, [pc, #72]	; (8009904 <BSP_QSPI_MspInit+0x78>)
 80098bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098c0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80098c2:	4b10      	ldr	r3, [pc, #64]	; (8009904 <BSP_QSPI_MspInit+0x78>)
 80098c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c6:	4a0f      	ldr	r2, [pc, #60]	; (8009904 <BSP_QSPI_MspInit+0x78>)
 80098c8:	f043 0310 	orr.w	r3, r3, #16
 80098cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098ce:	4b0d      	ldr	r3, [pc, #52]	; (8009904 <BSP_QSPI_MspInit+0x78>)
 80098d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098d2:	f003 0310 	and.w	r3, r3, #16
 80098d6:	607b      	str	r3, [r7, #4]
 80098d8:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80098da:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80098de:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80098e0:	2302      	movs	r3, #2
 80098e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80098e8:	2303      	movs	r3, #3
 80098ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80098ec:	230a      	movs	r3, #10
 80098ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80098f0:	f107 030c 	add.w	r3, r7, #12
 80098f4:	4619      	mov	r1, r3
 80098f6:	4804      	ldr	r0, [pc, #16]	; (8009908 <BSP_QSPI_MspInit+0x7c>)
 80098f8:	f7f8 f990 	bl	8001c1c <HAL_GPIO_Init>
}
 80098fc:	bf00      	nop
 80098fe:	3720      	adds	r7, #32
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	40021000 	.word	0x40021000
 8009908:	48001000 	.word	0x48001000

0800990c <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b096      	sub	sp, #88	; 0x58
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009914:	2300      	movs	r3, #0
 8009916:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009918:	2300      	movs	r3, #0
 800991a:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 800991c:	2366      	movs	r3, #102	; 0x66
 800991e:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009920:	2301      	movs	r3, #1
 8009922:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009924:	2300      	movs	r3, #0
 8009926:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009928:	2300      	movs	r3, #0
 800992a:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800992c:	2300      	movs	r3, #0
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009930:	2300      	movs	r3, #0
 8009932:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8009934:	2300      	movs	r3, #0
 8009936:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800993c:	2300      	movs	r3, #0
 800993e:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009940:	2300      	movs	r3, #0
 8009942:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009944:	f107 0308 	add.w	r3, r7, #8
 8009948:	f241 3288 	movw	r2, #5000	; 0x1388
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7fa f8a1 	bl	8003a96 <HAL_OSPI_Command>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e019      	b.n	8009992 <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 800995e:	2399      	movs	r3, #153	; 0x99
 8009960:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009962:	f107 0308 	add.w	r3, r7, #8
 8009966:	f241 3288 	movw	r2, #5000	; 0x1388
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7fa f892 	bl	8003a96 <HAL_OSPI_Command>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e00a      	b.n	8009992 <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800997c:	f241 3188 	movw	r1, #5000	; 0x1388
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f866 	bl	8009a52 <QSPI_AutoPollingMemReady>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e000      	b.n	8009992 <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3758      	adds	r7, #88	; 0x58
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b09c      	sub	sp, #112	; 0x70
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80099a2:	2300      	movs	r3, #0
 80099a4:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80099a6:	2300      	movs	r3, #0
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 80099aa:	2306      	movs	r3, #6
 80099ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80099ae:	2301      	movs	r3, #1
 80099b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80099b2:	2300      	movs	r3, #0
 80099b4:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80099ba:	2300      	movs	r3, #0
 80099bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80099be:	2300      	movs	r3, #0
 80099c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80099c2:	2300      	movs	r3, #0
 80099c4:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80099ca:	2300      	movs	r3, #0
 80099cc:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80099ce:	2300      	movs	r3, #0
 80099d0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80099d2:	f107 0320 	add.w	r3, r7, #32
 80099d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7fa f85a 	bl	8003a96 <HAL_OSPI_Command>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	e02e      	b.n	8009a4a <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 80099ec:	2302      	movs	r3, #2
 80099ee:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 80099f0:	2302      	movs	r3, #2
 80099f2:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80099f8:	2310      	movs	r3, #16
 80099fa:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80099fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a00:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 8009a02:	2305      	movs	r3, #5
 8009a04:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 8009a06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a0a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a14:	f107 0320 	add.w	r3, r7, #32
 8009a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7fa f839 	bl	8003a96 <HAL_OSPI_Command>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e00d      	b.n	8009a4a <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a2e:	f107 030c 	add.w	r3, r7, #12
 8009a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7fa f9c3 	bl	8003dc4 <HAL_OSPI_AutoPolling>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e000      	b.n	8009a4a <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3770      	adds	r7, #112	; 0x70
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b09c      	sub	sp, #112	; 0x70
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009a60:	2300      	movs	r3, #0
 8009a62:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8009a64:	2305      	movs	r3, #5
 8009a66:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009a70:	2300      	movs	r3, #0
 8009a72:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8009a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a80:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 8009a82:	2301      	movs	r3, #1
 8009a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009a86:	2300      	movs	r3, #0
 8009a88:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009a92:	2300      	movs	r3, #0
 8009a94:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8009aa2:	2310      	movs	r3, #16
 8009aa4:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8009aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009aaa:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009aac:	f107 0320 	add.w	r3, r7, #32
 8009ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7f9 ffed 	bl	8003a96 <HAL_OSPI_Command>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e00c      	b.n	8009ae0 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8009ac6:	f107 030c 	add.w	r3, r7, #12
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7fa f978 	bl	8003dc4 <HAL_OSPI_AutoPolling>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e000      	b.n	8009ae0 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3770      	adds	r7, #112	; 0x70
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b098      	sub	sp, #96	; 0x60
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009af4:	2300      	movs	r3, #0
 8009af6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009af8:	2300      	movs	r3, #0
 8009afa:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8009afc:	2305      	movs	r3, #5
 8009afe:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009b00:	2301      	movs	r3, #1
 8009b02:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009b04:	2300      	movs	r3, #0
 8009b06:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009b10:	2300      	movs	r3, #0
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8009b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b18:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8009b22:	2301      	movs	r3, #1
 8009b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b2e:	f107 0310 	add.w	r3, r7, #16
 8009b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7f9 ffac 	bl	8003a96 <HAL_OSPI_Command>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e077      	b.n	8009c38 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b48:	f107 030f 	add.w	r3, r7, #15
 8009b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7fa f893 	bl	8003c7e <HAL_OSPI_Receive>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e06a      	b.n	8009c38 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff ff19 	bl	800999a <QSPI_WriteEnable>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e062      	b.n	8009c38 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d105      	bne.n	8009b84 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	73fb      	strb	r3, [r7, #15]
 8009b82:	e004      	b.n	8009b8e <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
 8009b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b92:	f107 0310 	add.w	r3, r7, #16
 8009b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7f9 ff7a 	bl	8003a96 <HAL_OSPI_Command>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e045      	b.n	8009c38 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009bac:	f107 030f 	add.w	r3, r7, #15
 8009bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7f9 ffee 	bl	8003b98 <HAL_OSPI_Transmit>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e038      	b.n	8009c38 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8009bc6:	f241 3188 	movw	r1, #5000	; 0x1388
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7ff ff41 	bl	8009a52 <QSPI_AutoPollingMemReady>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e02e      	b.n	8009c38 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8009bda:	2305      	movs	r3, #5
 8009bdc:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009bde:	f107 0310 	add.w	r3, r7, #16
 8009be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7f9 ff54 	bl	8003a96 <HAL_OSPI_Command>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e01f      	b.n	8009c38 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009bf8:	f107 030f 	add.w	r3, r7, #15
 8009bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7fa f83b 	bl	8003c7e <HAL_OSPI_Receive>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e012      	b.n	8009c38 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
 8009c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <QSPI_QuadMode+0x13a>
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d007      	beq.n	8009c32 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d004      	beq.n	8009c36 <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8009c2c:	78fb      	ldrb	r3, [r7, #3]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3760      	adds	r7, #96	; 0x60
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b098      	sub	sp, #96	; 0x60
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009c50:	2300      	movs	r3, #0
 8009c52:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8009c54:	2305      	movs	r3, #5
 8009c56:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009c60:	2300      	movs	r3, #0
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009c64:	2300      	movs	r3, #0
 8009c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8009c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c70:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009c72:	2300      	movs	r3, #0
 8009c74:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009c82:	2300      	movs	r3, #0
 8009c84:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c86:	f107 0310 	add.w	r3, r7, #16
 8009c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7f9 ff00 	bl	8003a96 <HAL_OSPI_Command>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d001      	beq.n	8009ca0 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e09a      	b.n	8009dd6 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ca0:	f107 030c 	add.w	r3, r7, #12
 8009ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ca8:	4619      	mov	r1, r3
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7f9 ffe7 	bl	8003c7e <HAL_OSPI_Receive>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e08d      	b.n	8009dd6 <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8009cba:	2315      	movs	r3, #21
 8009cbc:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009cc2:	f107 0310 	add.w	r3, r7, #16
 8009cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7f9 fee2 	bl	8003a96 <HAL_OSPI_Command>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e07c      	b.n	8009dd6 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009cdc:	f107 030c 	add.w	r3, r7, #12
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7f9 ffc8 	bl	8003c7e <HAL_OSPI_Receive>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e06e      	b.n	8009dd6 <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff fe4e 	bl	800999a <QSPI_WriteEnable>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e066      	b.n	8009dd6 <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8009d08:	78fb      	ldrb	r3, [r7, #3]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d105      	bne.n	8009d1a <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	f043 0302 	orr.w	r3, r3, #2
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	73bb      	strb	r3, [r7, #14]
 8009d18:	e004      	b.n	8009d24 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	f023 0302 	bic.w	r3, r3, #2
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8009d24:	2301      	movs	r3, #1
 8009d26:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d2c:	f107 0310 	add.w	r3, r7, #16
 8009d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7f9 fead 	bl	8003a96 <HAL_OSPI_Command>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e047      	b.n	8009dd6 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d46:	f107 030c 	add.w	r3, r7, #12
 8009d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7f9 ff21 	bl	8003b98 <HAL_OSPI_Transmit>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e03a      	b.n	8009dd6 <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8009d60:	f241 3188 	movw	r1, #5000	; 0x1388
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff fe74 	bl	8009a52 <QSPI_AutoPollingMemReady>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e030      	b.n	8009dd6 <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8009d74:	2315      	movs	r3, #21
 8009d76:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8009d78:	2302      	movs	r3, #2
 8009d7a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d7c:	f107 0310 	add.w	r3, r7, #16
 8009d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7f9 fe85 	bl	8003a96 <HAL_OSPI_Command>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e01f      	b.n	8009dd6 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d96:	f107 030c 	add.w	r3, r7, #12
 8009d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7f9 ff6c 	bl	8003c7e <HAL_OSPI_Receive>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e012      	b.n	8009dd6 <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8009db0:	7b7b      	ldrb	r3, [r7, #13]
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d102      	bne.n	8009dc0 <QSPI_HighPerfMode+0x180>
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d007      	beq.n	8009dd0 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8009dc0:	7b7b      	ldrb	r3, [r7, #13]
 8009dc2:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d004      	beq.n	8009dd4 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3760      	adds	r7, #96	; 0x60
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
	...

08009de0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8009dea:	4b09      	ldr	r3, [pc, #36]	; (8009e10 <BSP_TSENSOR_Init+0x30>)
 8009dec:	4a09      	ldr	r2, [pc, #36]	; (8009e14 <BSP_TSENSOR_Init+0x34>)
 8009dee:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8009df0:	f7ff fad2 	bl	8009398 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8009df4:	4b06      	ldr	r3, [pc, #24]	; (8009e10 <BSP_TSENSOR_Init+0x30>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	20be      	movs	r0, #190	; 0xbe
 8009dfe:	4798      	blx	r3

  ret = TSENSOR_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8009e04:	79fb      	ldrb	r3, [r7, #7]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	20020b14 	.word	0x20020b14
 8009e14:	20000048 	.word	0x20000048

08009e18 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8009e1c:	4b04      	ldr	r3, [pc, #16]	; (8009e30 <BSP_TSENSOR_ReadTemp+0x18>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	20be      	movs	r0, #190	; 0xbe
 8009e24:	4798      	blx	r3
 8009e26:	eef0 7a40 	vmov.f32	s15, s0
}
 8009e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	20020b14 	.word	0x20020b14

08009e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e3a:	4b11      	ldr	r3, [pc, #68]	; (8009e80 <HAL_MspInit+0x4c>)
 8009e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e3e:	4a10      	ldr	r2, [pc, #64]	; (8009e80 <HAL_MspInit+0x4c>)
 8009e40:	f043 0301 	orr.w	r3, r3, #1
 8009e44:	6613      	str	r3, [r2, #96]	; 0x60
 8009e46:	4b0e      	ldr	r3, [pc, #56]	; (8009e80 <HAL_MspInit+0x4c>)
 8009e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	607b      	str	r3, [r7, #4]
 8009e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e52:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <HAL_MspInit+0x4c>)
 8009e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e56:	4a0a      	ldr	r2, [pc, #40]	; (8009e80 <HAL_MspInit+0x4c>)
 8009e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8009e5e:	4b08      	ldr	r3, [pc, #32]	; (8009e80 <HAL_MspInit+0x4c>)
 8009e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e66:	603b      	str	r3, [r7, #0]
 8009e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	210f      	movs	r1, #15
 8009e6e:	f06f 0001 	mvn.w	r0, #1
 8009e72:	f7f6 ffd5 	bl	8000e20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	40021000 	.word	0x40021000

08009e84 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08a      	sub	sp, #40	; 0x28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e8c:	f107 0314 	add.w	r3, r7, #20
 8009e90:	2200      	movs	r2, #0
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	605a      	str	r2, [r3, #4]
 8009e96:	609a      	str	r2, [r3, #8]
 8009e98:	60da      	str	r2, [r3, #12]
 8009e9a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a42      	ldr	r2, [pc, #264]	; (8009fac <HAL_DAC_MspInit+0x128>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d17e      	bne.n	8009fa4 <HAL_DAC_MspInit+0x120>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8009ea6:	4b42      	ldr	r3, [pc, #264]	; (8009fb0 <HAL_DAC_MspInit+0x12c>)
 8009ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eaa:	4a41      	ldr	r2, [pc, #260]	; (8009fb0 <HAL_DAC_MspInit+0x12c>)
 8009eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8009eb2:	4b3f      	ldr	r3, [pc, #252]	; (8009fb0 <HAL_DAC_MspInit+0x12c>)
 8009eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eba:	613b      	str	r3, [r7, #16]
 8009ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ebe:	4b3c      	ldr	r3, [pc, #240]	; (8009fb0 <HAL_DAC_MspInit+0x12c>)
 8009ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ec2:	4a3b      	ldr	r2, [pc, #236]	; (8009fb0 <HAL_DAC_MspInit+0x12c>)
 8009ec4:	f043 0301 	orr.w	r3, r3, #1
 8009ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009eca:	4b39      	ldr	r3, [pc, #228]	; (8009fb0 <HAL_DAC_MspInit+0x12c>)
 8009ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8009ed6:	2330      	movs	r3, #48	; 0x30
 8009ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009eda:	2303      	movs	r3, #3
 8009edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ee2:	f107 0314 	add.w	r3, r7, #20
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009eec:	f7f7 fe96 	bl	8001c1c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8009ef0:	4b30      	ldr	r3, [pc, #192]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009ef2:	4a31      	ldr	r2, [pc, #196]	; (8009fb8 <HAL_DAC_MspInit+0x134>)
 8009ef4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8009ef6:	4b2f      	ldr	r3, [pc, #188]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009ef8:	2206      	movs	r2, #6
 8009efa:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009efc:	4b2d      	ldr	r3, [pc, #180]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009efe:	2210      	movs	r2, #16
 8009f00:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f02:	4b2c      	ldr	r3, [pc, #176]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8009f08:	4b2a      	ldr	r3, [pc, #168]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009f0a:	2280      	movs	r2, #128	; 0x80
 8009f0c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f0e:	4b29      	ldr	r3, [pc, #164]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f14:	4b27      	ldr	r3, [pc, #156]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8009f1a:	4b26      	ldr	r3, [pc, #152]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009f1c:	2220      	movs	r2, #32
 8009f1e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8009f20:	4b24      	ldr	r3, [pc, #144]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8009f26:	4823      	ldr	r0, [pc, #140]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009f28:	f7f7 fb3c 	bl	80015a4 <HAL_DMA_Init>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8009f32:	f7ff f93b 	bl	80091ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a1e      	ldr	r2, [pc, #120]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009f3a:	609a      	str	r2, [r3, #8]
 8009f3c:	4a1d      	ldr	r2, [pc, #116]	; (8009fb4 <HAL_DAC_MspInit+0x130>)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 8009f42:	4b1e      	ldr	r3, [pc, #120]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f44:	4a1e      	ldr	r2, [pc, #120]	; (8009fc0 <HAL_DAC_MspInit+0x13c>)
 8009f46:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CH2;
 8009f48:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f4a:	2207      	movs	r2, #7
 8009f4c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f4e:	4b1b      	ldr	r3, [pc, #108]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f50:	2210      	movs	r2, #16
 8009f52:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f54:	4b19      	ldr	r3, [pc, #100]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8009f5a:	4b18      	ldr	r3, [pc, #96]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f5c:	2280      	movs	r2, #128	; 0x80
 8009f5e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f60:	4b16      	ldr	r3, [pc, #88]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f66:	4b15      	ldr	r3, [pc, #84]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8009f6c:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f6e:	2220      	movs	r2, #32
 8009f70:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8009f72:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8009f78:	4810      	ldr	r0, [pc, #64]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f7a:	f7f7 fb13 	bl	80015a4 <HAL_DMA_Init>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <HAL_DAC_MspInit+0x104>
    {
      Error_Handler();
 8009f84:	f7ff f912 	bl	80091ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a0c      	ldr	r2, [pc, #48]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f8c:	60da      	str	r2, [r3, #12]
 8009f8e:	4a0b      	ldr	r2, [pc, #44]	; (8009fbc <HAL_DAC_MspInit+0x138>)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8009f94:	2200      	movs	r2, #0
 8009f96:	2105      	movs	r1, #5
 8009f98:	2036      	movs	r0, #54	; 0x36
 8009f9a:	f7f6 ff41 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009f9e:	2036      	movs	r0, #54	; 0x36
 8009fa0:	f7f6 ff5a 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8009fa4:	bf00      	nop
 8009fa6:	3728      	adds	r7, #40	; 0x28
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	40007400 	.word	0x40007400
 8009fb0:	40021000 	.word	0x40021000
 8009fb4:	20020678 	.word	0x20020678
 8009fb8:	40020008 	.word	0x40020008
 8009fbc:	200206d8 	.word	0x200206d8
 8009fc0:	4002001c 	.word	0x4002001c

08009fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b0ae      	sub	sp, #184	; 0xb8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	605a      	str	r2, [r3, #4]
 8009fd6:	609a      	str	r2, [r3, #8]
 8009fd8:	60da      	str	r2, [r3, #12]
 8009fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009fdc:	f107 0310 	add.w	r3, r7, #16
 8009fe0:	2294      	movs	r2, #148	; 0x94
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fbe9 	bl	800a7bc <memset>
  if(hi2c->Instance==I2C2)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a29      	ldr	r2, [pc, #164]	; (800a094 <HAL_I2C_MspInit+0xd0>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d14b      	bne.n	800a08c <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009ff4:	2380      	movs	r3, #128	; 0x80
 8009ff6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009ffc:	f107 0310 	add.w	r3, r7, #16
 800a000:	4618      	mov	r0, r3
 800a002:	f7fb fcc1 	bl	8005988 <HAL_RCCEx_PeriphCLKConfig>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800a00c:	f7ff f8ce 	bl	80091ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a010:	4b21      	ldr	r3, [pc, #132]	; (800a098 <HAL_I2C_MspInit+0xd4>)
 800a012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a014:	4a20      	ldr	r2, [pc, #128]	; (800a098 <HAL_I2C_MspInit+0xd4>)
 800a016:	f043 0302 	orr.w	r3, r3, #2
 800a01a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a01c:	4b1e      	ldr	r3, [pc, #120]	; (800a098 <HAL_I2C_MspInit+0xd4>)
 800a01e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a020:	f003 0302 	and.w	r3, r3, #2
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a028:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a02c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a030:	2312      	movs	r3, #18
 800a032:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a036:	2300      	movs	r3, #0
 800a038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a03c:	2303      	movs	r3, #3
 800a03e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a042:	2304      	movs	r3, #4
 800a044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a048:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a04c:	4619      	mov	r1, r3
 800a04e:	4813      	ldr	r0, [pc, #76]	; (800a09c <HAL_I2C_MspInit+0xd8>)
 800a050:	f7f7 fde4 	bl	8001c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a054:	4b10      	ldr	r3, [pc, #64]	; (800a098 <HAL_I2C_MspInit+0xd4>)
 800a056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a058:	4a0f      	ldr	r2, [pc, #60]	; (800a098 <HAL_I2C_MspInit+0xd4>)
 800a05a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a05e:	6593      	str	r3, [r2, #88]	; 0x58
 800a060:	4b0d      	ldr	r3, [pc, #52]	; (800a098 <HAL_I2C_MspInit+0xd4>)
 800a062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a068:	60bb      	str	r3, [r7, #8]
 800a06a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800a06c:	2200      	movs	r2, #0
 800a06e:	2105      	movs	r1, #5
 800a070:	2021      	movs	r0, #33	; 0x21
 800a072:	f7f6 fed5 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800a076:	2021      	movs	r0, #33	; 0x21
 800a078:	f7f6 feee 	bl	8000e58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800a07c:	2200      	movs	r2, #0
 800a07e:	2105      	movs	r1, #5
 800a080:	2022      	movs	r0, #34	; 0x22
 800a082:	f7f6 fecd 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800a086:	2022      	movs	r0, #34	; 0x22
 800a088:	f7f6 fee6 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800a08c:	bf00      	nop
 800a08e:	37b8      	adds	r7, #184	; 0xb8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	40005800 	.word	0x40005800
 800a098:	40021000 	.word	0x40021000
 800a09c:	48000400 	.word	0x48000400

0800a0a0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a0e      	ldr	r2, [pc, #56]	; (800a0e8 <HAL_I2C_MspDeInit+0x48>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d115      	bne.n	800a0de <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800a0b2:	4b0e      	ldr	r3, [pc, #56]	; (800a0ec <HAL_I2C_MspDeInit+0x4c>)
 800a0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b6:	4a0d      	ldr	r2, [pc, #52]	; (800a0ec <HAL_I2C_MspDeInit+0x4c>)
 800a0b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a0bc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800a0be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0c2:	480b      	ldr	r0, [pc, #44]	; (800a0f0 <HAL_I2C_MspDeInit+0x50>)
 800a0c4:	f7f7 ff3c 	bl	8001f40 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800a0c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a0cc:	4808      	ldr	r0, [pc, #32]	; (800a0f0 <HAL_I2C_MspDeInit+0x50>)
 800a0ce:	f7f7 ff37 	bl	8001f40 <HAL_GPIO_DeInit>

    /* I2C2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800a0d2:	2021      	movs	r0, #33	; 0x21
 800a0d4:	f7f6 fece 	bl	8000e74 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800a0d8:	2022      	movs	r0, #34	; 0x22
 800a0da:	f7f6 fecb 	bl	8000e74 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800a0de:	bf00      	nop
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	40005800 	.word	0x40005800
 800a0ec:	40021000 	.word	0x40021000
 800a0f0:	48000400 	.word	0x48000400

0800a0f4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b0b0      	sub	sp, #192	; 0xc0
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	605a      	str	r2, [r3, #4]
 800a106:	609a      	str	r2, [r3, #8]
 800a108:	60da      	str	r2, [r3, #12]
 800a10a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a10c:	f107 0318 	add.w	r3, r7, #24
 800a110:	2294      	movs	r2, #148	; 0x94
 800a112:	2100      	movs	r1, #0
 800a114:	4618      	mov	r0, r3
 800a116:	f000 fb51 	bl	800a7bc <memset>
  if(hospi->Instance==OCTOSPI1)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a28      	ldr	r2, [pc, #160]	; (800a1c0 <HAL_OSPI_MspInit+0xcc>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d149      	bne.n	800a1b8 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800a124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a128:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a130:	f107 0318 	add.w	r3, r7, #24
 800a134:	4618      	mov	r0, r3
 800a136:	f7fb fc27 	bl	8005988 <HAL_RCCEx_PeriphCLKConfig>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800a140:	f7ff f834 	bl	80091ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800a144:	4b1f      	ldr	r3, [pc, #124]	; (800a1c4 <HAL_OSPI_MspInit+0xd0>)
 800a146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a148:	4a1e      	ldr	r2, [pc, #120]	; (800a1c4 <HAL_OSPI_MspInit+0xd0>)
 800a14a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a14e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a150:	4b1c      	ldr	r3, [pc, #112]	; (800a1c4 <HAL_OSPI_MspInit+0xd0>)
 800a152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a158:	617b      	str	r3, [r7, #20]
 800a15a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800a15c:	4b19      	ldr	r3, [pc, #100]	; (800a1c4 <HAL_OSPI_MspInit+0xd0>)
 800a15e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a160:	4a18      	ldr	r2, [pc, #96]	; (800a1c4 <HAL_OSPI_MspInit+0xd0>)
 800a162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a166:	6513      	str	r3, [r2, #80]	; 0x50
 800a168:	4b16      	ldr	r3, [pc, #88]	; (800a1c4 <HAL_OSPI_MspInit+0xd0>)
 800a16a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a16c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a170:	613b      	str	r3, [r7, #16]
 800a172:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a174:	4b13      	ldr	r3, [pc, #76]	; (800a1c4 <HAL_OSPI_MspInit+0xd0>)
 800a176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a178:	4a12      	ldr	r2, [pc, #72]	; (800a1c4 <HAL_OSPI_MspInit+0xd0>)
 800a17a:	f043 0310 	orr.w	r3, r3, #16
 800a17e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a180:	4b10      	ldr	r3, [pc, #64]	; (800a1c4 <HAL_OSPI_MspInit+0xd0>)
 800a182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a184:	f003 0310 	and.w	r3, r3, #16
 800a188:	60fb      	str	r3, [r7, #12]
 800a18a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800a18c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800a190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a194:	2302      	movs	r3, #2
 800a196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800a1a6:	230a      	movs	r3, #10
 800a1a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a1ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	4805      	ldr	r0, [pc, #20]	; (800a1c8 <HAL_OSPI_MspInit+0xd4>)
 800a1b4:	f7f7 fd32 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800a1b8:	bf00      	nop
 800a1ba:	37c0      	adds	r7, #192	; 0xc0
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	a0001000 	.word	0xa0001000
 800a1c4:	40021000 	.word	0x40021000
 800a1c8:	48001000 	.word	0x48001000

0800a1cc <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a0b      	ldr	r2, [pc, #44]	; (800a208 <HAL_OSPI_MspDeInit+0x3c>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d110      	bne.n	800a200 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800a1de:	4b0b      	ldr	r3, [pc, #44]	; (800a20c <HAL_OSPI_MspDeInit+0x40>)
 800a1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e2:	4a0a      	ldr	r2, [pc, #40]	; (800a20c <HAL_OSPI_MspDeInit+0x40>)
 800a1e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1e8:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800a1ea:	4b08      	ldr	r3, [pc, #32]	; (800a20c <HAL_OSPI_MspDeInit+0x40>)
 800a1ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ee:	4a07      	ldr	r2, [pc, #28]	; (800a20c <HAL_OSPI_MspDeInit+0x40>)
 800a1f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1f4:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800a1f6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800a1fa:	4805      	ldr	r0, [pc, #20]	; (800a210 <HAL_OSPI_MspDeInit+0x44>)
 800a1fc:	f7f7 fea0 	bl	8001f40 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	a0001000 	.word	0xa0001000
 800a20c:	40021000 	.word	0x40021000
 800a210:	48001000 	.word	0x48001000

0800a214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a224:	d113      	bne.n	800a24e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a226:	4b0c      	ldr	r3, [pc, #48]	; (800a258 <HAL_TIM_Base_MspInit+0x44>)
 800a228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a22a:	4a0b      	ldr	r2, [pc, #44]	; (800a258 <HAL_TIM_Base_MspInit+0x44>)
 800a22c:	f043 0301 	orr.w	r3, r3, #1
 800a230:	6593      	str	r3, [r2, #88]	; 0x58
 800a232:	4b09      	ldr	r3, [pc, #36]	; (800a258 <HAL_TIM_Base_MspInit+0x44>)
 800a234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800a23e:	2200      	movs	r2, #0
 800a240:	2105      	movs	r1, #5
 800a242:	201c      	movs	r0, #28
 800a244:	f7f6 fdec 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a248:	201c      	movs	r0, #28
 800a24a:	f7f6 fe05 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800a24e:	bf00      	nop
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	40021000 	.word	0x40021000

0800a25c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b0ae      	sub	sp, #184	; 0xb8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a264:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	605a      	str	r2, [r3, #4]
 800a26e:	609a      	str	r2, [r3, #8]
 800a270:	60da      	str	r2, [r3, #12]
 800a272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a274:	f107 0310 	add.w	r3, r7, #16
 800a278:	2294      	movs	r2, #148	; 0x94
 800a27a:	2100      	movs	r1, #0
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 fa9d 	bl	800a7bc <memset>
  if(huart->Instance==USART1)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a21      	ldr	r2, [pc, #132]	; (800a30c <HAL_UART_MspInit+0xb0>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d13a      	bne.n	800a302 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a28c:	2301      	movs	r3, #1
 800a28e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a290:	2300      	movs	r3, #0
 800a292:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a294:	f107 0310 	add.w	r3, r7, #16
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fb fb75 	bl	8005988 <HAL_RCCEx_PeriphCLKConfig>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a2a4:	f7fe ff82 	bl	80091ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a2a8:	4b19      	ldr	r3, [pc, #100]	; (800a310 <HAL_UART_MspInit+0xb4>)
 800a2aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ac:	4a18      	ldr	r2, [pc, #96]	; (800a310 <HAL_UART_MspInit+0xb4>)
 800a2ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2b2:	6613      	str	r3, [r2, #96]	; 0x60
 800a2b4:	4b16      	ldr	r3, [pc, #88]	; (800a310 <HAL_UART_MspInit+0xb4>)
 800a2b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2bc:	60fb      	str	r3, [r7, #12]
 800a2be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2c0:	4b13      	ldr	r3, [pc, #76]	; (800a310 <HAL_UART_MspInit+0xb4>)
 800a2c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2c4:	4a12      	ldr	r2, [pc, #72]	; (800a310 <HAL_UART_MspInit+0xb4>)
 800a2c6:	f043 0302 	orr.w	r3, r3, #2
 800a2ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2cc:	4b10      	ldr	r3, [pc, #64]	; (800a310 <HAL_UART_MspInit+0xb4>)
 800a2ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2d0:	f003 0302 	and.w	r3, r3, #2
 800a2d4:	60bb      	str	r3, [r7, #8]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a2d8:	23c0      	movs	r3, #192	; 0xc0
 800a2da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a2f0:	2307      	movs	r3, #7
 800a2f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	4805      	ldr	r0, [pc, #20]	; (800a314 <HAL_UART_MspInit+0xb8>)
 800a2fe:	f7f7 fc8d 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a302:	bf00      	nop
 800a304:	37b8      	adds	r7, #184	; 0xb8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	40013800 	.word	0x40013800
 800a310:	40021000 	.word	0x40021000
 800a314:	48000400 	.word	0x48000400

0800a318 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08e      	sub	sp, #56	; 0x38
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a326:	4b34      	ldr	r3, [pc, #208]	; (800a3f8 <HAL_InitTick+0xe0>)
 800a328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a32a:	4a33      	ldr	r2, [pc, #204]	; (800a3f8 <HAL_InitTick+0xe0>)
 800a32c:	f043 0310 	orr.w	r3, r3, #16
 800a330:	6593      	str	r3, [r2, #88]	; 0x58
 800a332:	4b31      	ldr	r3, [pc, #196]	; (800a3f8 <HAL_InitTick+0xe0>)
 800a334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a336:	f003 0310 	and.w	r3, r3, #16
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a33e:	f107 0210 	add.w	r2, r7, #16
 800a342:	f107 0314 	add.w	r3, r7, #20
 800a346:	4611      	mov	r1, r2
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fb fa2b 	bl	80057a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a354:	2b00      	cmp	r3, #0
 800a356:	d103      	bne.n	800a360 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800a358:	f7fb f9f8 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 800a35c:	6378      	str	r0, [r7, #52]	; 0x34
 800a35e:	e004      	b.n	800a36a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800a360:	f7fb f9f4 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 800a364:	4603      	mov	r3, r0
 800a366:	005b      	lsls	r3, r3, #1
 800a368:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36c:	4a23      	ldr	r2, [pc, #140]	; (800a3fc <HAL_InitTick+0xe4>)
 800a36e:	fba2 2303 	umull	r2, r3, r2, r3
 800a372:	0c9b      	lsrs	r3, r3, #18
 800a374:	3b01      	subs	r3, #1
 800a376:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a378:	4b21      	ldr	r3, [pc, #132]	; (800a400 <HAL_InitTick+0xe8>)
 800a37a:	4a22      	ldr	r2, [pc, #136]	; (800a404 <HAL_InitTick+0xec>)
 800a37c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800a37e:	4b20      	ldr	r3, [pc, #128]	; (800a400 <HAL_InitTick+0xe8>)
 800a380:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a384:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a386:	4a1e      	ldr	r2, [pc, #120]	; (800a400 <HAL_InitTick+0xe8>)
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a38c:	4b1c      	ldr	r3, [pc, #112]	; (800a400 <HAL_InitTick+0xe8>)
 800a38e:	2200      	movs	r2, #0
 800a390:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a392:	4b1b      	ldr	r3, [pc, #108]	; (800a400 <HAL_InitTick+0xe8>)
 800a394:	2200      	movs	r2, #0
 800a396:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a398:	4b19      	ldr	r3, [pc, #100]	; (800a400 <HAL_InitTick+0xe8>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800a39e:	4818      	ldr	r0, [pc, #96]	; (800a400 <HAL_InitTick+0xe8>)
 800a3a0:	f7fc f80a 	bl	80063b8 <HAL_TIM_Base_Init>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800a3aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d11b      	bne.n	800a3ea <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800a3b2:	4813      	ldr	r0, [pc, #76]	; (800a400 <HAL_InitTick+0xe8>)
 800a3b4:	f7fc f858 	bl	8006468 <HAL_TIM_Base_Start_IT>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800a3be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d111      	bne.n	800a3ea <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a3c6:	2036      	movs	r0, #54	; 0x36
 800a3c8:	f7f6 fd46 	bl	8000e58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b0f      	cmp	r3, #15
 800a3d0:	d808      	bhi.n	800a3e4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	6879      	ldr	r1, [r7, #4]
 800a3d6:	2036      	movs	r0, #54	; 0x36
 800a3d8:	f7f6 fd22 	bl	8000e20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a3dc:	4a0a      	ldr	r2, [pc, #40]	; (800a408 <HAL_InitTick+0xf0>)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6013      	str	r3, [r2, #0]
 800a3e2:	e002      	b.n	800a3ea <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800a3ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3738      	adds	r7, #56	; 0x38
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	40021000 	.word	0x40021000
 800a3fc:	431bde83 	.word	0x431bde83
 800a400:	20020b18 	.word	0x20020b18
 800a404:	40001000 	.word	0x40001000
 800a408:	20000000 	.word	0x20000000

0800a40c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a40c:	b480      	push	{r7}
 800a40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a410:	e7fe      	b.n	800a410 <NMI_Handler+0x4>

0800a412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a412:	b480      	push	{r7}
 800a414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a416:	e7fe      	b.n	800a416 <HardFault_Handler+0x4>

0800a418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a418:	b480      	push	{r7}
 800a41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a41c:	e7fe      	b.n	800a41c <MemManage_Handler+0x4>

0800a41e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a41e:	b480      	push	{r7}
 800a420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a422:	e7fe      	b.n	800a422 <BusFault_Handler+0x4>

0800a424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a428:	e7fe      	b.n	800a428 <UsageFault_Handler+0x4>

0800a42a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a42a:	b480      	push	{r7}
 800a42c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a42e:	bf00      	nop
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800a43c:	4802      	ldr	r0, [pc, #8]	; (800a448 <DMA1_Channel1_IRQHandler+0x10>)
 800a43e:	f7f7 fa8f 	bl	8001960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a442:	bf00      	nop
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20020678 	.word	0x20020678

0800a44c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800a450:	4802      	ldr	r0, [pc, #8]	; (800a45c <DMA1_Channel2_IRQHandler+0x10>)
 800a452:	f7f7 fa85 	bl	8001960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800a456:	bf00      	nop
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	200206d8 	.word	0x200206d8

0800a460 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a464:	4802      	ldr	r0, [pc, #8]	; (800a470 <TIM2_IRQHandler+0x10>)
 800a466:	f7fc f86f 	bl	8006548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a46a:	bf00      	nop
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	200207dc 	.word	0x200207dc

0800a474 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800a478:	4802      	ldr	r0, [pc, #8]	; (800a484 <I2C2_EV_IRQHandler+0x10>)
 800a47a:	f7f8 f989 	bl	8002790 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800a47e:	bf00      	nop
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20020738 	.word	0x20020738

0800a488 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800a48c:	4802      	ldr	r0, [pc, #8]	; (800a498 <I2C2_ER_IRQHandler+0x10>)
 800a48e:	f7f8 f999 	bl	80027c4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800a492:	bf00      	nop
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	20020738 	.word	0x20020738

0800a49c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(blue_button_Pin);
 800a4a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a4a4:	f7f7 fe70 	bl	8002188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a4a8:	bf00      	nop
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a4b0:	4803      	ldr	r0, [pc, #12]	; (800a4c0 <TIM6_DAC_IRQHandler+0x14>)
 800a4b2:	f7fc f849 	bl	8006548 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800a4b6:	4803      	ldr	r0, [pc, #12]	; (800a4c4 <TIM6_DAC_IRQHandler+0x18>)
 800a4b8:	f7f6 fe1d 	bl	80010f6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a4bc:	bf00      	nop
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	20020b18 	.word	0x20020b18
 800a4c4:	20020664 	.word	0x20020664

0800a4c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a4d0:	4a14      	ldr	r2, [pc, #80]	; (800a524 <_sbrk+0x5c>)
 800a4d2:	4b15      	ldr	r3, [pc, #84]	; (800a528 <_sbrk+0x60>)
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a4dc:	4b13      	ldr	r3, [pc, #76]	; (800a52c <_sbrk+0x64>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d102      	bne.n	800a4ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a4e4:	4b11      	ldr	r3, [pc, #68]	; (800a52c <_sbrk+0x64>)
 800a4e6:	4a12      	ldr	r2, [pc, #72]	; (800a530 <_sbrk+0x68>)
 800a4e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a4ea:	4b10      	ldr	r3, [pc, #64]	; (800a52c <_sbrk+0x64>)
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d207      	bcs.n	800a508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a4f8:	f000 f928 	bl	800a74c <__errno>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	220c      	movs	r2, #12
 800a500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a502:	f04f 33ff 	mov.w	r3, #4294967295
 800a506:	e009      	b.n	800a51c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a508:	4b08      	ldr	r3, [pc, #32]	; (800a52c <_sbrk+0x64>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a50e:	4b07      	ldr	r3, [pc, #28]	; (800a52c <_sbrk+0x64>)
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4413      	add	r3, r2
 800a516:	4a05      	ldr	r2, [pc, #20]	; (800a52c <_sbrk+0x64>)
 800a518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a51a:	68fb      	ldr	r3, [r7, #12]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	200a0000 	.word	0x200a0000
 800a528:	00000400 	.word	0x00000400
 800a52c:	20020b64 	.word	0x20020b64
 800a530:	20020b78 	.word	0x20020b78

0800a534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a534:	b480      	push	{r7}
 800a536:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a538:	4b06      	ldr	r3, [pc, #24]	; (800a554 <SystemInit+0x20>)
 800a53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a53e:	4a05      	ldr	r2, [pc, #20]	; (800a554 <SystemInit+0x20>)
 800a540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800a548:	bf00      	nop
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	e000ed00 	.word	0xe000ed00

0800a558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a558:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a590 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a55c:	f7ff ffea 	bl	800a534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a560:	480c      	ldr	r0, [pc, #48]	; (800a594 <LoopForever+0x6>)
  ldr r1, =_edata
 800a562:	490d      	ldr	r1, [pc, #52]	; (800a598 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a564:	4a0d      	ldr	r2, [pc, #52]	; (800a59c <LoopForever+0xe>)
  movs r3, #0
 800a566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a568:	e002      	b.n	800a570 <LoopCopyDataInit>

0800a56a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a56a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a56c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a56e:	3304      	adds	r3, #4

0800a570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a574:	d3f9      	bcc.n	800a56a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a576:	4a0a      	ldr	r2, [pc, #40]	; (800a5a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a578:	4c0a      	ldr	r4, [pc, #40]	; (800a5a4 <LoopForever+0x16>)
  movs r3, #0
 800a57a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a57c:	e001      	b.n	800a582 <LoopFillZerobss>

0800a57e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a57e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a580:	3204      	adds	r2, #4

0800a582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a584:	d3fb      	bcc.n	800a57e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a586:	f000 f8e7 	bl	800a758 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a58a:	f7fe f8d1 	bl	8008730 <main>

0800a58e <LoopForever>:

LoopForever:
    b LoopForever
 800a58e:	e7fe      	b.n	800a58e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a590:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800a594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a598:	20020590 	.word	0x20020590
  ldr r2, =_sidata
 800a59c:	0800bab4 	.word	0x0800bab4
  ldr r2, =_sbss
 800a5a0:	20020590 	.word	0x20020590
  ldr r4, =_ebss
 800a5a4:	20020b78 	.word	0x20020b78

0800a5a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a5a8:	e7fe      	b.n	800a5a8 <ADC1_IRQHandler>
	...

0800a5ac <arm_std_f32>:
 800a5ac:	2901      	cmp	r1, #1
 800a5ae:	d97d      	bls.n	800a6ac <arm_std_f32+0x100>
 800a5b0:	b530      	push	{r4, r5, lr}
 800a5b2:	ed2d 8b02 	vpush	{d8}
 800a5b6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a6bc <arm_std_f32+0x110>
 800a5ba:	088d      	lsrs	r5, r1, #2
 800a5bc:	b083      	sub	sp, #12
 800a5be:	eef0 4a47 	vmov.f32	s9, s14
 800a5c2:	d028      	beq.n	800a616 <arm_std_f32+0x6a>
 800a5c4:	f100 0310 	add.w	r3, r0, #16
 800a5c8:	462c      	mov	r4, r5
 800a5ca:	ed53 7a04 	vldr	s15, [r3, #-16]
 800a5ce:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a5d2:	ed53 5a02 	vldr	s11, [r3, #-8]
 800a5d6:	ed13 6a01 	vldr	s12, [r3, #-4]
 800a5da:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a5de:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800a5e2:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a5e6:	ee65 6a05 	vmul.f32	s13, s10, s10
 800a5ea:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a5ee:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a5f2:	ee25 7aa5 	vmul.f32	s14, s11, s11
 800a5f6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a5fa:	ee77 6a26 	vadd.f32	s13, s14, s13
 800a5fe:	ee26 7a06 	vmul.f32	s14, s12, s12
 800a602:	3c01      	subs	r4, #1
 800a604:	ee77 4a86 	vadd.f32	s9, s15, s12
 800a608:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a60c:	f103 0310 	add.w	r3, r3, #16
 800a610:	d1db      	bne.n	800a5ca <arm_std_f32+0x1e>
 800a612:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a616:	f011 0303 	ands.w	r3, r1, #3
 800a61a:	d01b      	beq.n	800a654 <arm_std_f32+0xa8>
 800a61c:	edd0 7a00 	vldr	s15, [r0]
 800a620:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a624:	3b01      	subs	r3, #1
 800a626:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800a62a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a62e:	d011      	beq.n	800a654 <arm_std_f32+0xa8>
 800a630:	edd0 7a01 	vldr	s15, [r0, #4]
 800a634:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a638:	2b01      	cmp	r3, #1
 800a63a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800a63e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a642:	d007      	beq.n	800a654 <arm_std_f32+0xa8>
 800a644:	edd0 7a02 	vldr	s15, [r0, #8]
 800a648:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a64c:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800a650:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a654:	ee07 1a90 	vmov	s15, r1
 800a658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a660:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800a664:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 800a668:	eec7 5a86 	vdiv.f32	s11, s15, s12
 800a66c:	ee87 0a06 	vdiv.f32	s0, s14, s12
 800a670:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800a674:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a678:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a67c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a684:	db0c      	blt.n	800a6a0 <arm_std_f32+0xf4>
 800a686:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a692:	d40e      	bmi.n	800a6b2 <arm_std_f32+0x106>
 800a694:	ed82 8a00 	vstr	s16, [r2]
 800a698:	b003      	add	sp, #12
 800a69a:	ecbd 8b02 	vpop	{d8}
 800a69e:	bd30      	pop	{r4, r5, pc}
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	b003      	add	sp, #12
 800a6a6:	ecbd 8b02 	vpop	{d8}
 800a6aa:	bd30      	pop	{r4, r5, pc}
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	4770      	bx	lr
 800a6b2:	9201      	str	r2, [sp, #4]
 800a6b4:	f000 fcf8 	bl	800b0a8 <sqrtf>
 800a6b8:	9a01      	ldr	r2, [sp, #4]
 800a6ba:	e7eb      	b.n	800a694 <arm_std_f32+0xe8>
 800a6bc:	00000000 	.word	0x00000000

0800a6c0 <arm_sin_f32>:
 800a6c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a740 <arm_sin_f32+0x80>
 800a6c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a6c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a6d4:	d504      	bpl.n	800a6e0 <arm_sin_f32+0x20>
 800a6d6:	ee17 3a90 	vmov	r3, s15
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	ee07 3a90 	vmov	s15, r3
 800a6e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6e4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800a744 <arm_sin_f32+0x84>
 800a6e8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a6ec:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a6f0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800a6f4:	ee17 3a90 	vmov	r3, s15
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6fe:	d21a      	bcs.n	800a736 <arm_sin_f32+0x76>
 800a700:	ee07 3a90 	vmov	s15, r3
 800a704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a708:	1c59      	adds	r1, r3, #1
 800a70a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a70e:	4a0e      	ldr	r2, [pc, #56]	; (800a748 <arm_sin_f32+0x88>)
 800a710:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a714:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a718:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a71c:	ed93 7a00 	vldr	s14, [r3]
 800a720:	edd2 6a00 	vldr	s13, [r2]
 800a724:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a728:	ee20 0a26 	vmul.f32	s0, s0, s13
 800a72c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a730:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a734:	4770      	bx	lr
 800a736:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a73a:	2101      	movs	r1, #1
 800a73c:	2300      	movs	r3, #0
 800a73e:	e7e6      	b.n	800a70e <arm_sin_f32+0x4e>
 800a740:	3e22f983 	.word	0x3e22f983
 800a744:	44000000 	.word	0x44000000
 800a748:	0800b26c 	.word	0x0800b26c

0800a74c <__errno>:
 800a74c:	4b01      	ldr	r3, [pc, #4]	; (800a754 <__errno+0x8>)
 800a74e:	6818      	ldr	r0, [r3, #0]
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	2002052c 	.word	0x2002052c

0800a758 <__libc_init_array>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	4d0d      	ldr	r5, [pc, #52]	; (800a790 <__libc_init_array+0x38>)
 800a75c:	4c0d      	ldr	r4, [pc, #52]	; (800a794 <__libc_init_array+0x3c>)
 800a75e:	1b64      	subs	r4, r4, r5
 800a760:	10a4      	asrs	r4, r4, #2
 800a762:	2600      	movs	r6, #0
 800a764:	42a6      	cmp	r6, r4
 800a766:	d109      	bne.n	800a77c <__libc_init_array+0x24>
 800a768:	4d0b      	ldr	r5, [pc, #44]	; (800a798 <__libc_init_array+0x40>)
 800a76a:	4c0c      	ldr	r4, [pc, #48]	; (800a79c <__libc_init_array+0x44>)
 800a76c:	f000 fcbe 	bl	800b0ec <_init>
 800a770:	1b64      	subs	r4, r4, r5
 800a772:	10a4      	asrs	r4, r4, #2
 800a774:	2600      	movs	r6, #0
 800a776:	42a6      	cmp	r6, r4
 800a778:	d105      	bne.n	800a786 <__libc_init_array+0x2e>
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a780:	4798      	blx	r3
 800a782:	3601      	adds	r6, #1
 800a784:	e7ee      	b.n	800a764 <__libc_init_array+0xc>
 800a786:	f855 3b04 	ldr.w	r3, [r5], #4
 800a78a:	4798      	blx	r3
 800a78c:	3601      	adds	r6, #1
 800a78e:	e7f2      	b.n	800a776 <__libc_init_array+0x1e>
 800a790:	0800baac 	.word	0x0800baac
 800a794:	0800baac 	.word	0x0800baac
 800a798:	0800baac 	.word	0x0800baac
 800a79c:	0800bab0 	.word	0x0800bab0

0800a7a0 <memcpy>:
 800a7a0:	440a      	add	r2, r1
 800a7a2:	4291      	cmp	r1, r2
 800a7a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7a8:	d100      	bne.n	800a7ac <memcpy+0xc>
 800a7aa:	4770      	bx	lr
 800a7ac:	b510      	push	{r4, lr}
 800a7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7b6:	4291      	cmp	r1, r2
 800a7b8:	d1f9      	bne.n	800a7ae <memcpy+0xe>
 800a7ba:	bd10      	pop	{r4, pc}

0800a7bc <memset>:
 800a7bc:	4402      	add	r2, r0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d100      	bne.n	800a7c6 <memset+0xa>
 800a7c4:	4770      	bx	lr
 800a7c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7ca:	e7f9      	b.n	800a7c0 <memset+0x4>

0800a7cc <siprintf>:
 800a7cc:	b40e      	push	{r1, r2, r3}
 800a7ce:	b500      	push	{lr}
 800a7d0:	b09c      	sub	sp, #112	; 0x70
 800a7d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a7d4:	9002      	str	r0, [sp, #8]
 800a7d6:	9006      	str	r0, [sp, #24]
 800a7d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7dc:	4809      	ldr	r0, [pc, #36]	; (800a804 <siprintf+0x38>)
 800a7de:	9107      	str	r1, [sp, #28]
 800a7e0:	9104      	str	r1, [sp, #16]
 800a7e2:	4909      	ldr	r1, [pc, #36]	; (800a808 <siprintf+0x3c>)
 800a7e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e8:	9105      	str	r1, [sp, #20]
 800a7ea:	6800      	ldr	r0, [r0, #0]
 800a7ec:	9301      	str	r3, [sp, #4]
 800a7ee:	a902      	add	r1, sp, #8
 800a7f0:	f000 f876 	bl	800a8e0 <_svfiprintf_r>
 800a7f4:	9b02      	ldr	r3, [sp, #8]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	701a      	strb	r2, [r3, #0]
 800a7fa:	b01c      	add	sp, #112	; 0x70
 800a7fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a800:	b003      	add	sp, #12
 800a802:	4770      	bx	lr
 800a804:	2002052c 	.word	0x2002052c
 800a808:	ffff0208 	.word	0xffff0208

0800a80c <strcat>:
 800a80c:	b510      	push	{r4, lr}
 800a80e:	4602      	mov	r2, r0
 800a810:	7814      	ldrb	r4, [r2, #0]
 800a812:	4613      	mov	r3, r2
 800a814:	3201      	adds	r2, #1
 800a816:	2c00      	cmp	r4, #0
 800a818:	d1fa      	bne.n	800a810 <strcat+0x4>
 800a81a:	3b01      	subs	r3, #1
 800a81c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a820:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a824:	2a00      	cmp	r2, #0
 800a826:	d1f9      	bne.n	800a81c <strcat+0x10>
 800a828:	bd10      	pop	{r4, pc}

0800a82a <__ssputs_r>:
 800a82a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a82e:	688e      	ldr	r6, [r1, #8]
 800a830:	429e      	cmp	r6, r3
 800a832:	4682      	mov	sl, r0
 800a834:	460c      	mov	r4, r1
 800a836:	4690      	mov	r8, r2
 800a838:	461f      	mov	r7, r3
 800a83a:	d838      	bhi.n	800a8ae <__ssputs_r+0x84>
 800a83c:	898a      	ldrh	r2, [r1, #12]
 800a83e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a842:	d032      	beq.n	800a8aa <__ssputs_r+0x80>
 800a844:	6825      	ldr	r5, [r4, #0]
 800a846:	6909      	ldr	r1, [r1, #16]
 800a848:	eba5 0901 	sub.w	r9, r5, r1
 800a84c:	6965      	ldr	r5, [r4, #20]
 800a84e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a852:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a856:	3301      	adds	r3, #1
 800a858:	444b      	add	r3, r9
 800a85a:	106d      	asrs	r5, r5, #1
 800a85c:	429d      	cmp	r5, r3
 800a85e:	bf38      	it	cc
 800a860:	461d      	movcc	r5, r3
 800a862:	0553      	lsls	r3, r2, #21
 800a864:	d531      	bpl.n	800a8ca <__ssputs_r+0xa0>
 800a866:	4629      	mov	r1, r5
 800a868:	f000 fb54 	bl	800af14 <_malloc_r>
 800a86c:	4606      	mov	r6, r0
 800a86e:	b950      	cbnz	r0, 800a886 <__ssputs_r+0x5c>
 800a870:	230c      	movs	r3, #12
 800a872:	f8ca 3000 	str.w	r3, [sl]
 800a876:	89a3      	ldrh	r3, [r4, #12]
 800a878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a87c:	81a3      	strh	r3, [r4, #12]
 800a87e:	f04f 30ff 	mov.w	r0, #4294967295
 800a882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a886:	6921      	ldr	r1, [r4, #16]
 800a888:	464a      	mov	r2, r9
 800a88a:	f7ff ff89 	bl	800a7a0 <memcpy>
 800a88e:	89a3      	ldrh	r3, [r4, #12]
 800a890:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a898:	81a3      	strh	r3, [r4, #12]
 800a89a:	6126      	str	r6, [r4, #16]
 800a89c:	6165      	str	r5, [r4, #20]
 800a89e:	444e      	add	r6, r9
 800a8a0:	eba5 0509 	sub.w	r5, r5, r9
 800a8a4:	6026      	str	r6, [r4, #0]
 800a8a6:	60a5      	str	r5, [r4, #8]
 800a8a8:	463e      	mov	r6, r7
 800a8aa:	42be      	cmp	r6, r7
 800a8ac:	d900      	bls.n	800a8b0 <__ssputs_r+0x86>
 800a8ae:	463e      	mov	r6, r7
 800a8b0:	6820      	ldr	r0, [r4, #0]
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	4641      	mov	r1, r8
 800a8b6:	f000 faa7 	bl	800ae08 <memmove>
 800a8ba:	68a3      	ldr	r3, [r4, #8]
 800a8bc:	1b9b      	subs	r3, r3, r6
 800a8be:	60a3      	str	r3, [r4, #8]
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	4433      	add	r3, r6
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	e7db      	b.n	800a882 <__ssputs_r+0x58>
 800a8ca:	462a      	mov	r2, r5
 800a8cc:	f000 fb96 	bl	800affc <_realloc_r>
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d1e1      	bne.n	800a89a <__ssputs_r+0x70>
 800a8d6:	6921      	ldr	r1, [r4, #16]
 800a8d8:	4650      	mov	r0, sl
 800a8da:	f000 faaf 	bl	800ae3c <_free_r>
 800a8de:	e7c7      	b.n	800a870 <__ssputs_r+0x46>

0800a8e0 <_svfiprintf_r>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	4698      	mov	r8, r3
 800a8e6:	898b      	ldrh	r3, [r1, #12]
 800a8e8:	061b      	lsls	r3, r3, #24
 800a8ea:	b09d      	sub	sp, #116	; 0x74
 800a8ec:	4607      	mov	r7, r0
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	d50e      	bpl.n	800a912 <_svfiprintf_r+0x32>
 800a8f4:	690b      	ldr	r3, [r1, #16]
 800a8f6:	b963      	cbnz	r3, 800a912 <_svfiprintf_r+0x32>
 800a8f8:	2140      	movs	r1, #64	; 0x40
 800a8fa:	f000 fb0b 	bl	800af14 <_malloc_r>
 800a8fe:	6028      	str	r0, [r5, #0]
 800a900:	6128      	str	r0, [r5, #16]
 800a902:	b920      	cbnz	r0, 800a90e <_svfiprintf_r+0x2e>
 800a904:	230c      	movs	r3, #12
 800a906:	603b      	str	r3, [r7, #0]
 800a908:	f04f 30ff 	mov.w	r0, #4294967295
 800a90c:	e0d1      	b.n	800aab2 <_svfiprintf_r+0x1d2>
 800a90e:	2340      	movs	r3, #64	; 0x40
 800a910:	616b      	str	r3, [r5, #20]
 800a912:	2300      	movs	r3, #0
 800a914:	9309      	str	r3, [sp, #36]	; 0x24
 800a916:	2320      	movs	r3, #32
 800a918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a91c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a920:	2330      	movs	r3, #48	; 0x30
 800a922:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aacc <_svfiprintf_r+0x1ec>
 800a926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a92a:	f04f 0901 	mov.w	r9, #1
 800a92e:	4623      	mov	r3, r4
 800a930:	469a      	mov	sl, r3
 800a932:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a936:	b10a      	cbz	r2, 800a93c <_svfiprintf_r+0x5c>
 800a938:	2a25      	cmp	r2, #37	; 0x25
 800a93a:	d1f9      	bne.n	800a930 <_svfiprintf_r+0x50>
 800a93c:	ebba 0b04 	subs.w	fp, sl, r4
 800a940:	d00b      	beq.n	800a95a <_svfiprintf_r+0x7a>
 800a942:	465b      	mov	r3, fp
 800a944:	4622      	mov	r2, r4
 800a946:	4629      	mov	r1, r5
 800a948:	4638      	mov	r0, r7
 800a94a:	f7ff ff6e 	bl	800a82a <__ssputs_r>
 800a94e:	3001      	adds	r0, #1
 800a950:	f000 80aa 	beq.w	800aaa8 <_svfiprintf_r+0x1c8>
 800a954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a956:	445a      	add	r2, fp
 800a958:	9209      	str	r2, [sp, #36]	; 0x24
 800a95a:	f89a 3000 	ldrb.w	r3, [sl]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 80a2 	beq.w	800aaa8 <_svfiprintf_r+0x1c8>
 800a964:	2300      	movs	r3, #0
 800a966:	f04f 32ff 	mov.w	r2, #4294967295
 800a96a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a96e:	f10a 0a01 	add.w	sl, sl, #1
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	9307      	str	r3, [sp, #28]
 800a976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a97a:	931a      	str	r3, [sp, #104]	; 0x68
 800a97c:	4654      	mov	r4, sl
 800a97e:	2205      	movs	r2, #5
 800a980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a984:	4851      	ldr	r0, [pc, #324]	; (800aacc <_svfiprintf_r+0x1ec>)
 800a986:	f7f5 fc3b 	bl	8000200 <memchr>
 800a98a:	9a04      	ldr	r2, [sp, #16]
 800a98c:	b9d8      	cbnz	r0, 800a9c6 <_svfiprintf_r+0xe6>
 800a98e:	06d0      	lsls	r0, r2, #27
 800a990:	bf44      	itt	mi
 800a992:	2320      	movmi	r3, #32
 800a994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a998:	0711      	lsls	r1, r2, #28
 800a99a:	bf44      	itt	mi
 800a99c:	232b      	movmi	r3, #43	; 0x2b
 800a99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a8:	d015      	beq.n	800a9d6 <_svfiprintf_r+0xf6>
 800a9aa:	9a07      	ldr	r2, [sp, #28]
 800a9ac:	4654      	mov	r4, sl
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	f04f 0c0a 	mov.w	ip, #10
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ba:	3b30      	subs	r3, #48	; 0x30
 800a9bc:	2b09      	cmp	r3, #9
 800a9be:	d94e      	bls.n	800aa5e <_svfiprintf_r+0x17e>
 800a9c0:	b1b0      	cbz	r0, 800a9f0 <_svfiprintf_r+0x110>
 800a9c2:	9207      	str	r2, [sp, #28]
 800a9c4:	e014      	b.n	800a9f0 <_svfiprintf_r+0x110>
 800a9c6:	eba0 0308 	sub.w	r3, r0, r8
 800a9ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	46a2      	mov	sl, r4
 800a9d4:	e7d2      	b.n	800a97c <_svfiprintf_r+0x9c>
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	1d19      	adds	r1, r3, #4
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	9103      	str	r1, [sp, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	bfbb      	ittet	lt
 800a9e2:	425b      	neglt	r3, r3
 800a9e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a9e8:	9307      	strge	r3, [sp, #28]
 800a9ea:	9307      	strlt	r3, [sp, #28]
 800a9ec:	bfb8      	it	lt
 800a9ee:	9204      	strlt	r2, [sp, #16]
 800a9f0:	7823      	ldrb	r3, [r4, #0]
 800a9f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a9f4:	d10c      	bne.n	800aa10 <_svfiprintf_r+0x130>
 800a9f6:	7863      	ldrb	r3, [r4, #1]
 800a9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9fa:	d135      	bne.n	800aa68 <_svfiprintf_r+0x188>
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	1d1a      	adds	r2, r3, #4
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	9203      	str	r2, [sp, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bfb8      	it	lt
 800aa08:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa0c:	3402      	adds	r4, #2
 800aa0e:	9305      	str	r3, [sp, #20]
 800aa10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aadc <_svfiprintf_r+0x1fc>
 800aa14:	7821      	ldrb	r1, [r4, #0]
 800aa16:	2203      	movs	r2, #3
 800aa18:	4650      	mov	r0, sl
 800aa1a:	f7f5 fbf1 	bl	8000200 <memchr>
 800aa1e:	b140      	cbz	r0, 800aa32 <_svfiprintf_r+0x152>
 800aa20:	2340      	movs	r3, #64	; 0x40
 800aa22:	eba0 000a 	sub.w	r0, r0, sl
 800aa26:	fa03 f000 	lsl.w	r0, r3, r0
 800aa2a:	9b04      	ldr	r3, [sp, #16]
 800aa2c:	4303      	orrs	r3, r0
 800aa2e:	3401      	adds	r4, #1
 800aa30:	9304      	str	r3, [sp, #16]
 800aa32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa36:	4826      	ldr	r0, [pc, #152]	; (800aad0 <_svfiprintf_r+0x1f0>)
 800aa38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa3c:	2206      	movs	r2, #6
 800aa3e:	f7f5 fbdf 	bl	8000200 <memchr>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d038      	beq.n	800aab8 <_svfiprintf_r+0x1d8>
 800aa46:	4b23      	ldr	r3, [pc, #140]	; (800aad4 <_svfiprintf_r+0x1f4>)
 800aa48:	bb1b      	cbnz	r3, 800aa92 <_svfiprintf_r+0x1b2>
 800aa4a:	9b03      	ldr	r3, [sp, #12]
 800aa4c:	3307      	adds	r3, #7
 800aa4e:	f023 0307 	bic.w	r3, r3, #7
 800aa52:	3308      	adds	r3, #8
 800aa54:	9303      	str	r3, [sp, #12]
 800aa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa58:	4433      	add	r3, r6
 800aa5a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5c:	e767      	b.n	800a92e <_svfiprintf_r+0x4e>
 800aa5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa62:	460c      	mov	r4, r1
 800aa64:	2001      	movs	r0, #1
 800aa66:	e7a5      	b.n	800a9b4 <_svfiprintf_r+0xd4>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	3401      	adds	r4, #1
 800aa6c:	9305      	str	r3, [sp, #20]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	f04f 0c0a 	mov.w	ip, #10
 800aa74:	4620      	mov	r0, r4
 800aa76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa7a:	3a30      	subs	r2, #48	; 0x30
 800aa7c:	2a09      	cmp	r2, #9
 800aa7e:	d903      	bls.n	800aa88 <_svfiprintf_r+0x1a8>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d0c5      	beq.n	800aa10 <_svfiprintf_r+0x130>
 800aa84:	9105      	str	r1, [sp, #20]
 800aa86:	e7c3      	b.n	800aa10 <_svfiprintf_r+0x130>
 800aa88:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e7f0      	b.n	800aa74 <_svfiprintf_r+0x194>
 800aa92:	ab03      	add	r3, sp, #12
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	462a      	mov	r2, r5
 800aa98:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <_svfiprintf_r+0x1f8>)
 800aa9a:	a904      	add	r1, sp, #16
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	f3af 8000 	nop.w
 800aaa2:	1c42      	adds	r2, r0, #1
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	d1d6      	bne.n	800aa56 <_svfiprintf_r+0x176>
 800aaa8:	89ab      	ldrh	r3, [r5, #12]
 800aaaa:	065b      	lsls	r3, r3, #25
 800aaac:	f53f af2c 	bmi.w	800a908 <_svfiprintf_r+0x28>
 800aab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab2:	b01d      	add	sp, #116	; 0x74
 800aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab8:	ab03      	add	r3, sp, #12
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	462a      	mov	r2, r5
 800aabe:	4b06      	ldr	r3, [pc, #24]	; (800aad8 <_svfiprintf_r+0x1f8>)
 800aac0:	a904      	add	r1, sp, #16
 800aac2:	4638      	mov	r0, r7
 800aac4:	f000 f87a 	bl	800abbc <_printf_i>
 800aac8:	e7eb      	b.n	800aaa2 <_svfiprintf_r+0x1c2>
 800aaca:	bf00      	nop
 800aacc:	0800ba70 	.word	0x0800ba70
 800aad0:	0800ba7a 	.word	0x0800ba7a
 800aad4:	00000000 	.word	0x00000000
 800aad8:	0800a82b 	.word	0x0800a82b
 800aadc:	0800ba76 	.word	0x0800ba76

0800aae0 <_printf_common>:
 800aae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae4:	4616      	mov	r6, r2
 800aae6:	4699      	mov	r9, r3
 800aae8:	688a      	ldr	r2, [r1, #8]
 800aaea:	690b      	ldr	r3, [r1, #16]
 800aaec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	bfb8      	it	lt
 800aaf4:	4613      	movlt	r3, r2
 800aaf6:	6033      	str	r3, [r6, #0]
 800aaf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aafc:	4607      	mov	r7, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	b10a      	cbz	r2, 800ab06 <_printf_common+0x26>
 800ab02:	3301      	adds	r3, #1
 800ab04:	6033      	str	r3, [r6, #0]
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	0699      	lsls	r1, r3, #26
 800ab0a:	bf42      	ittt	mi
 800ab0c:	6833      	ldrmi	r3, [r6, #0]
 800ab0e:	3302      	addmi	r3, #2
 800ab10:	6033      	strmi	r3, [r6, #0]
 800ab12:	6825      	ldr	r5, [r4, #0]
 800ab14:	f015 0506 	ands.w	r5, r5, #6
 800ab18:	d106      	bne.n	800ab28 <_printf_common+0x48>
 800ab1a:	f104 0a19 	add.w	sl, r4, #25
 800ab1e:	68e3      	ldr	r3, [r4, #12]
 800ab20:	6832      	ldr	r2, [r6, #0]
 800ab22:	1a9b      	subs	r3, r3, r2
 800ab24:	42ab      	cmp	r3, r5
 800ab26:	dc26      	bgt.n	800ab76 <_printf_common+0x96>
 800ab28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab2c:	1e13      	subs	r3, r2, #0
 800ab2e:	6822      	ldr	r2, [r4, #0]
 800ab30:	bf18      	it	ne
 800ab32:	2301      	movne	r3, #1
 800ab34:	0692      	lsls	r2, r2, #26
 800ab36:	d42b      	bmi.n	800ab90 <_printf_common+0xb0>
 800ab38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	4638      	mov	r0, r7
 800ab40:	47c0      	blx	r8
 800ab42:	3001      	adds	r0, #1
 800ab44:	d01e      	beq.n	800ab84 <_printf_common+0xa4>
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	68e5      	ldr	r5, [r4, #12]
 800ab4a:	6832      	ldr	r2, [r6, #0]
 800ab4c:	f003 0306 	and.w	r3, r3, #6
 800ab50:	2b04      	cmp	r3, #4
 800ab52:	bf08      	it	eq
 800ab54:	1aad      	subeq	r5, r5, r2
 800ab56:	68a3      	ldr	r3, [r4, #8]
 800ab58:	6922      	ldr	r2, [r4, #16]
 800ab5a:	bf0c      	ite	eq
 800ab5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab60:	2500      	movne	r5, #0
 800ab62:	4293      	cmp	r3, r2
 800ab64:	bfc4      	itt	gt
 800ab66:	1a9b      	subgt	r3, r3, r2
 800ab68:	18ed      	addgt	r5, r5, r3
 800ab6a:	2600      	movs	r6, #0
 800ab6c:	341a      	adds	r4, #26
 800ab6e:	42b5      	cmp	r5, r6
 800ab70:	d11a      	bne.n	800aba8 <_printf_common+0xc8>
 800ab72:	2000      	movs	r0, #0
 800ab74:	e008      	b.n	800ab88 <_printf_common+0xa8>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4652      	mov	r2, sl
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	47c0      	blx	r8
 800ab80:	3001      	adds	r0, #1
 800ab82:	d103      	bne.n	800ab8c <_printf_common+0xac>
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab8c:	3501      	adds	r5, #1
 800ab8e:	e7c6      	b.n	800ab1e <_printf_common+0x3e>
 800ab90:	18e1      	adds	r1, r4, r3
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	2030      	movs	r0, #48	; 0x30
 800ab96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab9a:	4422      	add	r2, r4
 800ab9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aba4:	3302      	adds	r3, #2
 800aba6:	e7c7      	b.n	800ab38 <_printf_common+0x58>
 800aba8:	2301      	movs	r3, #1
 800abaa:	4622      	mov	r2, r4
 800abac:	4649      	mov	r1, r9
 800abae:	4638      	mov	r0, r7
 800abb0:	47c0      	blx	r8
 800abb2:	3001      	adds	r0, #1
 800abb4:	d0e6      	beq.n	800ab84 <_printf_common+0xa4>
 800abb6:	3601      	adds	r6, #1
 800abb8:	e7d9      	b.n	800ab6e <_printf_common+0x8e>
	...

0800abbc <_printf_i>:
 800abbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abc0:	7e0f      	ldrb	r7, [r1, #24]
 800abc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abc4:	2f78      	cmp	r7, #120	; 0x78
 800abc6:	4691      	mov	r9, r2
 800abc8:	4680      	mov	r8, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	469a      	mov	sl, r3
 800abce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abd2:	d807      	bhi.n	800abe4 <_printf_i+0x28>
 800abd4:	2f62      	cmp	r7, #98	; 0x62
 800abd6:	d80a      	bhi.n	800abee <_printf_i+0x32>
 800abd8:	2f00      	cmp	r7, #0
 800abda:	f000 80d8 	beq.w	800ad8e <_printf_i+0x1d2>
 800abde:	2f58      	cmp	r7, #88	; 0x58
 800abe0:	f000 80a3 	beq.w	800ad2a <_printf_i+0x16e>
 800abe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abec:	e03a      	b.n	800ac64 <_printf_i+0xa8>
 800abee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abf2:	2b15      	cmp	r3, #21
 800abf4:	d8f6      	bhi.n	800abe4 <_printf_i+0x28>
 800abf6:	a101      	add	r1, pc, #4	; (adr r1, 800abfc <_printf_i+0x40>)
 800abf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abfc:	0800ac55 	.word	0x0800ac55
 800ac00:	0800ac69 	.word	0x0800ac69
 800ac04:	0800abe5 	.word	0x0800abe5
 800ac08:	0800abe5 	.word	0x0800abe5
 800ac0c:	0800abe5 	.word	0x0800abe5
 800ac10:	0800abe5 	.word	0x0800abe5
 800ac14:	0800ac69 	.word	0x0800ac69
 800ac18:	0800abe5 	.word	0x0800abe5
 800ac1c:	0800abe5 	.word	0x0800abe5
 800ac20:	0800abe5 	.word	0x0800abe5
 800ac24:	0800abe5 	.word	0x0800abe5
 800ac28:	0800ad75 	.word	0x0800ad75
 800ac2c:	0800ac99 	.word	0x0800ac99
 800ac30:	0800ad57 	.word	0x0800ad57
 800ac34:	0800abe5 	.word	0x0800abe5
 800ac38:	0800abe5 	.word	0x0800abe5
 800ac3c:	0800ad97 	.word	0x0800ad97
 800ac40:	0800abe5 	.word	0x0800abe5
 800ac44:	0800ac99 	.word	0x0800ac99
 800ac48:	0800abe5 	.word	0x0800abe5
 800ac4c:	0800abe5 	.word	0x0800abe5
 800ac50:	0800ad5f 	.word	0x0800ad5f
 800ac54:	682b      	ldr	r3, [r5, #0]
 800ac56:	1d1a      	adds	r2, r3, #4
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	602a      	str	r2, [r5, #0]
 800ac5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac64:	2301      	movs	r3, #1
 800ac66:	e0a3      	b.n	800adb0 <_printf_i+0x1f4>
 800ac68:	6820      	ldr	r0, [r4, #0]
 800ac6a:	6829      	ldr	r1, [r5, #0]
 800ac6c:	0606      	lsls	r6, r0, #24
 800ac6e:	f101 0304 	add.w	r3, r1, #4
 800ac72:	d50a      	bpl.n	800ac8a <_printf_i+0xce>
 800ac74:	680e      	ldr	r6, [r1, #0]
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	2e00      	cmp	r6, #0
 800ac7a:	da03      	bge.n	800ac84 <_printf_i+0xc8>
 800ac7c:	232d      	movs	r3, #45	; 0x2d
 800ac7e:	4276      	negs	r6, r6
 800ac80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac84:	485e      	ldr	r0, [pc, #376]	; (800ae00 <_printf_i+0x244>)
 800ac86:	230a      	movs	r3, #10
 800ac88:	e019      	b.n	800acbe <_printf_i+0x102>
 800ac8a:	680e      	ldr	r6, [r1, #0]
 800ac8c:	602b      	str	r3, [r5, #0]
 800ac8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac92:	bf18      	it	ne
 800ac94:	b236      	sxthne	r6, r6
 800ac96:	e7ef      	b.n	800ac78 <_printf_i+0xbc>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	6820      	ldr	r0, [r4, #0]
 800ac9c:	1d19      	adds	r1, r3, #4
 800ac9e:	6029      	str	r1, [r5, #0]
 800aca0:	0601      	lsls	r1, r0, #24
 800aca2:	d501      	bpl.n	800aca8 <_printf_i+0xec>
 800aca4:	681e      	ldr	r6, [r3, #0]
 800aca6:	e002      	b.n	800acae <_printf_i+0xf2>
 800aca8:	0646      	lsls	r6, r0, #25
 800acaa:	d5fb      	bpl.n	800aca4 <_printf_i+0xe8>
 800acac:	881e      	ldrh	r6, [r3, #0]
 800acae:	4854      	ldr	r0, [pc, #336]	; (800ae00 <_printf_i+0x244>)
 800acb0:	2f6f      	cmp	r7, #111	; 0x6f
 800acb2:	bf0c      	ite	eq
 800acb4:	2308      	moveq	r3, #8
 800acb6:	230a      	movne	r3, #10
 800acb8:	2100      	movs	r1, #0
 800acba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acbe:	6865      	ldr	r5, [r4, #4]
 800acc0:	60a5      	str	r5, [r4, #8]
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	bfa2      	ittt	ge
 800acc6:	6821      	ldrge	r1, [r4, #0]
 800acc8:	f021 0104 	bicge.w	r1, r1, #4
 800accc:	6021      	strge	r1, [r4, #0]
 800acce:	b90e      	cbnz	r6, 800acd4 <_printf_i+0x118>
 800acd0:	2d00      	cmp	r5, #0
 800acd2:	d04d      	beq.n	800ad70 <_printf_i+0x1b4>
 800acd4:	4615      	mov	r5, r2
 800acd6:	fbb6 f1f3 	udiv	r1, r6, r3
 800acda:	fb03 6711 	mls	r7, r3, r1, r6
 800acde:	5dc7      	ldrb	r7, [r0, r7]
 800ace0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ace4:	4637      	mov	r7, r6
 800ace6:	42bb      	cmp	r3, r7
 800ace8:	460e      	mov	r6, r1
 800acea:	d9f4      	bls.n	800acd6 <_printf_i+0x11a>
 800acec:	2b08      	cmp	r3, #8
 800acee:	d10b      	bne.n	800ad08 <_printf_i+0x14c>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	07de      	lsls	r6, r3, #31
 800acf4:	d508      	bpl.n	800ad08 <_printf_i+0x14c>
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	6861      	ldr	r1, [r4, #4]
 800acfa:	4299      	cmp	r1, r3
 800acfc:	bfde      	ittt	le
 800acfe:	2330      	movle	r3, #48	; 0x30
 800ad00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad08:	1b52      	subs	r2, r2, r5
 800ad0a:	6122      	str	r2, [r4, #16]
 800ad0c:	f8cd a000 	str.w	sl, [sp]
 800ad10:	464b      	mov	r3, r9
 800ad12:	aa03      	add	r2, sp, #12
 800ad14:	4621      	mov	r1, r4
 800ad16:	4640      	mov	r0, r8
 800ad18:	f7ff fee2 	bl	800aae0 <_printf_common>
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d14c      	bne.n	800adba <_printf_i+0x1fe>
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	b004      	add	sp, #16
 800ad26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2a:	4835      	ldr	r0, [pc, #212]	; (800ae00 <_printf_i+0x244>)
 800ad2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad30:	6829      	ldr	r1, [r5, #0]
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad38:	6029      	str	r1, [r5, #0]
 800ad3a:	061d      	lsls	r5, r3, #24
 800ad3c:	d514      	bpl.n	800ad68 <_printf_i+0x1ac>
 800ad3e:	07df      	lsls	r7, r3, #31
 800ad40:	bf44      	itt	mi
 800ad42:	f043 0320 	orrmi.w	r3, r3, #32
 800ad46:	6023      	strmi	r3, [r4, #0]
 800ad48:	b91e      	cbnz	r6, 800ad52 <_printf_i+0x196>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	f023 0320 	bic.w	r3, r3, #32
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	2310      	movs	r3, #16
 800ad54:	e7b0      	b.n	800acb8 <_printf_i+0xfc>
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	f043 0320 	orr.w	r3, r3, #32
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	2378      	movs	r3, #120	; 0x78
 800ad60:	4828      	ldr	r0, [pc, #160]	; (800ae04 <_printf_i+0x248>)
 800ad62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad66:	e7e3      	b.n	800ad30 <_printf_i+0x174>
 800ad68:	0659      	lsls	r1, r3, #25
 800ad6a:	bf48      	it	mi
 800ad6c:	b2b6      	uxthmi	r6, r6
 800ad6e:	e7e6      	b.n	800ad3e <_printf_i+0x182>
 800ad70:	4615      	mov	r5, r2
 800ad72:	e7bb      	b.n	800acec <_printf_i+0x130>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	6826      	ldr	r6, [r4, #0]
 800ad78:	6961      	ldr	r1, [r4, #20]
 800ad7a:	1d18      	adds	r0, r3, #4
 800ad7c:	6028      	str	r0, [r5, #0]
 800ad7e:	0635      	lsls	r5, r6, #24
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	d501      	bpl.n	800ad88 <_printf_i+0x1cc>
 800ad84:	6019      	str	r1, [r3, #0]
 800ad86:	e002      	b.n	800ad8e <_printf_i+0x1d2>
 800ad88:	0670      	lsls	r0, r6, #25
 800ad8a:	d5fb      	bpl.n	800ad84 <_printf_i+0x1c8>
 800ad8c:	8019      	strh	r1, [r3, #0]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	6123      	str	r3, [r4, #16]
 800ad92:	4615      	mov	r5, r2
 800ad94:	e7ba      	b.n	800ad0c <_printf_i+0x150>
 800ad96:	682b      	ldr	r3, [r5, #0]
 800ad98:	1d1a      	adds	r2, r3, #4
 800ad9a:	602a      	str	r2, [r5, #0]
 800ad9c:	681d      	ldr	r5, [r3, #0]
 800ad9e:	6862      	ldr	r2, [r4, #4]
 800ada0:	2100      	movs	r1, #0
 800ada2:	4628      	mov	r0, r5
 800ada4:	f7f5 fa2c 	bl	8000200 <memchr>
 800ada8:	b108      	cbz	r0, 800adae <_printf_i+0x1f2>
 800adaa:	1b40      	subs	r0, r0, r5
 800adac:	6060      	str	r0, [r4, #4]
 800adae:	6863      	ldr	r3, [r4, #4]
 800adb0:	6123      	str	r3, [r4, #16]
 800adb2:	2300      	movs	r3, #0
 800adb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb8:	e7a8      	b.n	800ad0c <_printf_i+0x150>
 800adba:	6923      	ldr	r3, [r4, #16]
 800adbc:	462a      	mov	r2, r5
 800adbe:	4649      	mov	r1, r9
 800adc0:	4640      	mov	r0, r8
 800adc2:	47d0      	blx	sl
 800adc4:	3001      	adds	r0, #1
 800adc6:	d0ab      	beq.n	800ad20 <_printf_i+0x164>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	079b      	lsls	r3, r3, #30
 800adcc:	d413      	bmi.n	800adf6 <_printf_i+0x23a>
 800adce:	68e0      	ldr	r0, [r4, #12]
 800add0:	9b03      	ldr	r3, [sp, #12]
 800add2:	4298      	cmp	r0, r3
 800add4:	bfb8      	it	lt
 800add6:	4618      	movlt	r0, r3
 800add8:	e7a4      	b.n	800ad24 <_printf_i+0x168>
 800adda:	2301      	movs	r3, #1
 800addc:	4632      	mov	r2, r6
 800adde:	4649      	mov	r1, r9
 800ade0:	4640      	mov	r0, r8
 800ade2:	47d0      	blx	sl
 800ade4:	3001      	adds	r0, #1
 800ade6:	d09b      	beq.n	800ad20 <_printf_i+0x164>
 800ade8:	3501      	adds	r5, #1
 800adea:	68e3      	ldr	r3, [r4, #12]
 800adec:	9903      	ldr	r1, [sp, #12]
 800adee:	1a5b      	subs	r3, r3, r1
 800adf0:	42ab      	cmp	r3, r5
 800adf2:	dcf2      	bgt.n	800adda <_printf_i+0x21e>
 800adf4:	e7eb      	b.n	800adce <_printf_i+0x212>
 800adf6:	2500      	movs	r5, #0
 800adf8:	f104 0619 	add.w	r6, r4, #25
 800adfc:	e7f5      	b.n	800adea <_printf_i+0x22e>
 800adfe:	bf00      	nop
 800ae00:	0800ba81 	.word	0x0800ba81
 800ae04:	0800ba92 	.word	0x0800ba92

0800ae08 <memmove>:
 800ae08:	4288      	cmp	r0, r1
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	eb01 0402 	add.w	r4, r1, r2
 800ae10:	d902      	bls.n	800ae18 <memmove+0x10>
 800ae12:	4284      	cmp	r4, r0
 800ae14:	4623      	mov	r3, r4
 800ae16:	d807      	bhi.n	800ae28 <memmove+0x20>
 800ae18:	1e43      	subs	r3, r0, #1
 800ae1a:	42a1      	cmp	r1, r4
 800ae1c:	d008      	beq.n	800ae30 <memmove+0x28>
 800ae1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae26:	e7f8      	b.n	800ae1a <memmove+0x12>
 800ae28:	4402      	add	r2, r0
 800ae2a:	4601      	mov	r1, r0
 800ae2c:	428a      	cmp	r2, r1
 800ae2e:	d100      	bne.n	800ae32 <memmove+0x2a>
 800ae30:	bd10      	pop	{r4, pc}
 800ae32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae3a:	e7f7      	b.n	800ae2c <memmove+0x24>

0800ae3c <_free_r>:
 800ae3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae3e:	2900      	cmp	r1, #0
 800ae40:	d044      	beq.n	800aecc <_free_r+0x90>
 800ae42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae46:	9001      	str	r0, [sp, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ae4e:	bfb8      	it	lt
 800ae50:	18e4      	addlt	r4, r4, r3
 800ae52:	f000 f913 	bl	800b07c <__malloc_lock>
 800ae56:	4a1e      	ldr	r2, [pc, #120]	; (800aed0 <_free_r+0x94>)
 800ae58:	9801      	ldr	r0, [sp, #4]
 800ae5a:	6813      	ldr	r3, [r2, #0]
 800ae5c:	b933      	cbnz	r3, 800ae6c <_free_r+0x30>
 800ae5e:	6063      	str	r3, [r4, #4]
 800ae60:	6014      	str	r4, [r2, #0]
 800ae62:	b003      	add	sp, #12
 800ae64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae68:	f000 b90e 	b.w	800b088 <__malloc_unlock>
 800ae6c:	42a3      	cmp	r3, r4
 800ae6e:	d908      	bls.n	800ae82 <_free_r+0x46>
 800ae70:	6825      	ldr	r5, [r4, #0]
 800ae72:	1961      	adds	r1, r4, r5
 800ae74:	428b      	cmp	r3, r1
 800ae76:	bf01      	itttt	eq
 800ae78:	6819      	ldreq	r1, [r3, #0]
 800ae7a:	685b      	ldreq	r3, [r3, #4]
 800ae7c:	1949      	addeq	r1, r1, r5
 800ae7e:	6021      	streq	r1, [r4, #0]
 800ae80:	e7ed      	b.n	800ae5e <_free_r+0x22>
 800ae82:	461a      	mov	r2, r3
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	b10b      	cbz	r3, 800ae8c <_free_r+0x50>
 800ae88:	42a3      	cmp	r3, r4
 800ae8a:	d9fa      	bls.n	800ae82 <_free_r+0x46>
 800ae8c:	6811      	ldr	r1, [r2, #0]
 800ae8e:	1855      	adds	r5, r2, r1
 800ae90:	42a5      	cmp	r5, r4
 800ae92:	d10b      	bne.n	800aeac <_free_r+0x70>
 800ae94:	6824      	ldr	r4, [r4, #0]
 800ae96:	4421      	add	r1, r4
 800ae98:	1854      	adds	r4, r2, r1
 800ae9a:	42a3      	cmp	r3, r4
 800ae9c:	6011      	str	r1, [r2, #0]
 800ae9e:	d1e0      	bne.n	800ae62 <_free_r+0x26>
 800aea0:	681c      	ldr	r4, [r3, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	6053      	str	r3, [r2, #4]
 800aea6:	4421      	add	r1, r4
 800aea8:	6011      	str	r1, [r2, #0]
 800aeaa:	e7da      	b.n	800ae62 <_free_r+0x26>
 800aeac:	d902      	bls.n	800aeb4 <_free_r+0x78>
 800aeae:	230c      	movs	r3, #12
 800aeb0:	6003      	str	r3, [r0, #0]
 800aeb2:	e7d6      	b.n	800ae62 <_free_r+0x26>
 800aeb4:	6825      	ldr	r5, [r4, #0]
 800aeb6:	1961      	adds	r1, r4, r5
 800aeb8:	428b      	cmp	r3, r1
 800aeba:	bf04      	itt	eq
 800aebc:	6819      	ldreq	r1, [r3, #0]
 800aebe:	685b      	ldreq	r3, [r3, #4]
 800aec0:	6063      	str	r3, [r4, #4]
 800aec2:	bf04      	itt	eq
 800aec4:	1949      	addeq	r1, r1, r5
 800aec6:	6021      	streq	r1, [r4, #0]
 800aec8:	6054      	str	r4, [r2, #4]
 800aeca:	e7ca      	b.n	800ae62 <_free_r+0x26>
 800aecc:	b003      	add	sp, #12
 800aece:	bd30      	pop	{r4, r5, pc}
 800aed0:	20020b68 	.word	0x20020b68

0800aed4 <sbrk_aligned>:
 800aed4:	b570      	push	{r4, r5, r6, lr}
 800aed6:	4e0e      	ldr	r6, [pc, #56]	; (800af10 <sbrk_aligned+0x3c>)
 800aed8:	460c      	mov	r4, r1
 800aeda:	6831      	ldr	r1, [r6, #0]
 800aedc:	4605      	mov	r5, r0
 800aede:	b911      	cbnz	r1, 800aee6 <sbrk_aligned+0x12>
 800aee0:	f000 f8bc 	bl	800b05c <_sbrk_r>
 800aee4:	6030      	str	r0, [r6, #0]
 800aee6:	4621      	mov	r1, r4
 800aee8:	4628      	mov	r0, r5
 800aeea:	f000 f8b7 	bl	800b05c <_sbrk_r>
 800aeee:	1c43      	adds	r3, r0, #1
 800aef0:	d00a      	beq.n	800af08 <sbrk_aligned+0x34>
 800aef2:	1cc4      	adds	r4, r0, #3
 800aef4:	f024 0403 	bic.w	r4, r4, #3
 800aef8:	42a0      	cmp	r0, r4
 800aefa:	d007      	beq.n	800af0c <sbrk_aligned+0x38>
 800aefc:	1a21      	subs	r1, r4, r0
 800aefe:	4628      	mov	r0, r5
 800af00:	f000 f8ac 	bl	800b05c <_sbrk_r>
 800af04:	3001      	adds	r0, #1
 800af06:	d101      	bne.n	800af0c <sbrk_aligned+0x38>
 800af08:	f04f 34ff 	mov.w	r4, #4294967295
 800af0c:	4620      	mov	r0, r4
 800af0e:	bd70      	pop	{r4, r5, r6, pc}
 800af10:	20020b6c 	.word	0x20020b6c

0800af14 <_malloc_r>:
 800af14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af18:	1ccd      	adds	r5, r1, #3
 800af1a:	f025 0503 	bic.w	r5, r5, #3
 800af1e:	3508      	adds	r5, #8
 800af20:	2d0c      	cmp	r5, #12
 800af22:	bf38      	it	cc
 800af24:	250c      	movcc	r5, #12
 800af26:	2d00      	cmp	r5, #0
 800af28:	4607      	mov	r7, r0
 800af2a:	db01      	blt.n	800af30 <_malloc_r+0x1c>
 800af2c:	42a9      	cmp	r1, r5
 800af2e:	d905      	bls.n	800af3c <_malloc_r+0x28>
 800af30:	230c      	movs	r3, #12
 800af32:	603b      	str	r3, [r7, #0]
 800af34:	2600      	movs	r6, #0
 800af36:	4630      	mov	r0, r6
 800af38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af3c:	4e2e      	ldr	r6, [pc, #184]	; (800aff8 <_malloc_r+0xe4>)
 800af3e:	f000 f89d 	bl	800b07c <__malloc_lock>
 800af42:	6833      	ldr	r3, [r6, #0]
 800af44:	461c      	mov	r4, r3
 800af46:	bb34      	cbnz	r4, 800af96 <_malloc_r+0x82>
 800af48:	4629      	mov	r1, r5
 800af4a:	4638      	mov	r0, r7
 800af4c:	f7ff ffc2 	bl	800aed4 <sbrk_aligned>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	4604      	mov	r4, r0
 800af54:	d14d      	bne.n	800aff2 <_malloc_r+0xde>
 800af56:	6834      	ldr	r4, [r6, #0]
 800af58:	4626      	mov	r6, r4
 800af5a:	2e00      	cmp	r6, #0
 800af5c:	d140      	bne.n	800afe0 <_malloc_r+0xcc>
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	4631      	mov	r1, r6
 800af62:	4638      	mov	r0, r7
 800af64:	eb04 0803 	add.w	r8, r4, r3
 800af68:	f000 f878 	bl	800b05c <_sbrk_r>
 800af6c:	4580      	cmp	r8, r0
 800af6e:	d13a      	bne.n	800afe6 <_malloc_r+0xd2>
 800af70:	6821      	ldr	r1, [r4, #0]
 800af72:	3503      	adds	r5, #3
 800af74:	1a6d      	subs	r5, r5, r1
 800af76:	f025 0503 	bic.w	r5, r5, #3
 800af7a:	3508      	adds	r5, #8
 800af7c:	2d0c      	cmp	r5, #12
 800af7e:	bf38      	it	cc
 800af80:	250c      	movcc	r5, #12
 800af82:	4629      	mov	r1, r5
 800af84:	4638      	mov	r0, r7
 800af86:	f7ff ffa5 	bl	800aed4 <sbrk_aligned>
 800af8a:	3001      	adds	r0, #1
 800af8c:	d02b      	beq.n	800afe6 <_malloc_r+0xd2>
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	442b      	add	r3, r5
 800af92:	6023      	str	r3, [r4, #0]
 800af94:	e00e      	b.n	800afb4 <_malloc_r+0xa0>
 800af96:	6822      	ldr	r2, [r4, #0]
 800af98:	1b52      	subs	r2, r2, r5
 800af9a:	d41e      	bmi.n	800afda <_malloc_r+0xc6>
 800af9c:	2a0b      	cmp	r2, #11
 800af9e:	d916      	bls.n	800afce <_malloc_r+0xba>
 800afa0:	1961      	adds	r1, r4, r5
 800afa2:	42a3      	cmp	r3, r4
 800afa4:	6025      	str	r5, [r4, #0]
 800afa6:	bf18      	it	ne
 800afa8:	6059      	strne	r1, [r3, #4]
 800afaa:	6863      	ldr	r3, [r4, #4]
 800afac:	bf08      	it	eq
 800afae:	6031      	streq	r1, [r6, #0]
 800afb0:	5162      	str	r2, [r4, r5]
 800afb2:	604b      	str	r3, [r1, #4]
 800afb4:	4638      	mov	r0, r7
 800afb6:	f104 060b 	add.w	r6, r4, #11
 800afba:	f000 f865 	bl	800b088 <__malloc_unlock>
 800afbe:	f026 0607 	bic.w	r6, r6, #7
 800afc2:	1d23      	adds	r3, r4, #4
 800afc4:	1af2      	subs	r2, r6, r3
 800afc6:	d0b6      	beq.n	800af36 <_malloc_r+0x22>
 800afc8:	1b9b      	subs	r3, r3, r6
 800afca:	50a3      	str	r3, [r4, r2]
 800afcc:	e7b3      	b.n	800af36 <_malloc_r+0x22>
 800afce:	6862      	ldr	r2, [r4, #4]
 800afd0:	42a3      	cmp	r3, r4
 800afd2:	bf0c      	ite	eq
 800afd4:	6032      	streq	r2, [r6, #0]
 800afd6:	605a      	strne	r2, [r3, #4]
 800afd8:	e7ec      	b.n	800afb4 <_malloc_r+0xa0>
 800afda:	4623      	mov	r3, r4
 800afdc:	6864      	ldr	r4, [r4, #4]
 800afde:	e7b2      	b.n	800af46 <_malloc_r+0x32>
 800afe0:	4634      	mov	r4, r6
 800afe2:	6876      	ldr	r6, [r6, #4]
 800afe4:	e7b9      	b.n	800af5a <_malloc_r+0x46>
 800afe6:	230c      	movs	r3, #12
 800afe8:	603b      	str	r3, [r7, #0]
 800afea:	4638      	mov	r0, r7
 800afec:	f000 f84c 	bl	800b088 <__malloc_unlock>
 800aff0:	e7a1      	b.n	800af36 <_malloc_r+0x22>
 800aff2:	6025      	str	r5, [r4, #0]
 800aff4:	e7de      	b.n	800afb4 <_malloc_r+0xa0>
 800aff6:	bf00      	nop
 800aff8:	20020b68 	.word	0x20020b68

0800affc <_realloc_r>:
 800affc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b000:	4680      	mov	r8, r0
 800b002:	4614      	mov	r4, r2
 800b004:	460e      	mov	r6, r1
 800b006:	b921      	cbnz	r1, 800b012 <_realloc_r+0x16>
 800b008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b00c:	4611      	mov	r1, r2
 800b00e:	f7ff bf81 	b.w	800af14 <_malloc_r>
 800b012:	b92a      	cbnz	r2, 800b020 <_realloc_r+0x24>
 800b014:	f7ff ff12 	bl	800ae3c <_free_r>
 800b018:	4625      	mov	r5, r4
 800b01a:	4628      	mov	r0, r5
 800b01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b020:	f000 f838 	bl	800b094 <_malloc_usable_size_r>
 800b024:	4284      	cmp	r4, r0
 800b026:	4607      	mov	r7, r0
 800b028:	d802      	bhi.n	800b030 <_realloc_r+0x34>
 800b02a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b02e:	d812      	bhi.n	800b056 <_realloc_r+0x5a>
 800b030:	4621      	mov	r1, r4
 800b032:	4640      	mov	r0, r8
 800b034:	f7ff ff6e 	bl	800af14 <_malloc_r>
 800b038:	4605      	mov	r5, r0
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d0ed      	beq.n	800b01a <_realloc_r+0x1e>
 800b03e:	42bc      	cmp	r4, r7
 800b040:	4622      	mov	r2, r4
 800b042:	4631      	mov	r1, r6
 800b044:	bf28      	it	cs
 800b046:	463a      	movcs	r2, r7
 800b048:	f7ff fbaa 	bl	800a7a0 <memcpy>
 800b04c:	4631      	mov	r1, r6
 800b04e:	4640      	mov	r0, r8
 800b050:	f7ff fef4 	bl	800ae3c <_free_r>
 800b054:	e7e1      	b.n	800b01a <_realloc_r+0x1e>
 800b056:	4635      	mov	r5, r6
 800b058:	e7df      	b.n	800b01a <_realloc_r+0x1e>
	...

0800b05c <_sbrk_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	4d06      	ldr	r5, [pc, #24]	; (800b078 <_sbrk_r+0x1c>)
 800b060:	2300      	movs	r3, #0
 800b062:	4604      	mov	r4, r0
 800b064:	4608      	mov	r0, r1
 800b066:	602b      	str	r3, [r5, #0]
 800b068:	f7ff fa2e 	bl	800a4c8 <_sbrk>
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	d102      	bne.n	800b076 <_sbrk_r+0x1a>
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	b103      	cbz	r3, 800b076 <_sbrk_r+0x1a>
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	bd38      	pop	{r3, r4, r5, pc}
 800b078:	20020b70 	.word	0x20020b70

0800b07c <__malloc_lock>:
 800b07c:	4801      	ldr	r0, [pc, #4]	; (800b084 <__malloc_lock+0x8>)
 800b07e:	f000 b811 	b.w	800b0a4 <__retarget_lock_acquire_recursive>
 800b082:	bf00      	nop
 800b084:	20020b74 	.word	0x20020b74

0800b088 <__malloc_unlock>:
 800b088:	4801      	ldr	r0, [pc, #4]	; (800b090 <__malloc_unlock+0x8>)
 800b08a:	f000 b80c 	b.w	800b0a6 <__retarget_lock_release_recursive>
 800b08e:	bf00      	nop
 800b090:	20020b74 	.word	0x20020b74

0800b094 <_malloc_usable_size_r>:
 800b094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b098:	1f18      	subs	r0, r3, #4
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	bfbc      	itt	lt
 800b09e:	580b      	ldrlt	r3, [r1, r0]
 800b0a0:	18c0      	addlt	r0, r0, r3
 800b0a2:	4770      	bx	lr

0800b0a4 <__retarget_lock_acquire_recursive>:
 800b0a4:	4770      	bx	lr

0800b0a6 <__retarget_lock_release_recursive>:
 800b0a6:	4770      	bx	lr

0800b0a8 <sqrtf>:
 800b0a8:	b508      	push	{r3, lr}
 800b0aa:	ed2d 8b02 	vpush	{d8}
 800b0ae:	eeb0 8a40 	vmov.f32	s16, s0
 800b0b2:	f000 f817 	bl	800b0e4 <__ieee754_sqrtf>
 800b0b6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0be:	d60c      	bvs.n	800b0da <sqrtf+0x32>
 800b0c0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b0e0 <sqrtf+0x38>
 800b0c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0cc:	d505      	bpl.n	800b0da <sqrtf+0x32>
 800b0ce:	f7ff fb3d 	bl	800a74c <__errno>
 800b0d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b0d6:	2321      	movs	r3, #33	; 0x21
 800b0d8:	6003      	str	r3, [r0, #0]
 800b0da:	ecbd 8b02 	vpop	{d8}
 800b0de:	bd08      	pop	{r3, pc}
 800b0e0:	00000000 	.word	0x00000000

0800b0e4 <__ieee754_sqrtf>:
 800b0e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b0e8:	4770      	bx	lr
	...

0800b0ec <_init>:
 800b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ee:	bf00      	nop
 800b0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f2:	bc08      	pop	{r3}
 800b0f4:	469e      	mov	lr, r3
 800b0f6:	4770      	bx	lr

0800b0f8 <_fini>:
 800b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fa:	bf00      	nop
 800b0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0fe:	bc08      	pop	{r3}
 800b100:	469e      	mov	lr, r3
 800b102:	4770      	bx	lr
